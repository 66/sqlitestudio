/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "common/unused.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 326
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 79
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  ParserStubExplain* yy11;
  ParserCreateTableConstraintList* yy43;
  SqliteCreateTable::Column::Constraint* yy44;
  SqliteCreateTrigger::Scope* yy53;
  SqliteFilterOver::Over* yy57;
  QStringList* yy75;
  SqliteCreateTable::Constraint* yy76;
  ParserStubCreateTableOption* yy77;
  QString* yy79;
  SqliteWith::CommonTableExpression* yy106;
  SqliteQuery* yy113;
  ParserStubAlias* yy130;
  ParserCreateTableColumnConstraintList* yy141;
  ParserExprList* yy161;
  int* yy166;
  SqliteInitially* yy192;
  ParserCreateTableOptionList* yy193;
  SqliteForeignKey::Condition* yy197;
  SqliteCreateTrigger::Time* yy202;
  SqliteWindowDefinition::Window::Frame::Bound* yy221;
  ParserIndexedColumnList* yy223;
  SqliteExpr::LikeOp* yy230;
  ParserIndexedBy* yy232;
  SqliteForeignKey::Condition::Reaction* yy244;
  SqliteLimit* yy245;
  SqliteWindowDefinition* yy246;
  ParserResultColumnList* yy253;
  ParserOtherSourceList* yy261;
  SqliteFilterOver* yy267;
  ParserTermOrLiteral* yy280;
  SqliteSelect::Core* yy281;
  SqliteSelect::CompoundOperator* yy282;
  SqliteSelect::Core::JoinSource* yy283;
  SqliteExpr* yy302;
  SqliteSelect* yy313;
  ParserQueryList* yy320;
  ParserDeferSubClause* yy329;
  SqliteSortOrder* yy339;
  SqliteUpsert* yy340;
  SqliteCreateTrigger::Event* yy341;
  ParserStubInsertOrReplace* yy354;
  QVariant* yy419;
  SqliteCreateTable::Column* yy437;
  SqliteColumnType* yy438;
  ParserExprNestedList* yy446;
  SqliteFilterOver::Filter* yy447;
  ParserFullName* yy450;
  ParserSetValueList* yy451;
  ParserFkConditionList* yy464;
  ParserCteList* yy472;
  SqliteWindowDefinition::Window::Frame::Exclude* yy483;
  SqliteSelect::Core::SingleSource* yy511;
  ParserStubTransDetails* yy524;
  SqliteWindowDefinition::Window* yy534;
  SqliteWith::CommonTableExpression::AsMode* yy539;
  SqliteSelect::Core::JoinOp* yy551;
  ParserCreateTableColumnList* yy552;
  ParserOrderByList* yy563;
  SqliteConflictAlgo* yy588;
  bool* yy601;
  SqliteIndexedColumn* yy608;
  SqliteWith* yy611;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy618;
  SqliteWindowDefinition::Window::Frame* yy621;
  SqliteSelect::Core::JoinConstraint* yy645;
  ParserWindowDefList* yy649;
  SqliteNulls* yy650;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 861
#define YYNRULE 481
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2878)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   521,  159,  694,  853,  450,  447,  446,  342,   27,   65,
 /*    10 */   520,  349,  512,  858,  810,  810,   62,   62,   63,   63,
 /*    20 */    63,   63,  445,   61,   61,   61,   61,   60,   60,   59,
 /*    30 */    59,   59,   58,  257,  831,  853,  336,  690,   64,   65,
 /*    40 */   520,  349,  656,  453,  810,  810,   62,   62,   63,   63,
 /*    50 */    63,   63,  517,   61,   61,   61,   61,   60,   60,   59,
 /*    60 */    59,   59,   58,  257,  251, 1265,   60,   60,   59,   59,
 /*    70 */    59,   58,  257,  800,  318,  360,  605,  321,   54,   63,
 /*    80 */    63,   63,   63,   40,   61,   61,   61,   61,   60,   60,
 /*    90 */    59,   59,   59,   58,  257,   51,   52,  706,  822,  695,
 /*   100 */   695,  675,   53, 1032,  825,   59,   59,   59,   58,  257,
 /*   110 */     2, 1032,  824,  823,  822,  808, 1032,  674,  509,  358,
 /*   120 */   822,  850,  647,  851,  850,  521,  825,  159,  792,  791,
 /*   130 */   450,  447,  446,  808,  824,  823,  822,  512, 1032,  275,
 /*   140 */   274,   39,  140,  250,  698, 1098,  465,  458,  445,  575,
 /*   150 */   575, 1032,   87, 1032, 1032,  851,  850, 1032,  730,  301,
 /*   160 */   436,  311, 1032, 1032, 1032, 1032, 1032, 1032,  808,  278,
 /*   170 */   467,  808,  852,  798,   12,  799,  429,  517,  792,  791,
 /*   180 */    56,   63,   63,   63,   63, 1032,   61,   61,   61,   61,
 /*   190 */    60,   60,   59,   59,   59,   58,  257,   78,  800,  853,
 /*   200 */   853,  113,  826,   54,  813,  827,   61,   61,   61,   61,
 /*   210 */    60,   60,   59,   59,   59,   58,  257,  160,  338,  576,
 /*   220 */    51,   52,  801,  861,  138,  820,  476,   53, 1098,  397,
 /*   230 */   337,  597,  852,  463,  762,    2, 1098,  624,  852,  852,
 /*   240 */   808, 1098,  853,  509,  761,  822,  850,  801,  821,  227,
 /*   250 */   521,  825,  405,  679,  365,  578,  442,  519,  808,  824,
 /*   260 */   823,  822,  512, 1098,  119,  466,  773,  700,  699,  853,
 /*   270 */   826,  119,  683,  827,  599,   77, 1098,  678, 1098, 1098,
 /*   280 */   406,  801,  475,  370,  849,  477,  464, 1098, 1098, 1098,
 /*   290 */  1098,  847, 1098,  808,  240,  239,  808,  258,  798,   12,
 /*   300 */   848,  491,  517,  600,  506,  602,  624,  375,  601,   68,
 /*   310 */  1098,  451,  401,  795,  794,  584,  380,  736,  820,  822,
 /*   320 */   851,  850,  328,  800,  813,  825,  500,  492,   54,  423,
 /*   330 */   859,  813,  852,  824,  823,  822,  812,  648,  494,  737,
 /*   340 */     4,  821,  227,  599,   77,   51,   52,  532,   89,  749,
 /*   350 */   519,  852,   53, 1083,  279,  730,  630,  630,   76,  395,
 /*   360 */     2, 1083,  851,  850,  119,  808, 1083,  249,  509,  852,
 /*   370 */   822,  850,  600,  334,  602,  853,  825,  601,  402,  584,
 /*   380 */   251,  813,  254,  808,  824,  823,  822,  790, 1083,  851,
 /*   390 */   850,  333,  280,  955,  853,  139,  576,   21,  422,  544,
 /*   400 */   375, 1083,  807, 1083, 1083,  176,  123,  335,  456,  330,
 /*   410 */   455,  161, 1083,  551, 1083, 1083,  820, 1083,  808, 1182,
 /*   420 */  1182,  808,  820,  798,   12,  328,  390,  852,  431,  112,
 /*   430 */   852,  365,  577,  552,  553, 1083,  852,  807,  834,  821,
 /*   440 */   212,    8,  852,  169,   78,  821,  120,  837,  519,  750,
 /*   450 */   672,  813,  852,   75,  519,  191,  853,   64,   65,  520,
 /*   460 */   349, 1182, 1182,  810,  810,   62,   62,   63,   63,   63,
 /*   470 */    63,  426,   61,   61,   61,   61,   60,   60,   59,   59,
 /*   480 */    59,   58,  257,  713,  809,   69, 1042,  725,  164,  662,
 /*   490 */   714,  853,  174,  169,  498,  851,  850,  820,  767,  853,
 /*   500 */   610,  813, 1182, 1182,  767,  261,  554,  790,  715,  589,
 /*   510 */   780,  852,   66,  804,  851,  850,  246,  245,  244,  454,
 /*   520 */   821,  212,  779,  714, 1300, 1300,  712,  708, 1185,  519,
 /*   530 */   663,  664,  853,  490,  853,  661,  744,  725,  853,  688,
 /*   540 */    64,   65,  520,  349, 1182, 1182,  810,  810,   62,   62,
 /*   550 */    63,   63,   63,   63,  780,   61,   61,   61,   61,   60,
 /*   560 */    60,   59,   59,   59,   58,  257,  779,  593,  594,  419,
 /*   570 */   853,  562,  684,  336,  690,  589,  851,  850,  173,  767,
 /*   580 */    45,  828,   64,   65,  520,  349, 1182, 1182,  810,  810,
 /*   590 */    62,   62,   63,   63,   63,   63,  854,   61,   61,   61,
 /*   600 */    61,   60,   60,   59,   59,   59,   58,  257,  803,    1,
 /*   610 */   726,  851,  850,  797,  819,  604,  339,  747,   85,  851,
 /*   620 */   850,  393,  853,  802,   64,   65,  520,  349, 1182, 1182,
 /*   630 */   810,  810,   62,   62,   63,   63,   63,   63,  562,   61,
 /*   640 */    61,   61,   61,   60,   60,   59,   59,   59,   58,  257,
 /*   650 */   820,  835,  851,  850,  851,  850,  853,  707,  851,  850,
 /*   660 */    58,  257,   78,  853,  852,  138,  322, 1182, 1182,  853,
 /*   670 */   403,  719,   55,  821,  227,  796,   83,  251,  785,  852,
 /*   680 */   852, 1185,  519, 1185,  782,  539,  718,  648,  853,  112,
 /*   690 */   851,  850,  357,  194, 1186,  853, 1236,  634,   89,  853,
 /*   700 */   806,  852,  540,  539,  381,   64,   65,  520,  349, 1182,
 /*   710 */  1182,  810,  810,   62,   62,   63,   63,   63,   63,  742,
 /*   720 */    61,   61,   61,   61,   60,   60,   59,   59,   59,   58,
 /*   730 */   257,  539,  501,  521,  374,  345,  769,  493,  787,  649,
 /*   740 */   256,  742,  851,  850,  508,  512,  588,  742,   64,   65,
 /*   750 */   520,  349,  413,  160,  810,  810,   62,   62,   63,   63,
 /*   760 */    63,   63,  579,   61,   61,   61,   61,   60,   60,   59,
 /*   770 */    59,   59,   58,  257,  842,  853,  851,  850,  626,  461,
 /*   780 */   737,    4,  119,  851,  850,  517,  496,  829,  857,  851,
 /*   790 */   850,  416,   71,  525,  275,  274,  733,  366, 1292,  820,
 /*   800 */   852,  170,   78, 1292,  624,  109,  800,  347,  851,  850,
 /*   810 */   626,   54,  583,  852,  784,  851,  850,   70,  115,  851,
 /*   820 */   850,  852,  821,  120,  548,  787,  510,  256,   51,   52,
 /*   830 */   772,  519,  820,  792,  791,   53,   50,  550,   48,  549,
 /*   840 */   702,  561,   77,    2, 1192,   56,  852, 1186,  808, 1186,
 /*   850 */   484,  509,  380,  822,  850,  821,  227,  289,  742,  825,
 /*   860 */   293,  755, 1200,  617,  519,   42,  808,  824,  823,  822,
 /*   870 */   560,  172,  559, 1251,  853,  558,  486,  383,  242,  853,
 /*   880 */   742,  767, 1300, 1300,  755,  481,  742,  853,  250,  698,
 /*   890 */   536,  465,  477,  462,  193,  851,  850,  781,  497,  759,
 /*   900 */   528,  808,  295,  853,  808,  771,  798,   12,  536,   64,
 /*   910 */    65,  520,  349,  768,  375,  810,  810,   62,   62,   63,
 /*   920 */    63,   63,   63,  521,   61,   61,   61,   61,   60,   60,
 /*   930 */    59,   59,   59,   58,  257,  512,  536, 1189,  488,  326,
 /*   940 */    64,   65,  520,  349,  112,  132,  810,  810,   62,   62,
 /*   950 */    63,   63,   63,   63,  801,   61,   61,   61,   61,   60,
 /*   960 */    60,   59,   59,   59,   58,  257,  125, 1251,  285,  443,
 /*   970 */   259,  291,  853,  591,  112,  517,  742,  496,  592,  801,
 /*   980 */   284,  853,  766,  362,  108,  513,   76,  742,  487,  485,
 /*   990 */   351,  852,  344,  521,  851,  850,  800,   69,  742,  851,
 /*  1000 */   850,   54,  714,    6,  742,  512,  417,  851,  850,  742,
 /*  1010 */    20,  129,  817,  801,  347,  742,  359,  853,   51,   52,
 /*  1020 */   715,  361,  180,  851,  850,   53,  638,  105,  852,  668,
 /*  1030 */    78,   44,  124,    2,  338,  714,  639,  579,  808,  860,
 /*  1040 */     3,  509,  616,  822,  850,  517, 1049, 1049,  852,  825,
 /*  1050 */   319,  820,  114,  400,  320,  432,  808,  824,  823,  822,
 /*  1060 */   170,   44,   78,  430,  852,  852,  800,  363,  170,  178,
 /*  1070 */   834,   54,  366, 1291,  821,  120,  613,  522, 1291,  833,
 /*  1080 */   303,  170,   69,  519,  852,   44,  820,  714,   51,   52,
 /*  1090 */   758,  808,  851,  850,  808,   53,  798,   12,  735,  370,
 /*  1100 */   852,  851,  850,    2,  774,  715,   56,  376,  808,  821,
 /*  1110 */   227,  509,  298,  822,  850,  277,  820,   44,  519,  825,
 /*  1120 */   714,  648,  287,  171,  132,   22,  808,  824,  823,  822,
 /*  1130 */   852,  832,   89,  767,  495,  852,  852,  851,  850,  821,
 /*  1140 */   220,   74, 1300, 1300,  407,  581,  477,  478,  519,  731,
 /*  1150 */   367,  976,  499,  511,  795,  794,  636,  265,  757,  635,
 /*  1160 */   853,  808,  853,   19,  808,  425,  798,   12,  375,   64,
 /*  1170 */    65,  520,  349,  727,   23,  810,  810,   62,   62,   63,
 /*  1180 */    63,   63,   63,  751,   61,   61,   61,   61,   60,   60,
 /*  1190 */    59,   59,   59,   58,  257,  853, 1187,  853,  767,  853,
 /*  1200 */    64,   65,  520,  349,  813,  116,  810,  810,   62,   62,
 /*  1210 */    63,   63,   63,   63,  557,   61,   61,   61,   61,   60,
 /*  1220 */    60,   59,   59,   59,   58,  257,  520,  349,  790,  752,
 /*  1230 */   810,  810,   62,   62,   63,   63,   63,   63,  504,   61,
 /*  1240 */    61,   61,   61,   60,   60,   59,   59,   59,   58,  257,
 /*  1250 */    64,   65,  520,  349,  853,   14,  810,  810,   62,   62,
 /*  1260 */    63,   63,   63,   63,  551,   61,   61,   61,   61,   60,
 /*  1270 */    60,   59,   59,   59,   58,  257,  119,    5,  852,  647,
 /*  1280 */   851,  850,  851,  850,  552,  408,   64,   65,  520,  349,
 /*  1290 */   853,  633,  810,  810,   62,   62,   63,   63,   63,   63,
 /*  1300 */    49,   61,   61,   61,   61,   60,   60,   59,   59,   59,
 /*  1310 */    58,  257,  545,  338,  565,  851,  850,  851,  850,  851,
 /*  1320 */   850,  711,  813,  853,  813,  853,  480,  852,  853,  119,
 /*  1330 */   853,   64,   65,  520,  349,  813,  776,  810,  810,   62,
 /*  1340 */    62,   63,   63,   63,   63,  499,   61,   61,   61,   61,
 /*  1350 */    60,   60,   59,   59,   59,   58,  257,  409,  790,  840,
 /*  1360 */   565, 1343,  187,  526,    3,  745,  689,  515,   88,  435,
 /*  1370 */   479,  746,  653,  652,  851,  850,   56,  545,  269,   22,
 /*  1380 */    18,   64,   65,  520,  349,   78,   46,  810,  810,   62,
 /*  1390 */    62,   63,   63,   63,   63,  838,   61,   61,   61,   61,
 /*  1400 */    60,   60,   59,   59,   59,   58,  257,  756,    4,  853,
 /*  1410 */   851,  850,   64,   65,  520,  349,  687,  743,  810,  810,
 /*  1420 */    62,   62,   63,   63,   63,   63,   17,   61,   61,   61,
 /*  1430 */    61,   60,   60,   59,   59,   59,   58,  257,  621,   16,
 /*  1440 */   529,  424,  813,  851,  850,  851,  850,  670,  851,  850,
 /*  1450 */   851,  850,  741,    4,  654,  813,  621,  786,  529,  740,
 /*  1460 */     4,  644,   64,   65,  520,  349,  738,    4,  810,  810,
 /*  1470 */    62,   62,   63,   63,   63,   63,  730,   61,   61,   61,
 /*  1480 */    61,   60,   60,   59,   59,   59,   58,  257,  853,  722,
 /*  1490 */   852,  853,   11,   64,   65,  520,  349,  192,  628,  810,
 /*  1500 */   810,   62,   62,   63,   63,   63,   63,  348,   61,   61,
 /*  1510 */    61,   61,   60,   60,   59,   59,   59,   58,  257,  305,
 /*  1520 */   111,  852,  726,  314,  615,  726,  411,  263,  325,  851,
 /*  1530 */   850,  726,  739,    4,  730,  168,  119,  852,  721,  681,
 /*  1540 */   852,  680,  615,   64,   65,  520,  349,  389,  852,  810,
 /*  1550 */   810,   62,   62,   63,   63,   63,   63,  119,   61,   61,
 /*  1560 */    61,   61,   60,   60,   59,   59,   59,   58,  257,  720,
 /*  1570 */  1215,  853,  717,  853,   64,   65,  520,  349,  716,  167,
 /*  1580 */   810,  810,   62,   62,   63,   63,   63,   63,  813,   61,
 /*  1590 */    61,   61,   61,   60,   60,   59,   59,   59,   58,  257,
 /*  1600 */   530,   73,  853,  607,  853,  388,  853,  726,  851,  850,
 /*  1610 */    28,  851,  850,  166,  852,  310,  503,  165,  770,  262,
 /*  1620 */   620,  607,  680,  709,   64,   65,  520,  349,  341,  852,
 /*  1630 */   810,  810,   62,   62,   63,   63,   63,   63,  521,   61,
 /*  1640 */    61,   61,   61,   60,   60,   59,   59,   59,   58,  257,
 /*  1650 */   512, 1266,  126,  488,  268,   64,   65,  520,  349,  278,
 /*  1660 */   467,  810,  810,   62,   62,   63,   63,   63,   63,  813,
 /*  1670 */    61,   61,   61,   61,   60,   60,   59,   59,   59,   58,
 /*  1680 */   257,  820, 1264,  820,  521,  251,  820,  348,  568,  405,
 /*  1690 */   517,  851,  850,  851,  850,  852,  512,  852,   86,  488,
 /*  1700 */   852,  852,  471,  487,  821,  227,  821,  212,  813,  821,
 /*  1710 */   227,  800,  704,  519,  855,  519,   54,  572,  519,  162,
 /*  1720 */   460,  568,  851,  850,  851,  850,  851,  850,  852,  853,
 /*  1730 */   710,  431,  469,   51,   52,  572,  517,  657,  843,  637,
 /*  1740 */    53,  477,  468,    7,   15,  852,  271,  307,    2,  489,
 /*  1750 */   703,  306,  852,  808,  697,  701,  509,  800,  822,  850,
 /*  1760 */   696,  852,   54,  375,  825,  767,  118,  859,  375,  820,
 /*  1770 */   853,  808,  824,  823,  822,  459,  853,  692,  853,   51,
 /*  1780 */    52,  169,  117,  852,   37,  853,   53,  135,  267,  813,
 /*  1790 */    25,  853,  821,  198,    2,  660,  507,  452,  770,  808,
 /*  1800 */   340,  519,  509,  744,  822,  850,  808,  853,  260,  808,
 /*  1810 */   825,  798,   12,   36,  651,  853,   82,  808,  824,  823,
 /*  1820 */   822,   64,   65,  520,  349,  725,  449,  810,  810,   62,
 /*  1830 */    62,   63,   63,   63,   63,  521,   61,   61,   61,   61,
 /*  1840 */    60,   60,   59,   59,   59,   58,  257,  512,  327,  851,
 /*  1850 */   850,  767,  808,   81,   24,  808,   80,  798,   12,  444,
 /*  1860 */    64,   38,  520,  349,  158,  853,  810,  810,   62,   62,
 /*  1870 */    63,   63,   63,   63,  333,   61,   61,   61,   61,   60,
 /*  1880 */    60,   59,   59,   59,   58,  257,  730,  517,  705,  440,
 /*  1890 */   851,  850,  632,  348, 1194,  629,  851,  850,  851,  850,
 /*  1900 */   852,  853,  190,  853,  154,  851,  850,  852,  800,  820,
 /*  1910 */   625,  851,  850,   54,   10,  820, 1194,  627,  666,  102,
 /*  1920 */   820,  736, 1194,  852,  807,  100,   35,  851,  850,  852,
 /*  1930 */    51,   52,  821,  120,  852,  851,  850,   53,  821,  227,
 /*  1940 */   595,  519,  521,  821,  227,    2,  669,  519,  542,  841,
 /*  1950 */   808,  347,  519,  509,  512,  822,  850,  418,  294,  807,
 /*  1960 */   853,  825,  574,  852,  820,  852, 1194,  564,  808,  824,
 /*  1970 */   823,  822,  852,   34, 1194,  270,  542,   33,  852, 1194,
 /*  1980 */   396,  386,   32,   99,  853,  851,  850,  821,  120,  387,
 /*  1990 */   264,  767,  385,  839,  517,   98,  519,  375,  538,  853,
 /*  2000 */   609, 1194,  375,  808,  783,  302,  808,  852,  798,   12,
 /*  2010 */   603,  853,  598,  420, 1194,  800, 1194, 1194,  106,  853,
 /*  2020 */    54,  851,  850,  851,  850, 1194,  538, 1194, 1194,  853,
 /*  2030 */  1194,  292,  596,  836,  623,  570,  384,   51,   52,  170,
 /*  2040 */   347,  774,  820,  590,   53,  852,  767,  852, 1194,  521,
 /*  2050 */   300,  569,    2,  324,  852,   13,  852,  808,  149,  820,
 /*  2060 */   509,  512,  822,  850,  297,  821,  227,  195,  825,  184,
 /*  2070 */   853,  820,  571,  852,  519,  808,  824,  823,  822,  392,
 /*  2080 */   851,  850,  821,  208,  290,  852,  853,  547,  566,  546,
 /*  2090 */   853,  519,  288,  619,  821,  230,  563,   93,  852,  404,
 /*  2100 */   141,  517,  482,  519,  851,  850,  852,  527,   91,  251,
 /*  2110 */   808,  820,  830,  808,  820,  798,   12,  614,  853,  851,
 /*  2120 */   850,  853,  800,  853,  375,  852,  852,   54,  852,  853,
 /*  2130 */   774,  851,  850,  818,  821,  228,  247,  821,  236,  851,
 /*  2140 */   850,  767,  266,  519,   51,   52,  519,  852,  820,  851,
 /*  2150 */   850,   53,  585,  767,  110,  379,  521,  243,  378,    2,
 /*  2160 */   177,  856,  852,  820,  808,  182,  846,  509,  512,  822,
 /*  2170 */   850,  821,  235,  844,  805,  825,  845,  852,  587,  775,
 /*  2180 */   519,  524,  808,  824,  823,  822,  821,  237,  852,  181,
 /*  2190 */   851,  850,  853,  767,  104,  519,  767,   72,  853,  514,
 /*  2200 */   582,  281,  441,  573,  820,  377,  851,  850,  517,  555,
 /*  2210 */   851,  850,  179,  852,  816,  852,  523,  808,  852,  732,
 /*  2220 */   808,  347,  798,   12, 1190,   23,  175,  821,  241,  800,
 /*  2230 */   767,  815,  820,  852,   54,  852,  519,  533,  851,  850,
 /*  2240 */   278,  851,  850,  851,  850,  767,  852,  728,  723,  851,
 /*  2250 */   850,   51,   52,  352,  535,  821,  276,  353,   53,  483,
 /*  2260 */   391,  852,  852,  521,  519,  189,    2, 1192,   43,  257,
 /*  2270 */   820,  808,  814,  820,  509,  512,  822,  850,   57,  567,
 /*  2280 */    67,  163,  825,  765,  852,  820,  767,  852,   84,  808,
 /*  2290 */   824,  823,  822,  821,  350,  852,  821,  234,   30,  852,
 /*  2300 */   346,  255,  519,  273,  505,  519,  769,  474,  821,  207,
 /*  2310 */   272,  774,  851,  850,  767,  517,  399,  519,  851,  850,
 /*  2320 */    47,  852,  343,  499,  808,  763,  764,  808,  691,  798,
 /*  2330 */    12,  329,  667,  645,  323,  316,  800,  820,  398,  820,
 /*  2340 */   414,   54,  852,  534,  760,  852,  852,  852,  852,  852,
 /*  2350 */   356,  852,  767,  852,  852,  767,  754,  852,   51,   52,
 /*  2360 */   821,  225,  821,  229,  852,   53,  729,  767,  248,  519,
 /*  2370 */   521,  519,  518,    2,  317,  748,  433,  820,  808,  820,
 /*  2380 */   299,  509,  512,  822,  850,  137,  852,  136,  852,  825,
 /*  2390 */   852,  852,  296,  852,  852,  470,  808,  824,  823,  822,
 /*  2400 */   821,  373,  821,  372,  467,  693,  852,  162,  682,  519,
 /*  2410 */   286,  519,  677,  282,  457,  283,  676,  673,  394,  767,
 /*  2420 */   672,  767,  517,  331,  852,  671,  820,  852,  650,  852,
 /*  2430 */   820,  808,  820,  369,  808,  368,  798,   12,  631,  643,
 /*  2440 */   852,  642,  641,  800,  852,  640,  852,  103,   54,  821,
 /*  2450 */   371,  157,  439,  821,  224,  821,  210,  156,  519,  767,
 /*  2460 */   134,  767,  519,  253,  519,   51,   52,  155,  315,  820,
 /*  2470 */   421,  437,   53,   31,  153,  820,  312,  196,  622,  101,
 /*  2480 */     2,  133,  152,  852,  618,  808,  820,  308,  509,  852,
 /*  2490 */   851,  850,  821,  223,  151,  107,  825,  188,  821,  222,
 /*  2500 */   852,  519,  304,  808,  824,  823,  822,  519,  767,  821,
 /*  2510 */   209,  428,  767,  612,  767,  427,  820,  608,  519,  606,
 /*  2520 */   131,  415,  150,  130,  586,  412,  148,   97,  147,  410,
 /*  2530 */   852,  820,   96,  146,   95,  145,   94,  144,  808,  821,
 /*  2540 */   206,  808,  556,  798,   12,  852,   30,  382,  519,  143,
 /*  2550 */    29,  767,  543,  820,  821,  121,   26,  767,  541,  128,
 /*  2560 */   820,  127,  142,  519,  820,  537,   79,  852,  767,  183,
 /*  2570 */   531,  354,  197,  793,  852,  789,  821,  205,  852,  820,
 /*  2580 */   778,  502,  186,  821,  203,  519,  820,  821,  231,  185,
 /*  2590 */   734,  820,  519,  852,  724,  332,  519,  313,  767,  238,
 /*  2600 */   852,  668,  821,  233,  448,  852,  434,  364,  309,  821,
 /*  2610 */   226,  519,    9,  767,  821,  232,  811,  611,  519,  788,
 /*  2620 */   777,  655,  438,  519,  820,  252,  516,   41,  665,  753,
 /*  2630 */   355,  659,   92,  658,  686,  767,  580,  685,  852,  820,
 /*  2640 */    78,  853,  767, 1344, 1344,  646,  767,  821,  221, 1344,
 /*  2650 */  1344,  820, 1344,  852, 1344,  820,  519, 1344,  820, 1344,
 /*  2660 */  1344,  767,  821,  218, 1344,  852, 1344, 1344,  767,  852,
 /*  2670 */  1344,  519,  852,  767,  821,  202, 1344,  820,  821,  201,
 /*  2680 */  1344,  821,  200,  519, 1344, 1344, 1344,  519,  820, 1344,
 /*  2690 */   519,  852, 1344,  820, 1344, 1344, 1344, 1344, 1344, 1344,
 /*  2700 */   821,  199,  852, 1344, 1344, 1344,  767,  852, 1344,  519,
 /*  2710 */  1344,  821,  211, 1344, 1344, 1344,  821,  216,  820, 1344,
 /*  2720 */   519,  767, 1344, 1344, 1344,  519, 1344, 1344, 1344, 1344,
 /*  2730 */  1344, 1344,  852,  767, 1344, 1344, 1344,  767, 1344, 1344,
 /*  2740 */   767,  821,  215, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*  2750 */   519, 1344, 1344,  820, 1344,  820, 1344,  820, 1344,  767,
 /*  2760 */  1344, 1344, 1344, 1344, 1344, 1344, 1344,  852, 1344,  852,
 /*  2770 */   767,  852, 1344, 1344, 1344,  767,  821,  122,  821,  214,
 /*  2780 */   821,  213, 1344, 1344, 1344,  519, 1344,  519,  820,  519,
 /*  2790 */   820, 1344, 1344,  820, 1344,  820, 1344, 1344, 1344, 1344,
 /*  2800 */   767, 1344,  852, 1344,  852, 1344, 1344,  852, 1344,  852,
 /*  2810 */  1344,  821,  219,  821,  217, 1344,  821,  204,  821,   90,
 /*  2820 */   519, 1344,  519, 1344, 1344,  519, 1344,  473, 1344, 1344,
 /*  2830 */  1344, 1344, 1344, 1344, 1344,  767, 1344,  767, 1344,  767,
 /*  2840 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*  2850 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*  2860 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*  2870 */   767, 1344,  767, 1344, 1344,  767, 1344,  767,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,  128,  289,    4,  131,  132,  133,  227,   50,   81,
 /*    10 */    82,   83,   16,  107,   86,   87,   88,   89,   90,   91,
 /*    20 */    92,   93,  149,   95,   96,   97,   98,   99,  100,  101,
 /*    30 */   102,  103,  104,  105,  223,    4,  323,  324,   80,   81,
 /*    40 */    82,   83,  231,  232,   86,   87,   88,   89,   90,   91,
 /*    50 */    92,   93,   56,   95,   96,   97,   98,   99,  100,  101,
 /*    60 */   102,  103,  104,  105,  284,  107,   99,  100,  101,  102,
 /*    70 */   103,  104,  105,   77,   68,  111,   60,   71,   82,   90,
 /*    80 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*    90 */   101,  102,  103,  104,  105,   99,  100,  101,  124,   42,
 /*   100 */    43,   21,  106,  107,  130,  101,  102,  103,  104,  105,
 /*   110 */   114,  115,  138,  139,  140,  119,  120,   37,  122,  113,
 /*   120 */   124,  125,  123,  124,  125,    4,  130,  128,  138,  139,
 /*   130 */   131,  132,  133,  137,  138,  139,  140,   16,  142,   99,
 /*   140 */   100,   84,   85,  248,  249,   24,  251,  101,  149,  118,
 /*   150 */   119,  155,  115,  157,  158,  124,  125,  161,  201,  143,
 /*   160 */   144,  145,  166,  167,  168,  169,  170,  171,  172,  153,
 /*   170 */   154,  175,  215,  177,  178,  115,  281,   56,  138,  139,
 /*   180 */   120,   90,   91,   92,   93,  189,   95,   96,   97,   98,
 /*   190 */    99,  100,  101,  102,  103,  104,  105,   73,   77,    4,
 /*   200 */     4,  120,  156,   82,    4,  159,   95,   96,   97,   98,
 /*   210 */    99,  100,  101,  102,  103,  104,  105,   43,  201,   79,
 /*   220 */    99,  100,    5,    0,  201,  201,  209,  106,  107,  272,
 /*   230 */   120,  107,  215,  209,   31,  114,  115,  209,  215,  215,
 /*   240 */   119,  120,    4,  122,   41,  124,  125,   30,  224,  225,
 /*   250 */     4,  130,   29,   36,  114,  115,   82,  233,  137,  138,
 /*   260 */   139,  140,   16,  142,  247,  155,   44,  157,  158,    4,
 /*   270 */   156,  247,   77,  159,  246,  247,  155,   60,  157,  158,
 /*   280 */    76,   64,  265,  266,   21,  261,  262,  166,  167,  168,
 /*   290 */   169,   28,  171,  172,   99,  100,  175,  114,  177,  178,
 /*   300 */    37,   19,   56,  275,   82,  277,  209,  283,  280,  114,
 /*   310 */   189,   34,  220,  221,  222,  119,  142,  120,  201,  124,
 /*   320 */   124,  125,  148,   77,  124,  130,  209,   45,   82,  301,
 /*   330 */   107,    4,  215,  138,  139,  140,  136,  201,  315,  316,
 /*   340 */   317,  224,  225,  246,  247,   99,  100,  211,  212,   67,
 /*   350 */   233,  215,  106,  107,  150,  201,  118,  119,  161,   82,
 /*   360 */   114,  115,  124,  125,  247,  119,  120,  114,  122,  215,
 /*   370 */   124,  125,  275,  130,  277,    4,  130,  280,  261,  183,
 /*   380 */   284,    4,  105,  137,  138,  139,  140,  295,  142,  124,
 /*   390 */   125,  148,  188,  116,    4,  117,   79,  300,  301,  303,
 /*   400 */   283,  155,  137,  157,  158,  128,  129,  130,  131,  132,
 /*   410 */   133,  134,  166,  201,  168,  169,  201,  171,  172,   42,
 /*   420 */    43,  175,  201,  177,  178,  148,  272,  215,  201,  120,
 /*   430 */   215,  114,  115,  221,  222,  189,  215,  172,  201,  224,
 /*   440 */   225,  114,  215,  116,   73,  224,  225,  210,  233,  167,
 /*   450 */   141,  124,  215,  114,  233,  116,    4,   80,   81,   82,
 /*   460 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*   470 */    93,  145,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   480 */   103,  104,  105,  120,  130,  114,  115,  160,  125,   15,
 /*   490 */   119,    4,  117,  116,  273,  124,  125,  201,  283,    4,
 /*   500 */   174,  124,   42,   43,  283,  278,  294,  295,  137,  119,
 /*   510 */    10,  215,   52,  115,  124,  125,  143,  144,  145,   45,
 /*   520 */   224,  225,   22,  152,  153,  154,  163,  164,   26,  233,
 /*   530 */   129,  130,    4,  318,    4,   61,  321,  160,    4,  289,
 /*   540 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*   550 */    90,   91,   92,   93,   10,   95,   96,   97,   98,   99,
 /*   560 */   100,  101,  102,  103,  104,  105,   22,  143,  144,  145,
 /*   570 */     4,  119,  215,  323,  324,  185,  124,  125,  120,  283,
 /*   580 */   120,  224,   80,   81,   82,   83,   42,   43,   86,   87,
 /*   590 */    88,   89,   90,   91,   92,   93,  109,   95,   96,   97,
 /*   600 */    98,   99,  100,  101,  102,  103,  104,  105,  115,  114,
 /*   610 */   217,  124,  125,  115,  119,   26,  320,  321,  120,  124,
 /*   620 */   125,  147,    4,  115,   80,   81,   82,   83,   84,   85,
 /*   630 */    86,   87,   88,   89,   90,   91,   92,   93,  186,   95,
 /*   640 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   650 */   201,  121,  124,  125,  124,  125,    4,  264,  124,  125,
 /*   660 */   104,  105,   73,    4,  215,  201,  201,   42,   43,    4,
 /*   670 */   205,  137,  114,  224,  225,  115,   58,  284,  115,  215,
 /*   680 */   215,  179,  233,  181,  115,  119,  152,  201,    4,  120,
 /*   690 */   124,  125,  206,  114,   26,    4,  107,  211,  212,    4,
 /*   700 */   172,  215,  136,  137,  203,   80,   81,   82,   83,   84,
 /*   710 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   35,
 /*   720 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   730 */   105,  165,  283,    4,  213,  286,  118,   53,  217,  218,
 /*   740 */   219,   57,  124,  125,  209,   16,   66,   63,   80,   81,
 /*   750 */    82,   83,   72,   43,   86,   87,   88,   89,   90,   91,
 /*   760 */    92,   93,   79,   95,   96,   97,   98,   99,  100,  101,
 /*   770 */   102,  103,  104,  105,  109,    4,  124,  125,  119,  315,
 /*   780 */   316,  317,  247,  124,  125,   56,  201,  135,  193,  124,
 /*   790 */   125,  290,   89,  198,   99,  100,  115,  114,  115,  201,
 /*   800 */   215,  120,   73,  120,  209,  114,   77,  201,  124,  125,
 /*   810 */   151,   82,  132,  215,  115,  124,  125,  114,  120,  124,
 /*   820 */   125,  215,  224,  225,  129,  217,  218,  219,   99,  100,
 /*   830 */    44,  233,  201,  138,  139,  106,  179,  142,  181,  144,
 /*   840 */   115,  246,  247,  114,  115,  120,  215,  179,  119,  181,
 /*   850 */   166,  122,  142,  124,  125,  224,  225,   68,   35,  130,
 /*   860 */    71,   32,  182,  172,  233,  142,  137,  138,  139,  140,
 /*   870 */   275,  273,  277,   13,    4,  280,   53,  306,  307,    4,
 /*   880 */    57,  283,  153,  154,   55,  162,   63,    4,  248,  249,
 /*   890 */   119,  251,  261,  262,  114,  124,  125,  291,  313,  314,
 /*   900 */   305,  172,  113,    4,  175,  115,  177,  178,  137,   80,
 /*   910 */    81,   82,   83,   26,  283,   86,   87,   88,   89,   90,
 /*   920 */    91,   92,   93,    4,   95,   96,   97,   98,   99,  100,
 /*   930 */   101,  102,  103,  104,  105,   16,  165,  179,   19,  115,
 /*   940 */    80,   81,   82,   83,  120,  120,   86,   87,   88,   89,
 /*   950 */    90,   91,   92,   93,    5,   95,   96,   97,   98,   99,
 /*   960 */   100,  101,  102,  103,  104,  105,    9,  107,   11,  115,
 /*   970 */    13,  182,    4,    7,  120,   56,   35,  201,   12,   30,
 /*   980 */    23,    4,  115,   26,  114,   36,  161,   35,   69,  166,
 /*   990 */   258,  215,  260,    4,  124,  125,   77,  114,   57,  124,
 /*  1000 */   125,   82,  119,   84,   63,   16,   40,  124,  125,   57,
 /*  1010 */    14,   54,  137,   64,  201,   63,   59,    4,   99,  100,
 /*  1020 */   137,   64,   65,  124,  125,  106,  231,   70,  215,  234,
 /*  1030 */    73,  120,   75,  114,  201,  152,  241,   79,  119,  196,
 /*  1040 */   197,  122,  172,  124,  125,   56,  163,  164,  215,  130,
 /*  1050 */   201,  201,  120,  240,  205,  115,  137,  138,  139,  140,
 /*  1060 */   120,  120,   73,  115,  215,  215,   77,  110,  120,  112,
 /*  1070 */   201,   82,  114,  115,  224,  225,  115,  208,  120,  210,
 /*  1080 */   115,  120,  114,  233,  215,  120,  201,  119,   99,  100,
 /*  1090 */   314,  172,  124,  125,  175,  106,  177,  178,  265,  266,
 /*  1100 */   215,  124,  125,  114,  291,  137,  120,  150,  119,  224,
 /*  1110 */   225,  122,  115,  124,  125,  253,  201,  120,  233,  130,
 /*  1120 */   152,  201,  201,  273,  120,  263,  137,  138,  139,  140,
 /*  1130 */   215,  211,  212,  283,  116,  215,  215,  124,  125,  224,
 /*  1140 */   225,  114,  153,  154,  187,  115,  261,  262,  233,  172,
 /*  1150 */   120,  115,  166,  220,  221,  222,  120,  237,  115,  239,
 /*  1160 */     4,  172,    4,   14,  175,   24,  177,  178,  283,   80,
 /*  1170 */    81,   82,   83,  160,  170,   86,   87,   88,   89,   90,
 /*  1180 */    91,   92,   93,   62,   95,   96,   97,   98,   99,  100,
 /*  1190 */   101,  102,  103,  104,  105,    4,   26,    4,  283,    4,
 /*  1200 */    80,   81,   82,   83,    4,  116,   86,   87,   88,   89,
 /*  1210 */    90,   91,   92,   93,  293,   95,   96,   97,   98,   99,
 /*  1220 */   100,  101,  102,  103,  104,  105,   82,   83,  295,   47,
 /*  1230 */    86,   87,   88,   89,   90,   91,   92,   93,  209,   95,
 /*  1240 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1250 */    80,   81,   82,   83,    4,  114,   86,   87,   88,   89,
 /*  1260 */    90,   91,   92,   93,  201,   95,   96,   97,   98,   99,
 /*  1270 */   100,  101,  102,  103,  104,  105,  247,   81,  215,  123,
 /*  1280 */   124,  125,  124,  125,  221,  222,   80,   81,   82,   83,
 /*  1290 */     4,  209,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1300 */   180,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1310 */   104,  105,  119,  201,  119,  124,  125,  124,  125,  124,
 /*  1320 */   125,  163,    4,    4,  124,    4,   38,  215,    4,  247,
 /*  1330 */     4,   80,   81,   82,   83,    4,  136,   86,   87,   88,
 /*  1340 */    89,   90,   91,   92,   93,  166,   95,   96,   97,   98,
 /*  1350 */    99,  100,  101,  102,  103,  104,  105,  294,  295,  109,
 /*  1360 */   165,  194,  195,  196,  197,   62,  115,  176,  189,  253,
 /*  1370 */    82,   32,  215,  216,  124,  125,  120,  184,  266,  263,
 /*  1380 */    14,   80,   81,   82,   83,   73,  180,   86,   87,   88,
 /*  1390 */    89,   90,   91,   92,   93,  109,   95,   96,   97,   98,
 /*  1400 */    99,  100,  101,  102,  103,  104,  105,  316,  317,    4,
 /*  1410 */   124,  125,   80,   81,   82,   83,  115,   55,   86,   87,
 /*  1420 */    88,   89,   90,   91,   92,   93,   14,   95,   96,   97,
 /*  1430 */    98,   99,  100,  101,  102,  103,  104,  105,  119,   14,
 /*  1440 */   119,  129,  124,  124,  125,  124,  125,  115,  124,  125,
 /*  1450 */   124,  125,  316,  317,  136,  124,  137,  126,  137,  316,
 /*  1460 */   317,  135,   80,   81,   82,   83,  316,  317,   86,   87,
 /*  1470 */    88,   89,   90,   91,   92,   93,  201,   95,   96,   97,
 /*  1480 */    98,   99,  100,  101,  102,  103,  104,  105,    4,  165,
 /*  1490 */   215,    4,   14,   80,   81,   82,   83,  115,  209,   86,
 /*  1500 */    87,   88,   89,   90,   91,   92,   93,  201,   95,   96,
 /*  1510 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  209,
 /*  1520 */   114,  215,  217,  201,  119,  217,  201,  205,  115,  124,
 /*  1530 */   125,  217,  316,  317,  201,   14,  247,  215,   38,  242,
 /*  1540 */   215,  244,  137,   80,   81,   82,   83,  272,  215,   86,
 /*  1550 */    87,   88,   89,   90,   91,   92,   93,  247,   95,   96,
 /*  1560 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  264,
 /*  1570 */   107,    4,  264,    4,   80,   81,   82,   83,  264,  115,
 /*  1580 */    86,   87,   88,   89,   90,   91,   92,   93,    4,   95,
 /*  1590 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1600 */   201,  114,    4,  119,    4,  272,    4,  217,  124,  125,
 /*  1610 */   116,  124,  125,  115,  215,  201,  310,  115,  312,  205,
 /*  1620 */   242,  137,  244,  163,   80,   81,   82,   83,  227,  215,
 /*  1630 */    86,   87,   88,   89,   90,   91,   92,   93,    4,   95,
 /*  1640 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1650 */    16,  107,  117,   19,  264,   80,   81,   82,   83,  153,
 /*  1660 */   154,   86,   87,   88,   89,   90,   91,   92,   93,    4,
 /*  1670 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1680 */   105,  201,  107,  201,    4,  284,  201,  201,  119,   29,
 /*  1690 */    56,  124,  125,  124,  125,  215,   16,  215,  114,   19,
 /*  1700 */   215,  215,  117,   69,  224,  225,  224,  225,  124,  224,
 /*  1710 */   225,   77,  101,  233,  201,  233,   82,  119,  233,  190,
 /*  1720 */   191,  152,  124,  125,  124,  125,  124,  125,  215,    4,
 /*  1730 */   163,  201,  120,   99,  100,  137,   56,  137,  201,  137,
 /*  1740 */   106,  261,  262,  114,  114,  215,  261,  201,  114,   69,
 /*  1750 */   115,  205,  215,  119,  115,  156,  122,   77,  124,  125,
 /*  1760 */   115,  215,   82,  283,  130,  283,  115,  107,  283,  201,
 /*  1770 */     4,  137,  138,  139,  140,  114,    4,  115,    4,   99,
 /*  1780 */   100,  116,  115,  215,  170,    4,  106,   18,   50,  124,
 /*  1790 */   114,    4,  224,  225,  114,    6,  310,  116,  312,  119,
 /*  1800 */   318,  233,  122,  321,  124,  125,  172,    4,  278,  175,
 /*  1810 */   130,  177,  178,  114,    8,    4,  114,  137,  138,  139,
 /*  1820 */   140,   80,   81,   82,   83,  160,   50,   86,   87,   88,
 /*  1830 */    89,   90,   91,   92,   93,    4,   95,   96,   97,   98,
 /*  1840 */    99,  100,  101,  102,  103,  104,  105,   16,  115,  124,
 /*  1850 */   125,  283,  172,  114,  114,  175,  114,  177,  178,   50,
 /*  1860 */    80,   81,   82,   83,  134,    4,   86,   87,   88,   89,
 /*  1870 */    90,   91,   92,   93,  148,   95,   96,   97,   98,   99,
 /*  1880 */   100,  101,  102,  103,  104,  105,  201,   56,  101,   82,
 /*  1890 */   124,  125,  118,  201,   35,  122,  124,  125,  124,  125,
 /*  1900 */   215,    4,  116,    4,  142,  124,  125,  215,   77,  201,
 /*  1910 */   185,  124,  125,   82,   13,  201,   57,  151,  146,  161,
 /*  1920 */   201,  120,   63,  215,  137,  147,   89,  124,  125,  215,
 /*  1930 */    99,  100,  224,  225,  215,  124,  125,  106,  224,  225,
 /*  1940 */   137,  233,    4,  224,  225,  114,  115,  233,  137,  201,
 /*  1950 */   119,  201,  233,  122,   16,  124,  125,  272,  201,  172,
 /*  1960 */     4,  130,  205,  215,  201,  215,  107,  186,  137,  138,
 /*  1970 */   139,  140,  215,   89,  115,  261,  165,   89,  215,  120,
 /*  1980 */   261,  273,   89,  173,    4,  124,  125,  224,  225,   18,
 /*  1990 */   240,  283,   24,  201,   56,  147,  233,  283,  137,    4,
 /*  2000 */   174,  142,  283,  172,  312,  154,  175,  215,  177,  178,
 /*  2010 */   107,    4,  107,   25,  155,   77,  157,  158,   51,    4,
 /*  2020 */    82,  124,  125,  124,  125,  166,  165,  168,  169,    4,
 /*  2030 */   171,  201,   62,  201,  137,  205,  273,   99,  100,  120,
 /*  2040 */   201,  291,  201,   51,  106,  215,  283,  215,  189,    4,
 /*  2050 */   182,  152,  114,  115,  215,  114,  215,  119,  142,  201,
 /*  2060 */   122,   16,  124,  125,  113,  224,  225,  114,  130,  162,
 /*  2070 */     4,  201,  122,  215,  233,  137,  138,  139,  140,  240,
 /*  2080 */   124,  125,  224,  225,  201,  215,    4,  115,  205,  115,
 /*  2090 */     4,  233,  201,  137,  224,  225,  205,  113,  215,   49,
 /*  2100 */   111,   56,  261,  233,  124,  125,  215,   48,  214,  284,
 /*  2110 */   172,  201,  201,  175,  201,  177,  178,  137,    4,  124,
 /*  2120 */   125,    4,   77,    4,  283,  215,  215,   82,  215,    4,
 /*  2130 */   291,  124,  125,  201,  224,  225,  267,  224,  225,  124,
 /*  2140 */   125,  283,  230,  233,   99,  100,  233,  215,  201,  124,
 /*  2150 */   125,  106,  137,  283,  230,  309,    4,  307,  309,  114,
 /*  2160 */    74,  200,  215,  201,  119,  108,  200,  122,   16,  124,
 /*  2170 */   125,  224,  225,   65,  201,  130,  200,  215,  183,  172,
 /*  2180 */   233,  200,  137,  138,  139,  140,  224,  225,  215,  202,
 /*  2190 */   124,  125,    4,  283,  204,  233,  283,  120,    4,  201,
 /*  2200 */   118,  201,   78,  137,  201,  205,  124,  125,   56,  184,
 /*  2210 */   124,  125,  202,  215,  270,  215,  207,  172,  215,  201,
 /*  2220 */   175,  201,  177,  178,  179,  170,  117,  224,  225,   77,
 /*  2230 */   283,  249,  201,  215,   82,  215,  233,  118,  124,  125,
 /*  2240 */   153,  124,  125,  124,  125,  283,  215,  201,  201,  124,
 /*  2250 */   125,   99,  100,  256,  137,  224,  225,  255,  106,  167,
 /*  2260 */   240,  215,  215,    4,  233,  257,  114,  115,  168,  105,
 /*  2270 */   201,  119,  259,  201,  122,   16,  124,  125,  284,  165,
 /*  2280 */   169,  201,  130,   82,  215,  201,  283,  215,  114,  137,
 /*  2290 */   138,  139,  140,  224,  225,  215,  224,  225,  173,  215,
 /*  2300 */   229,  105,  233,  292,  311,  233,  118,  201,  224,  225,
 /*  2310 */   287,  291,  124,  125,  283,   56,  116,  233,  124,  125,
 /*  2320 */   179,  215,  258,  166,  172,  274,  259,  175,  201,  177,
 /*  2330 */   178,  201,  201,  201,  201,  201,   77,  201,   46,  201,
 /*  2340 */   201,   82,  215,  201,  274,  215,  215,  215,  215,  215,
 /*  2350 */   201,  215,  283,  215,  215,  283,  319,  215,   99,  100,
 /*  2360 */   224,  225,  224,  225,  215,  106,  172,  283,   27,  233,
 /*  2370 */     4,  233,  201,  114,  201,  319,  201,  201,  119,  201,
 /*  2380 */   201,  122,   16,  124,  125,  270,  215,  117,  215,  130,
 /*  2390 */   215,  215,  201,  215,  215,  251,  137,  138,  139,  140,
 /*  2400 */   224,  225,  224,  225,  154,  324,  215,  190,  226,  233,
 /*  2410 */   201,  233,  226,  201,  142,  201,  236,  228,   39,  283,
 /*  2420 */   141,  283,   56,  226,  215,  226,  201,  215,  236,  215,
 /*  2430 */   201,  172,  201,  229,  175,  229,  177,  178,  270,  226,
 /*  2440 */   215,  226,  226,   77,  215,  226,  215,  204,   82,  224,
 /*  2450 */   225,  117,  229,  224,  225,  224,  225,  117,  233,  283,
 /*  2460 */   204,  283,  233,  270,  233,   99,  100,  117,  298,  201,
 /*  2470 */    33,  299,  106,  179,  117,  201,  255,  171,  276,  243,
 /*  2480 */   114,   80,  117,  215,  276,  119,  201,  255,  122,  215,
 /*  2490 */   124,  125,  224,  225,  117,  114,  130,  279,  224,  225,
 /*  2500 */   215,  233,  282,  137,  138,  139,  140,  233,  283,  224,
 /*  2510 */   225,  142,  283,  276,  283,  255,  201,  276,  233,  243,
 /*  2520 */   204,  270,  117,  204,  255,  270,  117,  245,  117,   78,
 /*  2530 */   215,  201,  245,  117,  245,  117,  245,  117,  172,  224,
 /*  2540 */   225,  175,  293,  177,  178,  215,  173,  270,  233,  117,
 /*  2550 */   302,  283,   20,  201,  224,  225,  302,  283,  270,  117,
 /*  2560 */   201,  117,  117,  233,  201,  270,  304,  215,  283,  304,
 /*  2570 */    17,  254,  252,  295,  215,  295,  224,  225,  215,  201,
 /*  2580 */   227,  288,  258,  224,  225,  233,  201,  224,  225,  258,
 /*  2590 */   269,  201,  233,  215,  271,  227,  233,  271,  283,  238,
 /*  2600 */   215,  234,  224,  225,  228,  215,  271,  199,  254,  224,
 /*  2610 */   225,  233,  252,  283,  224,  225,  217,  255,  233,  217,
 /*  2620 */   217,  217,  297,  233,  201,  296,  244,  285,  235,  322,
 /*  2630 */   250,  235,  268,  235,  224,  283,  308,  224,  215,  201,
 /*  2640 */    73,    4,  283,  325,  325,  239,  283,  224,  225,  325,
 /*  2650 */   325,  201,  325,  215,  325,  201,  233,  325,  201,  325,
 /*  2660 */   325,  283,  224,  225,  325,  215,  325,  325,  283,  215,
 /*  2670 */   325,  233,  215,  283,  224,  225,  325,  201,  224,  225,
 /*  2680 */   325,  224,  225,  233,  325,  325,  325,  233,  201,  325,
 /*  2690 */   233,  215,  325,  201,  325,  325,  325,  325,  325,  325,
 /*  2700 */   224,  225,  215,  325,  325,  325,  283,  215,  325,  233,
 /*  2710 */   325,  224,  225,  325,  325,  325,  224,  225,  201,  325,
 /*  2720 */   233,  283,  325,  325,  325,  233,  325,  325,  325,  325,
 /*  2730 */   325,  325,  215,  283,  325,  325,  325,  283,  325,  325,
 /*  2740 */   283,  224,  225,  325,  325,  325,  325,  325,  325,  325,
 /*  2750 */   233,  325,  325,  201,  325,  201,  325,  201,  325,  283,
 /*  2760 */   325,  325,  325,  325,  325,  325,  325,  215,  325,  215,
 /*  2770 */   283,  215,  325,  325,  325,  283,  224,  225,  224,  225,
 /*  2780 */   224,  225,  325,  325,  325,  233,  325,  233,  201,  233,
 /*  2790 */   201,  325,  325,  201,  325,  201,  325,  325,  325,  325,
 /*  2800 */   283,  325,  215,  325,  215,  325,  325,  215,  325,  215,
 /*  2810 */   325,  224,  225,  224,  225,  325,  224,  225,  224,  225,
 /*  2820 */   233,  325,  233,  325,  325,  233,  325,  233,  325,  325,
 /*  2830 */   325,  325,  325,  325,  325,  283,  325,  283,  325,  283,
 /*  2840 */   325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
 /*  2850 */   325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
 /*  2860 */   325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
 /*  2870 */   283,  325,  283,  325,  325,  283,  325,  283,
};
#define YY_SHIFT_USE_DFLT (-128)
#define YY_SHIFT_COUNT (525)
#define YY_SHIFT_MIN   (-127)
#define YY_SHIFT_MAX   (2637)
static const short yy_shift_ofst[] = {
 /*     0 */  1660,  729,  989,  957,  919, 1680, 1634, 2152, 2152, 2152,
 /*    10 */   124,  246, 2045, 2259, 2259, 2259, 2259, 2259, 2259, 2259,
 /*    20 */  2259,  589,   -4,  121, 1938, 1831, 2259, 2259, 2259, 2259,
 /*    30 */  2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259,
 /*    40 */  2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2366,
 /*    50 */  2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259,
 /*    60 */  2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259,  371,
 /*    70 */   695,  695,   -1,  684,  684, 1156,  883,   16,  618, 1156,
 /*    80 */  2007, 2007, 2007, 2188, 2007,   40,   40, 2086,  899, 1331,
 /*    90 */   377,  277,  968, 1321,  452, 1195, 1569, 1598,  870, 1484,
 /*   100 */   870, 1405, 1319,  659,  238, 2125, 2194, 2194, 2194, 2194,
 /*   110 */   174, 2194, 2007, 2086,  899,  899, 1331, 1529, 1529, 1506,
 /*   120 */   544,  544,  -42,  195,  566,  771, 1787, 1861, 1811, 1193,
 /*   130 */    31,  196,  691,  217,  390,  217,  534,  327,  823,  265,
 /*   140 */   495, 2119, 2117, 2025, 1781, 2114, 1899, 2066, 2082, 2015,
 /*   150 */  1995, 1980, 1956, 1897, 1803, 1725, 1766, 1774, 1602, 1326,
 /*   160 */  1772, 1600, 1487, 1567, 1158, 1665, 1665, 1665, 1324, 1013,
 /*   170 */   977,  941,  941, 1191,  528,  875,  652,  530,  680, 1286,
 /*   180 */  1250,  665,  487,  899,  899,  952,  952,  223, 1312, 1179,
 /*   190 */  2567, 2567, 2637, 2567, 2567, -128, -128, -128,  460,  625,
 /*   200 */   625,  625,  625,  625,  625,  625,  625,  625,  625,  668,
 /*   210 */   502,  860,  829, 1575, 1544, 1494, 1463, 1413, 1382, 1332,
 /*   220 */  1301, 1251, 1206, 1170, 1120, 1089, 1780, 1741,  -72, 1144,
 /*   230 */  1144,  -11,   91,   91,   91,   91,  111,  -33, -127,  -26,
 /*   240 */   -26,    4,  958,  683,  474,  474,  474,  363,  282,  949,
 /*   250 */   110,   57,  424,  966, 1318, 1200, 1584,  200,   46,  263,
 /*   260 */  1004,  825, 1288, 1288,  309, 1036,  710,  500, 1288,  723,
 /*   270 */   986,  986,  657,  500,  -10,  -10,  556,  197,  114, 2553,
 /*   280 */  2553, 2445, 2444, 2442, 2532, 2532, 2432, 2373, 2420, 2451,
 /*   290 */  2418, 2451, 2416, 2451, 2411, 2451, 2409, 2124, 2055, 2405,
 /*   300 */  2124, 2401, 2306, 2055, 2306, 2369, 2381, 2377, 2306, 2055,
 /*   310 */  2365, 2401, 2306, 2055, 2357, 2294, 2437, 2350, 2124, 2340,
 /*   320 */  2174, 2124, 2334, 2174, 2272, 2272, 2272, 2272, 2379, 2174,
 /*   330 */  2272, 2279, 2272, 2379, 2272, 2272, 2217, 2250, 2270, 2341,
 /*   340 */  2341, 2292, 2292, 2111, 2157, 2141, 2200, 2196, 2174, 2201,
 /*   350 */  2164, 2111, 2100, 2092, 2055, 2087, 2109, 2077, 2124, 2108,
 /*   360 */  2108, 2057, 2057, 2057, 2057, -128, -128, -128, -128, -128,
 /*   370 */  -128, -128, -128, -128, -128, 1859,  789,  204,  317,  140,
 /*   380 */   373,    6,  703, 1030,  997,  326,  965, 1141,  961,  948,
 /*   390 */   940,  854,  824,  401,   80,  243,  725,  681,  203,  222,
 /*   400 */   569,  498,   60,  339, 2059, 2050, 1989, 1984, 1974, 1972,
 /*   410 */  1950, 1953, 1907, 1951, 1941, 1916, 1868, 1992, 1919, 1967,
 /*   420 */  1970, 1988, 1905, 1903, 1851, 1826, 1848, 1968, 1971, 1810,
 /*   430 */  1893, 1888, 1884, 1837, 1778, 1801, 1758, 1901, 1762, 1786,
 /*   440 */  1773, 1807, 1726, 1730, 1742, 1809, 1740, 1739, 1733, 1702,
 /*   450 */  1776, 1806, 1699, 1681, 1789, 1676, 1738, 1769, 1667, 1614,
 /*   460 */  1661, 1662, 1651, 1645, 1639, 1612, 1599, 1630, 1635, 1629,
 /*   470 */  1612, 1611, 1585, 1535, 1460, 1502, 1498, 1256, 1464, 1500,
 /*   480 */  1521, 1406, 1256, 1478, 1425, 1412, 1366, 1362, 1303, 1339,
 /*   490 */  1196, 1121, 1182, 1149, 1043, 1027, 1018,  932,  911,  996,
 /*   500 */   867,  758,  887,  698,  790,  780,  786,  698,  699,  579,
 /*   510 */   563,  560,  558,  508,  493,  398,  458,  253,  375,  278,
 /*   520 */   354,  183,   81,   37,  -36,  -94,
};
#define YY_REDUCE_USE_DFLT (-288)
#define YY_REDUCE_COUNT (374)
#define YY_REDUCE_MIN   (-287)
#define YY_REDUCE_MAX   (2594)
static const short yy_reduce_ofst[] = {
 /*     0 */  1167,   24,  117,  595, 1482,  296,  215, 1480,  885,  631,
 /*    10 */    97, 1841,  449, 1763, 1708, 1719,  850,  598, 1714, 1485,
 /*    20 */   221,   28, 2594, 2592, 2589, 2587, 2556, 2554, 2552, 2517,
 /*    30 */  2492, 2487, 2476, 2457, 2454, 2450, 2438, 2423, 2390, 2385,
 /*    40 */  2378, 2363, 2359, 2352, 2330, 2315, 2285, 2274, 2268, 2231,
 /*    50 */  2229, 2225, 2178, 2176, 2138, 2136, 2084, 2072, 2069, 2031,
 /*    60 */  2003, 1962, 1947, 1913, 1910, 1870, 1858, 1568,  915,   17,
 /*    70 */  1063,  212,  920,  464,   23,  486,  833, -105, 1486,  136,
 /*    80 */  2020, 1839, 1750, 1306,  813,  933,   92,  869,  585,  521,
 /*    90 */   393, -189, 1112, 2000, 1891, 1883, 1830, 1757, 1530, 1546,
 /*   100 */   227, 1414, 1322,  849,  465,  921, 1685, 1333, 1275,  154,
 /*   110 */   795,  -43,  606,  237,  776, 1692,  608,  250, -287,  640,
 /*   120 */  1401, -220,   96,  357, 2214, 2212, 2171, 1932, 1932, 2209,
 /*   130 */  2191, 2179, 2175, 1378, 2173, 1297, 1932, 1390, 1216, 2171,
 /*   140 */  2149, 2142, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 2139,
 /*   150 */  1932, 1932, 1932, 1932, 2134, 1932, 1932, 1932, 2133, 2132,
 /*   160 */  2131, 2130, 2127, 2106, 2080, 1314, 1308, 1305, 2047, 2046,
 /*   170 */  2018, 1150, 1143, 1998, 1973, 1932, 1911, 1832,  501, 1792,
 /*   180 */  1748, 1537, 1513, 1399, 1325, 1136, 1091,  843, 1310,  732,
 /*   190 */  1289, 1082, 1157, 1029,  535,  571, 1116,  862, 1825, 1825,
 /*   200 */  1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825,
 /*   210 */  1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825,
 /*   220 */  1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825,
 /*   230 */  1825, 1825, 1825, 1825, 1825, 1825, 1825, 1825, 2406, 2413,
 /*   240 */  2410, 1825, 2328, 2328, 2398, 2396, 2393, 2364, 2307, 2382,
 /*   250 */  2380, 2342, 2325, 2329, 2404, 2403, 2402, 2399, 2360, 2408,
 /*   260 */  2362, 2354, 2335, 2326, 2376, 2361, 2367, 2368, 2323, 2321,
 /*   270 */  2331, 2324, 2293, 2353, 2280, 2278, 1825, 2317, 2320, 2265,
 /*   280 */  2262, 2168, 2295, 2288, 2254, 2248, 2277, 2249, 2168, 2291,
 /*   290 */  2168, 2289, 2168, 2287, 2168, 2282, 2255, 2319, 2269, 2251,
 /*   300 */  2316, 2276, 2241, 2260, 2237, 2220, 2218, 2168, 2208, 2232,
 /*   310 */  2168, 2236, 2202, 2221, 2168, 2172, 2170, 2193, 2256, 2168,
 /*   320 */  2223, 2243, 2168, 2206, 2219, 2216, 2215, 2213, 2192, 2204,
 /*   330 */  2199, 2189, 2197, 2180, 2186, 2182, 2081, 2144, 2115, 2056,
 /*   340 */  2037, 2070, 2051, 2067, 2064, 2023, 1993, 2011, 2071, 1994,
 /*   350 */  1825, 2013, 2008, 1997, 2002, 1982, 1944, 2009, 1990, 2010,
 /*   360 */  1987, 1981, 1976, 1966, 1961, 1849, 1846, 1850, 1924, 1912,
 /*   370 */  1869, 1825, 1825, 1825, 1894,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   866, 1180, 1180, 1300, 1180, 1180, 1180, 1180, 1180, 1180,
 /*    10 */  1300, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
 /*    20 */  1180, 1300, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
 /*    30 */  1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
 /*    40 */  1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
 /*    50 */  1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
 /*    60 */  1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1049,
 /*    70 */  1342, 1342, 1342, 1319, 1319, 1342, 1042, 1342, 1342, 1342,
 /*    80 */  1342, 1342, 1342, 1342, 1342, 1342, 1342,  894, 1342,  916,
 /*    90 */  1038,  906, 1049, 1342, 1342, 1342, 1342, 1342, 1111, 1125,
 /*   100 */  1111, 1103, 1092, 1342, 1342, 1216, 1119, 1119, 1119, 1119,
 /*   110 */   989, 1119, 1342, 1342, 1342, 1342, 1342, 1151, 1150, 1342,
 /*   120 */  1077, 1077, 1182, 1342, 1269, 1274, 1342, 1342, 1342, 1342,
 /*   130 */  1342, 1342, 1112, 1342, 1342, 1342, 1050, 1038, 1319, 1342,
 /*   140 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   150 */  1342, 1126, 1104, 1093, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   160 */  1342, 1342, 1342, 1342, 1342, 1038, 1038, 1038, 1342, 1342,
 /*   170 */  1342, 1319, 1319, 1342, 1342, 1342, 1342, 1342,  903, 1342,
 /*   180 */  1342, 1342,  872, 1342, 1342, 1319, 1319,  866, 1300, 1071,
 /*   190 */  1300, 1300,  911, 1300, 1300, 1293, 1028, 1028, 1087, 1110,
 /*   200 */  1109, 1108, 1107, 1055, 1097, 1085, 1089, 1193, 1088, 1182,
 /*   210 */  1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
 /*   220 */  1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1153, 1165,
 /*   230 */  1152, 1160, 1169, 1161, 1164, 1155, 1154, 1156, 1342, 1342,
 /*   240 */  1342, 1157, 1342, 1342, 1342, 1342, 1342, 1041, 1342, 1342,
 /*   250 */  1011, 1342, 1342, 1243, 1342, 1342,  918, 1342, 1026,  875,
 /*   260 */  1096, 1039, 1067, 1067,  956,  980,  940, 1077, 1067, 1057,
 /*   270 */  1071, 1071, 1188, 1077, 1342, 1342, 1158, 1039, 1026, 1284,
 /*   280 */  1284, 1058, 1058, 1058, 1268, 1268, 1058, 1216, 1058, 1002,
 /*   290 */  1058, 1002, 1058, 1002, 1058, 1002, 1058,  900, 1096, 1058,
 /*   300 */   900,  993, 1099, 1096, 1099, 1131, 1115, 1058, 1099, 1096,
 /*   310 */  1058,  993, 1099, 1096, 1058, 1250, 1248, 1058,  900, 1058,
 /*   320 */  1201,  900, 1058, 1201,  991,  991,  991,  991,  972, 1201,
 /*   330 */   991,  956,  991,  972,  991,  991, 1338, 1342, 1058, 1329,
 /*   340 */  1329, 1080, 1080, 1086, 1071, 1342, 1342, 1207, 1201, 1182,
 /*   350 */  1159, 1086, 1084, 1081, 1096, 1342, 1058,  975,  900,  883,
 /*   360 */   883,  871,  871,  871,  871, 1297, 1297, 1293,  958,  958,
 /*   370 */  1044, 1168, 1167, 1166,  927, 1181, 1342, 1342, 1342, 1342,
 /*   380 */  1342, 1342, 1217, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   390 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1303,
 /*   400 */  1342, 1342, 1342, 1342, 1342,  867, 1342, 1342, 1342, 1342,
 /*   410 */  1342, 1287, 1342, 1342, 1342, 1342, 1342, 1342, 1247, 1246,
 /*   420 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   430 */  1342, 1342, 1342, 1342, 1342, 1100, 1342, 1235, 1342, 1342,
 /*   440 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   450 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   460 */  1342, 1342, 1342, 1342, 1342, 1014, 1020, 1342, 1342, 1342,
 /*   470 */  1015, 1342, 1342, 1144, 1342, 1342, 1342, 1191, 1342, 1342,
 /*   480 */  1342, 1342, 1082, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   490 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1335, 1072, 1342,
 /*   500 */  1342, 1181, 1342, 1302, 1342, 1342, 1342, 1301, 1342, 1342,
 /*   510 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1145, 1144,
 /*   520 */  1183,  909,  890, 1342,  881, 1342,  863,  868, 1286, 1283,
 /*   530 */  1280, 1285, 1279, 1281, 1278, 1282, 1277, 1275, 1276, 1273,
 /*   540 */  1271, 1270, 1272, 1267, 1263, 1223, 1221, 1219, 1228, 1227,
 /*   550 */  1226, 1225, 1224, 1220, 1218, 1222, 1214, 1213, 1122, 1101,
 /*   560 */  1090, 1009, 1262, 1260, 1261, 1212, 1210, 1211, 1008, 1007,
 /*   570 */  1006, 1001, 1000,  999,  998, 1290, 1299, 1298, 1296, 1295,
 /*   580 */  1294, 1288, 1289, 1199, 1198, 1196, 1195, 1197,  902, 1239,
 /*   590 */  1242, 1241, 1240, 1245, 1244, 1237, 1249, 1254, 1253, 1258,
 /*   600 */  1257, 1256, 1255, 1252, 1234, 1130, 1129, 1127, 1124, 1134,
 /*   610 */  1133, 1132, 1123, 1116, 1128, 1106, 1114, 1113, 1102, 1105,
 /*   620 */   994, 1095, 1091, 1094, 1010, 1238, 1005, 1004, 1003,  901,
 /*   630 */   893, 1060,  892,  891,  905,  978,  979,  987,  990,  985,
 /*   640 */   988,  984,  983,  982,  986,  981,  977,  908,  907,  917,
 /*   650 */   971,  954,  943,  910,  945,  942,  941,  946,  963,  962,
 /*   660 */   969,  968,  967,  966,  965,  961,  964,  960,  959,  947,
 /*   670 */   939,  938,  957,  937,  974,  973,  970,  936,  997,  996,
 /*   680 */   995,  992,  935,  934,  933,  932,  931,  930, 1179, 1341,
 /*   690 */  1337, 1340, 1339, 1336, 1178, 1184, 1172, 1170, 1012, 1023,
 /*   700 */  1022, 1021, 1018, 1019, 1033, 1031, 1030, 1029, 1066, 1065,
 /*   710 */  1064, 1063, 1062, 1061, 1054, 1052, 1047, 1046, 1053, 1051,
 /*   720 */  1048, 1069, 1070, 1068, 1045, 1037, 1035, 1036, 1034, 1121,
 /*   730 */  1118, 1120, 1117, 1056, 1043, 1040, 1027, 1317, 1315, 1318,
 /*   740 */  1316, 1314, 1322, 1324, 1323, 1328, 1326, 1325, 1321, 1334,
 /*   750 */  1333, 1332, 1331, 1330, 1320, 1327, 1313, 1312, 1311, 1310,
 /*   760 */  1074, 1079, 1078, 1073, 1017, 1183, 1171, 1181, 1175, 1308,
 /*   770 */  1306, 1309, 1305, 1304, 1204, 1206, 1209, 1208, 1205, 1076,
 /*   780 */  1075, 1203, 1202, 1307, 1174, 1149,  923,  921,  922, 1231,
 /*   790 */  1230, 1233, 1232, 1229,  925,  924,  920,  919, 1147, 1143,
 /*   800 */  1142, 1259, 1176, 1177, 1141, 1146, 1139, 1138, 1137, 1163,
 /*   810 */  1162, 1148, 1140,  912, 1016, 1013, 1173, 1136, 1059, 1135,
 /*   820 */   953,  952,  951,  950,  949,  948, 1025, 1024,  929,  944,
 /*   830 */   928,  926,  904,  895,  898,  899,  897,  896,  888,  885,
 /*   840 */   887,  884,  889,  886,  882,  880,  879,  878,  877,  876,
 /*   850 */   915,  914,  913,  909,  874,  873,  870,  869,  865,  864,
 /*   860 */   862,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /* MATERIALIZED => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "MATERIALIZED",  "NO",            "NULLS",         "OTHERS",      
  "PLAN",          "QUERY",         "KEY",           "OF",          
  "OFFSET",        "PARTITION",     "PRAGMA",        "PRECEDING",   
  "RAISE",         "RANGE",         "RECURSIVE",     "RELEASE",     
  "REPLACE",       "RESTRICT",      "ROW",           "ROWS",        
  "ROLLBACK",      "SAVEPOINT",     "TEMP",          "TIES",        
  "TRIGGER",       "UNBOUNDED",     "VACUUM",        "VIEW",        
  "VIRTUAL",       "WITH",          "WITHOUT",       "REINDEX",     
  "RENAME",        "CTIME_KW",      "IF",            "ANY",         
  "OR",            "AND",           "NOT",           "IS",          
  "BETWEEN",       "IN",            "ISNULL",        "NOTNULL",     
  "NE",            "EQ",            "GT",            "LE",          
  "LT",            "GE",            "ESCAPE",        "BITAND",      
  "BITOR",         "LSHIFT",        "RSHIFT",        "PLUS",        
  "MINUS",         "STAR",          "SLASH",         "REM",         
  "CONCAT",        "COLLATE",       "BITNOT",        "SEMI",        
  "TRANSACTION",   "ID_TRANS",      "COMMIT",        "TO",          
  "CREATE",        "TABLE",         "LP",            "RP",          
  "AS",            "DOT",           "ID_TAB_NEW",    "ID_DB",       
  "COMMA",         "CTX_ROWID_KW",  "EXISTS",        "ID_COL_NEW",  
  "STRING",        "JOIN_KW",       "ID_COL_TYPE",   "RIGHT_ASSOC", 
  "CONSTRAINT",    "DEFAULT",       "NULL",          "PRIMARY",     
  "UNIQUE",        "CHECK",         "REFERENCES",    "ID_CONSTR",   
  "ID_COLLATE",    "ID_TAB",        "INTEGER",       "FLOAT",       
  "BLOB",          "AUTOINCR",      "ON",            "INSERT",      
  "DELETE",        "UPDATE",        "ID_FK_MATCH",   "SET",         
  "DEFERRABLE",    "FOREIGN",       "DROP",          "ID_VIEW_NEW", 
  "ID_VIEW",       "SELECT",        "VALUES",        "UNION",       
  "ALL",           "EXCEPT",        "INTERSECT",     "DISTINCT",    
  "ID_ALIAS",      "FROM",          "USING",         "JOIN",        
  "ID_JOIN_OPTS",  "ID_IDX",        "ORDER",         "GROUP",       
  "HAVING",        "LIMIT",         "WHERE",         "RETURNING",   
  "ID_COL",        "INTO",          "NOTHING",       "ID_FN",       
  "ID_ERR_MSG",    "VARIABLE",      "CASE",          "WHEN",        
  "THEN",          "ELSE",          "INDEX",         "ID_IDX_NEW",  
  "ID_PRAGMA",     "ID_TRIG_NEW",   "ID_TRIG",       "ALTER",       
  "ADD",           "WINDOW",        "OVER",          "FILTER",      
  "error",         "cmd",           "input",         "cmdlist",     
  "ecmd",          "explain",       "cmdx",          "transtype",   
  "trans_opt",     "nm",            "savepoint_opt",  "temp",        
  "ifnotexists",   "fullname",      "columnlist",    "conslist_opt",
  "table_options",  "select",        "table_option",  "column",      
  "columnid",      "type",          "carglist",      "id",          
  "id_opt",        "ids",           "typetoken",     "typename",    
  "signed",        "plus_num",      "minus_num",     "ccons",       
  "term",          "expr",          "onconf",        "sortorder",   
  "autoinc",       "idxlist_opt",   "refargs",       "defer_subclause",
  "gen_always",    "tnm",           "refarg",        "refact",      
  "init_deferred_pred_opt",  "conslist",      "tconscomma",    "tcons",       
  "idxlist",       "defer_subclause_opt",  "resolvetype",   "orconf",      
  "raisetype",     "ifexists",      "select_stmt",   "with",        
  "selectnowith",  "oneselect",     "multiselect_op",  "values",      
  "distinct",      "selcollist",    "from",          "where_opt",   
  "groupby_opt",   "having_opt",    "orderby_opt",   "limit_opt",   
  "window_clause",  "nexprlist",     "exprlist",      "sclp",        
  "as",            "joinsrc",       "singlesrc",     "seltablist",  
  "joinop",        "joinconstr_opt",  "dbnm",          "indexed_opt", 
  "idlist",        "sortlist",      "nulls",         "delete_stmt", 
  "returning",     "update_stmt",   "setlist",       "idlist_opt",  
  "insert_stmt",   "insert_cmd",    "upsert",        "exprx",       
  "not_opt",       "likeop",        "case_operand",  "case_exprlist",
  "case_else",     "filter_over",   "uniqueflag",    "idxlist_single",
  "collate",       "vinto",         "nmnum",         "number",      
  "trigger_time",  "trigger_event",  "foreach_clause",  "when_clause", 
  "trigger_cmd_list",  "trigger_cmd",   "database_kw_opt",  "key_opt",     
  "kwcolumn_opt",  "create_vtab",   "vtabarglist",   "vtabarg",     
  "vtabargtoken",  "anylist",       "wqlist",        "wqas",        
  "wqcte",         "windowdefn_list",  "windowdefn",    "window",      
  "frame_opt",     "range_or_rows",  "frame_bound_s",  "frame_exclude_opt",
  "frame_bound_e",  "frame_bound",   "frame_exclude",  "filter_clause",
  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= table_option",
 /*  35 */ "table_options ::= table_options COMMA table_option",
 /*  36 */ "table_option ::= WITHOUT nm",
 /*  37 */ "table_option ::= nm",
 /*  38 */ "table_option ::= WITHOUT CTX_ROWID_KW",
 /*  39 */ "ifnotexists ::=",
 /*  40 */ "ifnotexists ::= IF NOT EXISTS",
 /*  41 */ "temp ::= TEMP",
 /*  42 */ "temp ::=",
 /*  43 */ "columnlist ::= columnlist COMMA column",
 /*  44 */ "columnlist ::= column",
 /*  45 */ "column ::= columnid type carglist",
 /*  46 */ "columnid ::= nm",
 /*  47 */ "columnid ::= ID_COL_NEW",
 /*  48 */ "id ::= ID",
 /*  49 */ "id_opt ::= id",
 /*  50 */ "id_opt ::=",
 /*  51 */ "ids ::= ID|STRING",
 /*  52 */ "nm ::= id",
 /*  53 */ "nm ::= STRING",
 /*  54 */ "nm ::= JOIN_KW",
 /*  55 */ "type ::=",
 /*  56 */ "type ::= typetoken",
 /*  57 */ "typetoken ::= typename",
 /*  58 */ "typetoken ::= typename LP signed RP",
 /*  59 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  60 */ "typename ::= ids",
 /*  61 */ "typename ::= typename ids",
 /*  62 */ "typename ::= ID_COL_TYPE",
 /*  63 */ "signed ::= plus_num",
 /*  64 */ "signed ::= minus_num",
 /*  65 */ "carglist ::= carglist ccons",
 /*  66 */ "carglist ::=",
 /*  67 */ "ccons ::= CONSTRAINT nm",
 /*  68 */ "ccons ::= DEFAULT term",
 /*  69 */ "ccons ::= DEFAULT LP expr RP",
 /*  70 */ "ccons ::= DEFAULT PLUS term",
 /*  71 */ "ccons ::= DEFAULT MINUS term",
 /*  72 */ "ccons ::= DEFAULT id",
 /*  73 */ "ccons ::= DEFAULT CTIME_KW",
 /*  74 */ "ccons ::= NULL onconf",
 /*  75 */ "ccons ::= NOT NULL onconf",
 /*  76 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  77 */ "ccons ::= UNIQUE onconf",
 /*  78 */ "ccons ::= CHECK LP expr RP",
 /*  79 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  80 */ "ccons ::= defer_subclause",
 /*  81 */ "ccons ::= COLLATE ids",
 /*  82 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  83 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  84 */ "ccons ::= COLLATE ID_COLLATE",
 /*  85 */ "ccons ::= REFERENCES ID_TAB",
 /*  86 */ "ccons ::= CHECK LP RP",
 /*  87 */ "term ::= NULL",
 /*  88 */ "term ::= INTEGER",
 /*  89 */ "term ::= FLOAT",
 /*  90 */ "term ::= STRING|BLOB",
 /*  91 */ "tnm ::= term",
 /*  92 */ "tnm ::= nm",
 /*  93 */ "gen_always ::= GENERATED ALWAYS",
 /*  94 */ "gen_always ::=",
 /*  95 */ "autoinc ::=",
 /*  96 */ "autoinc ::= AUTOINCR",
 /*  97 */ "refargs ::=",
 /*  98 */ "refargs ::= refargs refarg",
 /*  99 */ "refarg ::= MATCH nm",
 /* 100 */ "refarg ::= ON INSERT refact",
 /* 101 */ "refarg ::= ON DELETE refact",
 /* 102 */ "refarg ::= ON UPDATE refact",
 /* 103 */ "refarg ::= MATCH ID_FK_MATCH",
 /* 104 */ "refact ::= SET NULL",
 /* 105 */ "refact ::= SET DEFAULT",
 /* 106 */ "refact ::= CASCADE",
 /* 107 */ "refact ::= RESTRICT",
 /* 108 */ "refact ::= NO ACTION",
 /* 109 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 110 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 111 */ "init_deferred_pred_opt ::=",
 /* 112 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 113 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 114 */ "conslist_opt ::=",
 /* 115 */ "conslist_opt ::= COMMA conslist",
 /* 116 */ "conslist ::= conslist tconscomma tcons",
 /* 117 */ "conslist ::= tcons",
 /* 118 */ "tconscomma ::= COMMA",
 /* 119 */ "tconscomma ::=",
 /* 120 */ "tcons ::= CONSTRAINT nm",
 /* 121 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 122 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 123 */ "tcons ::= CHECK LP expr RP onconf",
 /* 124 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 125 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 126 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 127 */ "tcons ::= CHECK LP RP onconf",
 /* 128 */ "defer_subclause_opt ::=",
 /* 129 */ "defer_subclause_opt ::= defer_subclause",
 /* 130 */ "onconf ::=",
 /* 131 */ "onconf ::= ON CONFLICT resolvetype",
 /* 132 */ "orconf ::=",
 /* 133 */ "orconf ::= OR resolvetype",
 /* 134 */ "resolvetype ::= raisetype",
 /* 135 */ "resolvetype ::= IGNORE",
 /* 136 */ "resolvetype ::= REPLACE",
 /* 137 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 138 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 139 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 140 */ "ifexists ::= IF EXISTS",
 /* 141 */ "ifexists ::=",
 /* 142 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 143 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 144 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 145 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 146 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 147 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 148 */ "cmd ::= select_stmt",
 /* 149 */ "select_stmt ::= select",
 /* 150 */ "select ::= with selectnowith",
 /* 151 */ "selectnowith ::= oneselect",
 /* 152 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 153 */ "selectnowith ::= values",
 /* 154 */ "selectnowith ::= selectnowith COMMA values",
 /* 155 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 156 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 157 */ "values ::= VALUES LP nexprlist RP",
 /* 158 */ "values ::= values COMMA LP exprlist RP",
 /* 159 */ "multiselect_op ::= UNION",
 /* 160 */ "multiselect_op ::= UNION ALL",
 /* 161 */ "multiselect_op ::= EXCEPT",
 /* 162 */ "multiselect_op ::= INTERSECT",
 /* 163 */ "distinct ::= DISTINCT",
 /* 164 */ "distinct ::= ALL",
 /* 165 */ "distinct ::=",
 /* 166 */ "sclp ::= selcollist COMMA",
 /* 167 */ "sclp ::=",
 /* 168 */ "selcollist ::= sclp expr as",
 /* 169 */ "selcollist ::= sclp STAR",
 /* 170 */ "selcollist ::= sclp tnm DOT STAR",
 /* 171 */ "selcollist ::= sclp",
 /* 172 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 173 */ "as ::= AS nm",
 /* 174 */ "as ::= ids",
 /* 175 */ "as ::= AS ID_ALIAS",
 /* 176 */ "as ::= ID_ALIAS",
 /* 177 */ "as ::=",
 /* 178 */ "from ::=",
 /* 179 */ "from ::= FROM joinsrc",
 /* 180 */ "joinsrc ::= singlesrc seltablist",
 /* 181 */ "joinsrc ::=",
 /* 182 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 183 */ "seltablist ::=",
 /* 184 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 185 */ "singlesrc ::= LP select RP as",
 /* 186 */ "singlesrc ::= LP joinsrc RP as",
 /* 187 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 188 */ "singlesrc ::=",
 /* 189 */ "singlesrc ::= nm DOT",
 /* 190 */ "singlesrc ::= nm DOT ID_TAB",
 /* 191 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 192 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 193 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 194 */ "joinconstr_opt ::= ON expr",
 /* 195 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 196 */ "joinconstr_opt ::=",
 /* 197 */ "dbnm ::=",
 /* 198 */ "dbnm ::= DOT nm",
 /* 199 */ "fullname ::= nm dbnm",
 /* 200 */ "joinop ::= COMMA",
 /* 201 */ "joinop ::= JOIN",
 /* 202 */ "joinop ::= JOIN_KW JOIN",
 /* 203 */ "joinop ::= JOIN_KW nm JOIN",
 /* 204 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 205 */ "joinop ::= ID_JOIN_OPTS",
 /* 206 */ "indexed_opt ::=",
 /* 207 */ "indexed_opt ::= INDEXED BY nm",
 /* 208 */ "indexed_opt ::= NOT INDEXED",
 /* 209 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 210 */ "orderby_opt ::=",
 /* 211 */ "orderby_opt ::= ORDER BY sortlist",
 /* 212 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 213 */ "sortlist ::= expr sortorder nulls",
 /* 214 */ "sortorder ::= ASC",
 /* 215 */ "sortorder ::= DESC",
 /* 216 */ "sortorder ::=",
 /* 217 */ "nulls ::= NULLS FIRST",
 /* 218 */ "nulls ::= NULLS LAST",
 /* 219 */ "nulls ::=",
 /* 220 */ "groupby_opt ::=",
 /* 221 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 222 */ "groupby_opt ::= GROUP BY",
 /* 223 */ "having_opt ::=",
 /* 224 */ "having_opt ::= HAVING expr",
 /* 225 */ "limit_opt ::=",
 /* 226 */ "limit_opt ::= LIMIT expr",
 /* 227 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 228 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 229 */ "cmd ::= delete_stmt",
 /* 230 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning",
 /* 231 */ "delete_stmt ::= with DELETE FROM",
 /* 232 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 233 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 234 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 235 */ "where_opt ::=",
 /* 236 */ "where_opt ::= WHERE expr",
 /* 237 */ "where_opt ::= WHERE",
 /* 238 */ "returning ::=",
 /* 239 */ "returning ::= RETURNING selcollist",
 /* 240 */ "cmd ::= update_stmt",
 /* 241 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning",
 /* 242 */ "update_stmt ::= with UPDATE orconf",
 /* 243 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 244 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 245 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 246 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 247 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 248 */ "setlist ::= nm EQ expr",
 /* 249 */ "setlist ::= LP idlist RP EQ expr",
 /* 250 */ "setlist ::=",
 /* 251 */ "setlist ::= setlist COMMA",
 /* 252 */ "setlist ::= setlist COMMA ID_COL",
 /* 253 */ "setlist ::= ID_COL",
 /* 254 */ "idlist_opt ::=",
 /* 255 */ "idlist_opt ::= LP idlist RP",
 /* 256 */ "idlist ::= idlist COMMA nm",
 /* 257 */ "idlist ::= nm",
 /* 258 */ "idlist ::=",
 /* 259 */ "idlist ::= idlist COMMA ID_COL",
 /* 260 */ "idlist ::= ID_COL",
 /* 261 */ "cmd ::= insert_stmt",
 /* 262 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning",
 /* 263 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning",
 /* 264 */ "insert_stmt ::= with insert_cmd INTO",
 /* 265 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 266 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 267 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 268 */ "insert_cmd ::= INSERT orconf",
 /* 269 */ "insert_cmd ::= REPLACE",
 /* 270 */ "upsert ::=",
 /* 271 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 272 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 273 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 274 */ "exprx ::= expr not_opt IN ID_DB",
 /* 275 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 276 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 277 */ "exprx ::= tnm DOT ID_TAB|ID_COL",
 /* 278 */ "exprx ::= tnm DOT nm DOT ID_COL",
 /* 279 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 280 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 281 */ "exprx ::= CTIME_KW",
 /* 282 */ "exprx ::= LP nexprlist RP",
 /* 283 */ "exprx ::= tnm",
 /* 284 */ "exprx ::= tnm DOT nm",
 /* 285 */ "exprx ::= tnm DOT nm DOT nm",
 /* 286 */ "exprx ::= VARIABLE",
 /* 287 */ "exprx ::= expr COLLATE ids",
 /* 288 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 289 */ "exprx ::= ID LP distinct exprlist RP",
 /* 290 */ "exprx ::= ID LP STAR RP",
 /* 291 */ "exprx ::= expr AND expr",
 /* 292 */ "exprx ::= expr OR expr",
 /* 293 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 294 */ "exprx ::= expr EQ|NE expr",
 /* 295 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 296 */ "exprx ::= expr PLUS|MINUS expr",
 /* 297 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 298 */ "exprx ::= expr CONCAT expr",
 /* 299 */ "exprx ::= expr not_opt likeop expr",
 /* 300 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 301 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 302 */ "exprx ::= expr NOT NULL",
 /* 303 */ "exprx ::= expr IS not_opt expr",
 /* 304 */ "exprx ::= NOT expr",
 /* 305 */ "exprx ::= BITNOT expr",
 /* 306 */ "exprx ::= MINUS expr",
 /* 307 */ "exprx ::= PLUS expr",
 /* 308 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 309 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 310 */ "exprx ::= LP select RP",
 /* 311 */ "exprx ::= expr not_opt IN LP select RP",
 /* 312 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 313 */ "exprx ::= EXISTS LP select RP",
 /* 314 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 315 */ "exprx ::= RAISE LP IGNORE RP",
 /* 316 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 317 */ "exprx ::= ID LP distinct exprlist RP filter_over",
 /* 318 */ "exprx ::= ID LP STAR RP filter_over",
 /* 319 */ "expr ::=",
 /* 320 */ "expr ::= exprx",
 /* 321 */ "not_opt ::=",
 /* 322 */ "not_opt ::= NOT",
 /* 323 */ "likeop ::= LIKE_KW|MATCH",
 /* 324 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 325 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 326 */ "case_else ::= ELSE expr",
 /* 327 */ "case_else ::=",
 /* 328 */ "case_operand ::= exprx",
 /* 329 */ "case_operand ::=",
 /* 330 */ "exprlist ::= nexprlist",
 /* 331 */ "exprlist ::=",
 /* 332 */ "nexprlist ::= nexprlist COMMA expr",
 /* 333 */ "nexprlist ::= exprx",
 /* 334 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 335 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 336 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 337 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 338 */ "uniqueflag ::= UNIQUE",
 /* 339 */ "uniqueflag ::=",
 /* 340 */ "idxlist_opt ::=",
 /* 341 */ "idxlist_opt ::= LP idxlist RP",
 /* 342 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 343 */ "idxlist ::= idxlist_single",
 /* 344 */ "idxlist_single ::= nm collate sortorder",
 /* 345 */ "idxlist_single ::= ID_COL",
 /* 346 */ "collate ::=",
 /* 347 */ "collate ::= COLLATE ids",
 /* 348 */ "collate ::= COLLATE ID_COLLATE",
 /* 349 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 350 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 351 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 352 */ "cmd ::= VACUUM vinto",
 /* 353 */ "cmd ::= VACUUM nm vinto",
 /* 354 */ "vinto ::= INTO expr",
 /* 355 */ "vinto ::=",
 /* 356 */ "cmd ::= PRAGMA nm dbnm",
 /* 357 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 358 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 359 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 360 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 361 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 362 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 363 */ "nmnum ::= plus_num",
 /* 364 */ "nmnum ::= nm",
 /* 365 */ "nmnum ::= ON",
 /* 366 */ "nmnum ::= DELETE",
 /* 367 */ "nmnum ::= DEFAULT",
 /* 368 */ "plus_num ::= PLUS number",
 /* 369 */ "plus_num ::= number",
 /* 370 */ "minus_num ::= MINUS number",
 /* 371 */ "number ::= INTEGER",
 /* 372 */ "number ::= FLOAT",
 /* 373 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 374 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 375 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 376 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 377 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 378 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 379 */ "trigger_time ::= BEFORE",
 /* 380 */ "trigger_time ::= AFTER",
 /* 381 */ "trigger_time ::= INSTEAD OF",
 /* 382 */ "trigger_time ::=",
 /* 383 */ "trigger_event ::= DELETE",
 /* 384 */ "trigger_event ::= INSERT",
 /* 385 */ "trigger_event ::= UPDATE",
 /* 386 */ "trigger_event ::= UPDATE OF idlist",
 /* 387 */ "foreach_clause ::=",
 /* 388 */ "foreach_clause ::= FOR EACH ROW",
 /* 389 */ "when_clause ::=",
 /* 390 */ "when_clause ::= WHEN expr",
 /* 391 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 392 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 393 */ "trigger_cmd_list ::= SEMI",
 /* 394 */ "trigger_cmd ::= update_stmt",
 /* 395 */ "trigger_cmd ::= insert_stmt",
 /* 396 */ "trigger_cmd ::= delete_stmt",
 /* 397 */ "trigger_cmd ::= select_stmt",
 /* 398 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 399 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 400 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 401 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 402 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 403 */ "cmd ::= DETACH database_kw_opt expr",
 /* 404 */ "key_opt ::=",
 /* 405 */ "key_opt ::= KEY expr",
 /* 406 */ "database_kw_opt ::= DATABASE",
 /* 407 */ "database_kw_opt ::=",
 /* 408 */ "cmd ::= REINDEX",
 /* 409 */ "cmd ::= REINDEX nm dbnm",
 /* 410 */ "cmd ::= REINDEX ID_COLLATE",
 /* 411 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 412 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 413 */ "cmd ::= ANALYZE",
 /* 414 */ "cmd ::= ANALYZE nm dbnm",
 /* 415 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 416 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 417 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 418 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 419 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
 /* 420 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 421 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 422 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 423 */ "kwcolumn_opt ::=",
 /* 424 */ "kwcolumn_opt ::= COLUMNKW",
 /* 425 */ "cmd ::= create_vtab",
 /* 426 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 427 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 428 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 429 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 430 */ "vtabarglist ::= vtabarg",
 /* 431 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 432 */ "vtabarg ::=",
 /* 433 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 434 */ "vtabargtoken ::= ANY",
 /* 435 */ "vtabargtoken ::= LP anylist RP",
 /* 436 */ "anylist ::=",
 /* 437 */ "anylist ::= anylist LP anylist RP",
 /* 438 */ "anylist ::= anylist ANY",
 /* 439 */ "with ::=",
 /* 440 */ "with ::= WITH wqlist",
 /* 441 */ "with ::= WITH RECURSIVE wqlist",
 /* 442 */ "wqas ::= AS",
 /* 443 */ "wqas ::= AS MATERIALIZED",
 /* 444 */ "wqas ::= AS NOT MATERIALIZED",
 /* 445 */ "wqlist ::= wqcte",
 /* 446 */ "wqlist ::= wqlist COMMA wqcte",
 /* 447 */ "wqlist ::= ID_TAB_NEW",
 /* 448 */ "wqcte ::= nm idxlist_opt wqas LP select RP",
 /* 449 */ "windowdefn_list ::= windowdefn",
 /* 450 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 451 */ "windowdefn ::= nm AS LP window RP",
 /* 452 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 453 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 454 */ "window ::= ORDER BY sortlist frame_opt",
 /* 455 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 456 */ "window ::= frame_opt",
 /* 457 */ "window ::= nm frame_opt",
 /* 458 */ "frame_opt ::=",
 /* 459 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 460 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 461 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 462 */ "frame_bound_s ::= frame_bound",
 /* 463 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 464 */ "frame_bound_e ::= frame_bound",
 /* 465 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 466 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 467 */ "frame_bound ::= CURRENT ROW",
 /* 468 */ "frame_exclude_opt ::=",
 /* 469 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 470 */ "frame_exclude ::= NO OTHERS",
 /* 471 */ "frame_exclude ::= CURRENT ROW",
 /* 472 */ "frame_exclude ::= GROUP",
 /* 473 */ "frame_exclude ::= TIES",
 /* 474 */ "window_clause ::= WINDOW windowdefn_list",
 /* 475 */ "filter_over ::= filter_clause over_clause",
 /* 476 */ "filter_over ::= over_clause",
 /* 477 */ "filter_over ::= filter_clause",
 /* 478 */ "over_clause ::= OVER LP window RP",
 /* 479 */ "over_clause ::= OVER nm",
 /* 480 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 193: /* cmd */
    case 196: /* ecmd */
    case 198: /* cmdx */
    case 246: /* select_stmt */
    case 275: /* delete_stmt */
    case 277: /* update_stmt */
    case 280: /* insert_stmt */
    case 301: /* trigger_cmd */
    case 305: /* create_vtab */
{
parser_safe_delete((yypminor->yy113));
}
      break;
    case 197: /* explain */
{
parser_safe_delete((yypminor->yy11));
}
      break;
    case 199: /* transtype */
    case 200: /* trans_opt */
{
parser_safe_delete((yypminor->yy524));
}
      break;
    case 201: /* nm */
    case 212: /* columnid */
    case 215: /* id */
    case 216: /* id_opt */
    case 217: /* ids */
    case 219: /* typename */
    case 270: /* dbnm */
    case 292: /* collate */
    case 307: /* vtabarg */
    case 308: /* vtabargtoken */
    case 309: /* anylist */
{
parser_safe_delete((yypminor->yy79));
}
      break;
    case 202: /* savepoint_opt */
    case 204: /* ifnotexists */
    case 228: /* autoinc */
    case 232: /* gen_always */
    case 238: /* tconscomma */
    case 245: /* ifexists */
    case 284: /* not_opt */
    case 290: /* uniqueflag */
    case 302: /* database_kw_opt */
    case 304: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy601));
}
      break;
    case 203: /* temp */
    case 252: /* distinct */
{
parser_safe_delete((yypminor->yy166));
}
      break;
    case 205: /* fullname */
{
parser_safe_delete((yypminor->yy450));
}
      break;
    case 206: /* columnlist */
{
parser_safe_delete((yypminor->yy552));
}
      break;
    case 207: /* conslist_opt */
    case 237: /* conslist */
{
parser_safe_delete((yypminor->yy43));
}
      break;
    case 208: /* table_options */
{
parser_safe_delete((yypminor->yy193));
}
      break;
    case 209: /* select */
    case 248: /* selectnowith */
{
parser_safe_delete((yypminor->yy313));
}
      break;
    case 210: /* table_option */
{
parser_safe_delete((yypminor->yy77));
}
      break;
    case 211: /* column */
{
parser_safe_delete((yypminor->yy437));
}
      break;
    case 213: /* type */
    case 218: /* typetoken */
{
parser_safe_delete((yypminor->yy438));
}
      break;
    case 214: /* carglist */
{
parser_safe_delete((yypminor->yy141));
}
      break;
    case 220: /* signed */
    case 221: /* plus_num */
    case 222: /* minus_num */
    case 224: /* term */
    case 294: /* nmnum */
    case 295: /* number */
{
parser_safe_delete((yypminor->yy419));
}
      break;
    case 223: /* ccons */
{
parser_safe_delete((yypminor->yy44));
}
      break;
    case 225: /* expr */
    case 255: /* where_opt */
    case 257: /* having_opt */
    case 283: /* exprx */
    case 286: /* case_operand */
    case 288: /* case_else */
    case 293: /* vinto */
    case 299: /* when_clause */
    case 303: /* key_opt */
{
parser_safe_delete((yypminor->yy302));
}
      break;
    case 226: /* onconf */
    case 242: /* resolvetype */
    case 243: /* orconf */
{
parser_safe_delete((yypminor->yy588));
}
      break;
    case 227: /* sortorder */
{
parser_safe_delete((yypminor->yy339));
}
      break;
    case 229: /* idxlist_opt */
    case 240: /* idxlist */
{
parser_safe_delete((yypminor->yy223));
}
      break;
    case 230: /* refargs */
{
parser_safe_delete((yypminor->yy464));
}
      break;
    case 231: /* defer_subclause */
    case 241: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy329));
}
      break;
    case 233: /* tnm */
{
parser_safe_delete((yypminor->yy280));
}
      break;
    case 234: /* refarg */
{
parser_safe_delete((yypminor->yy197));
}
      break;
    case 235: /* refact */
{
parser_safe_delete((yypminor->yy244));
}
      break;
    case 236: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy192));
}
      break;
    case 239: /* tcons */
{
parser_safe_delete((yypminor->yy76));
}
      break;
    case 247: /* with */
{
parser_safe_delete((yypminor->yy611));
}
      break;
    case 249: /* oneselect */
{
parser_safe_delete((yypminor->yy281));
}
      break;
    case 250: /* multiselect_op */
{
parser_safe_delete((yypminor->yy282));
}
      break;
    case 251: /* values */
{
parser_safe_delete((yypminor->yy446));
}
      break;
    case 253: /* selcollist */
    case 263: /* sclp */
    case 276: /* returning */
{
parser_safe_delete((yypminor->yy253));
}
      break;
    case 254: /* from */
    case 265: /* joinsrc */
{
parser_safe_delete((yypminor->yy283));
}
      break;
    case 256: /* groupby_opt */
    case 261: /* nexprlist */
    case 262: /* exprlist */
    case 287: /* case_exprlist */
{
parser_safe_delete((yypminor->yy161));
}
      break;
    case 258: /* orderby_opt */
    case 273: /* sortlist */
{
parser_safe_delete((yypminor->yy563));
}
      break;
    case 259: /* limit_opt */
{
parser_safe_delete((yypminor->yy245));
}
      break;
    case 260: /* window_clause */
    case 313: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy649));
}
      break;
    case 264: /* as */
{
parser_safe_delete((yypminor->yy130));
}
      break;
    case 266: /* singlesrc */
{
parser_safe_delete((yypminor->yy511));
}
      break;
    case 267: /* seltablist */
{
parser_safe_delete((yypminor->yy261));
}
      break;
    case 268: /* joinop */
{
parser_safe_delete((yypminor->yy551));
}
      break;
    case 269: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy645));
}
      break;
    case 271: /* indexed_opt */
{
parser_safe_delete((yypminor->yy232));
}
      break;
    case 272: /* idlist */
    case 279: /* idlist_opt */
    case 306: /* vtabarglist */
{
parser_safe_delete((yypminor->yy75));
}
      break;
    case 274: /* nulls */
{
parser_safe_delete((yypminor->yy650));
}
      break;
    case 278: /* setlist */
{
parser_safe_delete((yypminor->yy451));
}
      break;
    case 281: /* insert_cmd */
{
parser_safe_delete((yypminor->yy354));
}
      break;
    case 282: /* upsert */
{
parser_safe_delete((yypminor->yy340));
}
      break;
    case 285: /* likeop */
{
parser_safe_delete((yypminor->yy230));
}
      break;
    case 289: /* filter_over */
{
parser_safe_delete((yypminor->yy267));
}
      break;
    case 291: /* idxlist_single */
{
parser_safe_delete((yypminor->yy608));
}
      break;
    case 296: /* trigger_time */
{
parser_safe_delete((yypminor->yy202));
}
      break;
    case 297: /* trigger_event */
{
parser_safe_delete((yypminor->yy341));
}
      break;
    case 298: /* foreach_clause */
{
parser_safe_delete((yypminor->yy53));
}
      break;
    case 300: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy320));
}
      break;
    case 310: /* wqlist */
{
parser_safe_delete((yypminor->yy472));
}
      break;
    case 311: /* wqas */
{
parser_safe_delete((yypminor->yy539));
}
      break;
    case 312: /* wqcte */
{
parser_safe_delete((yypminor->yy106));
}
      break;
    case 314: /* windowdefn */
{
parser_safe_delete((yypminor->yy246));
}
      break;
    case 315: /* window */
{
parser_safe_delete((yypminor->yy534));
}
      break;
    case 316: /* frame_opt */
{
parser_safe_delete((yypminor->yy621));
}
      break;
    case 317: /* range_or_rows */
{
parser_safe_delete((yypminor->yy618));
}
      break;
    case 318: /* frame_bound_s */
    case 320: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy221));
}
      break;
    case 321: /* frame_bound */
{
parser_safe_delete((yypminor->yy221));parser_safe_delete((yypminor->yy221));parser_safe_delete((yypminor->yy221));
}
      break;
    case 323: /* filter_clause */
{
parser_safe_delete((yypminor->yy447));
}
      break;
    case 324: /* over_clause */
{
parser_safe_delete((yypminor->yy57));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   UNUSED(yypMinor);
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 194, 1 },
  { 195, 2 },
  { 195, 1 },
  { 196, 1 },
  { 196, 3 },
  { 197, 0 },
  { 197, 1 },
  { 197, 3 },
  { 198, 1 },
  { 193, 3 },
  { 200, 0 },
  { 200, 1 },
  { 200, 2 },
  { 200, 2 },
  { 199, 0 },
  { 199, 1 },
  { 199, 1 },
  { 199, 1 },
  { 193, 2 },
  { 193, 2 },
  { 193, 2 },
  { 202, 1 },
  { 202, 0 },
  { 193, 2 },
  { 193, 3 },
  { 193, 5 },
  { 193, 2 },
  { 193, 3 },
  { 193, 5 },
  { 193, 10 },
  { 193, 7 },
  { 193, 7 },
  { 193, 5 },
  { 208, 0 },
  { 208, 1 },
  { 208, 3 },
  { 210, 2 },
  { 210, 1 },
  { 210, 2 },
  { 204, 0 },
  { 204, 3 },
  { 203, 1 },
  { 203, 0 },
  { 206, 3 },
  { 206, 1 },
  { 211, 3 },
  { 212, 1 },
  { 212, 1 },
  { 215, 1 },
  { 216, 1 },
  { 216, 0 },
  { 217, 1 },
  { 201, 1 },
  { 201, 1 },
  { 201, 1 },
  { 213, 0 },
  { 213, 1 },
  { 218, 1 },
  { 218, 4 },
  { 218, 6 },
  { 219, 1 },
  { 219, 2 },
  { 219, 1 },
  { 220, 1 },
  { 220, 1 },
  { 214, 2 },
  { 214, 0 },
  { 223, 2 },
  { 223, 2 },
  { 223, 4 },
  { 223, 3 },
  { 223, 3 },
  { 223, 2 },
  { 223, 2 },
  { 223, 2 },
  { 223, 3 },
  { 223, 5 },
  { 223, 2 },
  { 223, 4 },
  { 223, 4 },
  { 223, 1 },
  { 223, 2 },
  { 223, 6 },
  { 223, 2 },
  { 223, 2 },
  { 223, 2 },
  { 223, 3 },
  { 224, 1 },
  { 224, 1 },
  { 224, 1 },
  { 224, 1 },
  { 233, 1 },
  { 233, 1 },
  { 232, 2 },
  { 232, 0 },
  { 228, 0 },
  { 228, 1 },
  { 230, 0 },
  { 230, 2 },
  { 234, 2 },
  { 234, 3 },
  { 234, 3 },
  { 234, 3 },
  { 234, 2 },
  { 235, 2 },
  { 235, 2 },
  { 235, 1 },
  { 235, 1 },
  { 235, 2 },
  { 231, 3 },
  { 231, 2 },
  { 236, 0 },
  { 236, 2 },
  { 236, 2 },
  { 207, 0 },
  { 207, 2 },
  { 237, 3 },
  { 237, 1 },
  { 238, 1 },
  { 238, 0 },
  { 239, 2 },
  { 239, 7 },
  { 239, 5 },
  { 239, 5 },
  { 239, 10 },
  { 239, 2 },
  { 239, 7 },
  { 239, 4 },
  { 241, 0 },
  { 241, 1 },
  { 226, 0 },
  { 226, 3 },
  { 243, 0 },
  { 243, 2 },
  { 242, 1 },
  { 242, 1 },
  { 242, 1 },
  { 193, 4 },
  { 193, 6 },
  { 193, 4 },
  { 245, 2 },
  { 245, 0 },
  { 193, 8 },
  { 193, 7 },
  { 193, 5 },
  { 193, 4 },
  { 193, 6 },
  { 193, 4 },
  { 193, 1 },
  { 246, 1 },
  { 209, 2 },
  { 248, 1 },
  { 248, 3 },
  { 248, 1 },
  { 248, 3 },
  { 249, 9 },
  { 249, 10 },
  { 251, 4 },
  { 251, 5 },
  { 250, 1 },
  { 250, 2 },
  { 250, 1 },
  { 250, 1 },
  { 252, 1 },
  { 252, 1 },
  { 252, 0 },
  { 263, 2 },
  { 263, 0 },
  { 253, 3 },
  { 253, 2 },
  { 253, 4 },
  { 253, 1 },
  { 253, 4 },
  { 264, 2 },
  { 264, 1 },
  { 264, 2 },
  { 264, 1 },
  { 264, 0 },
  { 254, 0 },
  { 254, 2 },
  { 265, 2 },
  { 265, 0 },
  { 267, 4 },
  { 267, 0 },
  { 266, 4 },
  { 266, 4 },
  { 266, 4 },
  { 266, 6 },
  { 266, 0 },
  { 266, 2 },
  { 266, 3 },
  { 266, 1 },
  { 266, 3 },
  { 266, 1 },
  { 269, 2 },
  { 269, 4 },
  { 269, 0 },
  { 270, 0 },
  { 270, 2 },
  { 205, 2 },
  { 268, 1 },
  { 268, 1 },
  { 268, 2 },
  { 268, 3 },
  { 268, 4 },
  { 268, 1 },
  { 271, 0 },
  { 271, 3 },
  { 271, 2 },
  { 271, 3 },
  { 258, 0 },
  { 258, 3 },
  { 273, 5 },
  { 273, 3 },
  { 227, 1 },
  { 227, 1 },
  { 227, 0 },
  { 274, 2 },
  { 274, 2 },
  { 274, 0 },
  { 256, 0 },
  { 256, 3 },
  { 256, 2 },
  { 257, 0 },
  { 257, 2 },
  { 259, 0 },
  { 259, 2 },
  { 259, 4 },
  { 259, 4 },
  { 193, 1 },
  { 275, 7 },
  { 275, 3 },
  { 275, 5 },
  { 275, 6 },
  { 275, 4 },
  { 255, 0 },
  { 255, 2 },
  { 255, 1 },
  { 276, 0 },
  { 276, 2 },
  { 193, 1 },
  { 277, 10 },
  { 277, 3 },
  { 277, 5 },
  { 277, 6 },
  { 277, 4 },
  { 278, 5 },
  { 278, 7 },
  { 278, 3 },
  { 278, 5 },
  { 278, 0 },
  { 278, 2 },
  { 278, 3 },
  { 278, 1 },
  { 279, 0 },
  { 279, 3 },
  { 272, 3 },
  { 272, 1 },
  { 272, 0 },
  { 272, 3 },
  { 272, 1 },
  { 193, 1 },
  { 280, 8 },
  { 280, 8 },
  { 280, 3 },
  { 280, 5 },
  { 280, 4 },
  { 280, 6 },
  { 281, 2 },
  { 281, 1 },
  { 282, 0 },
  { 282, 11 },
  { 282, 8 },
  { 282, 4 },
  { 283, 4 },
  { 283, 6 },
  { 283, 1 },
  { 283, 3 },
  { 283, 5 },
  { 283, 3 },
  { 283, 6 },
  { 283, 1 },
  { 283, 3 },
  { 283, 1 },
  { 283, 3 },
  { 283, 5 },
  { 283, 1 },
  { 283, 3 },
  { 283, 6 },
  { 283, 5 },
  { 283, 4 },
  { 283, 3 },
  { 283, 3 },
  { 283, 3 },
  { 283, 3 },
  { 283, 3 },
  { 283, 3 },
  { 283, 3 },
  { 283, 3 },
  { 283, 4 },
  { 283, 6 },
  { 283, 2 },
  { 283, 3 },
  { 283, 4 },
  { 283, 2 },
  { 283, 2 },
  { 283, 2 },
  { 283, 2 },
  { 283, 6 },
  { 283, 6 },
  { 283, 3 },
  { 283, 6 },
  { 283, 5 },
  { 283, 4 },
  { 283, 5 },
  { 283, 4 },
  { 283, 6 },
  { 283, 6 },
  { 283, 5 },
  { 225, 0 },
  { 225, 1 },
  { 284, 0 },
  { 284, 1 },
  { 285, 1 },
  { 287, 5 },
  { 287, 4 },
  { 288, 2 },
  { 288, 0 },
  { 286, 1 },
  { 286, 0 },
  { 262, 1 },
  { 262, 0 },
  { 261, 3 },
  { 261, 1 },
  { 193, 12 },
  { 193, 8 },
  { 193, 7 },
  { 193, 5 },
  { 290, 1 },
  { 290, 0 },
  { 229, 0 },
  { 229, 3 },
  { 240, 3 },
  { 240, 1 },
  { 291, 3 },
  { 291, 1 },
  { 292, 0 },
  { 292, 2 },
  { 292, 2 },
  { 193, 4 },
  { 193, 6 },
  { 193, 4 },
  { 193, 2 },
  { 193, 3 },
  { 293, 2 },
  { 293, 0 },
  { 193, 3 },
  { 193, 5 },
  { 193, 6 },
  { 193, 5 },
  { 193, 6 },
  { 193, 4 },
  { 193, 2 },
  { 294, 1 },
  { 294, 1 },
  { 294, 1 },
  { 294, 1 },
  { 294, 1 },
  { 221, 2 },
  { 221, 1 },
  { 222, 2 },
  { 295, 1 },
  { 295, 1 },
  { 193, 15 },
  { 193, 12 },
  { 193, 14 },
  { 193, 10 },
  { 193, 7 },
  { 193, 5 },
  { 296, 1 },
  { 296, 1 },
  { 296, 2 },
  { 296, 0 },
  { 297, 1 },
  { 297, 1 },
  { 297, 1 },
  { 297, 3 },
  { 298, 0 },
  { 298, 3 },
  { 299, 0 },
  { 299, 2 },
  { 300, 3 },
  { 300, 2 },
  { 300, 1 },
  { 301, 1 },
  { 301, 1 },
  { 301, 1 },
  { 301, 1 },
  { 244, 1 },
  { 193, 4 },
  { 193, 6 },
  { 193, 4 },
  { 193, 6 },
  { 193, 3 },
  { 303, 0 },
  { 303, 2 },
  { 302, 1 },
  { 302, 0 },
  { 193, 1 },
  { 193, 3 },
  { 193, 2 },
  { 193, 4 },
  { 193, 2 },
  { 193, 1 },
  { 193, 3 },
  { 193, 4 },
  { 193, 2 },
  { 193, 6 },
  { 193, 6 },
  { 193, 6 },
  { 193, 6 },
  { 193, 5 },
  { 193, 3 },
  { 304, 0 },
  { 304, 1 },
  { 193, 1 },
  { 305, 8 },
  { 305, 11 },
  { 305, 7 },
  { 305, 5 },
  { 306, 1 },
  { 306, 3 },
  { 307, 0 },
  { 307, 2 },
  { 308, 1 },
  { 308, 3 },
  { 309, 0 },
  { 309, 4 },
  { 309, 2 },
  { 247, 0 },
  { 247, 2 },
  { 247, 3 },
  { 311, 1 },
  { 311, 2 },
  { 311, 3 },
  { 310, 1 },
  { 310, 3 },
  { 310, 1 },
  { 312, 6 },
  { 313, 1 },
  { 313, 3 },
  { 314, 5 },
  { 315, 5 },
  { 315, 6 },
  { 315, 4 },
  { 315, 5 },
  { 315, 1 },
  { 315, 2 },
  { 316, 0 },
  { 316, 3 },
  { 316, 6 },
  { 317, 1 },
  { 318, 1 },
  { 318, 2 },
  { 320, 1 },
  { 320, 2 },
  { 321, 2 },
  { 321, 2 },
  { 319, 0 },
  { 319, 2 },
  { 322, 2 },
  { 322, 2 },
  { 322, 1 },
  { 322, 1 },
  { 260, 2 },
  { 289, 2 },
  { 289, 1 },
  { 289, 1 },
  { 324, 4 },
  { 324, 2 },
  { 323, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy113); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy113);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy113 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy113 = yymsp[-1].minor.yy113;
                                                yygotominor.yy113->explain = yymsp[-2].minor.yy11->explain;
                                                yygotominor.yy113->queryPlan = yymsp[-2].minor.yy11->queryPlan;
                                                delete yymsp[-2].minor.yy11;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy11 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy11 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy11 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 394: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==394);
      case 395: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==395);
      case 396: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==396);
      case 397: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==397);
      case 425: /* cmd ::= create_vtab */ yytestcase(yyruleno==425);
{yygotominor.yy113 = yymsp[0].minor.yy113;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy113 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy524->type,
                                                        yymsp[0].minor.yy524->transactionKw,
                                                        yymsp[0].minor.yy524->name
                                                    );
                                                delete yymsp[0].minor.yy524;
                                                delete yymsp[-1].minor.yy524;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy524 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->transactionKw = true;
                                                yygotominor.yy524->name = *(yymsp[0].minor.yy79);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy113 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy524->transactionKw,
                                                        yymsp[0].minor.yy524->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy524;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy113 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy524->transactionKw,
                                                        yymsp[0].minor.yy524->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy524;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy113 = new SqliteRollback(
                                                        yymsp[0].minor.yy524->transactionKw,
                                                        yymsp[0].minor.yy524->name
                                                    );
                                                delete yymsp[0].minor.yy524;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 40: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==40);
      case 93: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==93);
      case 96: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==96);
      case 118: /* tconscomma ::= COMMA */ yytestcase(yyruleno==118);
      case 140: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==140);
      case 322: /* not_opt ::= NOT */ yytestcase(yyruleno==322);
      case 338: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==338);
      case 406: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==406);
      case 423: /* kwcolumn_opt ::= */ yytestcase(yyruleno==423);
{yygotominor.yy601 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 39: /* ifnotexists ::= */ yytestcase(yyruleno==39);
      case 94: /* gen_always ::= */ yytestcase(yyruleno==94);
      case 95: /* autoinc ::= */ yytestcase(yyruleno==95);
      case 119: /* tconscomma ::= */ yytestcase(yyruleno==119);
      case 141: /* ifexists ::= */ yytestcase(yyruleno==141);
      case 321: /* not_opt ::= */ yytestcase(yyruleno==321);
      case 339: /* uniqueflag ::= */ yytestcase(yyruleno==339);
      case 407: /* database_kw_opt ::= */ yytestcase(yyruleno==407);
      case 424: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==424);
{yygotominor.yy601 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy113 = new SqliteSavepoint(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy113 = new SqliteRelease(*(yymsp[-1].minor.yy601), *(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy113 = new SqliteRollback(
                                                        yymsp[-3].minor.yy524->transactionKw,
                                                        *(yymsp[-1].minor.yy601),
                                                        *(yymsp[0].minor.yy79)
                                                    );
                                                delete yymsp[-1].minor.yy601;
                                                delete yymsp[-3].minor.yy524;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,202,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy113 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy601),
                                                        *(yymsp[-8].minor.yy166),
                                                        yymsp[-5].minor.yy450->name1,
                                                        yymsp[-5].minor.yy450->name2,
                                                        *(yymsp[-3].minor.yy552),
                                                        *(yymsp[-2].minor.yy43),
                                                        *(yymsp[0].minor.yy193)
                                                    );
                                                delete yymsp[-6].minor.yy601;
                                                delete yymsp[-8].minor.yy166;
                                                delete yymsp[-3].minor.yy552;
                                                delete yymsp[-2].minor.yy43;
                                                delete yymsp[-5].minor.yy450;
                                                delete yymsp[0].minor.yy193;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy113 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy601),
                                                        *(yymsp[-5].minor.yy166),
                                                        yymsp[-2].minor.yy450->name1,
                                                        yymsp[-2].minor.yy450->name2,
                                                        yymsp[0].minor.yy313
                                                    );
                                                delete yymsp[-3].minor.yy601;
                                                delete yymsp[-5].minor.yy166;
                                                delete yymsp[-2].minor.yy450;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 143: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==143);
      case 377: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==377);
{  yy_destructor(yypParser,203,&yymsp[-5].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 144: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==144);
      case 378: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==378);
{  yy_destructor(yypParser,203,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
{yygotominor.yy193 = new ParserCreateTableOptionList();}
        break;
      case 34: /* table_options ::= table_option */
{
                                                yygotominor.yy193 = new ParserCreateTableOptionList();
                                                yygotominor.yy193->append(yymsp[0].minor.yy77);
                                            }
        break;
      case 35: /* table_options ::= table_options COMMA table_option */
{
                                                yymsp[-2].minor.yy193->append(yymsp[0].minor.yy77);
                                                yygotominor.yy193 = yymsp[-2].minor.yy193;
                                                DONT_INHERIT_TOKENS("table_options");
                                            }
        break;
      case 36: /* table_option ::= WITHOUT nm */
{
                                                if (yymsp[0].minor.yy79->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy79)));

                                                yygotominor.yy77 = new ParserStubCreateTableOption(ParserStubCreateTableOption::WITHOUT_ROWID);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 37: /* table_option ::= nm */
      case 38: /* table_option ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==38);
{
                                                if (yymsp[0].minor.yy79->toLower() != "strict")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy79)));

                                                yygotominor.yy77 = new ParserStubCreateTableOption(ParserStubCreateTableOption::STRICT);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 41: /* temp ::= TEMP */
{yygotominor.yy166 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 42: /* temp ::= */
      case 165: /* distinct ::= */ yytestcase(yyruleno==165);
{yygotominor.yy166 = new int(0);}
        break;
      case 43: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy552->append(yymsp[0].minor.yy437);
                                                yygotominor.yy552 = yymsp[-2].minor.yy552;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 44: /* columnlist ::= column */
{
                                                yygotominor.yy552 = new ParserCreateTableColumnList();
                                                yygotominor.yy552->append(yymsp[0].minor.yy437);
                                            }
        break;
      case 45: /* column ::= columnid type carglist */
{
                                                yygotominor.yy437 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy79), yymsp[-1].minor.yy438, *(yymsp[0].minor.yy141));
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy141;
                                                objectForTokens = yygotominor.yy437;
                                            }
        break;
      case 46: /* columnid ::= nm */
      case 47: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==47);
      case 52: /* nm ::= id */ yytestcase(yyruleno==52);
      case 60: /* typename ::= ids */ yytestcase(yyruleno==60);
      case 198: /* dbnm ::= DOT nm */ yytestcase(yyruleno==198);
      case 347: /* collate ::= COLLATE ids */ yytestcase(yyruleno==347);
      case 348: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==348);
{yygotominor.yy79 = yymsp[0].minor.yy79;}
        break;
      case 48: /* id ::= ID */
{
                                                yygotominor.yy79 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 49: /* id_opt ::= id */
{
                                                yygotominor.yy79 = yymsp[0].minor.yy79;
                                            }
        break;
      case 50: /* id_opt ::= */
{
                                                yygotominor.yy79 = new QString();
                                            }
        break;
      case 51: /* ids ::= ID|STRING */
      case 54: /* nm ::= JOIN_KW */ yytestcase(yyruleno==54);
{yygotominor.yy79 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 53: /* nm ::= STRING */
{yygotominor.yy79 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 55: /* type ::= */
{yygotominor.yy438 = nullptr;}
        break;
      case 56: /* type ::= typetoken */
{yygotominor.yy438 = yymsp[0].minor.yy438;}
        break;
      case 57: /* typetoken ::= typename */
{
                                                yygotominor.yy438 = new SqliteColumnType(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy438;
                                            }
        break;
      case 58: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy438 = new SqliteColumnType(*(yymsp[-3].minor.yy79), *(yymsp[-1].minor.yy419));
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-1].minor.yy419;
                                                objectForTokens = yygotominor.yy438;
                                            }
        break;
      case 59: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy438 = new SqliteColumnType(*(yymsp[-5].minor.yy79), *(yymsp[-3].minor.yy419), *(yymsp[-1].minor.yy419));
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-3].minor.yy419;
                                                delete yymsp[-1].minor.yy419;
                                                objectForTokens = yygotominor.yy438;
                                            }
        break;
      case 61: /* typename ::= typename ids */
      case 62: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==62);
{
                                                yymsp[-1].minor.yy79->append(" " + *(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                yygotominor.yy79 = yymsp[-1].minor.yy79;
                                            }
        break;
      case 63: /* signed ::= plus_num */
      case 64: /* signed ::= minus_num */ yytestcase(yyruleno==64);
      case 363: /* nmnum ::= plus_num */ yytestcase(yyruleno==363);
      case 368: /* plus_num ::= PLUS number */ yytestcase(yyruleno==368);
      case 369: /* plus_num ::= number */ yytestcase(yyruleno==369);
{yygotominor.yy419 = yymsp[0].minor.yy419;}
        break;
      case 65: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy141->append(yymsp[0].minor.yy44);
                                                yygotominor.yy141 = yymsp[-1].minor.yy141;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 66: /* carglist ::= */
{yygotominor.yy141 = new ParserCreateTableColumnConstraintList();}
        break;
      case 67: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initDefNameOnly(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 68: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initDefTerm(*(yymsp[0].minor.yy419));
                                                delete yymsp[0].minor.yy419;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initDefExpr(yymsp[-1].minor.yy302);
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initDefTerm(*(yymsp[0].minor.yy419), false);
                                                delete yymsp[0].minor.yy419;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 71: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initDefTerm(*(yymsp[0].minor.yy419), true);
                                                delete yymsp[0].minor.yy419;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 72: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initDefId(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 73: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 74: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initNull(*(yymsp[0].minor.yy588));
                                                delete yymsp[0].minor.yy588;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 75: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initNotNull(*(yymsp[0].minor.yy588));
                                                delete yymsp[0].minor.yy588;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 76: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initPk(*(yymsp[-2].minor.yy339), *(yymsp[-1].minor.yy588), *(yymsp[0].minor.yy601));
                                                delete yymsp[-2].minor.yy339;
                                                delete yymsp[0].minor.yy601;
                                                delete yymsp[-1].minor.yy588;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 77: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initUnique(*(yymsp[0].minor.yy588));
                                                delete yymsp[0].minor.yy588;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 78: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initCheck(yymsp[-1].minor.yy302);
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 79: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initFk(*(yymsp[-2].minor.yy79), *(yymsp[-1].minor.yy223), *(yymsp[0].minor.yy464));
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy464;
                                                delete yymsp[-1].minor.yy223;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 80: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initDefer(yymsp[0].minor.yy329->initially, yymsp[0].minor.yy329->deferrable);
                                                delete yymsp[0].minor.yy329;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 81: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initColl(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy44;
                                            }
        break;
      case 82: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 83: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==83);
      case 84: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==84);
      case 85: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==85);
{
                                                if (!yymsp[0].minor.yy79->isNull() && yymsp[0].minor.yy79->toLower() != "stored" && yymsp[0].minor.yy79->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy79)));

                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy44->initGeneratedAs(yymsp[-2].minor.yy302, *(yymsp[-5].minor.yy601), *(yymsp[0].minor.yy79));
												delete yymsp[-5].minor.yy601;
												delete yymsp[0].minor.yy79;
												objectForTokens = yygotominor.yy44;
											}
        break;
      case 86: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy44 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy44->initCheck();
                                                objectForTokens = yygotominor.yy44;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 87: /* term ::= NULL */
{yygotominor.yy419 = new QVariant();}
        break;
      case 88: /* term ::= INTEGER */
      case 371: /* number ::= INTEGER */ yytestcase(yyruleno==371);
{yygotominor.yy419 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 89: /* term ::= FLOAT */
      case 372: /* number ::= FLOAT */ yytestcase(yyruleno==372);
{yygotominor.yy419 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 90: /* term ::= STRING|BLOB */
{yygotominor.yy419 = new QVariant(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 91: /* tnm ::= term */
{
												yygotominor.yy280 = new ParserTermOrLiteral(*(yymsp[0].minor.yy419));
												delete yymsp[0].minor.yy419;
											}
        break;
      case 92: /* tnm ::= nm */
{
												yygotominor.yy280 = new ParserTermOrLiteral(*(yymsp[0].minor.yy79));
												delete yymsp[0].minor.yy79;
											}
        break;
      case 97: /* refargs ::= */
{yygotominor.yy464 = new ParserFkConditionList();}
        break;
      case 98: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy464->append(yymsp[0].minor.yy197);
                                                yygotominor.yy464 = yymsp[-1].minor.yy464;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 99: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy197 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 100: /* refarg ::= ON INSERT refact */
{yygotominor.yy197 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy244)); delete yymsp[0].minor.yy244;}
        break;
      case 101: /* refarg ::= ON DELETE refact */
{yygotominor.yy197 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy244)); delete yymsp[0].minor.yy244;}
        break;
      case 102: /* refarg ::= ON UPDATE refact */
      case 103: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==103);
{yygotominor.yy197 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy244)); delete yymsp[0].minor.yy244;}
        break;
      case 104: /* refact ::= SET NULL */
{yygotominor.yy244 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 105: /* refact ::= SET DEFAULT */
{yygotominor.yy244 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 106: /* refact ::= CASCADE */
{yygotominor.yy244 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 107: /* refact ::= RESTRICT */
{yygotominor.yy244 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 108: /* refact ::= NO ACTION */
{yygotominor.yy244 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 109: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy192));
                                                delete yymsp[0].minor.yy192;
                                            }
        break;
      case 110: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy192));
                                                delete yymsp[0].minor.yy192;
                                            }
        break;
      case 111: /* init_deferred_pred_opt ::= */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 112: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 113: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 114: /* conslist_opt ::= */
{yygotominor.yy43 = new ParserCreateTableConstraintList();}
        break;
      case 115: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy43 = yymsp[0].minor.yy43;}
        break;
      case 116: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy76->afterComma = *(yymsp[-1].minor.yy601);
                                                yymsp[-2].minor.yy43->append(yymsp[0].minor.yy76);
                                                yygotominor.yy43 = yymsp[-2].minor.yy43;
                                                delete yymsp[-1].minor.yy601;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 117: /* conslist ::= tcons */
{
                                                yygotominor.yy43 = new ParserCreateTableConstraintList();
                                                yygotominor.yy43->append(yymsp[0].minor.yy76);
                                            }
        break;
      case 120: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy76 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy76->initNameOnly(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy76;
                                            }
        break;
      case 121: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy76 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy76->initPk(*(yymsp[-3].minor.yy223), *(yymsp[-2].minor.yy601), *(yymsp[0].minor.yy588));
                                                delete yymsp[-2].minor.yy601;
                                                delete yymsp[0].minor.yy588;
                                                delete yymsp[-3].minor.yy223;
                                                objectForTokens = yygotominor.yy76;
                                            }
        break;
      case 122: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy76 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy76->initUnique(*(yymsp[-2].minor.yy223), *(yymsp[0].minor.yy588));
                                                delete yymsp[0].minor.yy588;
                                                delete yymsp[-2].minor.yy223;
                                                objectForTokens = yygotominor.yy76;
                                            }
        break;
      case 123: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy76 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy76->initCheck(yymsp[-2].minor.yy302, *(yymsp[0].minor.yy588));
                                                objectForTokens = yygotominor.yy76;
                                            }
        break;
      case 124: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 125: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==125);
      case 126: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==126);
{
                                                yygotominor.yy76 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy76->initFk(
                                                    *(yymsp[-6].minor.yy223),
                                                    *(yymsp[-3].minor.yy79),
                                                    *(yymsp[-2].minor.yy223),
                                                    *(yymsp[-1].minor.yy464),
                                                    yymsp[0].minor.yy329->initially,
                                                    yymsp[0].minor.yy329->deferrable
                                                );
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-1].minor.yy464;
                                                delete yymsp[0].minor.yy329;
                                                delete yymsp[-2].minor.yy223;
                                                delete yymsp[-6].minor.yy223;
                                                objectForTokens = yygotominor.yy76;
                                            }
        break;
      case 127: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy76 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy76->initCheck();
                                                objectForTokens = yygotominor.yy76;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,226,&yymsp[0].minor);
}
        break;
      case 128: /* defer_subclause_opt ::= */
{yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 129: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy329 = yymsp[0].minor.yy329;}
        break;
      case 130: /* onconf ::= */
      case 132: /* orconf ::= */ yytestcase(yyruleno==132);
{yygotominor.yy588 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 131: /* onconf ::= ON CONFLICT resolvetype */
      case 133: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==133);
{yygotominor.yy588 = yymsp[0].minor.yy588;}
        break;
      case 134: /* resolvetype ::= raisetype */
      case 135: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==135);
      case 136: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==136);
{yygotominor.yy588 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 137: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy113 = new SqliteDropTable(*(yymsp[-1].minor.yy601), yymsp[0].minor.yy450->name1, yymsp[0].minor.yy450->name2);
                                                delete yymsp[-1].minor.yy601;
                                                delete yymsp[0].minor.yy450;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 138: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 139: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==139);
      case 146: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==146);
      case 147: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==147);
      case 190: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==190);
      case 191: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==191);
      case 192: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==192);
      case 193: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==193);
      case 336: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==336);
      case 337: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==337);
      case 350: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==350);
      case 351: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==351);
      case 361: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==361);
      case 362: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==362);
      case 400: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==400);
      case 401: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==401);
      case 411: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==411);
      case 412: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==412);
      case 415: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==415);
      case 416: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==416);
      case 421: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==421);
      case 422: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==422);
      case 428: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==428);
      case 429: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==429);
{  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 142: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy113 = new SqliteCreateView(*(yymsp[-6].minor.yy166), *(yymsp[-4].minor.yy601), yymsp[-3].minor.yy450->name1, yymsp[-3].minor.yy450->name2, yymsp[0].minor.yy313, *(yymsp[-2].minor.yy223));
                                                delete yymsp[-6].minor.yy166;
                                                delete yymsp[-4].minor.yy601;
                                                delete yymsp[-3].minor.yy450;
                                                delete yymsp[-2].minor.yy223;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 145: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy113 = new SqliteDropView(*(yymsp[-1].minor.yy601), yymsp[0].minor.yy450->name1, yymsp[0].minor.yy450->name2);
                                                delete yymsp[-1].minor.yy601;
                                                delete yymsp[0].minor.yy450;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 148: /* cmd ::= select_stmt */
      case 229: /* cmd ::= delete_stmt */ yytestcase(yyruleno==229);
      case 240: /* cmd ::= update_stmt */ yytestcase(yyruleno==240);
      case 261: /* cmd ::= insert_stmt */ yytestcase(yyruleno==261);
{
                                                yygotominor.yy113 = yymsp[0].minor.yy113;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 149: /* select_stmt ::= select */
{
                                                yygotominor.yy113 = yymsp[0].minor.yy313;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 150: /* select ::= with selectnowith */
{
                                                yygotominor.yy313 = yymsp[0].minor.yy313;
                                                yymsp[0].minor.yy313->setWith(yymsp[-1].minor.yy611);
                                                objectForTokens = yygotominor.yy313;
                                            }
        break;
      case 151: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy313 = SqliteSelect::append(yymsp[0].minor.yy281);
                                                objectForTokens = yygotominor.yy313;
                                            }
        break;
      case 152: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy313 = SqliteSelect::append(yymsp[-2].minor.yy313, *(yymsp[-1].minor.yy282), yymsp[0].minor.yy281);
                                                delete yymsp[-1].minor.yy282;
                                                objectForTokens = yygotominor.yy313;
                                            }
        break;
      case 153: /* selectnowith ::= values */
{
                                                yygotominor.yy313 = SqliteSelect::append(*(yymsp[0].minor.yy446));
                                                delete yymsp[0].minor.yy446;
                                                objectForTokens = yygotominor.yy313;
                                            }
        break;
      case 154: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy313 = SqliteSelect::append(yymsp[-2].minor.yy313, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy446));
                                                delete yymsp[0].minor.yy446;
                                                objectForTokens = yygotominor.yy313;
                                            }
        break;
      case 155: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy281 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy166),
                                                        *(yymsp[-6].minor.yy253),
                                                        yymsp[-5].minor.yy283,
                                                        yymsp[-4].minor.yy302,
                                                        *(yymsp[-3].minor.yy161),
                                                        yymsp[-2].minor.yy302,
                                                        *(yymsp[-1].minor.yy563),
                                                        yymsp[0].minor.yy245
                                                    );
                                                delete yymsp[-6].minor.yy253;
                                                delete yymsp[-7].minor.yy166;
                                                delete yymsp[-3].minor.yy161;
                                                delete yymsp[-1].minor.yy563;
                                                objectForTokens = yygotominor.yy281;
                                            }
        break;
      case 156: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy281 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy166),
                                                        *(yymsp[-7].minor.yy253),
                                                        yymsp[-6].minor.yy283,
                                                        yymsp[-5].minor.yy302,
                                                        *(yymsp[-4].minor.yy161),
                                                        yymsp[-3].minor.yy302,
														*(yymsp[-2].minor.yy649),
                                                        *(yymsp[-1].minor.yy563),
                                                        yymsp[0].minor.yy245
                                                    );
                                                delete yymsp[-7].minor.yy253;
                                                delete yymsp[-8].minor.yy166;
                                                delete yymsp[-4].minor.yy161;
                                                delete yymsp[-1].minor.yy563;
												delete yymsp[-2].minor.yy649;
                                                objectForTokens = yygotominor.yy281;
											}
        break;
      case 157: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy446 = new ParserExprNestedList();
                                                yygotominor.yy446->append(*(yymsp[-1].minor.yy161));
                                                delete yymsp[-1].minor.yy161;
                                            }
        break;
      case 158: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy446->append(*(yymsp[-1].minor.yy161));
                                                yygotominor.yy446 = yymsp[-4].minor.yy446;
                                                delete yymsp[-1].minor.yy161;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 159: /* multiselect_op ::= UNION */
{yygotominor.yy282 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 160: /* multiselect_op ::= UNION ALL */
{yygotominor.yy282 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 161: /* multiselect_op ::= EXCEPT */
{yygotominor.yy282 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 162: /* multiselect_op ::= INTERSECT */
{yygotominor.yy282 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 163: /* distinct ::= DISTINCT */
{yygotominor.yy166 = new int(1);}
        break;
      case 164: /* distinct ::= ALL */
{yygotominor.yy166 = new int(2);}
        break;
      case 166: /* sclp ::= selcollist COMMA */
{yygotominor.yy253 = yymsp[-1].minor.yy253;}
        break;
      case 167: /* sclp ::= */
      case 238: /* returning ::= */ yytestcase(yyruleno==238);
{yygotominor.yy253 = new ParserResultColumnList();}
        break;
      case 168: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy302,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->asKw : false,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->name : QString()
                                                    );

                                                yymsp[-2].minor.yy253->append(obj);
                                                yygotominor.yy253 = yymsp[-2].minor.yy253;
                                                delete yymsp[0].minor.yy130;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 169: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy253->append(obj);
                                                yygotominor.yy253 = yymsp[-1].minor.yy253;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 170: /* selcollist ::= sclp tnm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        yymsp[-2].minor.yy280->toName()
                                                    );
													
												if (!yymsp[-2].minor.yy280->isName())
													parserContext->errorAtToken("Syntax error <expected name, not literal value>", -3);
													
                                                yymsp[-3].minor.yy253->append(obj);
                                                yygotominor.yy253 = yymsp[-3].minor.yy253;
                                                delete yymsp[-2].minor.yy280;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 171: /* selcollist ::= sclp */
      case 172: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==172);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy253 = yymsp[0].minor.yy253;
                                            }
        break;
      case 173: /* as ::= AS nm */
{
                                                yygotominor.yy130 = new ParserStubAlias(*(yymsp[0].minor.yy79), true);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 174: /* as ::= ids */
      case 175: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==175);
      case 176: /* as ::= ID_ALIAS */ yytestcase(yyruleno==176);
{
                                                yygotominor.yy130 = new ParserStubAlias(*(yymsp[0].minor.yy79), false);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 177: /* as ::= */
{yygotominor.yy130 = nullptr;}
        break;
      case 178: /* from ::= */
{yygotominor.yy283 = nullptr;}
        break;
      case 179: /* from ::= FROM joinsrc */
{yygotominor.yy283 = yymsp[0].minor.yy283;}
        break;
      case 180: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy283 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy511,
                                                        *(yymsp[0].minor.yy261)
                                                    );
                                                delete yymsp[0].minor.yy261;
                                                objectForTokens = yygotominor.yy283;
                                            }
        break;
      case 181: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy283 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy283;
                                            }
        break;
      case 182: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy551, yymsp[-1].minor.yy511, yymsp[0].minor.yy645);

                                                yymsp[-3].minor.yy261->append(src);
                                                yygotominor.yy261 = yymsp[-3].minor.yy261;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 183: /* seltablist ::= */
{
                                                yygotominor.yy261 = new ParserOtherSourceList();
                                            }
        break;
      case 184: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy511 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy79),
                                                        *(yymsp[-2].minor.yy79),
                                                        yymsp[-1].minor.yy130 ? yymsp[-1].minor.yy130->asKw : false,
                                                        yymsp[-1].minor.yy130 ? yymsp[-1].minor.yy130->name : QString(),
                                                        yymsp[0].minor.yy232 ? yymsp[0].minor.yy232->notIndexedKw : false,
                                                        yymsp[0].minor.yy232 ? yymsp[0].minor.yy232->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[-1].minor.yy130;
                                                if (yymsp[0].minor.yy232)
                                                    delete yymsp[0].minor.yy232;
                                                objectForTokens = yygotominor.yy511;
                                            }
        break;
      case 185: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy511 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy313,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->asKw : false,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy130;
                                                objectForTokens = yygotominor.yy511;
                                            }
        break;
      case 186: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy511 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy283,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->asKw : false,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy130;
                                                objectForTokens = yygotominor.yy511;
                                            }
        break;
      case 187: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy511 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy79),
                                                        *(yymsp[-4].minor.yy79),
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->asKw : false,
                                                        yymsp[0].minor.yy130 ? yymsp[0].minor.yy130->name : QString(),
                                                        *(yymsp[-2].minor.yy161)
                                                    );
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[0].minor.yy130;
                                                if (yymsp[-2].minor.yy161)
                                                    delete yymsp[-2].minor.yy161;

                                                objectForTokens = yygotominor.yy511;
                                            }
        break;
      case 188: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy511 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy511;
                                            }
        break;
      case 189: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy511 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy511->database = *(yymsp[-1].minor.yy79);
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy511;
                                            }
        break;
      case 194: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy645 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy302);
                                                objectForTokens = yygotominor.yy645;
                                            }
        break;
      case 195: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy645 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy75));
                                                delete yymsp[-1].minor.yy75;
                                                objectForTokens = yygotominor.yy645;
                                            }
        break;
      case 196: /* joinconstr_opt ::= */
{yygotominor.yy645 = nullptr;}
        break;
      case 197: /* dbnm ::= */
      case 346: /* collate ::= */ yytestcase(yyruleno==346);
      case 432: /* vtabarg ::= */ yytestcase(yyruleno==432);
      case 436: /* anylist ::= */ yytestcase(yyruleno==436);
{yygotominor.yy79 = new QString();}
        break;
      case 199: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy450 = new ParserFullName();
                                                yygotominor.yy450->name1 = *(yymsp[-1].minor.yy79);
                                                yygotominor.yy450->name2 = *(yymsp[0].minor.yy79);
                                                delete yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 200: /* joinop ::= COMMA */
{
                                                yygotominor.yy551 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy551;
                                            }
        break;
      case 201: /* joinop ::= JOIN */
{
                                                yygotominor.yy551 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy551;
                                            }
        break;
      case 202: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy551 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy551;
                                            }
        break;
      case 203: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy551 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy551;
                                            }
        break;
      case 204: /* joinop ::= JOIN_KW nm nm JOIN */
      case 205: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==205);
{
                                                yygotominor.yy551 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy79), *(yymsp[-1].minor.yy79));
                                                delete yymsp[-2].minor.yy79;
                                                objectForTokens = yygotominor.yy551;
                                            }
        break;
      case 206: /* indexed_opt ::= */
{yygotominor.yy232 = nullptr;}
        break;
      case 207: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy232 = new ParserIndexedBy(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 208: /* indexed_opt ::= NOT INDEXED */
      case 209: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==209);
{yygotominor.yy232 = new ParserIndexedBy(true);}
        break;
      case 210: /* orderby_opt ::= */
{yygotominor.yy563 = new ParserOrderByList();}
        break;
      case 211: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy563 = yymsp[0].minor.yy563;}
        break;
      case 212: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy302, *(yymsp[-1].minor.yy339), *(yymsp[0].minor.yy650));
                                                yymsp[-4].minor.yy563->append(obj);
                                                yygotominor.yy563 = yymsp[-4].minor.yy563;
                                                delete yymsp[-1].minor.yy339;
												delete yymsp[0].minor.yy650;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 213: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy302, *(yymsp[-1].minor.yy339), *(yymsp[0].minor.yy650));
                                                yygotominor.yy563 = new ParserOrderByList();
                                                yygotominor.yy563->append(obj);
                                                delete yymsp[-1].minor.yy339;
												delete yymsp[0].minor.yy650;
                                                objectForTokens = obj;
                                            }
        break;
      case 214: /* sortorder ::= ASC */
{yygotominor.yy339 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 215: /* sortorder ::= DESC */
{yygotominor.yy339 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 216: /* sortorder ::= */
{yygotominor.yy339 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 217: /* nulls ::= NULLS FIRST */
{yygotominor.yy650 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 218: /* nulls ::= NULLS LAST */
{yygotominor.yy650 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 219: /* nulls ::= */
{yygotominor.yy650 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 220: /* groupby_opt ::= */
      case 331: /* exprlist ::= */ yytestcase(yyruleno==331);
{yygotominor.yy161 = new ParserExprList();}
        break;
      case 221: /* groupby_opt ::= GROUP BY nexprlist */
      case 330: /* exprlist ::= nexprlist */ yytestcase(yyruleno==330);
{yygotominor.yy161 = yymsp[0].minor.yy161;}
        break;
      case 222: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy161 = new ParserExprList();
                                            }
        break;
      case 223: /* having_opt ::= */
      case 235: /* where_opt ::= */ yytestcase(yyruleno==235);
      case 327: /* case_else ::= */ yytestcase(yyruleno==327);
      case 329: /* case_operand ::= */ yytestcase(yyruleno==329);
      case 355: /* vinto ::= */ yytestcase(yyruleno==355);
      case 389: /* when_clause ::= */ yytestcase(yyruleno==389);
      case 404: /* key_opt ::= */ yytestcase(yyruleno==404);
{yygotominor.yy302 = nullptr;}
        break;
      case 224: /* having_opt ::= HAVING expr */
      case 236: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==236);
      case 320: /* expr ::= exprx */ yytestcase(yyruleno==320);
      case 326: /* case_else ::= ELSE expr */ yytestcase(yyruleno==326);
      case 328: /* case_operand ::= exprx */ yytestcase(yyruleno==328);
      case 354: /* vinto ::= INTO expr */ yytestcase(yyruleno==354);
      case 390: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==390);
      case 405: /* key_opt ::= KEY expr */ yytestcase(yyruleno==405);
{yygotominor.yy302 = yymsp[0].minor.yy302;}
        break;
      case 225: /* limit_opt ::= */
{yygotominor.yy245 = nullptr;}
        break;
      case 226: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy245 = new SqliteLimit(yymsp[0].minor.yy302);
                                                objectForTokens = yygotominor.yy245;
                                            }
        break;
      case 227: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy245 = new SqliteLimit(yymsp[-2].minor.yy302, yymsp[0].minor.yy302, true);
                                                objectForTokens = yygotominor.yy245;
                                            }
        break;
      case 228: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy245 = new SqliteLimit(yymsp[-2].minor.yy302, yymsp[0].minor.yy302, false);
                                                objectForTokens = yygotominor.yy245;
                                            }
        break;
      case 230: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning */
{
                                                if (yymsp[-2].minor.yy232)
                                                {
                                                    if (!yymsp[-2].minor.yy232->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy113 = new SqliteDelete(
                                                                yymsp[-3].minor.yy450->name1,
                                                                yymsp[-3].minor.yy450->name2,
                                                                yymsp[-2].minor.yy232->indexedBy,
                                                                yymsp[-1].minor.yy302,
                                                                yymsp[-6].minor.yy611,
                                                                *(yymsp[0].minor.yy253)
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy113 = new SqliteDelete(
                                                                yymsp[-3].minor.yy450->name1,
                                                                yymsp[-3].minor.yy450->name2,
                                                                yymsp[-2].minor.yy232->notIndexedKw,
                                                                yymsp[-1].minor.yy302,
                                                                yymsp[-6].minor.yy611,
                                                                *(yymsp[0].minor.yy253)
                                                            );
                                                    }
                                                    delete yymsp[-2].minor.yy232;
                                                }
                                                else
                                                {
                                                    yygotominor.yy113 = new SqliteDelete(
                                                            yymsp[-3].minor.yy450->name1,
                                                            yymsp[-3].minor.yy450->name2,
                                                            false,
                                                            yymsp[-1].minor.yy302,
                                                            yymsp[-6].minor.yy611,
                                                            *(yymsp[0].minor.yy253)
                                                        );
                                                }
                                                delete yymsp[-3].minor.yy450;
                                                delete yymsp[0].minor.yy253;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 231: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy611;
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 232: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy611;
                                                q->database = *(yymsp[-1].minor.yy79);
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[-1].minor.yy79;
                                            }
        break;
      case 233: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 244: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==244);
{  yy_destructor(yypParser,247,&yymsp[-5].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 234: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 245: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==245);
{  yy_destructor(yypParser,247,&yymsp[-3].minor);
}
        break;
      case 237: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy302 = new SqliteExpr();
                                            }
        break;
      case 239: /* returning ::= RETURNING selcollist */
{yygotominor.yy253 = yymsp[0].minor.yy253;}
        break;
      case 241: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning */
{
                                                yygotominor.yy113 = new SqliteUpdate(
                                                        *(yymsp[-7].minor.yy588),
                                                        yymsp[-6].minor.yy450->name1,
                                                        yymsp[-6].minor.yy450->name2,
                                                        yymsp[-5].minor.yy232 ? yymsp[-5].minor.yy232->notIndexedKw : false,
                                                        yymsp[-5].minor.yy232 ? yymsp[-5].minor.yy232->indexedBy : QString(),
                                                        *(yymsp[-3].minor.yy451),
														yymsp[-2].minor.yy283,
                                                        yymsp[-1].minor.yy302,
                                                        yymsp[-9].minor.yy611,
                                                        *(yymsp[0].minor.yy253)
                                                    );
                                                delete yymsp[-7].minor.yy588;
                                                delete yymsp[-6].minor.yy450;
                                                delete yymsp[-3].minor.yy451;
                                                delete yymsp[0].minor.yy253;
                                                if (yymsp[-5].minor.yy232)
                                                    delete yymsp[-5].minor.yy232;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 242: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy611;
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[0].minor.yy588;
                                            }
        break;
      case 243: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy611;
                                                q->database = *(yymsp[-1].minor.yy79);
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[-2].minor.yy588;
                                                delete yymsp[-1].minor.yy79;
                                            }
        break;
      case 246: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy451->append(ParserSetValue(*(yymsp[-2].minor.yy79), yymsp[0].minor.yy302));
                                                yygotominor.yy451 = yymsp[-4].minor.yy451;
                                                delete yymsp[-2].minor.yy79;
                                            }
        break;
      case 247: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy451->append(ParserSetValue(*(yymsp[-3].minor.yy75), yymsp[0].minor.yy302));
                                                yygotominor.yy451 = yymsp[-6].minor.yy451;
                                                delete yymsp[-3].minor.yy75;
                                            }
        break;
      case 248: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy451 = new ParserSetValueList();
                                                yygotominor.yy451->append(ParserSetValue(*(yymsp[-2].minor.yy79), yymsp[0].minor.yy302));
                                                delete yymsp[-2].minor.yy79;
                                            }
        break;
      case 249: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy451 = new ParserSetValueList();
                                                yygotominor.yy451->append(ParserSetValue(*(yymsp[-3].minor.yy75), yymsp[0].minor.yy302));
                                                delete yymsp[-3].minor.yy75;
                                            }
        break;
      case 250: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy451 = new ParserSetValueList();
                                            }
        break;
      case 251: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy451 = yymsp[-1].minor.yy451;
                                            }
        break;
      case 252: /* setlist ::= setlist COMMA ID_COL */
      case 253: /* setlist ::= ID_COL */ yytestcase(yyruleno==253);
{  yy_destructor(yypParser,278,&yymsp[-2].minor);
}
        break;
      case 254: /* idlist_opt ::= */
{yygotominor.yy75 = new QStringList();}
        break;
      case 255: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy75 = yymsp[-1].minor.yy75;}
        break;
      case 256: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy75 = yymsp[-2].minor.yy75;
                                                *(yygotominor.yy75) << *(yymsp[0].minor.yy79);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 257: /* idlist ::= nm */
{
                                                yygotominor.yy75 = new QStringList();
                                                *(yygotominor.yy75) << *(yymsp[0].minor.yy79);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 258: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy75 = new QStringList();
                                            }
        break;
      case 259: /* idlist ::= idlist COMMA ID_COL */
      case 260: /* idlist ::= ID_COL */ yytestcase(yyruleno==260);
{  yy_destructor(yypParser,272,&yymsp[-2].minor);
}
        break;
      case 262: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning */
{
                                                yygotominor.yy113 = new SqliteInsert(
                                                        yymsp[-6].minor.yy354->replace,
                                                        yymsp[-6].minor.yy354->orConflict,
                                                        yymsp[-4].minor.yy450->name1,
                                                        yymsp[-4].minor.yy450->name2,
                                                        *(yymsp[-3].minor.yy75),
                                                        yymsp[-2].minor.yy313,
                                                        yymsp[-7].minor.yy611,
                                                        yymsp[-1].minor.yy340,
                                                        *(yymsp[0].minor.yy253)
                                                    );
                                                delete yymsp[-4].minor.yy450;
                                                delete yymsp[-6].minor.yy354;
                                                delete yymsp[-3].minor.yy75;
                                                delete yymsp[0].minor.yy253;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 263: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning */
{
                                                yygotominor.yy113 = new SqliteInsert(
                                                        yymsp[-6].minor.yy354->replace,
                                                        yymsp[-6].minor.yy354->orConflict,
                                                        yymsp[-4].minor.yy450->name1,
                                                        yymsp[-4].minor.yy450->name2,
                                                        *(yymsp[-3].minor.yy75),
                                                        yymsp[-7].minor.yy611,
                                                        *(yymsp[0].minor.yy253)
                                                    );
                                                delete yymsp[-4].minor.yy450;
                                                delete yymsp[-6].minor.yy354;
                                                delete yymsp[-3].minor.yy75;
                                                delete yymsp[0].minor.yy253;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 264: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy354->replace;
                                                q->onConflict = yymsp[-1].minor.yy354->orConflict;
                                                q->with = yymsp[-2].minor.yy611;
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[-1].minor.yy354;
                                            }
        break;
      case 265: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy354->replace;
                                                q->onConflict = yymsp[-3].minor.yy354->orConflict;
                                                q->with = yymsp[-4].minor.yy611;
                                                q->database = *(yymsp[-1].minor.yy79);
                                                yygotominor.yy113 = q;
                                                objectForTokens = yygotominor.yy113;
                                                delete yymsp[-3].minor.yy354;
                                                delete yymsp[-1].minor.yy79;
                                            }
        break;
      case 266: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,247,&yymsp[-3].minor);
  yy_destructor(yypParser,281,&yymsp[-2].minor);
}
        break;
      case 267: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,247,&yymsp[-5].minor);
  yy_destructor(yypParser,281,&yymsp[-4].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 268: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy354 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy588));
                                                delete yymsp[0].minor.yy588;
                                            }
        break;
      case 269: /* insert_cmd ::= REPLACE */
{yygotominor.yy354 = new ParserStubInsertOrReplace(true);}
        break;
      case 270: /* upsert ::= */
{
                                                yygotominor.yy340 = nullptr;
                                            }
        break;
      case 271: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy340 = new SqliteUpsert(*(yymsp[-7].minor.yy563), yymsp[-5].minor.yy302, *(yymsp[-1].minor.yy451), yymsp[0].minor.yy302);
                                                delete yymsp[-7].minor.yy563;
                                                delete yymsp[-1].minor.yy451;
                                                objectForTokens = yygotominor.yy340;
                                            }
        break;
      case 272: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy340 = new SqliteUpsert(*(yymsp[-4].minor.yy563), yymsp[-2].minor.yy302);
                                                delete yymsp[-4].minor.yy563;
                                                objectForTokens = yygotominor.yy340;
                                            }
        break;
      case 273: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy340 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy340;
                                            }
        break;
      case 274: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,225,&yymsp[-3].minor);
}
        break;
      case 275: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 276: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==276);
{  yy_destructor(yypParser,225,&yymsp[-5].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 277: /* exprx ::= tnm DOT ID_TAB|ID_COL */
{  yy_destructor(yypParser,233,&yymsp[-2].minor);
}
        break;
      case 278: /* exprx ::= tnm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,233,&yymsp[-4].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 279: /* exprx ::= expr COLLATE ID_COLLATE */
      case 280: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==280);
{  yy_destructor(yypParser,225,&yymsp[-2].minor);
}
        break;
      case 281: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 282: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initRowValue(*(yymsp[-1].minor.yy161));
                                                delete yymsp[-1].minor.yy161;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 283: /* exprx ::= tnm */
{
                                                yygotominor.yy302 = new SqliteExpr();
												if (yymsp[0].minor.yy280->isLiteral())
													yygotominor.yy302->initLiteral(yymsp[0].minor.yy280->toLiteral());
												else
													yygotominor.yy302->initId(yymsp[0].minor.yy280->toName());
													//parserContext->errorBeforeLastToken("Syntax error <expected literal value>");

                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 284: /* exprx ::= tnm DOT nm */
{
                                                yygotominor.yy302 = new SqliteExpr();
												if (yymsp[-2].minor.yy280->isName())
													yygotominor.yy302->initId(yymsp[-2].minor.yy280->toName(), *(yymsp[0].minor.yy79));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-2].minor.yy280;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 285: /* exprx ::= tnm DOT nm DOT nm */
{
                                                yygotominor.yy302 = new SqliteExpr();
												if (yymsp[-4].minor.yy280->isName())
													yygotominor.yy302->initId(yymsp[-4].minor.yy280->toName(), *(yymsp[-2].minor.yy79), *(yymsp[0].minor.yy79));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-4].minor.yy280;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 286: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 287: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initCollate(yymsp[-2].minor.yy302, *(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 288: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initCast(yymsp[-3].minor.yy302, yymsp[-1].minor.yy438);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 289: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy166), *(yymsp[-1].minor.yy161));
                                                delete yymsp[-2].minor.yy166;
                                                delete yymsp[-1].minor.yy161;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 290: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 291: /* exprx ::= expr AND expr */
      case 292: /* exprx ::= expr OR expr */ yytestcase(yyruleno==292);
      case 293: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==293);
      case 294: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==294);
      case 295: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==295);
      case 296: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==296);
      case 297: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==297);
      case 298: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==298);
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initBinOp(yymsp[-2].minor.yy302, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy302);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 299: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initLike(yymsp[-3].minor.yy302, *(yymsp[-2].minor.yy601), *(yymsp[-1].minor.yy230), yymsp[0].minor.yy302);
                                                delete yymsp[-2].minor.yy601;
                                                delete yymsp[-1].minor.yy230;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 300: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initLike(yymsp[-5].minor.yy302, *(yymsp[-4].minor.yy601), *(yymsp[-3].minor.yy230), yymsp[-2].minor.yy302, yymsp[0].minor.yy302);
                                                delete yymsp[-4].minor.yy601;
                                                delete yymsp[-3].minor.yy230;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 301: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initNull(yymsp[-1].minor.yy302, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 302: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initNull(yymsp[-2].minor.yy302, "NOT NULL");
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 303: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initIs(yymsp[-3].minor.yy302, *(yymsp[-1].minor.yy601), yymsp[0].minor.yy302);
                                                delete yymsp[-1].minor.yy601;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 304: /* exprx ::= NOT expr */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initUnaryOp(yymsp[0].minor.yy302, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 305: /* exprx ::= BITNOT expr */
      case 307: /* exprx ::= PLUS expr */ yytestcase(yyruleno==307);
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initUnaryOp(yymsp[0].minor.yy302, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 306: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                if (yymsp[0].minor.yy302->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy302->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy302->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy302;
                                                }
                                                else
                                                {
                                                    yygotominor.yy302->initUnaryOp(yymsp[0].minor.yy302, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 308: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initBetween(yymsp[-5].minor.yy302, *(yymsp[-4].minor.yy601), yymsp[-2].minor.yy302, yymsp[0].minor.yy302);
                                                delete yymsp[-4].minor.yy601;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 309: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initIn(yymsp[-5].minor.yy302, *(yymsp[-4].minor.yy601), *(yymsp[-1].minor.yy161));
                                                delete yymsp[-4].minor.yy601;
                                                delete yymsp[-1].minor.yy161;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 310: /* exprx ::= LP select RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initSubSelect(yymsp[-1].minor.yy313);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 311: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initIn(yymsp[-5].minor.yy302, *(yymsp[-4].minor.yy601), yymsp[-1].minor.yy313);
                                                delete yymsp[-4].minor.yy601;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 312: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initIn(yymsp[-4].minor.yy302, *(yymsp[-3].minor.yy601), *(yymsp[-1].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-3].minor.yy601;
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 313: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initExists(yymsp[-1].minor.yy313);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 314: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initCase(yymsp[-3].minor.yy302, *(yymsp[-2].minor.yy161), yymsp[-1].minor.yy302);
                                                delete yymsp[-2].minor.yy161;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 315: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 316: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy302;
                                            }
        break;
      case 317: /* exprx ::= ID LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initWindowFunction(yymsp[-5].minor.yy0->value, *(yymsp[-3].minor.yy166), *(yymsp[-2].minor.yy161), yymsp[0].minor.yy267);
                                                delete yymsp[-3].minor.yy166;
                                                delete yymsp[-2].minor.yy161;
                                                objectForTokens = yygotominor.yy302;
											}
        break;
      case 318: /* exprx ::= ID LP STAR RP filter_over */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                yygotominor.yy302->initWindowFunction(yymsp[-4].minor.yy0->value, yymsp[0].minor.yy267);
                                                objectForTokens = yygotominor.yy302;
											}
        break;
      case 319: /* expr ::= */
{
                                                yygotominor.yy302 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy302;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 323: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy230 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 324: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy161->append(yymsp[-2].minor.yy302);
                                                yymsp[-4].minor.yy161->append(yymsp[0].minor.yy302);
                                                yygotominor.yy161 = yymsp[-4].minor.yy161;
                                            }
        break;
      case 325: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy161 = new ParserExprList();
                                                yygotominor.yy161->append(yymsp[-2].minor.yy302);
                                                yygotominor.yy161->append(yymsp[0].minor.yy302);
                                            }
        break;
      case 332: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy161->append(yymsp[0].minor.yy302);
                                                yygotominor.yy161 = yymsp[-2].minor.yy161;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 333: /* nexprlist ::= exprx */
{
                                                yygotominor.yy161 = new ParserExprList();
                                                yygotominor.yy161->append(yymsp[0].minor.yy302);
                                            }
        break;
      case 334: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy113 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy601),
                                                        *(yymsp[-8].minor.yy601),
                                                        *(yymsp[-7].minor.yy79),
                                                        *(yymsp[-6].minor.yy79),
                                                        *(yymsp[-4].minor.yy79),
                                                        *(yymsp[-2].minor.yy563),
                                                        yymsp[0].minor.yy302
                                                    );
                                                delete yymsp[-8].minor.yy601;
                                                delete yymsp[-10].minor.yy601;
                                                delete yymsp[-7].minor.yy79;
                                                delete yymsp[-6].minor.yy79;
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[-2].minor.yy563;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 335: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,201,&yymsp[-3].minor);
}
        break;
      case 340: /* idxlist_opt ::= */
{yygotominor.yy223 = new ParserIndexedColumnList();}
        break;
      case 341: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy223 = yymsp[-1].minor.yy223;}
        break;
      case 342: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy223->append(yymsp[0].minor.yy608);
                                                yygotominor.yy223 = yymsp[-2].minor.yy223;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 343: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy223 = new ParserIndexedColumnList();
                                                yygotominor.yy223->append(yymsp[0].minor.yy608);
                                            }
        break;
      case 344: /* idxlist_single ::= nm collate sortorder */
      case 345: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==345);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy79),
                                                        *(yymsp[-1].minor.yy79),
                                                        *(yymsp[0].minor.yy339)
                                                    );
                                                yygotominor.yy608 = obj;
                                                delete yymsp[0].minor.yy339;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy608;
                                            }
        break;
      case 349: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy113 = new SqliteDropIndex(*(yymsp[-1].minor.yy601), yymsp[0].minor.yy450->name1, yymsp[0].minor.yy450->name2);
                                                delete yymsp[-1].minor.yy601;
                                                delete yymsp[0].minor.yy450;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 352: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy113 = new SqliteVacuum(yymsp[0].minor.yy302);
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 353: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy113 = new SqliteVacuum(*(yymsp[-1].minor.yy79), yymsp[0].minor.yy302);
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 356: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy113 = new SqlitePragma(*(yymsp[-1].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 357: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 359: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==359);
{
                                                yygotominor.yy113 = new SqlitePragma(*(yymsp[-3].minor.yy79), *(yymsp[-2].minor.yy79), *(yymsp[0].minor.yy419), true);
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy419;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 358: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 360: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==360);
{
                                                yygotominor.yy113 = new SqlitePragma(*(yymsp[-4].minor.yy79), *(yymsp[-3].minor.yy79), *(yymsp[-1].minor.yy419), false);
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-1].minor.yy419;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 364: /* nmnum ::= nm */
{
                                                yygotominor.yy419 = new QVariant(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 365: /* nmnum ::= ON */
      case 366: /* nmnum ::= DELETE */ yytestcase(yyruleno==366);
      case 367: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==367);
{yygotominor.yy419 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 370: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy419->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy419) = -(yymsp[0].minor.yy419->toDouble());
                                                else if (yymsp[0].minor.yy419->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy419) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy419) = -(yymsp[0].minor.yy419->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy419 = yymsp[0].minor.yy419;
                                            }
        break;
      case 373: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy113 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy166),
                                                        *(yymsp[-11].minor.yy601),
                                                        *(yymsp[-10].minor.yy79),
                                                        *(yymsp[-9].minor.yy79),
                                                        *(yymsp[-5].minor.yy79),
                                                        *(yymsp[-8].minor.yy202),
                                                        yymsp[-7].minor.yy341,
                                                        *(yymsp[-4].minor.yy53),
                                                        yymsp[-3].minor.yy302,
                                                        *(yymsp[-1].minor.yy320),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy601;
                                                delete yymsp[-13].minor.yy166;
                                                delete yymsp[-8].minor.yy202;
                                                delete yymsp[-4].minor.yy53;
                                                delete yymsp[-10].minor.yy79;
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-9].minor.yy79;
                                                delete yymsp[-1].minor.yy320;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 374: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy113 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy166),
                                                        *(yymsp[-8].minor.yy601),
                                                        *(yymsp[-7].minor.yy79),
                                                        *(yymsp[-6].minor.yy79),
                                                        *(yymsp[-2].minor.yy79),
                                                        *(yymsp[-5].minor.yy202),
                                                        yymsp[-4].minor.yy341,
                                                        *(yymsp[-1].minor.yy53),
                                                        yymsp[0].minor.yy302,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy601;
                                                delete yymsp[-10].minor.yy166;
                                                delete yymsp[-5].minor.yy202;
                                                delete yymsp[-1].minor.yy53;
                                                delete yymsp[-7].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[-6].minor.yy79;
                                                objectForTokens = yygotominor.yy113;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 375: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy113 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy166),
													*(yymsp[-10].minor.yy601),
													*(yymsp[-9].minor.yy79),
													*(yymsp[-8].minor.yy79),
													*(yymsp[-4].minor.yy79),
													*(yymsp[-7].minor.yy202),
													yymsp[-6].minor.yy341,
													*(yymsp[-3].minor.yy53),
													yymsp[-2].minor.yy302,
													*(yymsp[0].minor.yy320),
													3
                                                );
                                                delete yymsp[-10].minor.yy601;
                                                delete yymsp[-12].minor.yy166;
                                                delete yymsp[-7].minor.yy202;
                                                delete yymsp[-3].minor.yy53;
                                                delete yymsp[-9].minor.yy79;
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[-8].minor.yy79;
                                                delete yymsp[0].minor.yy320;
                                                objectForTokens = yygotominor.yy113;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 376: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,203,&yymsp[-8].minor);
  yy_destructor(yypParser,201,&yymsp[-5].minor);
  yy_destructor(yypParser,296,&yymsp[-3].minor);
  yy_destructor(yypParser,297,&yymsp[-2].minor);
}
        break;
      case 379: /* trigger_time ::= BEFORE */
{yygotominor.yy202 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 380: /* trigger_time ::= AFTER */
{yygotominor.yy202 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 381: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy202 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 382: /* trigger_time ::= */
{yygotominor.yy202 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 383: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy341 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy341;
                                            }
        break;
      case 384: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy341 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy341;
                                            }
        break;
      case 385: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy341 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy341;
                                            }
        break;
      case 386: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy341 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy75));
                                                delete yymsp[0].minor.yy75;
                                                objectForTokens = yygotominor.yy341;
                                            }
        break;
      case 387: /* foreach_clause ::= */
{yygotominor.yy53 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 388: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy53 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 391: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy320->append(yymsp[-1].minor.yy113);
                                                yygotominor.yy320 = yymsp[-2].minor.yy320;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 392: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy320 = new ParserQueryList();
                                                yygotominor.yy320->append(yymsp[-1].minor.yy113);
                                            }
        break;
      case 393: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy320 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 398: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 399: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy113 = new SqliteDropTrigger(*(yymsp[-1].minor.yy601), yymsp[0].minor.yy450->name1, yymsp[0].minor.yy450->name2);
                                                delete yymsp[-1].minor.yy601;
                                                delete yymsp[0].minor.yy450;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 402: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy113 = new SqliteAttach(*(yymsp[-4].minor.yy601), yymsp[-3].minor.yy302, yymsp[-1].minor.yy302, yymsp[0].minor.yy302);
                                                delete yymsp[-4].minor.yy601;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 403: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy113 = new SqliteDetach(*(yymsp[-1].minor.yy601), yymsp[0].minor.yy302);
                                                delete yymsp[-1].minor.yy601;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 408: /* cmd ::= REINDEX */
{yygotominor.yy113 = new SqliteReindex();}
        break;
      case 409: /* cmd ::= REINDEX nm dbnm */
      case 410: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==410);
{
                                                yygotominor.yy113 = new SqliteReindex(*(yymsp[-1].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 413: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy113 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 414: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy113 = new SqliteAnalyze(*(yymsp[-1].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 417: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy113 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy450->name1,
                                                        yymsp[-3].minor.yy450->name2,
                                                        *(yymsp[0].minor.yy79)
                                                    );
                                                delete yymsp[0].minor.yy79;
                                                delete yymsp[-3].minor.yy450;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 418: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy113 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy450->name1,
                                                        yymsp[-3].minor.yy450->name2,
                                                        *(yymsp[-1].minor.yy601),
                                                        yymsp[0].minor.yy437
                                                    );
                                                delete yymsp[-1].minor.yy601;
                                                delete yymsp[-3].minor.yy450;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 419: /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
{
                                                yygotominor.yy113 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy450->name1,
                                                        yymsp[-3].minor.yy450->name2,
                                                        *(yymsp[-1].minor.yy601),
                                                        *(yymsp[0].minor.yy79)
                                                    );
                                                delete yymsp[-1].minor.yy601;
                                                delete yymsp[-3].minor.yy450;
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 420: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,205,&yymsp[-3].minor);
}
        break;
      case 426: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy113 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy601),
                                                        *(yymsp[-3].minor.yy79),
                                                        *(yymsp[-2].minor.yy79),
                                                        *(yymsp[0].minor.yy79)
                                                    );
                                                delete yymsp[-4].minor.yy601;
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 427: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy113 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy601),
                                                        *(yymsp[-6].minor.yy79),
                                                        *(yymsp[-5].minor.yy79),
                                                        *(yymsp[-3].minor.yy79),
                                                        *(yymsp[-1].minor.yy75)
                                                    );
                                                delete yymsp[-6].minor.yy79;
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-7].minor.yy601;
                                                delete yymsp[-1].minor.yy75;
                                                objectForTokens = yygotominor.yy113;
                                            }
        break;
      case 430: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy75 = new QStringList();
                                                yygotominor.yy75->append((yymsp[0].minor.yy79)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 431: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy75->append((yymsp[0].minor.yy79)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy75 = yymsp[-2].minor.yy75;
                                                delete yymsp[0].minor.yy79;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 433: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy79->append(" "+ *(yymsp[0].minor.yy79));
                                                yygotominor.yy79 = yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 434: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy79 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 435: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy79 = new QString("(");
                                                yygotominor.yy79->append(*(yymsp[-1].minor.yy79));
                                                yygotominor.yy79->append(")");
                                                delete yymsp[-1].minor.yy79;
                                            }
        break;
      case 437: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy79 = yymsp[-3].minor.yy79;
                                                yygotominor.yy79->append("(");
                                                yygotominor.yy79->append(*(yymsp[-1].minor.yy79));
                                                yygotominor.yy79->append(")");
                                                delete yymsp[-1].minor.yy79;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 438: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy79 = yymsp[-1].minor.yy79;
                                                yygotominor.yy79->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 439: /* with ::= */
{yygotominor.yy611 = nullptr;}
        break;
      case 440: /* with ::= WITH wqlist */
{
                                                yygotominor.yy611 = new SqliteWith();
												yygotominor.yy611->cteList = *(yymsp[0].minor.yy472);
												delete yymsp[0].minor.yy472;
                                                objectForTokens = yygotominor.yy611;
                                            }
        break;
      case 441: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy611 = new SqliteWith();
												yygotominor.yy611->cteList = *(yymsp[0].minor.yy472);
                                                yygotominor.yy611->recursive = true;
												delete yymsp[0].minor.yy472;
                                                objectForTokens = yygotominor.yy611;
                                            }
        break;
      case 442: /* wqas ::= AS */
{yygotominor.yy539 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::ANY);}
        break;
      case 443: /* wqas ::= AS MATERIALIZED */
{yygotominor.yy539 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::MATERIALIZED);}
        break;
      case 444: /* wqas ::= AS NOT MATERIALIZED */
{yygotominor.yy539 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::NOT_MATERIALIZED);}
        break;
      case 445: /* wqlist ::= wqcte */
{
												yygotominor.yy472 = new ParserCteList();
                                                yygotominor.yy472->append(yymsp[0].minor.yy106);
                                            }
        break;
      case 446: /* wqlist ::= wqlist COMMA wqcte */
{
                                                yygotominor.yy472 = yymsp[-2].minor.yy472;
                                                yygotominor.yy472->append(yymsp[0].minor.yy106);
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 447: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 448: /* wqcte ::= nm idxlist_opt wqas LP select RP */
{
                                                yygotominor.yy106 = new SqliteWith::CommonTableExpression(*(yymsp[-5].minor.yy79), *(yymsp[-4].minor.yy223), yymsp[-1].minor.yy313, *(yymsp[-3].minor.yy539));
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-4].minor.yy223;
                                                delete yymsp[-3].minor.yy539;
												objectForTokens = yygotominor.yy106;
											}
        break;
      case 449: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy649 = new ParserWindowDefList();
												yygotominor.yy649->append(yymsp[0].minor.yy246);
											}
        break;
      case 450: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy649->append(yymsp[0].minor.yy246);
												yygotominor.yy649 = yymsp[-2].minor.yy649;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 451: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy246 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy79), yymsp[-1].minor.yy534);
												delete yymsp[-4].minor.yy79;
												objectForTokens = yygotominor.yy246;
											}
        break;
      case 452: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy534 = new SqliteWindowDefinition::Window();
												yygotominor.yy534->initPartitionBy(QString(), *(yymsp[-2].minor.yy161), *(yymsp[-1].minor.yy563), yymsp[0].minor.yy621);
												delete yymsp[-2].minor.yy161;
												delete yymsp[-1].minor.yy563;
												objectForTokens = yygotominor.yy534;
											}
        break;
      case 453: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy534 = new SqliteWindowDefinition::Window();
												yygotominor.yy534->initPartitionBy(*(yymsp[-5].minor.yy79), *(yymsp[-2].minor.yy161), *(yymsp[-1].minor.yy563), yymsp[0].minor.yy621);
												delete yymsp[-2].minor.yy161;
												delete yymsp[-5].minor.yy79;
												delete yymsp[-1].minor.yy563;
												objectForTokens = yygotominor.yy534;
											}
        break;
      case 454: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy534 = new SqliteWindowDefinition::Window();
												yygotominor.yy534->initOrderBy(QString(), *(yymsp[-1].minor.yy563), yymsp[0].minor.yy621);
												delete yymsp[-1].minor.yy563;
												objectForTokens = yygotominor.yy534;
											}
        break;
      case 455: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy534 = new SqliteWindowDefinition::Window();
												yygotominor.yy534->initOrderBy(*(yymsp[-4].minor.yy79), *(yymsp[-1].minor.yy563), yymsp[0].minor.yy621);
												delete yymsp[-1].minor.yy563;
												delete yymsp[-4].minor.yy79;
												objectForTokens = yygotominor.yy534;
											}
        break;
      case 456: /* window ::= frame_opt */
{
												yygotominor.yy534 = new SqliteWindowDefinition::Window();
												yygotominor.yy534->init(QString(), yymsp[0].minor.yy621);
												objectForTokens = yygotominor.yy534;
											}
        break;
      case 457: /* window ::= nm frame_opt */
{
												yygotominor.yy534 = new SqliteWindowDefinition::Window();
												yygotominor.yy534->init(QString(), yymsp[0].minor.yy621);
												delete yymsp[-1].minor.yy79;
												objectForTokens = yygotominor.yy534;
											}
        break;
      case 458: /* frame_opt ::= */
{yygotominor.yy621 = nullptr;}
        break;
      case 459: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy621 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy618), yymsp[-1].minor.yy221, nullptr, *(yymsp[0].minor.yy483));
												delete yymsp[-2].minor.yy618;
												delete yymsp[0].minor.yy483;
												objectForTokens = yygotominor.yy621;
											}
        break;
      case 460: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy621 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy618), yymsp[-3].minor.yy221, yymsp[-1].minor.yy221, *(yymsp[0].minor.yy483));
												delete yymsp[-5].minor.yy618;
												delete yymsp[0].minor.yy483;
												objectForTokens = yygotominor.yy621;
											}
        break;
      case 461: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy618 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 462: /* frame_bound_s ::= frame_bound */
      case 464: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==464);
{
												yygotominor.yy221 = yymsp[0].minor.yy221;
												objectForTokens = yygotominor.yy221;
											}
        break;
      case 463: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 465: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==465);
      case 467: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==467);
{
												yygotominor.yy221 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy221;
											}
        break;
      case 466: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy221 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy302, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy221;
											}
        break;
      case 468: /* frame_exclude_opt ::= */
{
												yygotominor.yy483 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 469: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy483 = yymsp[0].minor.yy483;
											}
        break;
      case 470: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy483 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 471: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy483 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 472: /* frame_exclude ::= GROUP */
{
												yygotominor.yy483 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 473: /* frame_exclude ::= TIES */
{
												yygotominor.yy483 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 474: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy649 = yymsp[0].minor.yy649;
											}
        break;
      case 475: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy267 = new SqliteFilterOver(yymsp[-1].minor.yy447, yymsp[0].minor.yy57);
												objectForTokens = yygotominor.yy267;
											}
        break;
      case 476: /* filter_over ::= over_clause */
{
												yygotominor.yy267 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy57);
												objectForTokens = yygotominor.yy267;
											}
        break;
      case 477: /* filter_over ::= filter_clause */
{
												yygotominor.yy267 = new SqliteFilterOver(yymsp[0].minor.yy447, nullptr);
												objectForTokens = yygotominor.yy267;
											}
        break;
      case 478: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy57 = new SqliteFilterOver::Over(yymsp[-1].minor.yy534);
												objectForTokens = yygotominor.yy57;
											}
        break;
      case 479: /* over_clause ::= OVER nm */
{
												yygotominor.yy57 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy79));
												delete yymsp[0].minor.yy79;
												objectForTokens = yygotominor.yy57;
											}
        break;
      case 480: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy447 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy302);
												objectForTokens = yygotominor.yy447;
											}
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecopy.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 301
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 78
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  ParserOtherSourceList* yy11;
  SqliteSelect::Core* yy30;
  SqliteSelect::Core::JoinSource* yy31;
  bool* yy51;
  QVariant* yy69;
  QString* yy79;
  SqliteSelect::Core::JoinConstraint* yy95;
  SqliteSelect::Core::JoinOp* yy101;
  ParserStubInsertOrReplace* yy104;
  ParserExprList* yy111;
  SqliteWith* yy161;
  SqliteInitially* yy192;
  ParserSetValueList* yy201;
  SqliteCreateTrigger::Scope* yy203;
  ParserStubExplain* yy211;
  ParserExprNestedList* yy246;
  SqliteCreateTrigger::Time* yy252;
  ParserFkConditionList* yy264;
  ParserQueryList* yy270;
  ParserStubAlias* yy280;
  SqliteExpr::LikeOp* yy281;
  SqliteIndexedColumn* yy308;
  ParserDeferSubClause* yy329;
  SqliteSelect::Core::SingleSource* yy361;
  ParserOrderByList* yy363;
  SqliteSelect::CompoundOperator* yy382;
  SqliteCreateTable::Column* yy387;
  SqliteSortOrder* yy389;
  SqliteCreateTrigger::Event* yy391;
  ParserCreateTableColumnList* yy402;
  ParserIndexedColumnList* yy423;
  ParserIndexedBy* yy432;
  SqliteUpsert* yy440;
  SqliteLimit* yy444;
  ParserResultColumnList* yy453;
  int* yy466;
  ParserCreateTableColumnConstraintList* yy491;
  ParserCreateTableConstraintList* yy493;
  SqliteSelect* yy513;
  ParserStubTransDetails* yy524;
  SqliteCreateTable::Constraint* yy526;
  SqliteColumnType* yy537;
  SqliteConflictAlgo* yy538;
  SqliteCreateTable::Column::Constraint* yy544;
  SqliteForeignKey::Condition::Reaction* yy545;
  SqliteForeignKey::Condition* yy547;
  SqliteExpr* yy552;
  SqliteQuery* yy563;
  QStringList* yy575;
  ParserFullName* yy600;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 763
#define YYNRULE 436
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2442)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   463,   64,  755,  166,  755,  614,  760,   59,   60,  458,
 /*    10 */   311,  317,  451,  719,  719,   57,   57,   58,   58,   58,
 /*    20 */    58,  613,   56,   56,   56,   56,   55,   55,   54,   54,
 /*    30 */    54,   53,  228,  218,  217,  216,  755,  299, 1076, 1076,
 /*    40 */    56,   56,   56,   56,   55,   55,   54,   54,   54,   53,
 /*    50 */   228,  456,   58,   58,   58,   58,   33,   56,   56,   56,
 /*    60 */    56,   55,   55,   54,   54,   54,   53,  228,   89,  602,
 /*    70 */   603,  419,  710,  640,  639, 1076, 1076,   46, 1076, 1076,
 /*    80 */  1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,  460,
 /*    90 */  1076, 1076, 1076, 1076,   43,   44, 1076, 1076, 1076, 1076,
 /*   100 */  1076,   45,  462,  463,   17,  530,  756,   50,   38,    3,
 /*   110 */   531,  711,  101,   15,  716,  451,  448,  460,  654,  726,
 /*   120 */   461,  753,  752,  753,  752,  417,  729,  755,  434,   16,
 /*   130 */   462,  755,  645,  716,  728,  727,  726,  655,  372,  711,
 /*   140 */   199,   55,   55,   54,   54,   54,   53,  228,  280, 1193,
 /*   150 */  1193,  283,  654,  722,  456,  753,  752,  256,  437,  730,
 /*   160 */   260,  100,  731,  945,  945,  313,  680,  716,  755,  723,
 /*   170 */    10,  716,  518,  707,  353,  710,   58,   58,   58,   58,
 /*   180 */    46,   56,   56,   56,   56,   55,   55,   54,   54,   54,
 /*   190 */    53,  228,  735,  315,  332,  229,  563,   43,   44,  646,
 /*   200 */   595,  407,  262,  723,   45,  928,  139,  323, 1185,  404,
 /*   210 */   401,  400,    3,  928,  405, 1185,  755,  716,  706,  448,
 /*   220 */   928,  460,  726,  461,  755,   72,  692,  399,  463,  729,
 /*   230 */   679,  538,   66,   98,  462,  412,  716,  728,  727,  726,
 /*   240 */   451,  928,  737,  711,  199,  479,  753,  752,  991,  812,
 /*   250 */   753,  752,  814,  755,  928,  120,  928,  928,  539,  541,
 /*   260 */   928,  352,  540,  480,  479,  928,  928,  928,  928,  928,
 /*   270 */   716,  258,  722,   10,  716,  695,  707,   15,  354,  456,
 /*   280 */     8,  377,  654,  222,  225,  722,  751,  753,  752,  755,
 /*   290 */   563,  730,  479,  749,  731,  852,  622,  674,  332,  718,
 /*   300 */   710,  655,  750,  296,  150,   46,  755,  300,  153,  104,
 /*   310 */   297,  410,  292,  409,  141,  429,  654,  642,  212,  211,
 /*   320 */   754,  295,   43,   44,   39,  538,   66,  755,  290,   45,
 /*   330 */   991,  140,  637,   62,  463,  753,  752,    3,  991,   39,
 /*   340 */   722,  518,  716,  726,  448,  991,  451,  726,  461,  723,
 /*   350 */   729,  100,  539,  541,  729,  152,  540,  755,  728,  727,
 /*   360 */   726,  716,  728,  727,  726,  460,  991,  476,  428,  327,
 /*   370 */    53,  228,  753,  752,  601,  378,  323, 1184,  462,  991,
 /*   380 */    98,  991,  991,  723, 1184,  456,  476,  711,  199,  302,
 /*   390 */   991,  991,  991,  991,    6,  716,  149,  544,   10,  716,
 /*   400 */   611,  707,  754,  408,  722,  288,  710,  586,  753,  752,
 /*   410 */   717,   46,   98,  139,  476,    1,  404,  401,  400,  600,
 /*   420 */   632,  447,  430,  413,  221,  753,  752,  678,   43,   44,
 /*   430 */   336,  712,  671,  331,  399,   45,  976,  696,  588,  227,
 /*   440 */   722,  666,  332,    3,  976,  754,  753,  752,  716,   73,
 /*   450 */   448,  976,  460,  726,  461,  755,  712,  100,  733,  722,
 /*   460 */   729,  744,  452,  220,  638,  462,  418,  716,  728,  727,
 /*   470 */   726,  302,  976,  691,  711,  199,  753,  752, 1078, 1078,
 /*   480 */   222,  268,  390,  274,  754,  976,  381,  976,  976,  712,
 /*   490 */   460,  245,  420,  384,  220,  638,  976,  418,  976,  976,
 /*   500 */   355,  716,  623,  462,   10,  716,  350,  707,  356,  430,
 /*   510 */   431,  732,  711,  199,  549,   59,   60,  458,  311, 1078,
 /*   520 */  1078,  719,  719,   57,   57,   58,   58,   58,   58,  332,
 /*   530 */    56,   56,   56,   56,   55,   55,   54,   54,   54,   53,
 /*   540 */   228,  361,  653,  587,  491,  144,  515,  430,  421,  243,
 /*   550 */   242,  149,  736,   74,  677,  684,  754,  754,  151,  722,
 /*   560 */  1078, 1078,  527,  492,  493,  460,  715,  332,  368,   48,
 /*   570 */  1200,  163,  467,    2,  753,  752,  714,  236,  462,  574,
 /*   580 */   488,  322,  517, 1145,  652,  648,  713,  711,  101,  701,
 /*   590 */   700,  629,  629,  490,   65,  489,  666,   59,   60,  458,
 /*   600 */   311, 1078, 1078,  719,  719,   57,   57,   58,   58,   58,
 /*   610 */    58,  690,   56,   56,   56,   56,   55,   55,   54,   54,
 /*   620 */    54,   53,  228,  689,  701,  700,  755,  491,  397,  522,
 /*   630 */   494,  699,   61,  117,  343,   98,  577,  755,  607,   42,
 /*   640 */   754,  360,  680, 1078, 1078,  578,  492,  363,  763,   59,
 /*   650 */    60,  458,  311,  248,  244,  719,  719,   57,   57,   58,
 /*   660 */    58,   58,   58,   19,   56,   56,   56,   56,   55,   55,
 /*   670 */    54,   54,   54,   53,  228,  755, 1145,  360, 1096,  755,
 /*   680 */    59,   60,  458,  311, 1078, 1078,  719,  719,   57,   57,
 /*   690 */    58,   58,   58,   58,  755,   56,   56,   56,   56,   55,
 /*   700 */    55,   54,   54,   54,   53,  228,   54,   54,   54,   53,
 /*   710 */   228,  243,  242,  364,  699,  532,  533,  374,  761,   59,
 /*   720 */    60,  458,  311, 1077, 1077,  719,  719,   57,   57,   58,
 /*   730 */    58,   58,   58,   47,   56,   56,   56,   56,   55,   55,
 /*   740 */    54,   54,   54,   53,  228,  753,  752,  380,  755,  705,
 /*   750 */   755,  701,  700,  755,  761,   99,  753,  752,  755,  660,
 /*   760 */  1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
 /*   770 */  1077, 1077, 1077, 1077,  659, 1077, 1077, 1077, 1077, 1077,
 /*   780 */  1077, 1077, 1077, 1077, 1077, 1077,  340,  214,  514,  514,
 /*   790 */   726,  694,  569,  569,  753,  752,  651,  729,  753,  752,
 /*   800 */   696,  449,  227, 1078, 1078,  728,  727,  726,  528,   59,
 /*   810 */    60,  458,  311,  753,  752,  719,  719,   57,   57,   58,
 /*   820 */    58,   58,   58,  170,   56,   56,   56,   56,   55,   55,
 /*   830 */    54,   54,   54,   53,  228,  755,   12,  755,  693,  755,
 /*   840 */    59,   60,  458,  311, 1078, 1078,  719,  719,   57,   57,
 /*   850 */    58,   58,   58,   58,  742,   56,   56,   56,   56,   55,
 /*   860 */    55,   54,   54,   54,   53,  228,  587,  753,  752,  753,
 /*   870 */   752,  314,  753,  752,  528,  573,   74,  753,  752,  754,
 /*   880 */   387,  385,  755,   59,   60,  458,  311,  150,  150,  719,
 /*   890 */   719,   57,   57,   58,   58,   58,   58,  444,   56,   56,
 /*   900 */    56,   56,   55,   55,   54,   54,   54,   53,  228,   35,
 /*   910 */   998,  552,  162,  443,  663,  725,  515,  650,  150,  543,
 /*   920 */    59,   60,  458,  311,  169,  998,  719,  719,   57,   57,
 /*   930 */    58,   58,   58,   58,  755,   56,   56,   56,   56,   55,
 /*   940 */    55,   54,   54,   54,   53,  228,   94,  999,  755,  100,
 /*   950 */   683,  322,  516,  303,  753,  752,  753,  752,  753,  752,
 /*   960 */   269,   51,  999,   37,  440,   89,  754,   41,  482,  439,
 /*   970 */    59,   60,  458,  311,  998,  337,  719,  719,   57,   57,
 /*   980 */    58,   58,   58,   58,  722,   56,   56,   56,   56,   55,
 /*   990 */    55,   54,   54,   54,   53,  228,  482, 1000,  722, 1130,
 /*  1000 */   755,  753,  752,  168,  556,  100,  672,   59,   60,  458,
 /*  1010 */   311,  999, 1000,  719,  719,   57,   57,   58,   58,   58,
 /*  1020 */    58,  755,   56,   56,   56,   56,   55,   55,   54,   54,
 /*  1030 */    54,   53,  228,   24, 1001,  682,  755,  265,  463,  592,
 /*  1040 */   591,   14,  587,  759,   41,  690,   41,  571,  466, 1001,
 /*  1050 */   451,  472,   74,  753,  752,  754,  371,  689,    9,  563,
 /*  1060 */   526, 1000,  523,   59,   60,  458,  311,  753,  752,  719,
 /*  1070 */   719,   57,   57,   58,   58,   58,   58,  712,   56,   56,
 /*  1080 */    56,   56,   55,   55,   54,   54,   54,   53,  228,  456,
 /*  1090 */  1159,  357,  704,  703,  500,   66,   89,  755, 1001,  301,
 /*  1100 */   433,  460,  712,  722,   89,  460,   89,  722,  618,   93,
 /*  1110 */   710,   39,  754,  414,  462,   46,  721,  722,  462,  753,
 /*  1120 */   752,  499,  498,  711,  101,  497,  523,  711,  199,  755,
 /*  1130 */   686,  617,   43,   44,   96,  712,  755,  148,  300,   45,
 /*  1140 */   753,  752,  662,  432,  667,   15,  938,    3,  469,  100,
 /*  1150 */   654,  754,  716,  379,  448,  753,  752,  726,  461,  755,
 /*  1160 */   699,  755,  430,  415,  729,  755,  147,  555,  460,  655,
 /*  1170 */   341,  716,  728,  727,  726,  450,  704,  703,  680,  284,
 /*  1180 */   146,  462,  332,  358,  654, 1193, 1193, 1193, 1193,  647,
 /*  1190 */   711,  207,  754,  454,  145,  520,  873,  113,  755,  676,
 /*  1200 */   327,  442,  324,  575,  649,  716,  572,  222,   10,  716,
 /*  1210 */   107,  707,   59,   60,  458,  311,  753,  752,  719,  719,
 /*  1220 */    57,   57,   58,   58,   58,   58,  722,   56,   56,   56,
 /*  1230 */    56,   55,   55,   54,   54,   54,   53,  228,  755,  593,
 /*  1240 */   755,  644,  100,  507,  699,  680,   20,  626,  753,  752,
 /*  1250 */   485,   59,   60,  458,  311,  753,  752,  719,  719,   57,
 /*  1260 */    57,   58,   58,   58,   58,  740,   56,   56,   56,   56,
 /*  1270 */    55,   55,   54,   54,   54,   53,  228,  507,  753,  752,
 /*  1280 */   753,  752,  424,  586,  753,  752,  609,  667,   59,   60,
 /*  1290 */   458,  311,  478,   97,  719,  719,   57,   57,   58,   58,
 /*  1300 */    58,   58,  422,   56,   56,   56,   56,   55,   55,   54,
 /*  1310 */    54,   54,   53,  228,  222,  485,  755,  753,  752,  567,
 /*  1320 */   478,  762,    2,  167,  620,  270,  619,   59,   60,  458,
 /*  1330 */   311,  484,  661,  719,  719,   57,   57,   58,   58,   58,
 /*  1340 */    58,    5,   56,   56,   56,   56,   55,   55,   54,   54,
 /*  1350 */    54,   53,  228,  681,  668,  100,  667,  753,  752,  753,
 /*  1360 */   752,  100,  287,  559,  643,  619,   59,   60,  458,  311,
 /*  1370 */    13,  631,  719,  719,   57,   57,   58,   58,   58,   58,
 /*  1380 */   366,   56,   56,   56,   56,   55,   55,   54,   54,   54,
 /*  1390 */    53,  228,  636,  754,  496,  757,  755,  245,  420,  641,
 /*  1400 */   667,  657,   25,   59,   60,  458,  311,  754,  754,  719,
 /*  1410 */   719,   57,   57,   58,   58,   58,   58, 1085,   56,   56,
 /*  1420 */    56,   56,   55,   55,   54,   54,   54,   53,  228,  634,
 /*  1430 */  1160,   59,   60,  458,  311,  753,  752,  719,  719,   57,
 /*  1440 */    57,   58,   58,   58,   58,  656,   56,   56,   56,   56,
 /*  1450 */    55,   55,   54,   54,   54,   53,  228,  633, 1158,   59,
 /*  1460 */    60,  458,  311,  566,  755,  719,  719,   57,   57,   58,
 /*  1470 */    58,   58,   58,  628,   56,   56,   56,   56,   55,   55,
 /*  1480 */    54,   54,   54,   53,  228,   59,   63,  458,  311,  627,
 /*  1490 */   116,  719,  719,   57,   57,   58,   58,   58,   58,  463,
 /*  1500 */    56,   56,   56,   56,   55,   55,   54,   54,   54,   53,
 /*  1510 */   228,  451,   60,  458,  311,  753,  752,  719,  719,   57,
 /*  1520 */    57,   58,   58,   58,   58,  667,   56,   56,   56,   56,
 /*  1530 */    55,   55,   54,   54,   54,   53,  228,  755,  458,  311,
 /*  1540 */   755,  238,  719,  719,   57,   57,   58,   58,   58,   58,
 /*  1550 */   456,   56,   56,   56,   56,   55,   55,   54,   54,   54,
 /*  1560 */    53,  228,   22,  755,  460,  406,  599,  460,  755,  302,
 /*  1570 */   239,  710,  755,  590,   32,  495,   46,  462,  560,  302,
 /*  1580 */   462,  403,  754,  753,  752,  300,  711,  199,   89,  711,
 /*  1590 */   199,   70,  754,   43,   44,  289,   69,  560,  754,  463,
 /*  1600 */    45,  302,  755,   21,  460,  398,  235,  386,    3,  608,
 /*  1610 */    68,  451,  295,  716,  754,  448,  349,  462,  726,  461,
 /*  1620 */   754,  138,  536,  755,  435,  729,  711,  194,  394,  722,
 /*  1630 */   568,  134,  716,  728,  727,  726,  745,  165,  348,   31,
 /*  1640 */   755,  416,  281,  310,  332,  301,  282,  240,  743,  754,
 /*  1650 */   456,  565,  460,  684,  554,  754,  753,  752,  754,  753,
 /*  1660 */   752,  754,    4,  684,   87,  462,  716,  460,   85,   10,
 /*  1670 */   716,  710,  707,  554,  711,  198,   46,  546,   30,  232,
 /*  1680 */   462,  680,  753,  752,  565,  684,  511,  753,  752,  711,
 /*  1690 */   202,  753,  752,   43,   44,   29,  546,  755,   28,  463,
 /*  1700 */    45,  460,   84,  342,  460,  511,  344,  548,    3,  286,
 /*  1710 */   605,  451,  547,  716,  462,  448,  504,  462,  726,  461,
 /*  1720 */   755,  753,  752,  711,  200,  729,  711,  208,  671,  680,
 /*  1730 */    83,   91,  716,  728,  727,  726,  542,  501,  755,  375,
 /*  1740 */   149,  754,  753,  752,  680,  460,  537,  446,  722,  140,
 /*  1750 */   456,  535,  460,  150,  470,  529,  267,  129,  462,  753,
 /*  1760 */   752,   11,  264,  504,  755,  462,  716,  711,  206,   10,
 /*  1770 */   716,  710,  707,  470,  711,  209,   46,  671,  680,  161,
 /*  1780 */   510,  680,  276,  755,  460,  666,  234,  396,  671,  171,
 /*  1790 */   754,  487,   78,   43,   44,  754,  347,  462,  486,  463,
 /*  1800 */    45,  754,  121,  359,  501,  468,  711,  213,    3,  755,
 /*  1810 */    76,  451,  222,  716,  219,  448,  753,  752,  726,  461,
 /*  1820 */   215,  237,  680,  671,  460,  729,  335,  755,  583,  680,
 /*  1830 */   460,  741,  716,  728,  727,  726,  754,  462,  755,  753,
 /*  1840 */   752,   95,  738,  462,  754,  346,  711,  247,  336,  734,
 /*  1850 */   456,  521,  711,  312,  290,  754,  345,  753,  752,  334,
 /*  1860 */   758,  680,  754,  159,  460,  724,  716,  460,  508,   10,
 /*  1870 */   716,  710,  707, 1086,  746,  460,   46,  462,  754,  453,
 /*  1880 */   462,  158,  460,  753,  752,  748,  711,  205,  462,  711,
 /*  1890 */   197,  373,  754,   43,   44,  462,  747,  711,  182,  463,
 /*  1900 */    45,  680,  753,  752,  711,  173,  465,  680,    3, 1088,
 /*  1910 */   156,  451,  395,  716,  460,  448,  596,  273,  726,  461,
 /*  1920 */   755,  233,   90,   18,  464,  729,  386,  462,  753,  752,
 /*  1930 */   754,  739,  716,  728,  727,  726,  711,  181,   52,  754,
 /*  1940 */   460,  680,  576,  673,  680,  503,  753,  752,  154,  635,
 /*  1950 */   456,  473,  680,  462,   36,  436,  754,  753,  752,  680,
 /*  1960 */   228,  460,  711,  196,  460,  669,  716,  460,  755,   10,
 /*  1970 */   716,  710,  707,  246,  462,  664,   46,  462,  754,  460,
 /*  1980 */   462,  709,  460,  711,  201,  755,  711,  330,  754,  711,
 /*  1990 */   329,  680,  462,   43,   44,  462,  245,  755,  231,  463,
 /*  2000 */    45,  711,  328,  307,  711,  180,   20,  564,    3,  143,
 /*  2010 */   305,  451,  306,  716,   40,  448,  272,  680,  726,  461,
 /*  2020 */   271,  304,  754,  261,  438,  729,  708,  513,   49,  754,
 /*  2030 */   460,  445,  716,  728,  727,  726,  754,   71,  680,  753,
 /*  2040 */   752,  680,  427,  462,  680,  460,  226,  658,  291,  441,
 /*  2050 */   456,  460,  711,  102,  241,  754,  680,  755,  462,  680,
 /*  2060 */   754,  754,  460,  119,  462,  118,  716,  711,  179,   10,
 /*  2070 */   716,  710,  707,  711,  178,  462,   46,  606,  259,  420,
 /*  2080 */   630,  506,  509,  423,  711,  176,  351,  753,  752,  584,
 /*  2090 */   754,  754,  142,   43,   44,  621,  285,  278,  411,  463,
 /*  2100 */    45,  534,  754,  616,  753,  752,  615,  680,    3,  754,
 /*  2110 */   754,  451,  293,  716,  611,  448,  753,  752,  753,  461,
 /*  2120 */   612,  137,  680,  257,  369,  729,  610,  505,  680,  582,
 /*  2130 */   562,  326,  716,  728,  727,  726,  754,  754,  755,  680,
 /*  2140 */   474,  459,  106,  589,  253,  255,  230,  325,  298,  502,
 /*  2150 */   456,  460,  685,  754,  754,  279,  252,  581,  754,  319,
 /*  2160 */   580,  754,  460,   88,  462,  388,  716,  266,  754,   10,
 /*  2170 */   716,  710,  707,  711,  175,  462,  753,  752,  754,  393,
 /*  2180 */   754,  579,  755,  570,  711,  195,  110,  136,  460,  115,
 /*  2190 */   558,  316,  224,   43,   44,  135,  318,  157,  277,  460,
 /*  2200 */    45,  462,  160,  376,  133,   89,  391,  105,    3,   27,
 /*  2210 */   711,  174,  462,  716,  263,  448,  249,   86,  726,  461,
 /*  2220 */   338,  711,  203,  460,  561,  729,  114,  754,  680,  754,
 /*  2230 */   460,  132,  716,  728,  727,  726,  462,  254,  755,  680,
 /*  2240 */   131,  460,  320,  462,  155,  711,  204,  164,  250,   92,
 /*  2250 */   754,  551,  711,  192,  462,  383,  382,  753,  752,  755,
 /*  2260 */   545,  754,  460,  711,  186,  680,  716,  460,  755,   10,
 /*  2270 */   716,  553,  707,  460,  755,  462,  680,  112,  370,  251,
 /*  2280 */   462,  130,  128,  333,  711,  185,  462,  525,  367,  711,
 /*  2290 */   184,  460,  754,  111,   82,  711,  183,  365,  460,  127,
 /*  2300 */   680,  753,  752,   81,  462,  126,   80,  680,  125,  460,
 /*  2310 */   124,  462,   79,  711,  187,  524,  123,  339,  680,  362,
 /*  2320 */   711,  190,  462,  460,  483,   26,   23,  109,  108,  481,
 /*  2330 */   122,  711,  103,  471,   67,  477,  462,  457,  172,  680,
 /*  2340 */   460,  702,  460,  688,  680,  711,  189,  308,  460,  675,
 /*  2350 */   680,  681,  698,  462,  460,  462,  607,  753,  752,  294,
 /*  2360 */   426,  462,  711,  188,  711,  193,  665,  462,  680,  402,
 /*  2370 */   711,  191,  210,  462,  275,  680,  711,  177,  753,  752,
 /*  2380 */   389,  557,  711,   75,  550,  321,  680,  753,  752,  720,
 /*  2390 */     7,  697,  512,  753,  752,  392,  687,  594,   34,  223,
 /*  2400 */   680,  475,  455,  309,  604,  598,  625,  624,  519,   77,
 /*  2410 */   597,   89,  755,  585, 1201, 1201, 1201,  680, 1201,  680,
 /*  2420 */  1201, 1201, 1201, 1201, 1201,  680, 1201, 1201, 1201, 1201,
 /*  2430 */  1201,  680, 1201, 1201, 1201, 1201, 1201,  680, 1201, 1201,
 /*  2440 */  1201,  670,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,  113,    4,  115,    4,   21,  106,   79,   80,   81,
 /*    10 */    82,  110,   16,   85,   86,   87,   88,   89,   90,   91,
 /*    20 */    92,   37,   94,   95,   96,   97,   98,   99,  100,  101,
 /*    30 */   102,  103,  104,  143,  144,  145,    4,  121,   42,   43,
 /*    40 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*    50 */   104,   55,   89,   90,   91,   92,   93,   94,   95,   96,
 /*    60 */    97,   98,   99,  100,  101,  102,  103,  104,   72,  129,
 /*    70 */   130,  155,   76,  157,  158,   79,   80,   81,   82,   83,
 /*    80 */    84,   85,   86,   87,   88,   89,   90,   91,   92,  197,
 /*    90 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   100 */   104,  105,  210,    4,   88,    7,  108,  179,  142,  113,
 /*   110 */    12,  219,  220,  113,  118,   16,  120,  197,  118,  123,
 /*   120 */   124,  123,  124,  123,  124,  205,  130,    4,  162,  113,
 /*   130 */   210,    4,  100,  137,  138,  139,  140,  137,   40,  219,
 /*   140 */   220,   98,   99,  100,  101,  102,  103,  104,   67,  153,
 /*   150 */   154,   70,  152,    4,   55,  123,  124,   67,  266,  156,
 /*   160 */    70,  241,  159,  163,  164,  114,  274,  171,    4,  137,
 /*   170 */   174,  175,   78,  177,  254,   76,   89,   90,   91,   92,
 /*   180 */    81,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   190 */   103,  104,  218,  112,  274,  113,  205,   98,   99,  100,
 /*   200 */   226,  227,  112,  171,  105,  106,  128,  113,  114,  131,
 /*   210 */   132,  133,  113,  114,   34,  121,    4,  118,  114,  120,
 /*   220 */   121,  197,  123,  124,    4,  121,  114,  149,    4,  130,
 /*   230 */   222,  240,  241,  121,  210,  100,  137,  138,  139,  140,
 /*   240 */    16,  142,  119,  219,  220,  118,  123,  124,   24,  116,
 /*   250 */   123,  124,  116,    4,  155,  116,  157,  158,  267,  268,
 /*   260 */   161,   81,  271,  136,  137,  166,  167,  168,  169,  170,
 /*   270 */   171,  181,  123,  174,  175,  126,  177,  113,  254,   55,
 /*   280 */   289,  290,  118,  275,  104,    4,   21,  123,  124,    4,
 /*   290 */   205,  156,  165,   28,  159,  115,   76,  114,  274,  130,
 /*   300 */    76,  137,   37,  130,  121,   81,    4,  197,  128,  129,
 /*   310 */   130,  131,  132,  133,  134,  205,  152,  114,   98,   99,
 /*   320 */   210,  148,   98,   99,  121,  240,  241,    4,  148,  105,
 /*   330 */   106,   43,  114,  113,    4,  123,  124,  113,  114,  121,
 /*   340 */     4,   78,  118,  123,  120,  121,   16,  123,  124,  137,
 /*   350 */   130,  241,  267,  268,  130,  116,  271,    4,  138,  139,
 /*   360 */   140,  137,  138,  139,  140,  197,  142,  118,  258,  259,
 /*   370 */   103,  104,  123,  124,   15,  290,  113,  114,  210,  155,
 /*   380 */   121,  157,  158,  171,  121,   55,  137,  219,  220,  197,
 /*   390 */   166,  167,  168,  169,  113,  171,  115,   59,  174,  175,
 /*   400 */   141,  177,  210,   44,  123,  114,   76,  122,  123,  124,
 /*   410 */    26,   81,  121,  128,  165,  113,  131,  132,  133,   60,
 /*   420 */   118,  205,  254,  255,  113,  123,  124,  222,   98,   99,
 /*   430 */   142,    5,  197,  208,  149,  105,  106,  212,  213,  214,
 /*   440 */     4,  160,  274,  113,  114,  210,  123,  124,  118,  113,
 /*   450 */   120,  121,  197,  123,  124,    4,   30,  241,  135,  123,
 /*   460 */   130,  108,   36,  242,  243,  210,  245,  137,  138,  139,
 /*   470 */   140,  197,  142,  281,  219,  220,  123,  124,   42,   43,
 /*   480 */   275,  143,  144,  145,  210,  155,  145,  157,  158,   63,
 /*   490 */   197,  153,  154,  272,  242,  243,  166,  245,  168,  169,
 /*   500 */   265,  171,  210,  210,  174,  175,  147,  177,  234,  254,
 /*   510 */   255,  219,  219,  220,  173,   79,   80,   81,   82,   83,
 /*   520 */    84,   85,   86,   87,   88,   89,   90,   91,   92,  274,
 /*   530 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   540 */   104,   75,  121,  197,  197,  124,   78,  254,  255,   98,
 /*   550 */    99,  115,  206,  207,  121,  281,  210,  210,  121,  123,
 /*   560 */    42,   43,   65,  216,  217,  197,  114,  274,   71,   51,
 /*   570 */   190,  191,  192,  193,  123,  124,  114,  231,  210,  233,
 /*   580 */   129,  113,  114,   13,  163,  164,  114,  219,  220,  138,
 /*   590 */   139,   42,   43,  142,  161,  144,  160,   79,   80,   81,
 /*   600 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   610 */    92,   10,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   620 */   102,  103,  104,   22,  138,  139,    4,  197,  114,  132,
 /*   630 */   283,  284,   83,   84,  266,  121,  226,    4,  228,  121,
 /*   640 */   210,   29,  274,   42,   43,  235,  216,  217,    0,   79,
 /*   650 */    80,   81,   82,  187,  247,   85,   86,   87,   88,   89,
 /*   660 */    90,   91,   92,  256,   94,   95,   96,   97,   98,   99,
 /*   670 */   100,  101,  102,  103,  104,    4,  106,   29,  181,    4,
 /*   680 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   690 */    89,   90,   91,   92,    4,   94,   95,   96,   97,   98,
 /*   700 */    99,  100,  101,  102,  103,  104,  100,  101,  102,  103,
 /*   710 */   104,   98,   99,  283,  284,  143,  144,  145,  106,   79,
 /*   720 */    80,   81,   82,   42,   43,   85,   86,   87,   88,   89,
 /*   730 */    90,   91,   92,  113,   94,   95,   96,   97,   98,   99,
 /*   740 */   100,  101,  102,  103,  104,  123,  124,   24,    4,  114,
 /*   750 */     4,  138,  139,    4,  106,  115,  123,  124,    4,  137,
 /*   760 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   770 */    89,   90,   91,   92,  152,   94,   95,   96,   97,   98,
 /*   780 */    99,  100,  101,  102,  103,  104,  295,  296,  117,  118,
 /*   790 */   123,  114,  117,  118,  123,  124,  163,  130,  123,  124,
 /*   800 */   212,  213,  214,   42,   43,  138,  139,  140,  118,   79,
 /*   810 */    80,   81,   82,  123,  124,   85,   86,   87,   88,   89,
 /*   820 */    90,   91,   92,  113,   94,   95,   96,   97,   98,   99,
 /*   830 */   100,  101,  102,  103,  104,    4,  113,    4,  114,    4,
 /*   840 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   850 */    89,   90,   91,   92,  108,   94,   95,   96,   97,   98,
 /*   860 */    99,  100,  101,  102,  103,  104,  197,  123,  124,  123,
 /*   870 */   124,  202,  123,  124,  184,  206,  207,  123,  124,  210,
 /*   880 */   114,  114,    4,   79,   80,   81,   82,  121,  121,   85,
 /*   890 */    86,   87,   88,   89,   90,   91,   92,  115,   94,   95,
 /*   900 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  179,
 /*   910 */   106,  114,  121,  205,  165,  171,   78,  163,  121,   26,
 /*   920 */    79,   80,   81,   82,  113,  121,   85,   86,   87,   88,
 /*   930 */    89,   90,   91,   92,    4,   94,   95,   96,   97,   98,
 /*   940 */    99,  100,  101,  102,  103,  104,  113,  106,    4,  241,
 /*   950 */   114,  113,  114,  197,  123,  124,  123,  124,  123,  124,
 /*   960 */   114,  178,  121,  180,  115,   72,  210,  121,  137,  205,
 /*   970 */    79,   80,   81,   82,  170,  199,   85,   86,   87,   88,
 /*   980 */    89,   90,   91,   92,    4,   94,   95,   96,   97,   98,
 /*   990 */    99,  100,  101,  102,  103,  104,  165,  106,    4,  106,
 /*  1000 */     4,  123,  124,  113,  171,  241,  171,   79,   80,   81,
 /*  1010 */    82,  170,  121,   85,   86,   87,   88,   89,   90,   91,
 /*  1020 */    92,    4,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  1030 */   102,  103,  104,   49,  106,  114,    4,  114,    4,  210,
 /*  1040 */   211,   14,  197,  189,  121,   10,  121,  117,  194,  121,
 /*  1050 */    16,  206,  207,  123,  124,  210,  280,   22,   14,  205,
 /*  1060 */   182,  170,  118,   79,   80,   81,   82,  123,  124,   85,
 /*  1070 */    86,   87,   88,   89,   90,   91,   92,    5,   94,   95,
 /*  1080 */    96,   97,   98,   99,  100,  101,  102,  103,  104,   55,
 /*  1090 */   106,  215,  216,  217,  240,  241,   72,    4,  170,  197,
 /*  1100 */    38,  197,   30,  123,   72,  197,   72,    4,   36,  113,
 /*  1110 */    76,  121,  210,  205,  210,   81,  136,  123,  210,  123,
 /*  1120 */   124,  267,  268,  219,  220,  271,  182,  219,  220,    4,
 /*  1130 */   136,   59,   98,   99,  113,   63,    4,   14,  197,  105,
 /*  1140 */   123,  124,   38,   81,  212,  113,  114,  113,  294,  241,
 /*  1150 */   118,  210,  118,  129,  120,  123,  124,  123,  124,    4,
 /*  1160 */   284,    4,  254,  255,  130,    4,  114,  171,  197,  137,
 /*  1170 */   266,  137,  138,  139,  140,  215,  216,  217,  274,  197,
 /*  1180 */   114,  210,  274,  201,  152,  153,  154,  153,  154,  257,
 /*  1190 */   219,  220,  210,  176,  114,  114,  114,  121,    4,  258,
 /*  1200 */   259,  299,  121,  121,  163,  171,  205,  275,  174,  175,
 /*  1210 */   116,  177,   79,   80,   81,   82,  123,  124,   85,   86,
 /*  1220 */    87,   88,   89,   90,   91,   92,  123,   94,   95,   96,
 /*  1230 */    97,   98,   99,  100,  101,  102,  103,  104,    4,  136,
 /*  1240 */     4,  100,  241,  118,  284,  274,  170,  114,  123,  124,
 /*  1250 */   118,   79,   80,   81,   82,  123,  124,   85,   86,   87,
 /*  1260 */    88,   89,   90,   91,   92,  108,   94,   95,   96,   97,
 /*  1270 */    98,   99,  100,  101,  102,  103,  104,  152,  123,  124,
 /*  1280 */   123,  124,  116,  122,  123,  124,  114,  212,   79,   80,
 /*  1290 */    81,   82,  137,   57,   85,   86,   87,   88,   89,   90,
 /*  1300 */    91,   92,  121,   94,   95,   96,   97,   98,   99,  100,
 /*  1310 */   101,  102,  103,  104,  275,  183,    4,  123,  124,  205,
 /*  1320 */   165,  192,  193,  114,  236,  205,  238,   79,   80,   81,
 /*  1330 */    82,  292,  257,   85,   86,   87,   88,   89,   90,   91,
 /*  1340 */    92,  113,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  1350 */   102,  103,  104,  117,  160,  241,  212,  123,  124,  123,
 /*  1360 */   124,  241,  114,  236,  114,  238,   79,   80,   81,   82,
 /*  1370 */   113,  137,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1380 */   197,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1390 */   103,  104,  114,  210,  197,  197,    4,  153,  154,  156,
 /*  1400 */   212,  257,  115,   79,   80,   81,   82,  210,  210,   85,
 /*  1410 */    86,   87,   88,   89,   90,   91,   92,  178,   94,   95,
 /*  1420 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  114,
 /*  1430 */   106,   79,   80,   81,   82,  123,  124,   85,   86,   87,
 /*  1440 */    88,   89,   90,   91,   92,  257,   94,   95,   96,   97,
 /*  1450 */    98,   99,  100,  101,  102,  103,  104,  114,  106,   79,
 /*  1460 */    80,   81,   82,  151,    4,   85,   86,   87,   88,   89,
 /*  1470 */    90,   91,   92,  114,   94,   95,   96,   97,   98,   99,
 /*  1480 */   100,  101,  102,  103,  104,   79,   80,   81,   82,  114,
 /*  1490 */    18,   85,   86,   87,   88,   89,   90,   91,   92,    4,
 /*  1500 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1510 */   104,   16,   80,   81,   82,  123,  124,   85,   86,   87,
 /*  1520 */    88,   89,   90,   91,   92,  212,   94,   95,   96,   97,
 /*  1530 */    98,   99,  100,  101,  102,  103,  104,    4,   81,   82,
 /*  1540 */     4,   49,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1550 */    55,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1560 */   103,  104,  113,    4,  197,  115,    6,  197,    4,  197,
 /*  1570 */   257,   76,    4,    8,  113,  183,   81,  210,  118,  197,
 /*  1580 */   210,   49,  210,  123,  124,  197,  219,  220,   72,  219,
 /*  1590 */   220,  113,  210,   98,   99,  114,  113,  137,  210,    4,
 /*  1600 */   105,  197,    4,  113,  197,   49,  234,  197,  113,  114,
 /*  1610 */   113,   16,  148,  118,  210,  120,  234,  210,  123,  124,
 /*  1620 */   210,  134,  106,    4,  254,  130,  219,  220,   81,    4,
 /*  1630 */   120,  142,  137,  138,  139,  140,  197,  115,  234,   88,
 /*  1640 */     4,  274,  197,  276,  274,  197,  201,  259,  197,  210,
 /*  1650 */    55,  118,  197,  281,  118,  210,  123,  124,  210,  123,
 /*  1660 */   124,  210,   13,  281,  161,  210,  171,  197,  147,  174,
 /*  1670 */   175,   76,  177,  137,  219,  220,   81,  118,   88,  269,
 /*  1680 */   210,  274,  123,  124,  151,  281,  118,  123,  124,  219,
 /*  1690 */   220,  123,  124,   98,   99,   88,  137,    4,   88,    4,
 /*  1700 */   105,  197,  172,   24,  197,  137,   18,  173,  113,  114,
 /*  1710 */   146,   16,  154,  118,  210,  120,  118,  210,  123,  124,
 /*  1720 */     4,  123,  124,  219,  220,  130,  219,  220,  197,  274,
 /*  1730 */   147,   50,  137,  138,  139,  140,  106,  118,    4,   25,
 /*  1740 */   115,  210,  123,  124,  274,  197,  106,  299,  123,   43,
 /*  1750 */    55,   61,  197,  121,  118,   50,  181,  142,  210,  123,
 /*  1760 */   124,  113,  112,  165,    4,  210,  171,  219,  220,  174,
 /*  1770 */   175,   76,  177,  137,  219,  220,   81,  197,  274,  162,
 /*  1780 */   120,  274,  197,    4,  197,  160,  201,   81,  197,  113,
 /*  1790 */   210,  114,  112,   98,   99,  210,  265,  210,  114,    4,
 /*  1800 */   105,  210,  110,   48,  185,   47,  219,  220,  113,    4,
 /*  1810 */   209,   16,  275,  118,  260,  120,  123,  124,  123,  124,
 /*  1820 */   296,  225,  274,  197,  197,  130,  298,    4,  135,  274,
 /*  1830 */   197,  197,  137,  138,  139,  140,  210,  210,    4,  123,
 /*  1840 */   124,  225,  197,  210,  210,  265,  219,  220,  142,  197,
 /*  1850 */    55,  117,  219,  220,  148,  210,  265,  123,  124,  298,
 /*  1860 */   196,  274,  210,  107,  197,  197,  171,  197,  152,  174,
 /*  1870 */   175,   76,  177,  178,   64,  197,   81,  210,  210,  197,
 /*  1880 */   210,  198,  197,  123,  124,  196,  219,  220,  210,  219,
 /*  1890 */   220,  265,  210,   98,   99,  210,  196,  219,  220,    4,
 /*  1900 */   105,  274,  123,  124,  219,  220,  196,  274,  113,  114,
 /*  1910 */   198,   16,   77,  118,  197,  120,  137,  197,  123,  124,
 /*  1920 */     4,  201,  200,  121,  203,  130,  197,  210,  123,  124,
 /*  1930 */   210,  204,  137,  138,  139,  140,  219,  220,  275,  210,
 /*  1940 */   197,  274,  137,  197,  274,  185,  123,  124,   73,   81,
 /*  1950 */    55,  117,  274,  210,  178,  167,  210,  123,  124,  274,
 /*  1960 */   104,  197,  219,  220,  197,  197,  171,  197,    4,  174,
 /*  1970 */   175,   76,  177,  277,  210,  197,   81,  210,  210,  197,
 /*  1980 */   210,  243,  197,  219,  220,    4,  219,  220,  210,  219,
 /*  1990 */   220,  274,  210,   98,   99,  210,  153,    4,  269,    4,
 /*  2000 */   105,  219,  220,  249,  219,  220,  170,  184,  113,  197,
 /*  2010 */   251,   16,  250,  118,  168,  120,  197,  274,  123,  124,
 /*  2020 */   201,  252,  210,  197,  166,  130,  253,  201,  169,  210,
 /*  2030 */   197,  224,  137,  138,  139,  140,  210,  113,  274,  123,
 /*  2040 */   124,  274,  197,  210,  274,  197,  104,  197,  197,  224,
 /*  2050 */    55,  197,  219,  220,  282,  210,  274,    4,  210,  274,
 /*  2060 */   210,  210,  197,  263,  210,  116,  171,  219,  220,  174,
 /*  2070 */   175,   76,  177,  219,  220,  210,   81,  197,  197,  154,
 /*  2080 */   263,  165,  201,  245,  219,  220,   39,  123,  124,  197,
 /*  2090 */   210,  210,  116,   98,   99,  221,  197,  197,  142,    4,
 /*  2100 */   105,  137,  210,  221,  123,  124,  230,  274,  113,  210,
 /*  2110 */   210,   16,  221,  118,  141,  120,  123,  124,  123,  124,
 /*  2120 */   223,  116,  274,  197,  197,  130,  221,  201,  274,  221,
 /*  2130 */   137,  224,  137,  138,  139,  140,  210,  210,    4,  274,
 /*  2140 */   197,  197,    9,  230,   11,  197,   13,  224,  197,  201,
 /*  2150 */    55,  197,  171,  210,  210,  197,   23,  221,  210,   26,
 /*  2160 */   221,  210,  197,  200,  210,  197,  171,  197,  210,  174,
 /*  2170 */   175,   76,  177,  219,  220,  210,  123,  124,  210,  224,
 /*  2180 */   210,  221,    4,  263,  219,  220,   53,  116,  197,  200,
 /*  2190 */   137,   58,  263,   98,   99,  116,   63,   64,  287,  197,
 /*  2200 */   105,  210,   69,   33,  116,   72,  288,   74,  113,  178,
 /*  2210 */   219,  220,  210,  118,  197,  120,  197,  237,  123,  124,
 /*  2220 */   201,  219,  220,  197,  249,  130,   79,  210,  274,  210,
 /*  2230 */   197,  116,  137,  138,  139,  140,  210,  197,    4,  274,
 /*  2240 */   116,  197,  109,  210,  111,  219,  220,  270,  197,  113,
 /*  2250 */   210,  273,  219,  220,  210,  142,  249,  123,  124,    4,
 /*  2260 */   237,  210,  197,  219,  220,  274,  171,  197,    4,  174,
 /*  2270 */   175,  137,  177,  197,    4,  210,  274,  200,  263,  197,
 /*  2280 */   210,  116,  116,  150,  219,  220,  210,  249,  263,  219,
 /*  2290 */   220,  197,  210,  200,  239,  219,  220,   77,  197,  116,
 /*  2300 */   274,  123,  124,  239,  210,  116,  239,  274,  116,  197,
 /*  2310 */   116,  210,  239,  219,  220,  137,  116,  263,  274,  186,
 /*  2320 */   219,  220,  210,  197,   20,  291,  291,  116,  116,  263,
 /*  2330 */   116,  219,  220,   17,  293,  263,  210,  278,  246,  274,
 /*  2340 */   197,  284,  197,  222,  274,  219,  220,  248,  197,  262,
 /*  2350 */   274,  117,  284,  210,  197,  210,  228,  123,  124,  222,
 /*  2360 */   197,  210,  219,  220,  219,  220,  264,  210,  274,  223,
 /*  2370 */   219,  220,  232,  210,  264,  274,  219,  220,  123,  124,
 /*  2380 */   264,  249,  219,  220,  249,  195,  274,  123,  124,  212,
 /*  2390 */   246,  212,  137,  123,  124,  286,  212,  212,  279,  285,
 /*  2400 */   274,  137,  238,  244,  229,  229,  219,  219,  297,  261,
 /*  2410 */   229,   72,    4,  233,  300,  300,  300,  274,  300,  274,
 /*  2420 */   300,  300,  300,  300,  300,  274,  300,  300,  300,  300,
 /*  2430 */   300,  274,  300,  300,  300,  300,  300,  274,  300,  300,
 /*  2440 */   300,  171,
};
#define YY_SHIFT_USE_DFLT (-113)
#define YY_SHIFT_COUNT (466)
#define YY_SHIFT_MIN   (-112)
#define YY_SHIFT_MAX   (2408)
static const short yy_shift_ofst[] = {
 /*     0 */   612,   -4, 2133, 1034, 1516, 1795, 1795, 1795,  893,  330,
 /*    10 */  1695, 1895, 1895, 1895, 1895, 1032,  451,  451,  285,   99,
 /*    20 */   224, 1595, 1495, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
 /*    30 */  1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
 /*    40 */  1895, 1995, 1895, 1895, 1895, 1895, 1995, 1895, 1895, 1895,
 /*    50 */  1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
 /*    60 */  1895, 1895, 1895, 2095, 1161,    0,  338, 1161, 1981, 1981,
 /*    70 */  1981, 1981,  613,  613,  149,  436,  180,  164, 1636, 1619,
 /*    80 */  1598, 1125, 1568,  996, 1559,  996, 1536, 1460, 1533, 1236,
 /*    90 */   675, 2270, 2270, 2270, 2270, 1706, 2270, 2234, 1981,  149,
 /*   100 */  1244,  601,  601,  984,  220,  127,  249,   32, 1155,  831,
 /*   110 */  1132,  671,  944,  833, 1072,  690, 1072,  302,  622,  281,
 /*   120 */   212, 1834, 2264, 1392, 1760, 1916, 1716, 2255, 1734, 2178,
 /*   130 */   878, 2134, 2053, 1993, 1964, 1823, 1312,  930, 1805, 1693,
 /*   140 */  1564, 1779, 1234,  754,  633, 1625, 1625, 1625,  749, 1194,
 /*   150 */   835, 1017,  744,  323,  123,  497, 1157,  746,  353,   -2,
 /*   160 */  1093, 1093, 1093,  648, 1024, 2339, 2339, 2408, 2339, 2339,
 /*   170 */  2339, -113, -113,  518,  761,  761,  761,  761,  761,  761,
 /*   180 */   761,  761,  761,  928,  891,  841,  804,  570, 1352, 1324,
 /*   190 */  1287, 1248, 1209, 1172, 1133,  730,  640,  -72, 1406, 1380,
 /*   200 */  1432, 1457, 1457,  -37,   87,   87,   87,   87,  -54,   43,
 /*   210 */    78,  667,  667,  606,  263,   94,  359,  359,  359,  421,
 /*   220 */   -84,  426,  549,  572,   98, 1103,  994,  336,  980,  135,
 /*   230 */   265, 1076, 1076, 1062, 1062,  259, 1082,  288, 1035, 1062,
 /*   240 */   -34, 1035,  486,  486,  433,    3,  783,  267, 2316, 2214,
 /*   250 */  2212, 2211, 2304, 2304, 2200, 2194, 2220, 2192, 2220, 2189,
 /*   260 */  2220, 2183, 2220, 2166, 1835, 1836, 2165, 1835, 2147, 1836,
 /*   270 */  2113, 2136, 2124, 2115, 2147, 1836, 2088, 2031, 2170, 2079,
 /*   280 */  1835, 2071, 1924, 1835, 2005, 1924, 1956, 1956, 1956, 1956,
 /*   290 */  2047, 1924, 1956, 1973, 1956, 2047, 1956, 1956, 1976, 1925,
 /*   300 */  1949, 1924, 1942, 1924, 1859, 1858, 1846, 1788, 1836, 1843,
 /*   310 */  1776, 1868, 1856, 1875, 1802, 1835, 1810, 1810, 1756, 1756,
 /*   320 */  1756, 1756, -113, -113, -113, -113, -113, -113, -113, -113,
 /*   330 */  -113, -113,  681,   90,  838,  468, -110,   81,  466,   16,
 /*   340 */  1081,  923,  341,  846,  723,  797,  767,  766,  514,  291,
 /*   350 */   -60,  -16,  173,  218,  203,  183,  112,  104, -112, 1758,
 /*   360 */  1755, 1692, 1680, 1684, 1677, 1660, 1676, 1617, 1650, 1648,
 /*   370 */  1615, 1575, 1705, 1632, 1681, 1690, 1714, 1640, 1630, 1558,
 /*   380 */  1534, 1583, 1679, 1688, 1530, 1610, 1607, 1590, 1551, 1521,
 /*   390 */  1503, 1649, 1489, 1522, 1510, 1547, 1464, 1487, 1497, 1556,
 /*   400 */  1490, 1483, 1481, 1478, 1532, 1565, 1461, 1450, 1560, 1449,
 /*   410 */  1492, 1472, 1375, 1359, 1343, 1315, 1239, 1278, 1181, 1243,
 /*   420 */  1257, 1250, 1228, 1181, 1141, 1166, 1094, 1041, 1080, 1066,
 /*   430 */   990, 1052, 1104, 1123, 1021,  990, 1044,  925, 1027,  921,
 /*   440 */   890,  849,  791,  836,  811,  782,  791,  724,  710,  677,
 /*   450 */   635,  620,  472,  462,  452,  437,  311,  384,  169,  239,
 /*   460 */   139,  136,  133,   82,   51,  -99, -100,
};
#define YY_REDUCE_USE_DFLT (-109)
#define YY_REDUCE_COUNT (331)
#define YY_REDUCE_MIN   (-108)
#define YY_REDUCE_MAX   (2190)
static const short yy_reduce_ofst[] = {
 /*     0 */   380,  908,  854,  -80,   -9,  293,  255,  168,   85, 1370,
 /*    10 */  1367,  904,  368,   24, -108,  110,  430,  347,  346, 2163,
 /*    20 */  2157, 2151, 2145, 2143, 2126, 2112, 2101, 2094, 2076, 2070,
 /*    30 */  2065, 2044, 2033, 2026, 2002, 1991, 1965, 1954, 1865, 1854,
 /*    40 */  1848, 1833, 1785, 1782, 1770, 1767, 1764, 1743, 1717, 1685,
 /*    50 */  1678, 1670, 1667, 1633, 1627, 1587, 1555, 1548, 1507, 1504,
 /*    60 */  1470, 1455, 1407,  971,  669,  941,  221,  845, 1404, 1382,
 /*    70 */  1372,  274,  960,  876,  225,  932,  -26, 1388, 2019, 1948,
 /*    80 */  1926, 1881, 1826, 1729, 1819, 1410, 1720, 1585, 1445, 1448,
 /*    90 */   982, 1626, 1591, 1580, 1531,  410,  235,  902,  192,  588,
 /*   100 */   252,  205,    8, 1039,  292, 2082, 2051, 1944, 1850, 1850,
 /*   110 */  2040, 2017, 1970, 1968, 1127, 1958, 1088, 1951, 1850, 1313,
 /*   120 */  1944, 1943, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1927,
 /*   130 */  1850, 1850, 1850, 1850, 1900, 1850, 1850, 1850, 1899, 1892,
 /*   140 */  1880, 1851, 1850, 1845, 1812, 1188, 1144, 1075, 1778, 1768,
 /*   150 */  1746, 1682, 1668, 1652, 1645,  776, 1634, 1451, 1439, 1198,
 /*   160 */  1197, 1183,  756, 1129, 1120, 1114, 1001,  829,  764,  708,
 /*   170 */   216,  491,  407, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
 /*   180 */  1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
 /*   190 */  1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
 /*   200 */  1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
 /*   210 */  2180, 2188, 2187, 1537, 2111, 2111, 2181, 2176, 2175, 2148,
 /*   220 */  2159, 2164, 2119, 2109, 2114, 2185, 2184, 2179, 2177, 2144,
 /*   230 */  2190, 2135, 2132, 2116, 2110, 2146, 2140, 2128, 2137, 2102,
 /*   240 */  2087, 2121, 2068, 2057, 2099, 2092, 2059, 1537, 2041, 1920,
 /*   250 */  2072, 2066, 2035, 2034, 2054, 1920, 2073, 1920, 2067, 1920,
 /*   260 */  2064, 1920, 2055, 2025, 2093, 2038, 2015, 2077, 2023, 2007,
 /*   270 */  1978, 1977, 1920, 1920, 1980, 1975, 1920, 1918, 1911, 1929,
 /*   280 */  1989, 1920, 1955, 1963, 1920, 1923, 1960, 1939, 1936, 1908,
 /*   290 */  1913, 1907, 1905, 1897, 1891, 1876, 1882, 1874, 1817, 1838,
 /*   300 */  1800, 1825, 1772, 1807, 1773, 1769, 1759, 1762, 1754, 1738,
 /*   310 */  1696, 1663, 1537, 1727, 1721, 1722, 1712, 1683, 1710, 1700,
 /*   320 */  1689, 1664, 1561, 1528, 1524, 1616, 1596, 1554, 1537, 1537,
 /*   330 */  1537, 1601,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   768, 1088, 1193, 1076, 1193, 1076, 1076, 1076, 1193, 1076,
 /*    10 */  1076, 1076, 1076, 1076, 1076,  945, 1199, 1199, 1199, 1076,
 /*    20 */  1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
 /*    30 */  1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
 /*    40 */  1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
 /*    50 */  1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
 /*    60 */  1076, 1076, 1076, 1028, 1199,  938, 1199, 1199, 1199, 1199,
 /*    70 */  1199, 1199, 1199, 1199,  815,  934,  805,  945, 1199, 1199,
 /*    80 */  1199, 1199, 1199, 1002, 1016, 1002,  994,  985, 1199, 1199,
 /*    90 */  1199, 1010, 1010, 1010, 1010,  886, 1010, 1199, 1199, 1199,
 /*   100 */  1199,  973,  973, 1078, 1199, 1163, 1168, 1026, 1199, 1199,
 /*   110 */  1199, 1199, 1199, 1003, 1199, 1199, 1199, 1199,  946,  934,
 /*   120 */  1026, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
 /*   130 */  1199, 1017,  995,  986, 1199, 1199, 1199, 1199, 1199, 1199,
 /*   140 */  1199, 1199, 1199, 1199, 1199,  934,  934,  934, 1199, 1199,
 /*   150 */  1199, 1199, 1027, 1199, 1199,  802, 1199, 1199, 1199,  774,
 /*   160 */  1109, 1199, 1199,  768, 1193, 1193, 1193,  810, 1193, 1193,
 /*   170 */  1193, 1186,  924,  980, 1082, 1083,  951,  990, 1089,  978,
 /*   180 */   982,  981, 1081, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
 /*   190 */  1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
 /*   200 */  1051, 1063, 1050, 1058, 1059, 1062, 1053, 1067, 1052, 1054,
 /*   210 */  1199, 1199, 1199, 1055, 1199, 1199, 1199, 1199, 1199,  937,
 /*   220 */   908, 1199, 1199, 1199, 1137, 1199, 1199,  817, 1199,  922,
 /*   230 */   777,  989,  989,  963,  963,  853,  877,  839,  973,  963,
 /*   240 */   953,  973, 1199, 1199,  935,  922, 1084, 1056, 1177,  954,
 /*   250 */   954,  954, 1162, 1162,  954,  954,  899,  954,  899,  954,
 /*   260 */   899,  954,  899,  954,  799,  989,  954,  799,  890,  989,
 /*   270 */  1022, 1006,  954,  954,  890,  989,  954, 1144, 1142,  954,
 /*   280 */   799,  954, 1097,  799,  954, 1097,  888,  888,  888,  888,
 /*   290 */   869, 1097,  888,  853,  888,  869,  888,  888,  954, 1199,
 /*   300 */   954, 1097, 1103, 1097,  979,  967,  977,  974,  989, 1199,
 /*   310 */  1199, 1078, 1057,  796,  872,  799,  785,  785,  773,  773,
 /*   320 */   773,  773, 1190, 1190, 1186,  855,  855,  940, 1066, 1065,
 /*   330 */  1064,  826, 1090, 1199, 1199, 1199, 1199, 1199, 1199, 1111,
 /*   340 */  1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
 /*   350 */  1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
 /*   360 */   769, 1199, 1199, 1199, 1199, 1199, 1180, 1199, 1199, 1199,
 /*   370 */  1199, 1199, 1199, 1141, 1140, 1199, 1199, 1199, 1199, 1199,
 /*   380 */  1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
 /*   390 */  1199, 1129, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
 /*   400 */  1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
 /*   410 */  1199, 1199, 1199, 1199, 1199, 1030, 1077, 1199,  911,  916,
 /*   420 */  1199, 1199, 1199,  912, 1199, 1199, 1199, 1199, 1199, 1199,
 /*   430 */  1087, 1199, 1199, 1199, 1199,  975, 1199,  968, 1199, 1199,
 /*   440 */  1199, 1199, 1195, 1199, 1199, 1199, 1194, 1199, 1199, 1199,
 /*   450 */  1199, 1199, 1199, 1199, 1199, 1199, 1199, 1029, 1079, 1043,
 /*   460 */  1199, 1042, 1041,  808, 1199,  783, 1199,  765,  770, 1179,
 /*   470 */  1176, 1178, 1173, 1174, 1172, 1175, 1171, 1169, 1170, 1167,
 /*   480 */  1165, 1164, 1166, 1161, 1157, 1117, 1115, 1113, 1122, 1121,
 /*   490 */  1120, 1119, 1118, 1114, 1112, 1116, 1110, 1013,  992,  983,
 /*   500 */   906, 1156, 1154, 1155, 1108, 1106, 1107,  905,  904,  903,
 /*   510 */   898,  897,  896,  895, 1183, 1192, 1191, 1189, 1188, 1187,
 /*   520 */  1181, 1182, 1095, 1094, 1092, 1091, 1093,  801, 1133, 1136,
 /*   530 */  1135, 1134, 1139, 1138, 1131, 1143, 1148, 1147, 1152, 1151,
 /*   540 */  1150, 1149, 1146, 1128, 1021, 1020, 1018, 1015, 1025, 1024,
 /*   550 */  1023, 1014, 1007, 1019,  997, 1005, 1004,  993,  996,  891,
 /*   560 */   988,  984,  987,  907, 1132,  902,  901,  900,  800,  795,
 /*   570 */   956,  794,  793,  804,  875,  876,  884,  887,  882,  885,
 /*   580 */   881,  880,  879,  883,  878,  874,  807,  806,  816,  868,
 /*   590 */   851,  842,  809,  844,  841,  840,  845,  860,  859,  866,
 /*   600 */   865,  864,  863,  862,  858,  861,  857,  856,  846,  838,
 /*   610 */   837,  854,  836,  871,  870,  867,  835,  894,  893,  892,
 /*   620 */   889,  834,  833,  832,  831,  830,  829, 1049, 1048, 1080,
 /*   630 */  1071, 1032, 1031, 1070, 1068, 1079, 1069, 1040,  909,  919,
 /*   640 */   918,  917,  914,  915,  929,  927,  926,  925,  962,  961,
 /*   650 */   960,  959,  958,  957,  950,  948,  943,  942,  955,  949,
 /*   660 */   947,  944,  965,  966,  964,  941,  933,  931,  932,  930,
 /*   670 */  1012, 1009, 1011, 1008,  952,  939,  936,  923,  970,  969,
 /*   680 */  1077, 1198, 1196, 1197, 1100, 1102, 1105, 1104, 1101,  972,
 /*   690 */   971, 1099, 1098, 1072, 1047,  822,  820,  821, 1125, 1124,
 /*   700 */  1127, 1126, 1123,  824,  823,  819,  818, 1045,  913,  910,
 /*   710 */  1039, 1038, 1153, 1074, 1075, 1037, 1033, 1073, 1061, 1060,
 /*   720 */  1046, 1036,  811, 1034, 1044, 1035,  850,  849,  848,  847,
 /*   730 */   921,  920,  828,  843,  827,  825,  803,  798,  797,  792,
 /*   740 */   790,  787,  789,  786,  791,  788,  784,  782,  781,  780,
 /*   750 */   779,  778,  814,  813,  812,  808,  776,  775,  772,  771,
 /*   760 */   767,  766,  764,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "NO",            "NULLS",         "OTHERS",        "PLAN",        
  "QUERY",         "KEY",           "OF",            "OFFSET",      
  "PARTITION",     "PRAGMA",        "PRECEDING",     "RAISE",       
  "RANGE",         "RECURSIVE",     "RELEASE",       "REPLACE",     
  "RESTRICT",      "ROW",           "ROWS",          "ROLLBACK",    
  "SAVEPOINT",     "TEMP",          "TIES",          "TRIGGER",     
  "UNBOUNDED",     "VACUUM",        "VIEW",          "VIRTUAL",     
  "WITH",          "WITHOUT",       "REINDEX",       "RENAME",      
  "CTIME_KW",      "IF",            "ANY",           "OR",          
  "AND",           "NOT",           "IS",            "BETWEEN",     
  "IN",            "ISNULL",        "NOTNULL",       "NE",          
  "EQ",            "GT",            "LE",            "LT",          
  "GE",            "ESCAPE",        "BITAND",        "BITOR",       
  "LSHIFT",        "RSHIFT",        "PLUS",          "MINUS",       
  "STAR",          "SLASH",         "REM",           "CONCAT",      
  "COLLATE",       "BITNOT",        "SEMI",          "TRANSACTION", 
  "ID_TRANS",      "COMMIT",        "TO",            "CREATE",      
  "TABLE",         "LP",            "RP",            "AS",          
  "DOT",           "ID_TAB_NEW",    "ID_DB",         "CTX_ROWID_KW",
  "EXISTS",        "COMMA",         "ID_COL_NEW",    "STRING",      
  "JOIN_KW",       "LEFT_ASSOC",    "ID_COL_TYPE",   "RIGHT_ASSOC", 
  "CONSTRAINT",    "DEFAULT",       "NULL",          "PRIMARY",     
  "UNIQUE",        "CHECK",         "REFERENCES",    "ID_CONSTR",   
  "ID_COLLATE",    "ID_TAB",        "INTEGER",       "FLOAT",       
  "BLOB",          "AUTOINCR",      "ON",            "INSERT",      
  "DELETE",        "UPDATE",        "ID_FK_MATCH",   "SET",         
  "DEFERRABLE",    "FOREIGN",       "DROP",          "ID_VIEW_NEW", 
  "ID_VIEW",       "SELECT",        "VALUES",        "UNION",       
  "ALL",           "EXCEPT",        "INTERSECT",     "DISTINCT",    
  "ID_ALIAS",      "FROM",          "USING",         "JOIN",        
  "ID_JOIN_OPTS",  "ID_IDX",        "ORDER",         "GROUP",       
  "HAVING",        "LIMIT",         "WHERE",         "ID_COL",      
  "INTO",          "NOTHING",       "CASE",          "ID_FN",       
  "ID_ERR_MSG",    "VARIABLE",      "WHEN",          "THEN",        
  "ELSE",          "INDEX",         "ID_IDX_NEW",    "ID_PRAGMA",   
  "ID_TRIG_NEW",   "ID_TRIG",       "ALTER",         "ADD",         
  "error",         "cmd",           "input",         "cmdlist",     
  "ecmd",          "explain",       "cmdx",          "transtype",   
  "trans_opt",     "nm",            "savepoint_opt",  "temp",        
  "ifnotexists",   "fullname",      "columnlist",    "conslist_opt",
  "table_options",  "select",        "column",        "columnid",    
  "type",          "carglist",      "id",            "id_opt",      
  "ids",           "typetoken",     "typename",      "signed",      
  "plus_num",      "minus_num",     "ccons",         "term",        
  "expr",          "onconf",        "sortorder",     "autoinc",     
  "idxlist_opt",   "refargs",       "defer_subclause",  "gen_always",  
  "refarg",        "refact",        "init_deferred_pred_opt",  "conslist",    
  "tconscomma",    "tcons",         "idxlist",       "defer_subclause_opt",
  "resolvetype",   "orconf",        "raisetype",     "ifexists",    
  "select_stmt",   "with",          "selectnowith",  "oneselect",   
  "multiselect_op",  "values",        "distinct",      "selcollist",  
  "from",          "where_opt",     "groupby_opt",   "having_opt",  
  "orderby_opt",   "limit_opt",     "nexprlist",     "exprlist",    
  "sclp",          "as",            "joinsrc",       "singlesrc",   
  "seltablist",    "joinop",        "joinconstr_opt",  "dbnm",        
  "indexed_opt",   "idlist",        "sortlist",      "delete_stmt", 
  "update_stmt",   "setlist",       "idlist_opt",    "insert_stmt", 
  "insert_cmd",    "upsert",        "exprx",         "not_opt",     
  "case_operand",  "case_exprlist",  "case_else",     "likeop",      
  "uniqueflag",    "idxlist_single",  "collate",       "nmnum",       
  "number",        "trigger_time",  "trigger_event",  "foreach_clause",
  "when_clause",   "trigger_cmd_list",  "trigger_cmd",   "database_kw_opt",
  "key_opt",       "kwcolumn_opt",  "create_vtab",   "vtabarglist", 
  "vtabarg",       "vtabargtoken",  "anylist",       "wqlist",      
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= WITHOUT nm",
 /*  35 */ "table_options ::= WITHOUT CTX_ROWID_KW",
 /*  36 */ "ifnotexists ::=",
 /*  37 */ "ifnotexists ::= IF NOT EXISTS",
 /*  38 */ "temp ::= TEMP",
 /*  39 */ "temp ::=",
 /*  40 */ "columnlist ::= columnlist COMMA column",
 /*  41 */ "columnlist ::= column",
 /*  42 */ "column ::= columnid type carglist",
 /*  43 */ "columnid ::= nm",
 /*  44 */ "columnid ::= ID_COL_NEW",
 /*  45 */ "id ::= ID",
 /*  46 */ "id_opt ::= id",
 /*  47 */ "id_opt ::=",
 /*  48 */ "ids ::= ID|STRING",
 /*  49 */ "nm ::= id",
 /*  50 */ "nm ::= STRING",
 /*  51 */ "nm ::= JOIN_KW",
 /*  52 */ "type ::=",
 /*  53 */ "type ::= typetoken",
 /*  54 */ "typetoken ::= typename",
 /*  55 */ "typetoken ::= typename LP signed RP",
 /*  56 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  57 */ "typename ::= ids",
 /*  58 */ "typename ::= typename ids",
 /*  59 */ "typename ::= ID_COL_TYPE",
 /*  60 */ "signed ::= plus_num",
 /*  61 */ "signed ::= minus_num",
 /*  62 */ "carglist ::= carglist ccons",
 /*  63 */ "carglist ::=",
 /*  64 */ "ccons ::= CONSTRAINT nm",
 /*  65 */ "ccons ::= DEFAULT term",
 /*  66 */ "ccons ::= DEFAULT LP expr RP",
 /*  67 */ "ccons ::= DEFAULT PLUS term",
 /*  68 */ "ccons ::= DEFAULT MINUS term",
 /*  69 */ "ccons ::= DEFAULT id",
 /*  70 */ "ccons ::= DEFAULT CTIME_KW",
 /*  71 */ "ccons ::= NULL onconf",
 /*  72 */ "ccons ::= NOT NULL onconf",
 /*  73 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  74 */ "ccons ::= UNIQUE onconf",
 /*  75 */ "ccons ::= CHECK LP expr RP",
 /*  76 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  77 */ "ccons ::= defer_subclause",
 /*  78 */ "ccons ::= COLLATE ids",
 /*  79 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  80 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  81 */ "ccons ::= COLLATE ID_COLLATE",
 /*  82 */ "ccons ::= REFERENCES ID_TAB",
 /*  83 */ "ccons ::= CHECK LP RP",
 /*  84 */ "term ::= NULL",
 /*  85 */ "term ::= INTEGER",
 /*  86 */ "term ::= FLOAT",
 /*  87 */ "term ::= STRING|BLOB",
 /*  88 */ "gen_always ::= GENERATED ALWAYS",
 /*  89 */ "gen_always ::=",
 /*  90 */ "autoinc ::=",
 /*  91 */ "autoinc ::= AUTOINCR",
 /*  92 */ "refargs ::=",
 /*  93 */ "refargs ::= refargs refarg",
 /*  94 */ "refarg ::= MATCH nm",
 /*  95 */ "refarg ::= ON INSERT refact",
 /*  96 */ "refarg ::= ON DELETE refact",
 /*  97 */ "refarg ::= ON UPDATE refact",
 /*  98 */ "refarg ::= MATCH ID_FK_MATCH",
 /*  99 */ "refact ::= SET NULL",
 /* 100 */ "refact ::= SET DEFAULT",
 /* 101 */ "refact ::= CASCADE",
 /* 102 */ "refact ::= RESTRICT",
 /* 103 */ "refact ::= NO ACTION",
 /* 104 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 105 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 106 */ "init_deferred_pred_opt ::=",
 /* 107 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 108 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 109 */ "conslist_opt ::=",
 /* 110 */ "conslist_opt ::= COMMA conslist",
 /* 111 */ "conslist ::= conslist tconscomma tcons",
 /* 112 */ "conslist ::= tcons",
 /* 113 */ "tconscomma ::= COMMA",
 /* 114 */ "tconscomma ::=",
 /* 115 */ "tcons ::= CONSTRAINT nm",
 /* 116 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 117 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 118 */ "tcons ::= CHECK LP expr RP onconf",
 /* 119 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 120 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 121 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 122 */ "tcons ::= CHECK LP RP onconf",
 /* 123 */ "defer_subclause_opt ::=",
 /* 124 */ "defer_subclause_opt ::= defer_subclause",
 /* 125 */ "onconf ::=",
 /* 126 */ "onconf ::= ON CONFLICT resolvetype",
 /* 127 */ "orconf ::=",
 /* 128 */ "orconf ::= OR resolvetype",
 /* 129 */ "resolvetype ::= raisetype",
 /* 130 */ "resolvetype ::= IGNORE",
 /* 131 */ "resolvetype ::= REPLACE",
 /* 132 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 133 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 134 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 135 */ "ifexists ::= IF EXISTS",
 /* 136 */ "ifexists ::=",
 /* 137 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 138 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 139 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 140 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 141 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 142 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 143 */ "cmd ::= select_stmt",
 /* 144 */ "select_stmt ::= select",
 /* 145 */ "select ::= with selectnowith",
 /* 146 */ "selectnowith ::= oneselect",
 /* 147 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 148 */ "selectnowith ::= values",
 /* 149 */ "selectnowith ::= selectnowith COMMA values",
 /* 150 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 151 */ "values ::= VALUES LP nexprlist RP",
 /* 152 */ "values ::= values COMMA LP exprlist RP",
 /* 153 */ "multiselect_op ::= UNION",
 /* 154 */ "multiselect_op ::= UNION ALL",
 /* 155 */ "multiselect_op ::= EXCEPT",
 /* 156 */ "multiselect_op ::= INTERSECT",
 /* 157 */ "distinct ::= DISTINCT",
 /* 158 */ "distinct ::= ALL",
 /* 159 */ "distinct ::=",
 /* 160 */ "sclp ::= selcollist COMMA",
 /* 161 */ "sclp ::=",
 /* 162 */ "selcollist ::= sclp expr as",
 /* 163 */ "selcollist ::= sclp STAR",
 /* 164 */ "selcollist ::= sclp nm DOT STAR",
 /* 165 */ "selcollist ::= sclp",
 /* 166 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 167 */ "as ::= AS nm",
 /* 168 */ "as ::= ids",
 /* 169 */ "as ::= AS ID_ALIAS",
 /* 170 */ "as ::= ID_ALIAS",
 /* 171 */ "as ::=",
 /* 172 */ "from ::=",
 /* 173 */ "from ::= FROM joinsrc",
 /* 174 */ "joinsrc ::= singlesrc seltablist",
 /* 175 */ "joinsrc ::=",
 /* 176 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 177 */ "seltablist ::=",
 /* 178 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 179 */ "singlesrc ::= LP select RP as",
 /* 180 */ "singlesrc ::= LP joinsrc RP as",
 /* 181 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 182 */ "singlesrc ::=",
 /* 183 */ "singlesrc ::= nm DOT",
 /* 184 */ "singlesrc ::= nm DOT ID_TAB",
 /* 185 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 186 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 187 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 188 */ "joinconstr_opt ::= ON expr",
 /* 189 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 190 */ "joinconstr_opt ::=",
 /* 191 */ "dbnm ::=",
 /* 192 */ "dbnm ::= DOT nm",
 /* 193 */ "fullname ::= nm dbnm",
 /* 194 */ "joinop ::= COMMA",
 /* 195 */ "joinop ::= JOIN",
 /* 196 */ "joinop ::= JOIN_KW JOIN",
 /* 197 */ "joinop ::= JOIN_KW nm JOIN",
 /* 198 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 199 */ "joinop ::= ID_JOIN_OPTS",
 /* 200 */ "indexed_opt ::=",
 /* 201 */ "indexed_opt ::= INDEXED BY nm",
 /* 202 */ "indexed_opt ::= NOT INDEXED",
 /* 203 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 204 */ "orderby_opt ::=",
 /* 205 */ "orderby_opt ::= ORDER BY sortlist",
 /* 206 */ "sortlist ::= sortlist COMMA expr sortorder",
 /* 207 */ "sortlist ::= expr sortorder",
 /* 208 */ "sortorder ::= ASC",
 /* 209 */ "sortorder ::= DESC",
 /* 210 */ "sortorder ::=",
 /* 211 */ "groupby_opt ::=",
 /* 212 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 213 */ "groupby_opt ::= GROUP BY",
 /* 214 */ "having_opt ::=",
 /* 215 */ "having_opt ::= HAVING expr",
 /* 216 */ "limit_opt ::=",
 /* 217 */ "limit_opt ::= LIMIT expr",
 /* 218 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 219 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 220 */ "cmd ::= delete_stmt",
 /* 221 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt",
 /* 222 */ "delete_stmt ::= with DELETE FROM",
 /* 223 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 224 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 225 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 226 */ "where_opt ::=",
 /* 227 */ "where_opt ::= WHERE expr",
 /* 228 */ "where_opt ::= WHERE",
 /* 229 */ "cmd ::= update_stmt",
 /* 230 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist where_opt",
 /* 231 */ "update_stmt ::= with UPDATE orconf",
 /* 232 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 233 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 234 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 235 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 236 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 237 */ "setlist ::= nm EQ expr",
 /* 238 */ "setlist ::= LP idlist RP EQ expr",
 /* 239 */ "setlist ::=",
 /* 240 */ "setlist ::= setlist COMMA",
 /* 241 */ "setlist ::= setlist COMMA ID_COL",
 /* 242 */ "setlist ::= ID_COL",
 /* 243 */ "idlist_opt ::=",
 /* 244 */ "idlist_opt ::= LP idlist RP",
 /* 245 */ "idlist ::= idlist COMMA nm",
 /* 246 */ "idlist ::= nm",
 /* 247 */ "idlist ::=",
 /* 248 */ "idlist ::= idlist COMMA ID_COL",
 /* 249 */ "idlist ::= ID_COL",
 /* 250 */ "cmd ::= insert_stmt",
 /* 251 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert",
 /* 252 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES",
 /* 253 */ "insert_stmt ::= with insert_cmd INTO",
 /* 254 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 255 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 256 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 257 */ "insert_cmd ::= INSERT orconf",
 /* 258 */ "insert_cmd ::= REPLACE",
 /* 259 */ "upsert ::=",
 /* 260 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 261 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 262 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 263 */ "exprx ::= nm DOT",
 /* 264 */ "exprx ::= nm DOT nm DOT",
 /* 265 */ "exprx ::= expr not_opt BETWEEN expr AND",
 /* 266 */ "exprx ::= CASE case_operand case_exprlist case_else",
 /* 267 */ "exprx ::= expr not_opt IN LP exprlist",
 /* 268 */ "exprx ::= expr not_opt IN ID_DB",
 /* 269 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 270 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 271 */ "exprx ::= nm DOT ID_TAB|ID_COL",
 /* 272 */ "exprx ::= nm DOT nm DOT ID_COL",
 /* 273 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 274 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 275 */ "exprx ::= term",
 /* 276 */ "exprx ::= CTIME_KW",
 /* 277 */ "exprx ::= LP nexprlist RP",
 /* 278 */ "exprx ::= id",
 /* 279 */ "exprx ::= JOIN_KW",
 /* 280 */ "exprx ::= nm DOT nm",
 /* 281 */ "exprx ::= nm DOT nm DOT nm",
 /* 282 */ "exprx ::= VARIABLE",
 /* 283 */ "exprx ::= expr COLLATE ids",
 /* 284 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 285 */ "exprx ::= ID LP distinct exprlist RP",
 /* 286 */ "exprx ::= ID LP STAR RP",
 /* 287 */ "exprx ::= expr AND expr",
 /* 288 */ "exprx ::= expr OR expr",
 /* 289 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 290 */ "exprx ::= expr EQ|NE expr",
 /* 291 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 292 */ "exprx ::= expr PLUS|MINUS expr",
 /* 293 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 294 */ "exprx ::= expr CONCAT expr",
 /* 295 */ "exprx ::= expr not_opt likeop expr",
 /* 296 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 297 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 298 */ "exprx ::= expr NOT NULL",
 /* 299 */ "exprx ::= expr IS not_opt expr",
 /* 300 */ "exprx ::= NOT expr",
 /* 301 */ "exprx ::= BITNOT expr",
 /* 302 */ "exprx ::= MINUS expr",
 /* 303 */ "exprx ::= PLUS expr",
 /* 304 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 305 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 306 */ "exprx ::= LP select RP",
 /* 307 */ "exprx ::= expr not_opt IN LP select RP",
 /* 308 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 309 */ "exprx ::= EXISTS LP select RP",
 /* 310 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 311 */ "exprx ::= RAISE LP IGNORE RP",
 /* 312 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 313 */ "expr ::=",
 /* 314 */ "expr ::= exprx",
 /* 315 */ "not_opt ::=",
 /* 316 */ "not_opt ::= NOT",
 /* 317 */ "likeop ::= LIKE_KW|MATCH",
 /* 318 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 319 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 320 */ "case_else ::= ELSE expr",
 /* 321 */ "case_else ::=",
 /* 322 */ "case_operand ::= exprx",
 /* 323 */ "case_operand ::=",
 /* 324 */ "exprlist ::= nexprlist",
 /* 325 */ "exprlist ::=",
 /* 326 */ "nexprlist ::= nexprlist COMMA expr",
 /* 327 */ "nexprlist ::= exprx",
 /* 328 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 329 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 330 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 331 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 332 */ "uniqueflag ::= UNIQUE",
 /* 333 */ "uniqueflag ::=",
 /* 334 */ "idxlist_opt ::=",
 /* 335 */ "idxlist_opt ::= LP idxlist RP",
 /* 336 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 337 */ "idxlist ::= idxlist_single",
 /* 338 */ "idxlist_single ::= nm collate sortorder",
 /* 339 */ "idxlist_single ::= ID_COL",
 /* 340 */ "collate ::=",
 /* 341 */ "collate ::= COLLATE ids",
 /* 342 */ "collate ::= COLLATE ID_COLLATE",
 /* 343 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 344 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 345 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 346 */ "cmd ::= VACUUM",
 /* 347 */ "cmd ::= VACUUM nm",
 /* 348 */ "cmd ::= PRAGMA nm dbnm",
 /* 349 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 350 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 351 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 352 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 353 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 354 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 355 */ "nmnum ::= plus_num",
 /* 356 */ "nmnum ::= nm",
 /* 357 */ "nmnum ::= ON",
 /* 358 */ "nmnum ::= DELETE",
 /* 359 */ "nmnum ::= DEFAULT",
 /* 360 */ "plus_num ::= PLUS number",
 /* 361 */ "plus_num ::= number",
 /* 362 */ "minus_num ::= MINUS number",
 /* 363 */ "number ::= INTEGER",
 /* 364 */ "number ::= FLOAT",
 /* 365 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 366 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 367 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 368 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 369 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 370 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 371 */ "trigger_time ::= BEFORE",
 /* 372 */ "trigger_time ::= AFTER",
 /* 373 */ "trigger_time ::= INSTEAD OF",
 /* 374 */ "trigger_time ::=",
 /* 375 */ "trigger_event ::= DELETE",
 /* 376 */ "trigger_event ::= INSERT",
 /* 377 */ "trigger_event ::= UPDATE",
 /* 378 */ "trigger_event ::= UPDATE OF idlist",
 /* 379 */ "foreach_clause ::=",
 /* 380 */ "foreach_clause ::= FOR EACH ROW",
 /* 381 */ "when_clause ::=",
 /* 382 */ "when_clause ::= WHEN expr",
 /* 383 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 384 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 385 */ "trigger_cmd_list ::= SEMI",
 /* 386 */ "trigger_cmd ::= update_stmt",
 /* 387 */ "trigger_cmd ::= insert_stmt",
 /* 388 */ "trigger_cmd ::= delete_stmt",
 /* 389 */ "trigger_cmd ::= select_stmt",
 /* 390 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 391 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 392 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 393 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 394 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 395 */ "cmd ::= DETACH database_kw_opt expr",
 /* 396 */ "key_opt ::=",
 /* 397 */ "key_opt ::= KEY expr",
 /* 398 */ "database_kw_opt ::= DATABASE",
 /* 399 */ "database_kw_opt ::=",
 /* 400 */ "cmd ::= REINDEX",
 /* 401 */ "cmd ::= REINDEX nm dbnm",
 /* 402 */ "cmd ::= REINDEX ID_COLLATE",
 /* 403 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 404 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 405 */ "cmd ::= ANALYZE",
 /* 406 */ "cmd ::= ANALYZE nm dbnm",
 /* 407 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 408 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 409 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 410 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 411 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 412 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 413 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 414 */ "kwcolumn_opt ::=",
 /* 415 */ "kwcolumn_opt ::= COLUMNKW",
 /* 416 */ "cmd ::= create_vtab",
 /* 417 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 418 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 419 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 420 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 421 */ "vtabarglist ::= vtabarg",
 /* 422 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 423 */ "vtabarg ::=",
 /* 424 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 425 */ "vtabargtoken ::= ANY",
 /* 426 */ "vtabargtoken ::= LP anylist RP",
 /* 427 */ "anylist ::=",
 /* 428 */ "anylist ::= anylist LP anylist RP",
 /* 429 */ "anylist ::= anylist ANY",
 /* 430 */ "with ::=",
 /* 431 */ "with ::= WITH wqlist",
 /* 432 */ "with ::= WITH RECURSIVE wqlist",
 /* 433 */ "wqlist ::= nm idxlist_opt AS LP select RP",
 /* 434 */ "wqlist ::= wqlist COMMA nm idxlist_opt AS LP select RP",
 /* 435 */ "wqlist ::= ID_TAB_NEW",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 189: /* cmd */
    case 192: /* ecmd */
    case 194: /* cmdx */
    case 240: /* select_stmt */
    case 267: /* delete_stmt */
    case 268: /* update_stmt */
    case 271: /* insert_stmt */
    case 290: /* trigger_cmd */
    case 294: /* create_vtab */
{
delete (yypminor->yy563);
}
      break;
    case 193: /* explain */
{
delete (yypminor->yy211);
}
      break;
    case 195: /* transtype */
    case 196: /* trans_opt */
{
delete (yypminor->yy524);
}
      break;
    case 197: /* nm */
    case 204: /* table_options */
    case 207: /* columnid */
    case 210: /* id */
    case 211: /* id_opt */
    case 212: /* ids */
    case 214: /* typename */
    case 263: /* dbnm */
    case 282: /* collate */
    case 296: /* vtabarg */
    case 297: /* vtabargtoken */
    case 298: /* anylist */
{
delete (yypminor->yy79);
}
      break;
    case 198: /* savepoint_opt */
    case 200: /* ifnotexists */
    case 223: /* autoinc */
    case 227: /* gen_always */
    case 232: /* tconscomma */
    case 239: /* ifexists */
    case 275: /* not_opt */
    case 280: /* uniqueflag */
    case 291: /* database_kw_opt */
    case 293: /* kwcolumn_opt */
{
delete (yypminor->yy51);
}
      break;
    case 199: /* temp */
    case 246: /* distinct */
{
delete (yypminor->yy466);
}
      break;
    case 201: /* fullname */
{
delete (yypminor->yy600);
}
      break;
    case 202: /* columnlist */
{
delete (yypminor->yy402);
}
      break;
    case 203: /* conslist_opt */
    case 231: /* conslist */
{
delete (yypminor->yy493);
}
      break;
    case 205: /* select */
    case 242: /* selectnowith */
{
delete (yypminor->yy513);
}
      break;
    case 206: /* column */
{
delete (yypminor->yy387);
}
      break;
    case 208: /* type */
    case 213: /* typetoken */
{
delete (yypminor->yy537);
}
      break;
    case 209: /* carglist */
{
delete (yypminor->yy491);
}
      break;
    case 215: /* signed */
    case 216: /* plus_num */
    case 217: /* minus_num */
    case 219: /* term */
    case 283: /* nmnum */
    case 284: /* number */
{
delete (yypminor->yy69);
}
      break;
    case 218: /* ccons */
{
delete (yypminor->yy544);
}
      break;
    case 220: /* expr */
    case 249: /* where_opt */
    case 251: /* having_opt */
    case 274: /* exprx */
    case 276: /* case_operand */
    case 278: /* case_else */
{
delete (yypminor->yy552);
}
      break;
    case 221: /* onconf */
    case 236: /* resolvetype */
    case 237: /* orconf */
{
delete (yypminor->yy538);
}
      break;
    case 222: /* sortorder */
{
delete (yypminor->yy389);
}
      break;
    case 224: /* idxlist_opt */
    case 234: /* idxlist */
{
delete (yypminor->yy423);
}
      break;
    case 225: /* refargs */
{
delete (yypminor->yy264);
}
      break;
    case 226: /* defer_subclause */
    case 235: /* defer_subclause_opt */
{
delete (yypminor->yy329);
}
      break;
    case 228: /* refarg */
{
delete (yypminor->yy547);
}
      break;
    case 229: /* refact */
{
delete (yypminor->yy545);
}
      break;
    case 230: /* init_deferred_pred_opt */
{
delete (yypminor->yy192);
}
      break;
    case 233: /* tcons */
{
delete (yypminor->yy526);
}
      break;
    case 241: /* with */
    case 299: /* wqlist */
{
delete (yypminor->yy161);
}
      break;
    case 243: /* oneselect */
{
delete (yypminor->yy30);
}
      break;
    case 244: /* multiselect_op */
{
delete (yypminor->yy382);
}
      break;
    case 245: /* values */
{
delete (yypminor->yy246);
}
      break;
    case 247: /* selcollist */
    case 256: /* sclp */
{
delete (yypminor->yy453);
}
      break;
    case 248: /* from */
    case 258: /* joinsrc */
{
delete (yypminor->yy31);
}
      break;
    case 250: /* groupby_opt */
    case 254: /* nexprlist */
    case 255: /* exprlist */
    case 277: /* case_exprlist */
{
delete (yypminor->yy111);
}
      break;
    case 252: /* orderby_opt */
    case 266: /* sortlist */
{
delete (yypminor->yy363);
}
      break;
    case 253: /* limit_opt */
{
delete (yypminor->yy444);
}
      break;
    case 257: /* as */
{
delete (yypminor->yy280);
}
      break;
    case 259: /* singlesrc */
{
delete (yypminor->yy361);
}
      break;
    case 260: /* seltablist */
{
delete (yypminor->yy11);
}
      break;
    case 261: /* joinop */
{
delete (yypminor->yy101);
}
      break;
    case 262: /* joinconstr_opt */
{
delete (yypminor->yy95);
}
      break;
    case 264: /* indexed_opt */
{
delete (yypminor->yy432);
}
      break;
    case 265: /* idlist */
    case 270: /* idlist_opt */
    case 295: /* vtabarglist */
{
delete (yypminor->yy575);
}
      break;
    case 269: /* setlist */
{
delete (yypminor->yy201);
}
      break;
    case 272: /* insert_cmd */
{
delete (yypminor->yy104);
}
      break;
    case 273: /* upsert */
{
delete (yypminor->yy440);
}
      break;
    case 279: /* likeop */
{
delete (yypminor->yy281);
}
      break;
    case 281: /* idxlist_single */
{
delete (yypminor->yy308);
}
      break;
    case 285: /* trigger_time */
{
delete (yypminor->yy252);
}
      break;
    case 286: /* trigger_event */
{
delete (yypminor->yy391);
}
      break;
    case 287: /* foreach_clause */
{
delete (yypminor->yy203);
}
      break;
    case 288: /* when_clause */
    case 292: /* key_opt */
{
if ((yypminor->yy552)) delete (yypminor->yy552);
}
      break;
    case 289: /* trigger_cmd_list */
{
delete (yypminor->yy270);
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 190, 1 },
  { 191, 2 },
  { 191, 1 },
  { 192, 1 },
  { 192, 3 },
  { 193, 0 },
  { 193, 1 },
  { 193, 3 },
  { 194, 1 },
  { 189, 3 },
  { 196, 0 },
  { 196, 1 },
  { 196, 2 },
  { 196, 2 },
  { 195, 0 },
  { 195, 1 },
  { 195, 1 },
  { 195, 1 },
  { 189, 2 },
  { 189, 2 },
  { 189, 2 },
  { 198, 1 },
  { 198, 0 },
  { 189, 2 },
  { 189, 3 },
  { 189, 5 },
  { 189, 2 },
  { 189, 3 },
  { 189, 5 },
  { 189, 10 },
  { 189, 7 },
  { 189, 7 },
  { 189, 5 },
  { 204, 0 },
  { 204, 2 },
  { 204, 2 },
  { 200, 0 },
  { 200, 3 },
  { 199, 1 },
  { 199, 0 },
  { 202, 3 },
  { 202, 1 },
  { 206, 3 },
  { 207, 1 },
  { 207, 1 },
  { 210, 1 },
  { 211, 1 },
  { 211, 0 },
  { 212, 1 },
  { 197, 1 },
  { 197, 1 },
  { 197, 1 },
  { 208, 0 },
  { 208, 1 },
  { 213, 1 },
  { 213, 4 },
  { 213, 6 },
  { 214, 1 },
  { 214, 2 },
  { 214, 1 },
  { 215, 1 },
  { 215, 1 },
  { 209, 2 },
  { 209, 0 },
  { 218, 2 },
  { 218, 2 },
  { 218, 4 },
  { 218, 3 },
  { 218, 3 },
  { 218, 2 },
  { 218, 2 },
  { 218, 2 },
  { 218, 3 },
  { 218, 5 },
  { 218, 2 },
  { 218, 4 },
  { 218, 4 },
  { 218, 1 },
  { 218, 2 },
  { 218, 6 },
  { 218, 2 },
  { 218, 2 },
  { 218, 2 },
  { 218, 3 },
  { 219, 1 },
  { 219, 1 },
  { 219, 1 },
  { 219, 1 },
  { 227, 2 },
  { 227, 0 },
  { 223, 0 },
  { 223, 1 },
  { 225, 0 },
  { 225, 2 },
  { 228, 2 },
  { 228, 3 },
  { 228, 3 },
  { 228, 3 },
  { 228, 2 },
  { 229, 2 },
  { 229, 2 },
  { 229, 1 },
  { 229, 1 },
  { 229, 2 },
  { 226, 3 },
  { 226, 2 },
  { 230, 0 },
  { 230, 2 },
  { 230, 2 },
  { 203, 0 },
  { 203, 2 },
  { 231, 3 },
  { 231, 1 },
  { 232, 1 },
  { 232, 0 },
  { 233, 2 },
  { 233, 7 },
  { 233, 5 },
  { 233, 5 },
  { 233, 10 },
  { 233, 2 },
  { 233, 7 },
  { 233, 4 },
  { 235, 0 },
  { 235, 1 },
  { 221, 0 },
  { 221, 3 },
  { 237, 0 },
  { 237, 2 },
  { 236, 1 },
  { 236, 1 },
  { 236, 1 },
  { 189, 4 },
  { 189, 6 },
  { 189, 4 },
  { 239, 2 },
  { 239, 0 },
  { 189, 8 },
  { 189, 7 },
  { 189, 5 },
  { 189, 4 },
  { 189, 6 },
  { 189, 4 },
  { 189, 1 },
  { 240, 1 },
  { 205, 2 },
  { 242, 1 },
  { 242, 3 },
  { 242, 1 },
  { 242, 3 },
  { 243, 9 },
  { 245, 4 },
  { 245, 5 },
  { 244, 1 },
  { 244, 2 },
  { 244, 1 },
  { 244, 1 },
  { 246, 1 },
  { 246, 1 },
  { 246, 0 },
  { 256, 2 },
  { 256, 0 },
  { 247, 3 },
  { 247, 2 },
  { 247, 4 },
  { 247, 1 },
  { 247, 4 },
  { 257, 2 },
  { 257, 1 },
  { 257, 2 },
  { 257, 1 },
  { 257, 0 },
  { 248, 0 },
  { 248, 2 },
  { 258, 2 },
  { 258, 0 },
  { 260, 4 },
  { 260, 0 },
  { 259, 4 },
  { 259, 4 },
  { 259, 4 },
  { 259, 6 },
  { 259, 0 },
  { 259, 2 },
  { 259, 3 },
  { 259, 1 },
  { 259, 3 },
  { 259, 1 },
  { 262, 2 },
  { 262, 4 },
  { 262, 0 },
  { 263, 0 },
  { 263, 2 },
  { 201, 2 },
  { 261, 1 },
  { 261, 1 },
  { 261, 2 },
  { 261, 3 },
  { 261, 4 },
  { 261, 1 },
  { 264, 0 },
  { 264, 3 },
  { 264, 2 },
  { 264, 3 },
  { 252, 0 },
  { 252, 3 },
  { 266, 4 },
  { 266, 2 },
  { 222, 1 },
  { 222, 1 },
  { 222, 0 },
  { 250, 0 },
  { 250, 3 },
  { 250, 2 },
  { 251, 0 },
  { 251, 2 },
  { 253, 0 },
  { 253, 2 },
  { 253, 4 },
  { 253, 4 },
  { 189, 1 },
  { 267, 6 },
  { 267, 3 },
  { 267, 5 },
  { 267, 6 },
  { 267, 4 },
  { 249, 0 },
  { 249, 2 },
  { 249, 1 },
  { 189, 1 },
  { 268, 8 },
  { 268, 3 },
  { 268, 5 },
  { 268, 6 },
  { 268, 4 },
  { 269, 5 },
  { 269, 7 },
  { 269, 3 },
  { 269, 5 },
  { 269, 0 },
  { 269, 2 },
  { 269, 3 },
  { 269, 1 },
  { 270, 0 },
  { 270, 3 },
  { 265, 3 },
  { 265, 1 },
  { 265, 0 },
  { 265, 3 },
  { 265, 1 },
  { 189, 1 },
  { 271, 7 },
  { 271, 7 },
  { 271, 3 },
  { 271, 5 },
  { 271, 4 },
  { 271, 6 },
  { 272, 2 },
  { 272, 1 },
  { 273, 0 },
  { 273, 11 },
  { 273, 8 },
  { 273, 4 },
  { 274, 2 },
  { 274, 4 },
  { 274, 5 },
  { 274, 4 },
  { 274, 5 },
  { 274, 4 },
  { 274, 6 },
  { 274, 1 },
  { 274, 3 },
  { 274, 5 },
  { 274, 3 },
  { 274, 6 },
  { 274, 1 },
  { 274, 1 },
  { 274, 3 },
  { 274, 1 },
  { 274, 1 },
  { 274, 3 },
  { 274, 5 },
  { 274, 1 },
  { 274, 3 },
  { 274, 6 },
  { 274, 5 },
  { 274, 4 },
  { 274, 3 },
  { 274, 3 },
  { 274, 3 },
  { 274, 3 },
  { 274, 3 },
  { 274, 3 },
  { 274, 3 },
  { 274, 3 },
  { 274, 4 },
  { 274, 6 },
  { 274, 2 },
  { 274, 3 },
  { 274, 4 },
  { 274, 2 },
  { 274, 2 },
  { 274, 2 },
  { 274, 2 },
  { 274, 6 },
  { 274, 6 },
  { 274, 3 },
  { 274, 6 },
  { 274, 5 },
  { 274, 4 },
  { 274, 5 },
  { 274, 4 },
  { 274, 6 },
  { 220, 0 },
  { 220, 1 },
  { 275, 0 },
  { 275, 1 },
  { 279, 1 },
  { 277, 5 },
  { 277, 4 },
  { 278, 2 },
  { 278, 0 },
  { 276, 1 },
  { 276, 0 },
  { 255, 1 },
  { 255, 0 },
  { 254, 3 },
  { 254, 1 },
  { 189, 12 },
  { 189, 8 },
  { 189, 7 },
  { 189, 5 },
  { 280, 1 },
  { 280, 0 },
  { 224, 0 },
  { 224, 3 },
  { 234, 3 },
  { 234, 1 },
  { 281, 3 },
  { 281, 1 },
  { 282, 0 },
  { 282, 2 },
  { 282, 2 },
  { 189, 4 },
  { 189, 6 },
  { 189, 4 },
  { 189, 1 },
  { 189, 2 },
  { 189, 3 },
  { 189, 5 },
  { 189, 6 },
  { 189, 5 },
  { 189, 6 },
  { 189, 4 },
  { 189, 2 },
  { 283, 1 },
  { 283, 1 },
  { 283, 1 },
  { 283, 1 },
  { 283, 1 },
  { 216, 2 },
  { 216, 1 },
  { 217, 2 },
  { 284, 1 },
  { 284, 1 },
  { 189, 15 },
  { 189, 12 },
  { 189, 14 },
  { 189, 10 },
  { 189, 7 },
  { 189, 5 },
  { 285, 1 },
  { 285, 1 },
  { 285, 2 },
  { 285, 0 },
  { 286, 1 },
  { 286, 1 },
  { 286, 1 },
  { 286, 3 },
  { 287, 0 },
  { 287, 3 },
  { 288, 0 },
  { 288, 2 },
  { 289, 3 },
  { 289, 2 },
  { 289, 1 },
  { 290, 1 },
  { 290, 1 },
  { 290, 1 },
  { 290, 1 },
  { 238, 1 },
  { 189, 4 },
  { 189, 6 },
  { 189, 4 },
  { 189, 6 },
  { 189, 3 },
  { 292, 0 },
  { 292, 2 },
  { 291, 1 },
  { 291, 0 },
  { 189, 1 },
  { 189, 3 },
  { 189, 2 },
  { 189, 4 },
  { 189, 2 },
  { 189, 1 },
  { 189, 3 },
  { 189, 4 },
  { 189, 2 },
  { 189, 6 },
  { 189, 6 },
  { 189, 6 },
  { 189, 5 },
  { 189, 3 },
  { 293, 0 },
  { 293, 1 },
  { 189, 1 },
  { 294, 8 },
  { 294, 11 },
  { 294, 7 },
  { 294, 5 },
  { 295, 1 },
  { 295, 3 },
  { 296, 0 },
  { 296, 2 },
  { 297, 1 },
  { 297, 3 },
  { 298, 0 },
  { 298, 4 },
  { 298, 2 },
  { 241, 0 },
  { 241, 2 },
  { 241, 3 },
  { 299, 6 },
  { 299, 8 },
  { 299, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy563); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy563);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy563 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy563 = yymsp[-1].minor.yy563;
                                                yygotominor.yy563->explain = yymsp[-2].minor.yy211->explain;
                                                yygotominor.yy563->queryPlan = yymsp[-2].minor.yy211->queryPlan;
                                                delete yymsp[-2].minor.yy211;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy211 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy211 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy211 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 386: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==386);
      case 387: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==387);
      case 388: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==388);
      case 389: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==389);
      case 416: /* cmd ::= create_vtab */ yytestcase(yyruleno==416);
{yygotominor.yy563 = yymsp[0].minor.yy563;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy563 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy524->type,
                                                        yymsp[0].minor.yy524->transactionKw,
                                                        yymsp[0].minor.yy524->name
                                                    );
                                                delete yymsp[0].minor.yy524;
                                                delete yymsp[-1].minor.yy524;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy524 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->transactionKw = true;
                                                yygotominor.yy524->name = *(yymsp[0].minor.yy79);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy524 = new ParserStubTransDetails();
                                                yygotominor.yy524->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy563 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy524->transactionKw,
                                                        yymsp[0].minor.yy524->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy524;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy563 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy524->transactionKw,
                                                        yymsp[0].minor.yy524->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy524;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy563 = new SqliteRollback(
                                                        yymsp[0].minor.yy524->transactionKw,
                                                        yymsp[0].minor.yy524->name
                                                    );
                                                delete yymsp[0].minor.yy524;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 37: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==37);
      case 88: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==88);
      case 91: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==91);
      case 113: /* tconscomma ::= COMMA */ yytestcase(yyruleno==113);
      case 135: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==135);
      case 316: /* not_opt ::= NOT */ yytestcase(yyruleno==316);
      case 332: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==332);
      case 398: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==398);
      case 414: /* kwcolumn_opt ::= */ yytestcase(yyruleno==414);
{yygotominor.yy51 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 36: /* ifnotexists ::= */ yytestcase(yyruleno==36);
      case 89: /* gen_always ::= */ yytestcase(yyruleno==89);
      case 90: /* autoinc ::= */ yytestcase(yyruleno==90);
      case 114: /* tconscomma ::= */ yytestcase(yyruleno==114);
      case 136: /* ifexists ::= */ yytestcase(yyruleno==136);
      case 315: /* not_opt ::= */ yytestcase(yyruleno==315);
      case 333: /* uniqueflag ::= */ yytestcase(yyruleno==333);
      case 399: /* database_kw_opt ::= */ yytestcase(yyruleno==399);
      case 415: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==415);
{yygotominor.yy51 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy563 = new SqliteSavepoint(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy563 = new SqliteRelease(*(yymsp[-1].minor.yy51), *(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy563 = new SqliteRollback(
                                                        yymsp[-3].minor.yy524->transactionKw,
                                                        *(yymsp[-1].minor.yy51),
                                                        *(yymsp[0].minor.yy79)
                                                    );
                                                delete yymsp[-1].minor.yy51;
                                                delete yymsp[-3].minor.yy524;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,198,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy563 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy51),
                                                        *(yymsp[-8].minor.yy466),
                                                        yymsp[-5].minor.yy600->name1,
                                                        yymsp[-5].minor.yy600->name2,
                                                        *(yymsp[-3].minor.yy402),
                                                        *(yymsp[-2].minor.yy493),
                                                        *(yymsp[0].minor.yy79)
                                                    );
                                                delete yymsp[-6].minor.yy51;
                                                delete yymsp[-8].minor.yy466;
                                                delete yymsp[-3].minor.yy402;
                                                delete yymsp[-2].minor.yy493;
                                                delete yymsp[-5].minor.yy600;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy563 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy51),
                                                        *(yymsp[-5].minor.yy466),
                                                        yymsp[-2].minor.yy600->name1,
                                                        yymsp[-2].minor.yy600->name2,
                                                        yymsp[0].minor.yy513
                                                    );
                                                delete yymsp[-3].minor.yy51;
                                                delete yymsp[-5].minor.yy466;
                                                delete yymsp[-2].minor.yy600;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 138: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==138);
      case 369: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==369);
{  yy_destructor(yypParser,199,&yymsp[-5].minor);
  yy_destructor(yypParser,197,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 139: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==139);
      case 370: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==370);
{  yy_destructor(yypParser,199,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
      case 191: /* dbnm ::= */ yytestcase(yyruleno==191);
      case 340: /* collate ::= */ yytestcase(yyruleno==340);
      case 423: /* vtabarg ::= */ yytestcase(yyruleno==423);
      case 427: /* anylist ::= */ yytestcase(yyruleno==427);
{yygotominor.yy79 = new QString();}
        break;
      case 34: /* table_options ::= WITHOUT nm */
      case 35: /* table_options ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==35);
{
                                                if (yymsp[0].minor.yy79->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy79)));

                                                yygotominor.yy79 = yymsp[0].minor.yy79;
                                            }
        break;
      case 38: /* temp ::= TEMP */
{yygotominor.yy466 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 39: /* temp ::= */
      case 159: /* distinct ::= */ yytestcase(yyruleno==159);
{yygotominor.yy466 = new int(0);}
        break;
      case 40: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy402->append(yymsp[0].minor.yy387);
                                                yygotominor.yy402 = yymsp[-2].minor.yy402;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 41: /* columnlist ::= column */
{
                                                yygotominor.yy402 = new ParserCreateTableColumnList();
                                                yygotominor.yy402->append(yymsp[0].minor.yy387);
                                            }
        break;
      case 42: /* column ::= columnid type carglist */
{
                                                yygotominor.yy387 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy79), yymsp[-1].minor.yy537, *(yymsp[0].minor.yy491));
												yygotominor.yy387->fixTypeVsGeneratedAs();
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy491;
                                                objectForTokens = yygotominor.yy387;
                                            }
        break;
      case 43: /* columnid ::= nm */
      case 44: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==44);
      case 49: /* nm ::= id */ yytestcase(yyruleno==49);
      case 57: /* typename ::= ids */ yytestcase(yyruleno==57);
      case 192: /* dbnm ::= DOT nm */ yytestcase(yyruleno==192);
      case 341: /* collate ::= COLLATE ids */ yytestcase(yyruleno==341);
      case 342: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==342);
{yygotominor.yy79 = yymsp[0].minor.yy79;}
        break;
      case 45: /* id ::= ID */
{
                                                yygotominor.yy79 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 46: /* id_opt ::= id */
{
                                                yygotominor.yy79 = yymsp[0].minor.yy79;
                                            }
        break;
      case 47: /* id_opt ::= */
{
                                                yygotominor.yy79 = new QString();
                                            }
        break;
      case 48: /* ids ::= ID|STRING */
      case 51: /* nm ::= JOIN_KW */ yytestcase(yyruleno==51);
{yygotominor.yy79 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 50: /* nm ::= STRING */
{yygotominor.yy79 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 52: /* type ::= */
{yygotominor.yy537 = nullptr;}
        break;
      case 53: /* type ::= typetoken */
{yygotominor.yy537 = yymsp[0].minor.yy537;}
        break;
      case 54: /* typetoken ::= typename */
{
                                                yygotominor.yy537 = new SqliteColumnType(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy537;
                                            }
        break;
      case 55: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy537 = new SqliteColumnType(*(yymsp[-3].minor.yy79), *(yymsp[-1].minor.yy69));
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-1].minor.yy69;
                                                objectForTokens = yygotominor.yy537;
                                            }
        break;
      case 56: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy537 = new SqliteColumnType(*(yymsp[-5].minor.yy79), *(yymsp[-3].minor.yy69), *(yymsp[-1].minor.yy69));
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-3].minor.yy69;
                                                delete yymsp[-1].minor.yy69;
                                                objectForTokens = yygotominor.yy537;
                                            }
        break;
      case 58: /* typename ::= typename ids */
      case 59: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==59);
{
                                                yymsp[-1].minor.yy79->append(" " + *(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                yygotominor.yy79 = yymsp[-1].minor.yy79;
                                            }
        break;
      case 60: /* signed ::= plus_num */
      case 61: /* signed ::= minus_num */ yytestcase(yyruleno==61);
      case 355: /* nmnum ::= plus_num */ yytestcase(yyruleno==355);
      case 360: /* plus_num ::= PLUS number */ yytestcase(yyruleno==360);
      case 361: /* plus_num ::= number */ yytestcase(yyruleno==361);
{yygotominor.yy69 = yymsp[0].minor.yy69;}
        break;
      case 62: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy491->append(yymsp[0].minor.yy544);
                                                yygotominor.yy491 = yymsp[-1].minor.yy491;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 63: /* carglist ::= */
{yygotominor.yy491 = new ParserCreateTableColumnConstraintList();}
        break;
      case 64: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initDefNameOnly(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 65: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initDefTerm(*(yymsp[0].minor.yy69));
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 66: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initDefExpr(yymsp[-1].minor.yy552);
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 67: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initDefTerm(*(yymsp[0].minor.yy69), false);
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 68: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initDefTerm(*(yymsp[0].minor.yy69), true);
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initDefId(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 71: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initNull(*(yymsp[0].minor.yy538));
                                                delete yymsp[0].minor.yy538;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 72: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initNotNull(*(yymsp[0].minor.yy538));
                                                delete yymsp[0].minor.yy538;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 73: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initPk(*(yymsp[-2].minor.yy389), *(yymsp[-1].minor.yy538), *(yymsp[0].minor.yy51));
                                                delete yymsp[-2].minor.yy389;
                                                delete yymsp[0].minor.yy51;
                                                delete yymsp[-1].minor.yy538;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 74: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initUnique(*(yymsp[0].minor.yy538));
                                                delete yymsp[0].minor.yy538;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 75: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initCheck(yymsp[-1].minor.yy552);
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 76: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initFk(*(yymsp[-2].minor.yy79), *(yymsp[-1].minor.yy423), *(yymsp[0].minor.yy264));
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy264;
                                                delete yymsp[-1].minor.yy423;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 77: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initDefer(yymsp[0].minor.yy329->initially, yymsp[0].minor.yy329->deferrable);
                                                delete yymsp[0].minor.yy329;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 78: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initColl(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy544;
                                            }
        break;
      case 79: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 80: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==80);
      case 81: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==81);
      case 82: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==82);
{
                                                if (!yymsp[0].minor.yy79->isNull() && yymsp[0].minor.yy79->toLower() != "stored" && yymsp[0].minor.yy79->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy79)));

                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy544->initGeneratedAs(yymsp[-2].minor.yy552, *(yymsp[-5].minor.yy51), *(yymsp[0].minor.yy79));
												delete yymsp[-5].minor.yy51;
												delete yymsp[0].minor.yy79;
												objectForTokens = yygotominor.yy544;
											}
        break;
      case 83: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy544 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy544->initCheck();
                                                objectForTokens = yygotominor.yy544;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 84: /* term ::= NULL */
{yygotominor.yy69 = new QVariant();}
        break;
      case 85: /* term ::= INTEGER */
      case 363: /* number ::= INTEGER */ yytestcase(yyruleno==363);
{yygotominor.yy69 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 86: /* term ::= FLOAT */
      case 364: /* number ::= FLOAT */ yytestcase(yyruleno==364);
{yygotominor.yy69 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 87: /* term ::= STRING|BLOB */
      case 357: /* nmnum ::= ON */ yytestcase(yyruleno==357);
      case 358: /* nmnum ::= DELETE */ yytestcase(yyruleno==358);
      case 359: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==359);
{yygotominor.yy69 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 92: /* refargs ::= */
{yygotominor.yy264 = new ParserFkConditionList();}
        break;
      case 93: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy264->append(yymsp[0].minor.yy547);
                                                yygotominor.yy264 = yymsp[-1].minor.yy264;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 94: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy547 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 95: /* refarg ::= ON INSERT refact */
{yygotominor.yy547 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy545)); delete yymsp[0].minor.yy545;}
        break;
      case 96: /* refarg ::= ON DELETE refact */
{yygotominor.yy547 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy545)); delete yymsp[0].minor.yy545;}
        break;
      case 97: /* refarg ::= ON UPDATE refact */
      case 98: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==98);
{yygotominor.yy547 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy545)); delete yymsp[0].minor.yy545;}
        break;
      case 99: /* refact ::= SET NULL */
{yygotominor.yy545 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 100: /* refact ::= SET DEFAULT */
{yygotominor.yy545 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 101: /* refact ::= CASCADE */
{yygotominor.yy545 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 102: /* refact ::= RESTRICT */
{yygotominor.yy545 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 103: /* refact ::= NO ACTION */
{yygotominor.yy545 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 104: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy192));
                                                delete yymsp[0].minor.yy192;
                                            }
        break;
      case 105: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy192));
                                                delete yymsp[0].minor.yy192;
                                            }
        break;
      case 106: /* init_deferred_pred_opt ::= */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 107: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 108: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy192 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 109: /* conslist_opt ::= */
{yygotominor.yy493 = new ParserCreateTableConstraintList();}
        break;
      case 110: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy493 = yymsp[0].minor.yy493;}
        break;
      case 111: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy526->afterComma = *(yymsp[-1].minor.yy51);
                                                yymsp[-2].minor.yy493->append(yymsp[0].minor.yy526);
                                                yygotominor.yy493 = yymsp[-2].minor.yy493;
                                                delete yymsp[-1].minor.yy51;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 112: /* conslist ::= tcons */
{
                                                yygotominor.yy493 = new ParserCreateTableConstraintList();
                                                yygotominor.yy493->append(yymsp[0].minor.yy526);
                                            }
        break;
      case 115: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy526 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy526->initNameOnly(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy526;
                                            }
        break;
      case 116: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy526 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy526->initPk(*(yymsp[-3].minor.yy423), *(yymsp[-2].minor.yy51), *(yymsp[0].minor.yy538));
                                                delete yymsp[-2].minor.yy51;
                                                delete yymsp[0].minor.yy538;
                                                delete yymsp[-3].minor.yy423;
                                                objectForTokens = yygotominor.yy526;
                                            }
        break;
      case 117: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy526 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy526->initUnique(*(yymsp[-2].minor.yy423), *(yymsp[0].minor.yy538));
                                                delete yymsp[0].minor.yy538;
                                                delete yymsp[-2].minor.yy423;
                                                objectForTokens = yygotominor.yy526;
                                            }
        break;
      case 118: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy526 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy526->initCheck(yymsp[-2].minor.yy552, *(yymsp[0].minor.yy538));
                                                objectForTokens = yygotominor.yy526;
                                            }
        break;
      case 119: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 120: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==120);
      case 121: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==121);
{
                                                yygotominor.yy526 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy526->initFk(
                                                    *(yymsp[-6].minor.yy423),
                                                    *(yymsp[-3].minor.yy79),
                                                    *(yymsp[-2].minor.yy423),
                                                    *(yymsp[-1].minor.yy264),
                                                    yymsp[0].minor.yy329->initially,
                                                    yymsp[0].minor.yy329->deferrable
                                                );
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-1].minor.yy264;
                                                delete yymsp[0].minor.yy329;
                                                delete yymsp[-2].minor.yy423;
                                                delete yymsp[-6].minor.yy423;
                                                objectForTokens = yygotominor.yy526;
                                            }
        break;
      case 122: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy526 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy526->initCheck();
                                                objectForTokens = yygotominor.yy526;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,221,&yymsp[0].minor);
}
        break;
      case 123: /* defer_subclause_opt ::= */
{yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 124: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy329 = yymsp[0].minor.yy329;}
        break;
      case 125: /* onconf ::= */
      case 127: /* orconf ::= */ yytestcase(yyruleno==127);
{yygotominor.yy538 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 126: /* onconf ::= ON CONFLICT resolvetype */
      case 128: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==128);
{yygotominor.yy538 = yymsp[0].minor.yy538;}
        break;
      case 129: /* resolvetype ::= raisetype */
      case 130: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==130);
      case 131: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==131);
{yygotominor.yy538 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 132: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy563 = new SqliteDropTable(*(yymsp[-1].minor.yy51), yymsp[0].minor.yy600->name1, yymsp[0].minor.yy600->name2);
                                                delete yymsp[-1].minor.yy51;
                                                delete yymsp[0].minor.yy600;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 133: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 134: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==134);
      case 141: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==141);
      case 142: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==142);
      case 184: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==184);
      case 185: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==185);
      case 186: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==186);
      case 187: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==187);
      case 271: /* exprx ::= nm DOT ID_TAB|ID_COL */ yytestcase(yyruleno==271);
      case 330: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==330);
      case 331: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==331);
      case 344: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==344);
      case 345: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==345);
      case 353: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==353);
      case 354: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==354);
      case 392: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==392);
      case 393: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==393);
      case 403: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==403);
      case 404: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==404);
      case 407: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==407);
      case 408: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==408);
      case 412: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==412);
      case 413: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==413);
      case 419: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==419);
      case 420: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==420);
{  yy_destructor(yypParser,197,&yymsp[-2].minor);
}
        break;
      case 137: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy563 = new SqliteCreateView(*(yymsp[-6].minor.yy466), *(yymsp[-4].minor.yy51), yymsp[-3].minor.yy600->name1, yymsp[-3].minor.yy600->name2, yymsp[0].minor.yy513, *(yymsp[-2].minor.yy423));
                                                delete yymsp[-6].minor.yy466;
                                                delete yymsp[-4].minor.yy51;
                                                delete yymsp[-3].minor.yy600;
                                                delete yymsp[-2].minor.yy423;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 140: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy563 = new SqliteDropView(*(yymsp[-1].minor.yy51), yymsp[0].minor.yy600->name1, yymsp[0].minor.yy600->name2);
                                                delete yymsp[-1].minor.yy51;
                                                delete yymsp[0].minor.yy600;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 143: /* cmd ::= select_stmt */
      case 220: /* cmd ::= delete_stmt */ yytestcase(yyruleno==220);
      case 229: /* cmd ::= update_stmt */ yytestcase(yyruleno==229);
      case 250: /* cmd ::= insert_stmt */ yytestcase(yyruleno==250);
{
                                                yygotominor.yy563 = yymsp[0].minor.yy563;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 144: /* select_stmt ::= select */
{
                                                yygotominor.yy563 = yymsp[0].minor.yy513;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 145: /* select ::= with selectnowith */
{
                                                yygotominor.yy513 = yymsp[0].minor.yy513;
                                                yymsp[0].minor.yy513->setWith(yymsp[-1].minor.yy161);
                                                objectForTokens = yygotominor.yy513;
                                            }
        break;
      case 146: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy513 = SqliteSelect::append(yymsp[0].minor.yy30);
                                                objectForTokens = yygotominor.yy513;
                                            }
        break;
      case 147: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy513 = SqliteSelect::append(yymsp[-2].minor.yy513, *(yymsp[-1].minor.yy382), yymsp[0].minor.yy30);
                                                delete yymsp[-1].minor.yy382;
                                                objectForTokens = yygotominor.yy513;
                                            }
        break;
      case 148: /* selectnowith ::= values */
{
                                                yygotominor.yy513 = SqliteSelect::append(*(yymsp[0].minor.yy246));
                                                delete yymsp[0].minor.yy246;
                                                objectForTokens = yygotominor.yy513;
                                            }
        break;
      case 149: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy513 = SqliteSelect::append(yymsp[-2].minor.yy513, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy246));
                                                delete yymsp[0].minor.yy246;
                                                objectForTokens = yygotominor.yy513;
                                            }
        break;
      case 150: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy30 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy466),
                                                        *(yymsp[-6].minor.yy453),
                                                        yymsp[-5].minor.yy31,
                                                        yymsp[-4].minor.yy552,
                                                        *(yymsp[-3].minor.yy111),
                                                        yymsp[-2].minor.yy552,
                                                        *(yymsp[-1].minor.yy363),
                                                        yymsp[0].minor.yy444
                                                    );
                                                delete yymsp[-6].minor.yy453;
                                                delete yymsp[-7].minor.yy466;
                                                delete yymsp[-3].minor.yy111;
                                                delete yymsp[-1].minor.yy363;
                                                objectForTokens = yygotominor.yy30;
                                            }
        break;
      case 151: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy246 = new ParserExprNestedList();
                                                yygotominor.yy246->append(*(yymsp[-1].minor.yy111));
                                                delete yymsp[-1].minor.yy111;
                                            }
        break;
      case 152: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy246->append(*(yymsp[-1].minor.yy111));
                                                yygotominor.yy246 = yymsp[-4].minor.yy246;
                                                delete yymsp[-1].minor.yy111;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 153: /* multiselect_op ::= UNION */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 154: /* multiselect_op ::= UNION ALL */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 155: /* multiselect_op ::= EXCEPT */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 156: /* multiselect_op ::= INTERSECT */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 157: /* distinct ::= DISTINCT */
{yygotominor.yy466 = new int(1);}
        break;
      case 158: /* distinct ::= ALL */
{yygotominor.yy466 = new int(2);}
        break;
      case 160: /* sclp ::= selcollist COMMA */
{yygotominor.yy453 = yymsp[-1].minor.yy453;}
        break;
      case 161: /* sclp ::= */
{yygotominor.yy453 = new ParserResultColumnList();}
        break;
      case 162: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy552,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->asKw : false,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->name : QString()
                                                    );

                                                yymsp[-2].minor.yy453->append(obj);
                                                yygotominor.yy453 = yymsp[-2].minor.yy453;
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 163: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy453->append(obj);
                                                yygotominor.yy453 = yymsp[-1].minor.yy453;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 164: /* selcollist ::= sclp nm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        *(yymsp[-2].minor.yy79)
                                                    );
                                                yymsp[-3].minor.yy453->append(obj);
                                                yygotominor.yy453 = yymsp[-3].minor.yy453;
                                                delete yymsp[-2].minor.yy79;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 165: /* selcollist ::= sclp */
      case 166: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==166);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy453 = yymsp[0].minor.yy453;
                                            }
        break;
      case 167: /* as ::= AS nm */
{
                                                yygotominor.yy280 = new ParserStubAlias(*(yymsp[0].minor.yy79), true);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 168: /* as ::= ids */
      case 169: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==169);
      case 170: /* as ::= ID_ALIAS */ yytestcase(yyruleno==170);
{
                                                yygotominor.yy280 = new ParserStubAlias(*(yymsp[0].minor.yy79), false);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 171: /* as ::= */
{yygotominor.yy280 = nullptr;}
        break;
      case 172: /* from ::= */
{yygotominor.yy31 = nullptr;}
        break;
      case 173: /* from ::= FROM joinsrc */
{yygotominor.yy31 = yymsp[0].minor.yy31;}
        break;
      case 174: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy31 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy361,
                                                        *(yymsp[0].minor.yy11)
                                                    );
                                                delete yymsp[0].minor.yy11;
                                                objectForTokens = yygotominor.yy31;
                                            }
        break;
      case 175: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy31 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy31;
                                            }
        break;
      case 176: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy101, yymsp[-1].minor.yy361, yymsp[0].minor.yy95);

                                                yymsp[-3].minor.yy11->append(src);
                                                yygotominor.yy11 = yymsp[-3].minor.yy11;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 177: /* seltablist ::= */
{
                                                yygotominor.yy11 = new ParserOtherSourceList();
                                            }
        break;
      case 178: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy79),
                                                        *(yymsp[-2].minor.yy79),
                                                        yymsp[-1].minor.yy280 ? yymsp[-1].minor.yy280->asKw : false,
                                                        yymsp[-1].minor.yy280 ? yymsp[-1].minor.yy280->name : QString(),
                                                        yymsp[0].minor.yy432 ? yymsp[0].minor.yy432->notIndexedKw : false,
                                                        yymsp[0].minor.yy432 ? yymsp[0].minor.yy432->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[-1].minor.yy280;
                                                if (yymsp[0].minor.yy432)
                                                    delete yymsp[0].minor.yy432;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 179: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy513,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->asKw : false,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 180: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy31,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->asKw : false,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 181: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy79),
                                                        *(yymsp[-4].minor.yy79),
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->asKw : false,
                                                        yymsp[0].minor.yy280 ? yymsp[0].minor.yy280->name : QString(),
                                                        *(yymsp[-2].minor.yy111)
                                                    );
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[0].minor.yy280;
                                                if (yymsp[-2].minor.yy111)
                                                    delete yymsp[-2].minor.yy111;

                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 182: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 183: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy361->database = *(yymsp[-1].minor.yy79);
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 188: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy95 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy552);
                                                objectForTokens = yygotominor.yy95;
                                            }
        break;
      case 189: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy95 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy575));
                                                delete yymsp[-1].minor.yy575;
                                                objectForTokens = yygotominor.yy95;
                                            }
        break;
      case 190: /* joinconstr_opt ::= */
{yygotominor.yy95 = nullptr;}
        break;
      case 193: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy600 = new ParserFullName();
                                                yygotominor.yy600->name1 = *(yymsp[-1].minor.yy79);
                                                yygotominor.yy600->name2 = *(yymsp[0].minor.yy79);
                                                delete yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 194: /* joinop ::= COMMA */
{
                                                yygotominor.yy101 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy101;
                                            }
        break;
      case 195: /* joinop ::= JOIN */
{
                                                yygotominor.yy101 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy101;
                                            }
        break;
      case 196: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy101 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy101;
                                            }
        break;
      case 197: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy101 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy101;
                                            }
        break;
      case 198: /* joinop ::= JOIN_KW nm nm JOIN */
      case 199: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==199);
{
                                                yygotominor.yy101 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy79), *(yymsp[-1].minor.yy79));
                                                delete yymsp[-2].minor.yy79;
                                                objectForTokens = yygotominor.yy101;
                                            }
        break;
      case 200: /* indexed_opt ::= */
{yygotominor.yy432 = nullptr;}
        break;
      case 201: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy432 = new ParserIndexedBy(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 202: /* indexed_opt ::= NOT INDEXED */
      case 203: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==203);
{yygotominor.yy432 = new ParserIndexedBy(true);}
        break;
      case 204: /* orderby_opt ::= */
{yygotominor.yy363 = new ParserOrderByList();}
        break;
      case 205: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy363 = yymsp[0].minor.yy363;}
        break;
      case 206: /* sortlist ::= sortlist COMMA expr sortorder */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-1].minor.yy552, *(yymsp[0].minor.yy389));
                                                yymsp[-3].minor.yy363->append(obj);
                                                yygotominor.yy363 = yymsp[-3].minor.yy363;
                                                delete yymsp[0].minor.yy389;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 207: /* sortlist ::= expr sortorder */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-1].minor.yy552, *(yymsp[0].minor.yy389));
                                                yygotominor.yy363 = new ParserOrderByList();
                                                yygotominor.yy363->append(obj);
                                                delete yymsp[0].minor.yy389;
                                                objectForTokens = obj;
                                            }
        break;
      case 208: /* sortorder ::= ASC */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 209: /* sortorder ::= DESC */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 210: /* sortorder ::= */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 211: /* groupby_opt ::= */
      case 325: /* exprlist ::= */ yytestcase(yyruleno==325);
{yygotominor.yy111 = new ParserExprList();}
        break;
      case 212: /* groupby_opt ::= GROUP BY nexprlist */
      case 324: /* exprlist ::= nexprlist */ yytestcase(yyruleno==324);
{yygotominor.yy111 = yymsp[0].minor.yy111;}
        break;
      case 213: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy111 = new ParserExprList();
                                            }
        break;
      case 214: /* having_opt ::= */
      case 226: /* where_opt ::= */ yytestcase(yyruleno==226);
      case 321: /* case_else ::= */ yytestcase(yyruleno==321);
      case 323: /* case_operand ::= */ yytestcase(yyruleno==323);
      case 381: /* when_clause ::= */ yytestcase(yyruleno==381);
      case 396: /* key_opt ::= */ yytestcase(yyruleno==396);
{yygotominor.yy552 = nullptr;}
        break;
      case 215: /* having_opt ::= HAVING expr */
      case 227: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==227);
      case 314: /* expr ::= exprx */ yytestcase(yyruleno==314);
      case 320: /* case_else ::= ELSE expr */ yytestcase(yyruleno==320);
      case 322: /* case_operand ::= exprx */ yytestcase(yyruleno==322);
      case 382: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==382);
      case 397: /* key_opt ::= KEY expr */ yytestcase(yyruleno==397);
{yygotominor.yy552 = yymsp[0].minor.yy552;}
        break;
      case 216: /* limit_opt ::= */
{yygotominor.yy444 = nullptr;}
        break;
      case 217: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[0].minor.yy552);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 218: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[-2].minor.yy552, yymsp[0].minor.yy552, true);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 219: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy444 = new SqliteLimit(yymsp[-2].minor.yy552, yymsp[0].minor.yy552, false);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 221: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt */
{
                                                if (yymsp[-1].minor.yy432)
                                                {
                                                    if (!yymsp[-1].minor.yy432->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy563 = new SqliteDelete(
                                                                yymsp[-2].minor.yy600->name1,
                                                                yymsp[-2].minor.yy600->name2,
                                                                yymsp[-1].minor.yy432->indexedBy,
                                                                yymsp[0].minor.yy552,
                                                                yymsp[-5].minor.yy161
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy563 = new SqliteDelete(
                                                                yymsp[-2].minor.yy600->name1,
                                                                yymsp[-2].minor.yy600->name2,
                                                                yymsp[-1].minor.yy432->notIndexedKw,
                                                                yymsp[0].minor.yy552,
                                                                yymsp[-5].minor.yy161
                                                            );
                                                    }
                                                    delete yymsp[-1].minor.yy432;
                                                }
                                                else
                                                {
                                                    yygotominor.yy563 = new SqliteDelete(
                                                            yymsp[-2].minor.yy600->name1,
                                                            yymsp[-2].minor.yy600->name2,
                                                            false,
                                                            yymsp[0].minor.yy552,
                                                            yymsp[-5].minor.yy161
                                                        );
                                                }
                                                delete yymsp[-2].minor.yy600;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 222: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy161;
                                                yygotominor.yy563 = q;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 223: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy161;
                                                q->database = *(yymsp[-1].minor.yy79);
                                                yygotominor.yy563 = q;
                                                objectForTokens = yygotominor.yy563;
                                                delete yymsp[-1].minor.yy79;
                                            }
        break;
      case 224: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 233: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==233);
{  yy_destructor(yypParser,241,&yymsp[-5].minor);
  yy_destructor(yypParser,197,&yymsp[-2].minor);
}
        break;
      case 225: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 234: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==234);
{  yy_destructor(yypParser,241,&yymsp[-3].minor);
}
        break;
      case 228: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy552 = new SqliteExpr();
                                            }
        break;
      case 230: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist where_opt */
{
                                                yygotominor.yy563 = new SqliteUpdate(
                                                        *(yymsp[-5].minor.yy538),
                                                        yymsp[-4].minor.yy600->name1,
                                                        yymsp[-4].minor.yy600->name2,
                                                        yymsp[-3].minor.yy432 ? yymsp[-3].minor.yy432->notIndexedKw : false,
                                                        yymsp[-3].minor.yy432 ? yymsp[-3].minor.yy432->indexedBy : QString(),
                                                        *(yymsp[-1].minor.yy201),
                                                        yymsp[0].minor.yy552,
                                                        yymsp[-7].minor.yy161
                                                    );
                                                delete yymsp[-5].minor.yy538;
                                                delete yymsp[-4].minor.yy600;
                                                delete yymsp[-1].minor.yy201;
                                                if (yymsp[-3].minor.yy432)
                                                    delete yymsp[-3].minor.yy432;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 231: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy161;
                                                yygotominor.yy563 = q;
                                                objectForTokens = yygotominor.yy563;
                                                delete yymsp[0].minor.yy538;
                                            }
        break;
      case 232: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy161;
                                                q->database = *(yymsp[-1].minor.yy79);
                                                yygotominor.yy563 = q;
                                                objectForTokens = yygotominor.yy563;
                                                delete yymsp[-2].minor.yy538;
                                                delete yymsp[-1].minor.yy79;
                                            }
        break;
      case 235: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy201->append(ParserSetValue(*(yymsp[-2].minor.yy79), yymsp[0].minor.yy552));
                                                yygotominor.yy201 = yymsp[-4].minor.yy201;
                                                delete yymsp[-2].minor.yy79;
                                            }
        break;
      case 236: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy201->append(ParserSetValue(*(yymsp[-3].minor.yy575), yymsp[0].minor.yy552));
                                                yygotominor.yy201 = yymsp[-6].minor.yy201;
                                                delete yymsp[-3].minor.yy575;
                                            }
        break;
      case 237: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy201 = new ParserSetValueList();
                                                yygotominor.yy201->append(ParserSetValue(*(yymsp[-2].minor.yy79), yymsp[0].minor.yy552));
                                                delete yymsp[-2].minor.yy79;
                                            }
        break;
      case 238: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy201 = new ParserSetValueList();
                                                yygotominor.yy201->append(ParserSetValue(*(yymsp[-3].minor.yy575), yymsp[0].minor.yy552));
                                                delete yymsp[-3].minor.yy575;
                                            }
        break;
      case 239: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy201 = new ParserSetValueList();
                                            }
        break;
      case 240: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy201 = yymsp[-1].minor.yy201;
                                            }
        break;
      case 241: /* setlist ::= setlist COMMA ID_COL */
      case 242: /* setlist ::= ID_COL */ yytestcase(yyruleno==242);
{  yy_destructor(yypParser,269,&yymsp[-2].minor);
}
        break;
      case 243: /* idlist_opt ::= */
{yygotominor.yy575 = new QStringList();}
        break;
      case 244: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy575 = yymsp[-1].minor.yy575;}
        break;
      case 245: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy575 = yymsp[-2].minor.yy575;
                                                *(yygotominor.yy575) << *(yymsp[0].minor.yy79);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 246: /* idlist ::= nm */
{
                                                yygotominor.yy575 = new QStringList();
                                                *(yygotominor.yy575) << *(yymsp[0].minor.yy79);
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 247: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy575 = new QStringList();
                                            }
        break;
      case 248: /* idlist ::= idlist COMMA ID_COL */
      case 249: /* idlist ::= ID_COL */ yytestcase(yyruleno==249);
{  yy_destructor(yypParser,265,&yymsp[-2].minor);
}
        break;
      case 251: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert */
{
                                                yygotominor.yy563 = new SqliteInsert(
                                                        yymsp[-5].minor.yy104->replace,
                                                        yymsp[-5].minor.yy104->orConflict,
                                                        yymsp[-3].minor.yy600->name1,
                                                        yymsp[-3].minor.yy600->name2,
                                                        *(yymsp[-2].minor.yy575),
                                                        yymsp[-1].minor.yy513,
                                                        yymsp[-6].minor.yy161,
                                                        yymsp[0].minor.yy440
                                                    );
                                                delete yymsp[-3].minor.yy600;
                                                delete yymsp[-5].minor.yy104;
                                                delete yymsp[-2].minor.yy575;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 252: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES */
{
                                                yygotominor.yy563 = new SqliteInsert(
                                                        yymsp[-5].minor.yy104->replace,
                                                        yymsp[-5].minor.yy104->orConflict,
                                                        yymsp[-3].minor.yy600->name1,
                                                        yymsp[-3].minor.yy600->name2,
                                                        *(yymsp[-2].minor.yy575),
                                                        yymsp[-6].minor.yy161
                                                    );
                                                delete yymsp[-3].minor.yy600;
                                                delete yymsp[-5].minor.yy104;
                                                delete yymsp[-2].minor.yy575;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 253: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy104->replace;
                                                q->onConflict = yymsp[-1].minor.yy104->orConflict;
                                                q->with = yymsp[-2].minor.yy161;
                                                yygotominor.yy563 = q;
                                                objectForTokens = yygotominor.yy563;
                                                delete yymsp[-1].minor.yy104;
                                            }
        break;
      case 254: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy104->replace;
                                                q->onConflict = yymsp[-3].minor.yy104->orConflict;
                                                q->with = yymsp[-4].minor.yy161;
                                                q->database = *(yymsp[-1].minor.yy79);
                                                yygotominor.yy563 = q;
                                                objectForTokens = yygotominor.yy563;
                                                delete yymsp[-3].minor.yy104;
                                                delete yymsp[-1].minor.yy79;
                                            }
        break;
      case 255: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,241,&yymsp[-3].minor);
  yy_destructor(yypParser,272,&yymsp[-2].minor);
}
        break;
      case 256: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,241,&yymsp[-5].minor);
  yy_destructor(yypParser,272,&yymsp[-4].minor);
  yy_destructor(yypParser,197,&yymsp[-2].minor);
}
        break;
      case 257: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy104 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy538));
                                                delete yymsp[0].minor.yy538;
                                            }
        break;
      case 258: /* insert_cmd ::= REPLACE */
{yygotominor.yy104 = new ParserStubInsertOrReplace(true);}
        break;
      case 259: /* upsert ::= */
{
                                                yygotominor.yy440 = nullptr;
                                            }
        break;
      case 260: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy440 = new SqliteUpsert(*(yymsp[-7].minor.yy363), yymsp[-5].minor.yy552, *(yymsp[-1].minor.yy201), yymsp[0].minor.yy552);
                                                delete yymsp[-7].minor.yy363;
                                                delete yymsp[-1].minor.yy201;
                                                objectForTokens = yygotominor.yy440;
                                            }
        break;
      case 261: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy440 = new SqliteUpsert(*(yymsp[-4].minor.yy363), yymsp[-2].minor.yy552);
                                                delete yymsp[-4].minor.yy363;
                                                objectForTokens = yygotominor.yy440;
                                            }
        break;
      case 262: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy440 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy440;
                                            }
        break;
      case 263: /* exprx ::= nm DOT */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initId(*(yymsp[-1].minor.yy79), QString(), QString());
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy552;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: nm.>");
                                            }
        break;
      case 264: /* exprx ::= nm DOT nm DOT */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initId(*(yymsp[-3].minor.yy79), *(yymsp[-1].minor.yy79), QString());
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy552;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: nm.nm.>");
                                            }
        break;
      case 265: /* exprx ::= expr not_opt BETWEEN expr AND */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                delete yymsp[-3].minor.yy51;
                                                delete yymsp[-4].minor.yy552;
                                                delete yymsp[-1].minor.yy552;
                                                objectForTokens = yygotominor.yy552;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: expr not_opt BETWEEN expr AND>");
                                            }
        break;
      case 266: /* exprx ::= CASE case_operand case_exprlist case_else */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                delete yymsp[-1].minor.yy111;
                                                delete yymsp[-2].minor.yy552;
                                                delete yymsp[0].minor.yy552;
                                                objectForTokens = yygotominor.yy552;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: CASE operand exprlist else>");
                                            }
        break;
      case 267: /* exprx ::= expr not_opt IN LP exprlist */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                delete yymsp[-3].minor.yy51;
                                                delete yymsp[0].minor.yy111;
                                                delete yymsp[-4].minor.yy552;
                                                objectForTokens = yygotominor.yy552;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: expr not_opt IN LP exprlist>");
                                            }
        break;
      case 268: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,220,&yymsp[-3].minor);
}
        break;
      case 269: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 270: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==270);
{  yy_destructor(yypParser,220,&yymsp[-5].minor);
  yy_destructor(yypParser,197,&yymsp[-2].minor);
}
        break;
      case 272: /* exprx ::= nm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,197,&yymsp[-4].minor);
  yy_destructor(yypParser,197,&yymsp[-2].minor);
}
        break;
      case 273: /* exprx ::= expr COLLATE ID_COLLATE */
      case 274: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==274);
{  yy_destructor(yypParser,220,&yymsp[-2].minor);
}
        break;
      case 275: /* exprx ::= term */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initLiteral(*(yymsp[0].minor.yy69));
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 276: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 277: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initRowValue(*(yymsp[-1].minor.yy111));
                                                delete yymsp[-1].minor.yy111;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 278: /* exprx ::= id */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initId(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 279: /* exprx ::= JOIN_KW */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initId(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 280: /* exprx ::= nm DOT nm */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initId(*(yymsp[-2].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 281: /* exprx ::= nm DOT nm DOT nm */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initId(*(yymsp[-4].minor.yy79), *(yymsp[-2].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 282: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 283: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initCollate(yymsp[-2].minor.yy552, *(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 284: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initCast(yymsp[-3].minor.yy552, yymsp[-1].minor.yy537);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 285: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy466), *(yymsp[-1].minor.yy111));
                                                delete yymsp[-2].minor.yy466;
                                                delete yymsp[-1].minor.yy111;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 286: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 287: /* exprx ::= expr AND expr */
      case 288: /* exprx ::= expr OR expr */ yytestcase(yyruleno==288);
      case 289: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==289);
      case 290: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==290);
      case 291: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==291);
      case 292: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==292);
      case 293: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==293);
      case 294: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==294);
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initBinOp(yymsp[-2].minor.yy552, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy552);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 295: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initLike(yymsp[-3].minor.yy552, *(yymsp[-2].minor.yy51), *(yymsp[-1].minor.yy281), yymsp[0].minor.yy552);
                                                delete yymsp[-2].minor.yy51;
                                                delete yymsp[-1].minor.yy281;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 296: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initLike(yymsp[-5].minor.yy552, *(yymsp[-4].minor.yy51), *(yymsp[-3].minor.yy281), yymsp[-2].minor.yy552, yymsp[0].minor.yy552);
                                                delete yymsp[-4].minor.yy51;
                                                delete yymsp[-3].minor.yy281;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 297: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initNull(yymsp[-1].minor.yy552, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 298: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initNull(yymsp[-2].minor.yy552, "NOT NULL");
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 299: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initIs(yymsp[-3].minor.yy552, *(yymsp[-1].minor.yy51), yymsp[0].minor.yy552);
                                                delete yymsp[-1].minor.yy51;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 300: /* exprx ::= NOT expr */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initUnaryOp(yymsp[0].minor.yy552, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 301: /* exprx ::= BITNOT expr */
      case 303: /* exprx ::= PLUS expr */ yytestcase(yyruleno==303);
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initUnaryOp(yymsp[0].minor.yy552, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 302: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                if (yymsp[0].minor.yy552->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy552->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy552->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy552;
                                                }
                                                else
                                                {
                                                    yygotominor.yy552->initUnaryOp(yymsp[0].minor.yy552, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 304: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initBetween(yymsp[-5].minor.yy552, *(yymsp[-4].minor.yy51), yymsp[-2].minor.yy552, yymsp[0].minor.yy552);
                                                delete yymsp[-4].minor.yy51;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 305: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initIn(yymsp[-5].minor.yy552, *(yymsp[-4].minor.yy51), *(yymsp[-1].minor.yy111));
                                                delete yymsp[-4].minor.yy51;
                                                delete yymsp[-1].minor.yy111;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 306: /* exprx ::= LP select RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initSubSelect(yymsp[-1].minor.yy513);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 307: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initIn(yymsp[-5].minor.yy552, *(yymsp[-4].minor.yy51), yymsp[-1].minor.yy513);
                                                delete yymsp[-4].minor.yy51;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 308: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initIn(yymsp[-4].minor.yy552, *(yymsp[-3].minor.yy51), *(yymsp[-1].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-3].minor.yy51;
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 309: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initExists(yymsp[-1].minor.yy513);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 310: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initCase(yymsp[-3].minor.yy552, *(yymsp[-2].minor.yy111), yymsp[-1].minor.yy552);
                                                delete yymsp[-2].minor.yy111;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 311: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 312: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                yygotominor.yy552->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 313: /* expr ::= */
{
                                                yygotominor.yy552 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy552;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 317: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy281 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 318: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy111->append(yymsp[-2].minor.yy552);
                                                yymsp[-4].minor.yy111->append(yymsp[0].minor.yy552);
                                                yygotominor.yy111 = yymsp[-4].minor.yy111;
                                            }
        break;
      case 319: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy111 = new ParserExprList();
                                                yygotominor.yy111->append(yymsp[-2].minor.yy552);
                                                yygotominor.yy111->append(yymsp[0].minor.yy552);
                                            }
        break;
      case 326: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy111->append(yymsp[0].minor.yy552);
                                                yygotominor.yy111 = yymsp[-2].minor.yy111;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 327: /* nexprlist ::= exprx */
{
                                                yygotominor.yy111 = new ParserExprList();
                                                yygotominor.yy111->append(yymsp[0].minor.yy552);
                                            }
        break;
      case 328: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy563 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy51),
                                                        *(yymsp[-8].minor.yy51),
                                                        *(yymsp[-7].minor.yy79),
                                                        *(yymsp[-6].minor.yy79),
                                                        *(yymsp[-4].minor.yy79),
                                                        *(yymsp[-2].minor.yy363),
                                                        yymsp[0].minor.yy552
                                                    );
                                                delete yymsp[-8].minor.yy51;
                                                delete yymsp[-10].minor.yy51;
                                                delete yymsp[-7].minor.yy79;
                                                delete yymsp[-6].minor.yy79;
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[-2].minor.yy363;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 329: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,197,&yymsp[-3].minor);
}
        break;
      case 334: /* idxlist_opt ::= */
{yygotominor.yy423 = new ParserIndexedColumnList();}
        break;
      case 335: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy423 = yymsp[-1].minor.yy423;}
        break;
      case 336: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy423->append(yymsp[0].minor.yy308);
                                                yygotominor.yy423 = yymsp[-2].minor.yy423;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 337: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy423 = new ParserIndexedColumnList();
                                                yygotominor.yy423->append(yymsp[0].minor.yy308);
                                            }
        break;
      case 338: /* idxlist_single ::= nm collate sortorder */
      case 339: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==339);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy79),
                                                        *(yymsp[-1].minor.yy79),
                                                        *(yymsp[0].minor.yy389)
                                                    );
                                                yygotominor.yy308 = obj;
                                                delete yymsp[0].minor.yy389;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[-1].minor.yy79;
                                                objectForTokens = yygotominor.yy308;
                                            }
        break;
      case 343: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy563 = new SqliteDropIndex(*(yymsp[-1].minor.yy51), yymsp[0].minor.yy600->name1, yymsp[0].minor.yy600->name2);
                                                delete yymsp[-1].minor.yy51;
                                                delete yymsp[0].minor.yy600;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 346: /* cmd ::= VACUUM */
{
                                                yygotominor.yy563 = new SqliteVacuum();
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 347: /* cmd ::= VACUUM nm */
{
                                                yygotominor.yy563 = new SqliteVacuum(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 348: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy563 = new SqlitePragma(*(yymsp[-1].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 349: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 351: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==351);
{
                                                yygotominor.yy563 = new SqlitePragma(*(yymsp[-3].minor.yy79), *(yymsp[-2].minor.yy79), *(yymsp[0].minor.yy69), true);
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 350: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 352: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==352);
{
                                                yygotominor.yy563 = new SqlitePragma(*(yymsp[-4].minor.yy79), *(yymsp[-3].minor.yy79), *(yymsp[-1].minor.yy69), false);
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-1].minor.yy69;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 356: /* nmnum ::= nm */
{
                                                yygotominor.yy69 = new QVariant(*(yymsp[0].minor.yy79));
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 362: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy69->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy69) = -(yymsp[0].minor.yy69->toDouble());
                                                else if (yymsp[0].minor.yy69->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy69) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy69) = -(yymsp[0].minor.yy69->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy69 = yymsp[0].minor.yy69;
                                            }
        break;
      case 365: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy563 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy466),
                                                        *(yymsp[-11].minor.yy51),
                                                        *(yymsp[-10].minor.yy79),
                                                        *(yymsp[-9].minor.yy79),
                                                        *(yymsp[-5].minor.yy79),
                                                        *(yymsp[-8].minor.yy252),
                                                        yymsp[-7].minor.yy391,
                                                        *(yymsp[-4].minor.yy203),
                                                        yymsp[-3].minor.yy552,
                                                        *(yymsp[-1].minor.yy270),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy51;
                                                delete yymsp[-13].minor.yy466;
                                                delete yymsp[-8].minor.yy252;
                                                delete yymsp[-4].minor.yy203;
                                                delete yymsp[-10].minor.yy79;
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-9].minor.yy79;
                                                delete yymsp[-1].minor.yy270;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 366: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy563 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy466),
                                                        *(yymsp[-8].minor.yy51),
                                                        *(yymsp[-7].minor.yy79),
                                                        *(yymsp[-6].minor.yy79),
                                                        *(yymsp[-2].minor.yy79),
                                                        *(yymsp[-5].minor.yy252),
                                                        yymsp[-4].minor.yy391,
                                                        *(yymsp[-1].minor.yy203),
                                                        yymsp[0].minor.yy552,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy51;
                                                delete yymsp[-10].minor.yy466;
                                                delete yymsp[-5].minor.yy252;
                                                delete yymsp[-1].minor.yy203;
                                                delete yymsp[-7].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[-6].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 367: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy563 = new SqliteCreateTrigger(
                                                *(yymsp[-12].minor.yy466),
                                                *(yymsp[-10].minor.yy51),
                                                *(yymsp[-9].minor.yy79),
                                                *(yymsp[-8].minor.yy79),
                                                *(yymsp[-4].minor.yy79),
                                                *(yymsp[-7].minor.yy252),
                                                yymsp[-6].minor.yy391,
                                                *(yymsp[-3].minor.yy203),
                                                yymsp[-2].minor.yy552,
                                                *(yymsp[0].minor.yy270),
                                                3
                                                );
                                                delete yymsp[-10].minor.yy51;
                                                delete yymsp[-12].minor.yy466;
                                                delete yymsp[-7].minor.yy252;
                                                delete yymsp[-3].minor.yy203;
                                                delete yymsp[-9].minor.yy79;
                                                delete yymsp[-4].minor.yy79;
                                                delete yymsp[-8].minor.yy79;
                                                delete yymsp[0].minor.yy270;
                                                objectForTokens = yygotominor.yy563;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 368: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,199,&yymsp[-8].minor);
  yy_destructor(yypParser,197,&yymsp[-5].minor);
  yy_destructor(yypParser,285,&yymsp[-3].minor);
  yy_destructor(yypParser,286,&yymsp[-2].minor);
}
        break;
      case 371: /* trigger_time ::= BEFORE */
{yygotominor.yy252 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 372: /* trigger_time ::= AFTER */
{yygotominor.yy252 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 373: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy252 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 374: /* trigger_time ::= */
{yygotominor.yy252 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 375: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy391 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy391;
                                            }
        break;
      case 376: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy391 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy391;
                                            }
        break;
      case 377: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy391 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy391;
                                            }
        break;
      case 378: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy391 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy575));
                                                delete yymsp[0].minor.yy575;
                                                objectForTokens = yygotominor.yy391;
                                            }
        break;
      case 379: /* foreach_clause ::= */
{yygotominor.yy203 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 380: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy203 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 383: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy270->append(yymsp[-1].minor.yy563);
                                                yygotominor.yy270 = yymsp[-2].minor.yy270;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 384: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy270 = new ParserQueryList();
                                                yygotominor.yy270->append(yymsp[-1].minor.yy563);
                                            }
        break;
      case 385: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy270 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 390: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 391: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy563 = new SqliteDropTrigger(*(yymsp[-1].minor.yy51), yymsp[0].minor.yy600->name1, yymsp[0].minor.yy600->name2);
                                                delete yymsp[-1].minor.yy51;
                                                delete yymsp[0].minor.yy600;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 394: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy563 = new SqliteAttach(*(yymsp[-4].minor.yy51), yymsp[-3].minor.yy552, yymsp[-1].minor.yy552, yymsp[0].minor.yy552);
                                                delete yymsp[-4].minor.yy51;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 395: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy563 = new SqliteDetach(*(yymsp[-1].minor.yy51), yymsp[0].minor.yy552);
                                                delete yymsp[-1].minor.yy51;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 400: /* cmd ::= REINDEX */
{yygotominor.yy563 = new SqliteReindex();}
        break;
      case 401: /* cmd ::= REINDEX nm dbnm */
      case 402: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==402);
{
                                                yygotominor.yy563 = new SqliteReindex(*(yymsp[-1].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 405: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy563 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 406: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy563 = new SqliteAnalyze(*(yymsp[-1].minor.yy79), *(yymsp[0].minor.yy79));
                                                delete yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 409: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy563 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy600->name1,
                                                        yymsp[-3].minor.yy600->name2,
                                                        *(yymsp[0].minor.yy79)
                                                    );
                                                delete yymsp[0].minor.yy79;
                                                delete yymsp[-3].minor.yy600;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 410: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy563 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy600->name1,
                                                        yymsp[-3].minor.yy600->name2,
                                                        *(yymsp[-1].minor.yy51),
                                                        yymsp[0].minor.yy387
                                                    );
                                                delete yymsp[-1].minor.yy51;
                                                delete yymsp[-3].minor.yy600;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 411: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,201,&yymsp[-3].minor);
}
        break;
      case 417: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy563 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy51),
                                                        *(yymsp[-3].minor.yy79),
                                                        *(yymsp[-2].minor.yy79),
                                                        *(yymsp[0].minor.yy79)
                                                    );
                                                delete yymsp[-4].minor.yy51;
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-2].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 418: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy563 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy51),
                                                        *(yymsp[-6].minor.yy79),
                                                        *(yymsp[-5].minor.yy79),
                                                        *(yymsp[-3].minor.yy79),
                                                        *(yymsp[-1].minor.yy575)
                                                    );
                                                delete yymsp[-6].minor.yy79;
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-3].minor.yy79;
                                                delete yymsp[-7].minor.yy51;
                                                delete yymsp[-1].minor.yy575;
                                                objectForTokens = yygotominor.yy563;
                                            }
        break;
      case 421: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy575 = new QStringList();
                                                yygotominor.yy575->append((yymsp[0].minor.yy79)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 422: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy575->append((yymsp[0].minor.yy79)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy575 = yymsp[-2].minor.yy575;
                                                delete yymsp[0].minor.yy79;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 424: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy79->append(" "+ *(yymsp[0].minor.yy79));
                                                yygotominor.yy79 = yymsp[-1].minor.yy79;
                                                delete yymsp[0].minor.yy79;
                                            }
        break;
      case 425: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy79 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 426: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy79 = new QString("(");
                                                yygotominor.yy79->append(*(yymsp[-1].minor.yy79));
                                                yygotominor.yy79->append(")");
                                                delete yymsp[-1].minor.yy79;
                                            }
        break;
      case 428: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy79 = yymsp[-3].minor.yy79;
                                                yygotominor.yy79->append("(");
                                                yygotominor.yy79->append(*(yymsp[-1].minor.yy79));
                                                yygotominor.yy79->append(")");
                                                delete yymsp[-1].minor.yy79;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 429: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy79 = yymsp[-1].minor.yy79;
                                                yygotominor.yy79->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 430: /* with ::= */
{yygotominor.yy161 = nullptr;}
        break;
      case 431: /* with ::= WITH wqlist */
{
                                                yygotominor.yy161 = yymsp[0].minor.yy161;
                                                objectForTokens = yygotominor.yy161;
                                            }
        break;
      case 432: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy161 = yymsp[0].minor.yy161;
                                                yygotominor.yy161->recursive = true;
                                                objectForTokens = yygotominor.yy161;
                                            }
        break;
      case 433: /* wqlist ::= nm idxlist_opt AS LP select RP */
{
                                                yygotominor.yy161 = SqliteWith::append(*(yymsp[-5].minor.yy79), *(yymsp[-4].minor.yy423), yymsp[-1].minor.yy513);
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-4].minor.yy423;
                                            }
        break;
      case 434: /* wqlist ::= wqlist COMMA nm idxlist_opt AS LP select RP */
{
                                                yygotominor.yy161 = SqliteWith::append(yymsp[-7].minor.yy161, *(yymsp[-5].minor.yy79), *(yymsp[-4].minor.yy423), yymsp[-1].minor.yy513);
                                                delete yymsp[-5].minor.yy79;
                                                delete yymsp[-4].minor.yy423;
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 435: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy161 = new SqliteWith();
                                            }
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
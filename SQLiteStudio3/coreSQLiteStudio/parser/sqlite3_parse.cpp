/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "common/unused.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 327
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 79
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  SqliteWith::CommonTableExpression::AsMode* yy3;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy6;
  ParserStubInsertOrReplace* yy8;
  SqliteWith* yy33;
  ParserOtherSourceList* yy39;
  ParserFullName* yy44;
  SqliteForeignKey::Condition* yy63;
  SqliteWindowDefinition::Window::Frame* yy65;
  ParserWindowDefList* yy67;
  ParserTermOrLiteral* yy70;
  SqliteSelect::Core::SingleSource* yy125;
  SqliteCreateTrigger::Time* yy136;
  bool* yy151;
  SqliteWindowDefinition* yy154;
  ParserStubTransDetails* yy176;
  SqliteWith::CommonTableExpression* yy182;
  SqliteCreateTrigger::Event* yy187;
  ParserExprList* yy203;
  SqliteCreateTable::Column* yy211;
  SqliteExpr* yy228;
  ParserFkConditionList* yy229;
  SqliteExpr::LikeOp* yy232;
  SqliteSelect::Core::JoinConstraint* yy243;
  ParserIndexedColumnList* yy247;
  QStringList* yy259;
  ParserQueryList* yy262;
  QVariant* yy277;
  SqliteConflictAlgo* yy282;
  ParserSetValueList* yy297;
  SqliteFilterOver::Filter* yy298;
  ParserDeferSubClause* yy305;
  ParserCteList* yy312;
  SqliteColumnType* yy321;
  ParserCreateTableOptionList* yy329;
  SqliteUpsert* yy336;
  SqliteCreateTable::Constraint* yy362;
  SqliteSelect* yy373;
  ParserCreateTableColumnList* yy382;
  SqliteLimit* yy396;
  ParserStubExplain* yy407;
  SqliteForeignKey::Condition::Reaction* yy412;
  ParserExprNestedList* yy422;
  SqliteSelect::Core::JoinOp* yy429;
  SqliteSelect::CompoundOperator* yy430;
  SqliteWindowDefinition::Window::Frame::Exclude* yy435;
  SqliteFilterOver* yy439;
  SqliteSelect::Core* yy446;
  ParserOrderByList* yy459;
  QString* yy467;
  SqliteQuery* yy475;
  ParserStubAlias* yy496;
  SqliteSelect::Core::JoinSource* yy507;
  SqliteWindowDefinition::Window* yy538;
  SqliteCreateTrigger::Scope* yy547;
  SqliteFilterOver::Over* yy548;
  SqliteIndexedColumn* yy556;
  ParserStubCreateTableOption* yy559;
  SqliteCreateTable::Column::Constraint* yy560;
  SqliteSortOrder* yy561;
  ParserResultColumnList* yy562;
  SqliteWindowDefinition::Window::Frame::Bound* yy573;
  ParserCreateTableConstraintList* yy589;
  SqliteNulls* yy619;
  ParserIndexedBy* yy636;
  int* yy650;
  ParserCreateTableColumnConstraintList* yy651;
  SqliteInitially* yy652;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 862
#define YYNRULE 482
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2750)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   521,   60,   60,   59,   59,   59,   58,  257,   27,   65,
 /*    10 */   520,  349,  512,  132,  810,  810,   62,   62,   63,   63,
 /*    20 */    63,   63,  854,   61,   61,   61,   61,   60,   60,   59,
 /*    30 */    59,   59,   58,  257, 1345,  187,  526,    3,   64,   65,
 /*    40 */   520,  349,  458,  859,  810,  810,   62,   62,   63,   63,
 /*    50 */    63,   63,  517,   61,   61,   61,   61,   60,   60,   59,
 /*    60 */    59,   59,   58,  257,   23, 1267,   59,   59,   59,   58,
 /*    70 */   257,  250,  698,  800,  465,  695,  695, 1196,   54,   63,
 /*    80 */    63,   63,   63,   40,   61,   61,   61,   61,   60,   60,
 /*    90 */    59,   59,   59,   58,  257,   51,   52,  706,  826, 1196,
 /*   100 */   820,  827,   53, 1034,  159, 1196,  579,  450,  447,  446,
 /*   110 */     2, 1034,  360,  624,  853,  808, 1034,   39,  140,  509,
 /*   120 */    79,  822,  851,  821,  227,  445,  521,  825,  289,  604,
 /*   130 */   762,  293,  519,  773,  808,  824,  823,  822,  512, 1034,
 /*   140 */   761,  366, 1294,  852,  851,  318, 1100, 1294,  321, 1196,
 /*   150 */   599,   77, 1034,  258, 1034, 1034,  807, 1196, 1034,  624,
 /*   160 */   477,  462, 1196, 1034, 1034, 1034, 1034, 1034, 1034,  808,
 /*   170 */   277,  506,  808,  295,  798,   12,   78,  675,  517,  600,
 /*   180 */    22,  602,  375,  799,  601, 1196, 1034,  451,   56,  713,
 /*   190 */   358,  807,  820,  674,  820,  164,  599,   77, 1196,  800,
 /*   200 */  1196, 1196,  463,  579,   54,  423,  853,  736,  853, 1196,
 /*   210 */  1238, 1196, 1196,  104, 1196,  821,  227,  821,  227,  809,
 /*   220 */   491,   51,   52,  605,  519,  600,  519,  602,   53, 1100,
 /*   230 */   601,  854, 1196,  712,  708,  395,    2, 1100,  366, 1293,
 /*   240 */   119,  808, 1100,  291, 1293,  509,  492,  822,  851,   76,
 /*   250 */    21,  422,  521,  825,  477,  464,  663,  664,  254,  338,
 /*   260 */   808,  824,  823,  822,  512, 1100,  374,  476,  749,  957,
 /*   270 */   787,  649,  256,  853,  501,  742,  375,  345, 1100,  854,
 /*   280 */  1100, 1100,  176,  123,  335,  456,  330,  455,  161, 1100,
 /*   290 */  1100, 1100, 1100,  342, 1100,  808,  820,  742,  808,  139,
 /*   300 */   798,   12,  328,  742,  517,  119,  337,  301,  436,  311,
 /*   310 */   853,  858, 1100,  854,   58,  257,  525,  278,  467,  821,
 /*   320 */   212,  854,  576,  475,  370,  800,  174,  624,  519,  338,
 /*   330 */    54,   61,   61,   61,   61,   60,   60,   59,   59,   59,
 /*   340 */    58,  257,  466,  853,  700,  699,  662,   51,   52,  177,
 /*   350 */   251,  647,  852,  851,   53, 1085,  159,  365,  578,  450,
 /*   360 */   447,  446,    2, 1085,  561,   77,  251,  808, 1085,  750,
 /*   370 */   648,  509,  813,  822,  851,  357,  454,  445,  767,  825,
 /*   380 */   634,   89,  551,  850,  853,  544,  808,  824,  823,  822,
 /*   390 */   848, 1085,  661,  560,  269,  559,  853,  834,  558,  849,
 /*   400 */   852,  851,  552,  553, 1085,  820, 1085, 1085,  820,  854,
 /*   410 */  1184, 1184,  249,  490,  406, 1085,  744, 1085, 1085,  853,
 /*   420 */  1085,  808,  853,  528,  808,  797,  798,   12,  821,  120,
 /*   430 */    86,  821,  120,  173,  852,  851,  589,  519, 1085,  854,
 /*   440 */   519,  854,  852,  851,  804, 1187,  854,  719,   64,   65,
 /*   450 */   520,  349, 1184, 1184,  810,  810,   62,   62,   63,   63,
 /*   460 */    63,   63,  718,   61,   61,   61,   61,   60,   60,   59,
 /*   470 */    59,   59,   58,  257,  854,  554,  790,  498,  496,  393,
 /*   480 */   172,   50,  822,   48,  169,  854,  160,  767,  825,  279,
 /*   490 */   767,  425,  853,  813, 1184, 1184,  824,  823,  822,   64,
 /*   500 */    65,  520,  349,  589,   66,  810,  810,   62,   62,   63,
 /*   510 */    63,   63,   63,  803,   61,   61,   61,   61,   60,   60,
 /*   520 */    59,   59,   59,   58,  257,  442,  836,  280,   78,  725,
 /*   530 */   852,  851,   64,   65,  520,  349, 1184, 1184,  810,  810,
 /*   540 */    62,   62,   63,   63,   63,   63,  780,   61,   61,   61,
 /*   550 */    61,   60,   60,   59,   59,   59,   58,  257,  779,  782,
 /*   560 */   852,  851,  852,  851,  113,  831,  648,  852,  851,  275,
 /*   570 */   274,  829,   45,  656,  453,  813,  832,   89, 1184, 1184,
 /*   580 */   853,   14,  426,  648,  348,  424,  380,  787,  510,  256,
 /*   590 */   855,  758,  328,  532,   89,  852,  851,  853,  853, 1187,
 /*   600 */   548, 1187,  265,  727,  635,   71,  852,  851,  854,  792,
 /*   610 */   791,  610,  854,  550,  515,  549,   64,   65,  520,  349,
 /*   620 */  1184, 1184,  810,  810,   62,   62,   63,   63,   63,   63,
 /*   630 */    70,   61,   61,   61,   61,   60,   60,   59,   59,   59,
 /*   640 */    58,  257,   63,   63,   63,   63,  334,   61,   61,   61,
 /*   650 */    61,   60,   60,   59,   59,   59,   58,  257,  854, 1184,
 /*   660 */  1184,  520,  349,  854,  333,  810,  810,   62,   62,   63,
 /*   670 */    63,   63,   63,  854,   61,   61,   61,   61,   60,   60,
 /*   680 */    59,   59,   59,   58,  257,    8, 1188,  169,   55,  854,
 /*   690 */   246,  245,  244,  503,  854,  770,  813,   64,   65,  520,
 /*   700 */   349, 1184, 1184,  810,  810,   62,   62,   63,   63,   63,
 /*   710 */    63,  347,   61,   61,   61,   61,   60,   60,   59,   59,
 /*   720 */    59,   58,  257,  194,  521,  853,  854,   78,  802,  852,
 /*   730 */   851,  813,  725,  852,  851,  854,  512,  593,  594,  419,
 /*   740 */    64,   65,  520,  349,  792,  791,  810,  810,   62,   62,
 /*   750 */    63,   63,   63,   63,  796,   61,   61,   61,   61,   60,
 /*   760 */    60,   59,   59,   59,   58,  257,  588,   42,   69, 1044,
 /*   770 */   722,  826,  413,  714,  827,  138,  517,  575,  575,  852,
 /*   780 */   851,  806,  820,    1,  852,  851,  348,  481,  819,  853,
 /*   790 */    56,  705,  715,   78,  852,  851,  853,  800,  820,   69,
 /*   800 */   853,  781,   54,  435,  714,  821,  220,  714, 1302, 1302,
 /*   810 */   852,  851,  853,   22,  519,  852,  851,  785,  835,   51,
 /*   820 */    52,  821,  120,  715,  784,  522,   53,  833,  807,   75,
 /*   830 */   519,  191,  853,  583,    2, 1194,  110,  499,  714,  808,
 /*   840 */  1188,   87, 1188,  509,  115,  822,  851,  852,  851, 1051,
 /*   850 */  1051,  825,  813,  755,  820,  138,  852,  851,  808,  824,
 /*   860 */   823,  822,  772,  807,  767, 1253,  742,  644,  853,  853,
 /*   870 */   171,  401,  795,  794, 1302, 1302,  755,  821,  212,  160,
 /*   880 */   767,  854,  733, 1202,  486,  854,  519,  170,  742,  494,
 /*   890 */   737,    4,  193,  808,  742,  617,  808,  783,  798,   12,
 /*   900 */   702,   64,   65,  520,  349,   56,  854,  810,  810,   62,
 /*   910 */    62,   63,   63,   63,   63,  521,   61,   61,   61,   61,
 /*   920 */    60,   60,   59,   59,   59,   58,  257,  512,  250,  698,
 /*   930 */   488,  465,   64,   65,  520,  349,  767,  854,  810,  810,
 /*   940 */    62,   62,   63,   63,   63,   63,  790,   61,   61,   61,
 /*   950 */    61,   60,   60,   59,   59,   59,   58,  257,  820, 1253,
 /*   960 */   854,  429,  820,  551,  854,  638,  500,  517,  668,  461,
 /*   970 */   737,    4,  853,  339,  747,  639,  853,  853,  854,  380,
 /*   980 */   487,  821,  227,  552,  408,  821,  227,  326,  800,  499,
 /*   990 */   519,  742,  113,   54,  519,    6,  539,  694,  485,  771,
 /*  1000 */   584,  813,  852,  851,  119,  768,  852,  851,  801,  493,
 /*  1010 */    51,   52,   88,  742,  540,  539,  113,   53,  402,  742,
 /*  1020 */   630,  630,  477,  478,  854,    2,  813,  852,  851, 1191,
 /*  1030 */   808,  336,  690,  801,  509,  766,  822,  851,  672,  679,
 /*  1040 */   375,  521,  825,  539,  375,  508,  820,  862,  820,  808,
 /*  1050 */   824,  823,  822,  512,  275,  274,  409,  790,  852,  851,
 /*  1060 */   853,  813,  853,  678,  854,  584,  504,  801,  443,  821,
 /*  1070 */   227,  821,  227,  113,   69,  813,  405,  854,  519,  714,
 /*  1080 */   519,  852,  851,  119,  808,  852,  851,  808,  322,  798,
 /*  1090 */    12,  813,  403,  517,  792,  791,  801,  711,  715,  852,
 /*  1100 */   851,  820,  853,  125,  119,  285,  271,  259,  477,  468,
 /*  1110 */    78,   20,  542,  714,  800,  853,  742,  284,  820,   54,
 /*  1120 */   362,  801,  813,  484,  821,  227,  726,  513,  375,  132,
 /*  1130 */   375,   44,  853,  519,  812,  381,   51,   52,  742,  545,
 /*  1140 */   542,  821,  120,   53,  742,  852,  851,  813,  129,  786,
 /*  1150 */   519,    2,  114,  359,  860,  801,  808,  633,  361,  180,
 /*  1160 */   509,  270,  822,  851,  106,  820,  854,   78,  825,  124,
 /*  1170 */   854,   76,  854,  707,   73,  808,  824,  823,  822,  853,
 /*  1180 */   854,  495,  813,  375,  726,  852,  851,  109,  821,  198,
 /*  1190 */   386, 1302, 1302,  251,  776,  119,  813,  519,  852,  851,
 /*  1200 */   767,   44,  780,  169,  363,  545,  178,  730,  654,  351,
 /*  1210 */   808,  344,  813,  808,  779,  798,   12,   64,   65,  520,
 /*  1220 */   349,  853,  416,  810,  810,   62,   62,   63,   63,   63,
 /*  1230 */    63,  720,   61,   61,   61,   61,   60,   60,   59,   59,
 /*  1240 */    59,   58,  257, 1189,  576,  376,  616,  767,  725,   64,
 /*  1250 */    65,  520,  349,  116,  684,  810,  810,   62,   62,   63,
 /*  1260 */    63,   63,   63,  828,   61,   61,   61,   61,   60,   60,
 /*  1270 */    59,   59,   59,   58,  257,  843,  757,  841,  397,  365,
 /*  1280 */   577,  562,  407,  480,   19,  432,  854,  852,  851,  752,
 /*  1290 */   170,  852,  851,  852,  851,  626,  854,   64,   65,  520,
 /*  1300 */   349,  852,  851,  810,  810,   62,   62,   63,   63,   63,
 /*  1310 */    63,   74,   61,   61,   61,   61,   60,   60,   59,   59,
 /*  1320 */    59,   58,  257,   64,   65,  520,  349,  479,  626,  810,
 /*  1330 */   810,   62,   62,   63,   63,   63,   63,  751,   61,   61,
 /*  1340 */    61,   61,   60,   60,   59,   59,   59,   58,  257,  562,
 /*  1350 */    49,   64,   65,  520,  349,  405,  854,  810,  810,   62,
 /*  1360 */    62,   63,   63,   63,   63,    5,   61,   61,   61,   61,
 /*  1370 */    60,   60,   59,   59,   59,   58,  257,  746,  511,  795,
 /*  1380 */   794,   64,   65,  520,  349,  628,  689,  810,  810,   62,
 /*  1390 */    62,   63,   63,   63,   63,  496,   61,   61,   61,   61,
 /*  1400 */    60,   60,   59,   59,   59,   58,  257,  852,  851,  853,
 /*  1410 */   632,  383,  242,  688,  653,  652,  687,  852,  851,   64,
 /*  1420 */    65,  520,  349,  119,   46,  810,  810,   62,   62,   63,
 /*  1430 */    63,   63,   63,  860,   61,   61,   61,   61,   60,   60,
 /*  1440 */    59,   59,   59,   58,  257,  854,  710,  336,  690,   64,
 /*  1450 */    65,  520,  349,  790,  670,  810,  810,   62,   62,   63,
 /*  1460 */    63,   63,   63,  745,   61,   61,   61,   61,   60,   60,
 /*  1470 */    59,   59,   59,   58,  257,  305,  726,  852,  851,   64,
 /*  1480 */    65,  520,  349,  743,  192,  810,  810,   62,   62,   63,
 /*  1490 */    63,   63,   63,   18,   61,   61,   61,   61,   60,   60,
 /*  1500 */    59,   59,   59,   58,  257,  569,  341,  497,  759,   64,
 /*  1510 */    65,  520,  349,  119,  325,  810,  810,   62,   62,   63,
 /*  1520 */    63,   63,   63,  717,   61,   61,   61,   61,   60,   60,
 /*  1530 */    59,   59,   59,   58,  257,  854, 1217,   64,   65,  520,
 /*  1540 */   349,  861,    3,  810,  810,   62,   62,   63,   63,   63,
 /*  1550 */    63,   56,   61,   61,   61,   61,   60,   60,   59,   59,
 /*  1560 */    59,   58,  257,  251,  854,  647,  852,  851,   64,   65,
 /*  1570 */   520,  349,   17,   28,  810,  810,   62,   62,   63,   63,
 /*  1580 */    63,   63,  854,   61,   61,   61,   61,   60,   60,   59,
 /*  1590 */    59,   59,   58,  257,  854, 1268,   64,   65,  520,  349,
 /*  1600 */   756,    4,  810,  810,   62,   62,   63,   63,   63,   63,
 /*  1610 */   521,   61,   61,   61,   61,   60,   60,   59,   59,   59,
 /*  1620 */    58,  257,  512, 1266,   16,  488,   64,   65,  520,  349,
 /*  1630 */   741,    4,  810,  810,   62,   62,   63,   63,   63,   63,
 /*  1640 */   820,   61,   61,   61,   61,   60,   60,   59,   59,   59,
 /*  1650 */    58,  257,  835,  854,  853,  683,  852,  851,   11,  854,
 /*  1660 */   430,  838,  517,  821,  212,  170,  853,  820,  854,  538,
 /*  1670 */   820,  613,  519,  431,  168,  487,  170,  240,  239,  536,
 /*  1680 */   112,  853,  431,  800,  853,  852,  851,  853,   54,  167,
 /*  1690 */   821,  227,   68,  821,  120,  303,  853,  538,  536,  519,
 /*  1700 */    44,  721,  519,  822,  166,   51,   52,  730,  298,  825,
 /*  1710 */   287,  709,   53,   44,  854,  852,  851,  824,  823,  822,
 /*  1720 */     2,  853,  767,  854,  853,  808,  536,  396,  817,  509,
 /*  1730 */   581,  822,  851,  591,  165,  367,  521,  825,  592,  820,
 /*  1740 */   411,  820,  384,  126,  808,  824,  823,  822,  512,  375,
 /*  1750 */   261,  488,  767,  853,  853,  853,  854,  340,  854,  260,
 /*  1760 */   744,  469,  821,  227,  821,  208,  417,  854,  621,  740,
 /*  1770 */     4,  519,  820,  519,  852,  851,  471,  530,  390,  808,
 /*  1780 */   852,  851,  808,  820,  798,   12,  853,  621,  517,  852,
 /*  1790 */   851,  853,  704,  657,  820,  821,  230,  853,  348,  482,
 /*  1800 */   726,  489,  557,    7,  519,  820,  821,  228,  853,  800,
 /*  1810 */   820,  666,  853,  730,   54,  519,  820,  821,  236,  853,
 /*  1820 */   703,  375,  854,  767,  853,   15,  519,  853,  821,  235,
 /*  1830 */   853,   51,   52,  821,  237,  852,  851,  519,   53,  821,
 /*  1840 */   241,  854,  519,  701,  852,  851,    2,  716,  519,  738,
 /*  1850 */     4,  808,  319,   37,  767,  509,  320,  822,  851,  697,
 /*  1860 */   314,  839,  854,  825,  263,  767,  853,  820,  739,    4,
 /*  1870 */   808,  824,  823,  822,  853,  854,  767,  852,  851,  852,
 /*  1880 */   851,  853,  615,  731,  389,  854,  338,  767,  852,  851,
 /*  1890 */   821,  276,  767,  696,  681,  854,  680,  978,  767,  519,
 /*  1900 */   853,  615,  636,  587,  459,  808,  627,  507,  808,  770,
 /*  1910 */   798,   12,   64,   38,  520,  349,   84,  118,  810,  810,
 /*  1920 */    62,   62,   63,   63,   63,   63,  521,   61,   61,   61,
 /*  1930 */    61,   60,   60,   59,   59,   59,   58,  257,  512,   78,
 /*  1940 */   856,  844,  820,  852,  851,  820,  726,  820,  267,  767,
 /*  1950 */   735,  370,  135,  307,  853,  853,  853,  306,  820,  853,
 /*  1960 */   692,  853,  852,  851,  854,  821,  350,  853,  821,  234,
 /*  1970 */   821,  207,  853,  597,  519,  637,  769,  519,  517,  519,
 /*  1980 */   117,  821,  225,  852,  851,  660,  820,  842,  820,  582,
 /*  1990 */   519,  820,   25,  268,  854,  452,  852,  851,   36,  800,
 /*  2000 */   853,  853,  853,  555,   54,  853,  852,  851,  854,  821,
 /*  2010 */   229,  821,  373,  651,  821,  372,  852,  851,  519,  595,
 /*  2020 */   519,   51,   52,  519,  767,  730,  521,  767,   53,  767,
 /*  2030 */   310,  620,  820,  680,  262,  820,    2,  669,  512,  853,
 /*  2040 */   767,  808,  278,  467,  853,  509,  853,  822,  851,  853,
 /*  2050 */   854,  820,  732,  825,   83,  821,  371,  820,  821,  224,
 /*  2060 */   808,  824,  823,  822,  519,  853,  853,  519,  767,  854,
 /*  2070 */   767,  853,  327,  767,  821,  210,  840,  625,  517,  568,
 /*  2080 */   821,  223,  449,  519,   82,  852,  851,   24,  854,  519,
 /*  2090 */   853,  837,  347,  162,  460,  808,  388,  444,  808,  800,
 /*  2100 */   798,   12,   81,  854,   54,  853,  853,  333,  854,  730,
 /*  2110 */   830,  820,  158,  568,  767,  852,  851,  767,  854,  440,
 /*  2120 */   629,   51,   52,  853,  853,  853,  521,  154,   53,  852,
 /*  2130 */   851,  400,  820,  767,  821,  222,    2,  324,  512,  767,
 /*  2140 */   294,  808,  535,  519,  574,  509,  853,  822,  851,   10,
 /*  2150 */   190,  102,  820,  825,  853,  821,  209,  100,  736,   99,
 /*  2160 */   808,  824,  823,  822,  519,  565,  853,  347,   35,  854,
 /*  2170 */    34,  852,  851,  820,  818,  821,  206,  564,  517,  387,
 /*  2180 */   418,  853,  774,   33,  519,   32,  385,  853,  853,  854,
 /*  2190 */   852,  851,  854,  767,  609,  808,  821,  121,  808,  800,
 /*  2200 */   798,   12,  533,  623,   54,  519,  264,   98,  854,  852,
 /*  2210 */   851,  302,  565,  292,  767,  603,  598,  570,  607,  805,
 /*  2220 */   420,   51,   52,  572,  852,  851,  521,  853,   53,  852,
 /*  2230 */   851,  596,  170,  853,  767,  820,    2,  607,  512,  852,
 /*  2240 */   851,  808,  572,  854,  107,  509,  854,  822,  851,  853,
 /*  2250 */   820,  514,  820,  825,  854,  767,  820,  774,  821,  205,
 /*  2260 */   808,  824,  823,  822,  853,  853,  853,  519,  590,  728,
 /*  2270 */   853,  854,  723,  821,  203,  821,  231,  149,  517,  821,
 /*  2280 */   233,  300,  519,  853,  519,   13,  853,  775,  519,  297,
 /*  2290 */   852,  851,  820,  184,  163,  808,  195,  571,  808,  800,
 /*  2300 */   798,   12, 1192,  619,   54,  547,  853,  521,  853,   93,
 /*  2310 */   852,  851,  141,  852,  851,  821,  226,  767,  546,  512,
 /*  2320 */   404,   51,   52,  614,  519,  527,  585,  251,   53,  852,
 /*  2330 */   851,   91,  767,  266,  767,  290,    2, 1194,  767,  566,
 /*  2340 */   288,  808,  573,  474,  563,  509,  854,  822,  851,  853,
 /*  2350 */   854,  247,  111,  825,  853,  820,  691,  853,  820,  517,
 /*  2360 */   808,  824,  823,  822,  852,  851,  243,  852,  851,  853,
 /*  2370 */   853,  379,  853,  378,  767,  852,  851,  329,  821,  232,
 /*  2380 */   800,  821,  221,  667,  857,   54,  529,  519,  182,  181,
 /*  2390 */   519,  853,  852,  851,  179,  808,  347,  853,  808,  645,
 /*  2400 */   798,   12,   51,   52,  323,  529,  847,  521,  567,   53,
 /*  2410 */   853,  846,  729,  853,  524,  845,  281,    2,  853,  512,
 /*  2420 */   377,  105,  808,  441,   30,  820,  509,  523,  822,  851,
 /*  2430 */   853,  820,  316,  414,  825,  392,  534,  767,  820,  853,
 /*  2440 */   767,  808,  824,  823,  822,  853,  853,  853,  821,  218,
 /*  2450 */   853,  820,  853,  278,  821,  202,   72,  519,  816,  517,
 /*  2460 */   769,  821,  201,  519,  820,  853,  175,  852,  851,   23,
 /*  2470 */   519,  852,  851,  483,  821,  200,  808,  815,  853,  808,
 /*  2480 */   800,  798,   12,  519,  353,   54,  774,  821,  199,  352,
 /*  2490 */   356,  820,  257,  189,  518,   43,  519,  317,  433,  765,
 /*  2500 */   814,   67,   51,   52,  853,  853,   57,  767,  853,   53,
 /*  2510 */    85,  853,  853,  767,  821,  211,  299,    2,  347,  273,
 /*  2520 */   767,  346,  808,  519,  820,  296,  509,  255,  852,  851,
 /*  2530 */   853,  820,  853,  767,  825,  820,  505,  820,  853,  853,
 /*  2540 */   399,  808,  824,  823,  822,  853,  767,  821,  216,  853,
 /*  2550 */   499,  853,  272,   47,  821,  215,  519,  391,  821,  122,
 /*  2560 */   821,  214,  764,  519,  820,  343,  820,  519,  763,  519,
 /*  2570 */   286,  282,  283,  767,  398,  760,  808,  820,  853,  808,
 /*  2580 */   853,  798,   12,  754,  853,  853,  853,  821,  213,  821,
 /*  2590 */   219,  853,  248,  748,  136,  137,  519,  467,  519,  470,
 /*  2600 */   821,  217,  162,  693,  820,  682,  767,  457,  774,  519,
 /*  2610 */   820,  677,  394,  767,  676,  331,  672,  767,  853,  767,
 /*  2620 */   673,  671,  369,  650,  853,  643,  642,  821,  204,  631,
 /*  2630 */   368,  641,  640,  821,   90,  157,  519,  103,  156,  439,
 /*  2640 */   134,  155,  473,  253,  421,   31,  767,  315,  767,  153,
 /*  2650 */   196,  437,  133,  312,  101,  152,  622,  308,  618,  767,
 /*  2660 */   151,  108,  188,  304,  606,  428,  612,  608,  427,  150,
 /*  2670 */   586,  131,  130,  148,   97,  410,  147,  415,  412,   96,
 /*  2680 */   146,  145,   95,   94,  144,   30,  767,  556,  143,  382,
 /*  2690 */   543,  128,  767,  127,  541,  142,  537,  531,   29,  197,
 /*  2700 */   354,  778,  186,  185,  734,  668,  309,  332,  238,  448,
 /*  2710 */   724,  313,  434,  611,  364,  793,   26,  789,  502,  811,
 /*  2720 */    80,  183,  788,  777,    9,  655,  355,  252,  516,  438,
 /*  2730 */    92,  665,  659,   41,  658,  686,  580,  685,   78,  646,
 /*  2740 */   854, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,  753,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,   99,  100,  101,  102,  103,  104,  105,   50,   81,
 /*    10 */    82,   83,   16,  120,   86,   87,   88,   89,   90,   91,
 /*    20 */    92,   93,    4,   95,   96,   97,   98,   99,  100,  101,
 /*    30 */   102,  103,  104,  105,  195,  196,  197,  198,   80,   81,
 /*    40 */    82,   83,  101,  107,   86,   87,   88,   89,   90,   91,
 /*    50 */    92,   93,   56,   95,   96,   97,   98,   99,  100,  101,
 /*    60 */   102,  103,  104,  105,  171,  107,  101,  102,  103,  104,
 /*    70 */   105,  249,  250,   77,  252,   42,   43,   35,   82,   90,
 /*    80 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*    90 */   101,  102,  103,  104,  105,   99,  100,  101,  157,   57,
 /*   100 */   202,  160,  106,  107,  129,   63,   79,  132,  133,  134,
 /*   110 */   114,  115,  111,  210,  216,  119,  120,   84,   85,  123,
 /*   120 */   115,  125,  126,  225,  226,  150,    4,  131,   68,   26,
 /*   130 */    31,   71,  234,   44,  138,  139,  140,  141,   16,  143,
 /*   140 */    41,  114,  115,  125,  126,   68,   24,  120,   71,  107,
 /*   150 */   247,  248,  156,  114,  158,  159,  138,  115,  162,  210,
 /*   160 */   262,  263,  120,  167,  168,  169,  170,  171,  172,  173,
 /*   170 */   254,   82,  176,  113,  178,  179,   73,   21,   56,  276,
 /*   180 */   264,  278,  284,  115,  281,  143,  190,   34,  120,  120,
 /*   190 */   113,  173,  202,   37,  202,  126,  247,  248,  156,   77,
 /*   200 */   158,  159,  210,   79,   82,  302,  216,  120,  216,  167,
 /*   210 */   107,  169,  170,  120,  172,  225,  226,  225,  226,  131,
 /*   220 */    19,   99,  100,   60,  234,  276,  234,  278,  106,  107,
 /*   230 */   281,    4,  190,  164,  165,   82,  114,  115,  114,  115,
 /*   240 */   248,  119,  120,  183,  120,  123,   45,  125,  126,  162,
 /*   250 */   301,  302,    4,  131,  262,  263,  130,  131,  105,  202,
 /*   260 */   138,  139,  140,  141,   16,  143,  214,  210,   67,  116,
 /*   270 */   218,  219,  220,  216,  284,   35,  284,  287,  156,    4,
 /*   280 */   158,  159,  129,  130,  131,  132,  133,  134,  135,  167,
 /*   290 */   168,  169,  170,  228,  172,  173,  202,   57,  176,  117,
 /*   300 */   178,  179,  149,   63,   56,  248,  120,  144,  145,  146,
 /*   310 */   216,  194,  190,    4,  104,  105,  199,  154,  155,  225,
 /*   320 */   226,    4,   79,  266,  267,   77,  117,  210,  234,  202,
 /*   330 */    82,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   340 */   104,  105,  156,  216,  158,  159,   15,   99,  100,   74,
 /*   350 */   285,  124,  125,  126,  106,  107,  129,  114,  115,  132,
 /*   360 */   133,  134,  114,  115,  247,  248,  285,  119,  120,  168,
 /*   370 */   202,  123,    4,  125,  126,  207,   45,  150,  284,  131,
 /*   380 */   212,  213,  202,   21,  216,  304,  138,  139,  140,  141,
 /*   390 */    28,  143,   61,  276,  267,  278,  216,  122,  281,   37,
 /*   400 */   125,  126,  222,  223,  156,  202,  158,  159,  202,    4,
 /*   410 */    42,   43,  114,  319,   76,  167,  322,  169,  170,  216,
 /*   420 */   172,  173,  216,  306,  176,  115,  178,  179,  225,  226,
 /*   430 */   120,  225,  226,  120,  125,  126,  119,  234,  190,    4,
 /*   440 */   234,    4,  125,  126,  115,   26,    4,  138,   80,   81,
 /*   450 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   460 */    92,   93,  153,   95,   96,   97,   98,   99,  100,  101,
 /*   470 */   102,  103,  104,  105,    4,  295,  296,  274,  202,  148,
 /*   480 */   274,  180,  125,  182,  116,    4,   43,  284,  131,  151,
 /*   490 */   284,   24,  216,  125,   42,   43,  139,  140,  141,   80,
 /*   500 */    81,   82,   83,  186,   52,   86,   87,   88,   89,   90,
 /*   510 */    91,   92,   93,  115,   95,   96,   97,   98,   99,  100,
 /*   520 */   101,  102,  103,  104,  105,   82,  121,  189,   73,  161,
 /*   530 */   125,  126,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   540 */    88,   89,   90,   91,   92,   93,   10,   95,   96,   97,
 /*   550 */    98,   99,  100,  101,  102,  103,  104,  105,   22,  115,
 /*   560 */   125,  126,  125,  126,  120,  224,  202,  125,  126,   99,
 /*   570 */   100,  136,  120,  232,  233,    4,  212,  213,   42,   43,
 /*   580 */   216,  114,  146,  202,  202,  130,  143,  218,  219,  220,
 /*   590 */   109,  315,  149,  212,  213,  125,  126,  216,  216,  180,
 /*   600 */   130,  182,  238,  161,  240,   89,  125,  126,    4,  139,
 /*   610 */   140,  175,    4,  143,  177,  145,   80,   81,   82,   83,
 /*   620 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*   630 */   114,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   640 */   104,  105,   90,   91,   92,   93,  131,   95,   96,   97,
 /*   650 */    98,   99,  100,  101,  102,  103,  104,  105,    4,   42,
 /*   660 */    43,   82,   83,    4,  149,   86,   87,   88,   89,   90,
 /*   670 */    91,   92,   93,    4,   95,   96,   97,   98,   99,  100,
 /*   680 */   101,  102,  103,  104,  105,  114,   26,  116,  114,    4,
 /*   690 */   144,  145,  146,  311,    4,  313,  125,   80,   81,   82,
 /*   700 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*   710 */    93,  202,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   720 */   103,  104,  105,  114,    4,  216,    4,   73,  115,  125,
 /*   730 */   126,    4,  161,  125,  126,    4,   16,  144,  145,  146,
 /*   740 */    80,   81,   82,   83,  139,  140,   86,   87,   88,   89,
 /*   750 */    90,   91,   92,   93,  115,   95,   96,   97,   98,   99,
 /*   760 */   100,  101,  102,  103,  104,  105,   66,  143,  114,  115,
 /*   770 */   166,  157,   72,  119,  160,  202,   56,  118,  119,  125,
 /*   780 */   126,  173,  202,  114,  125,  126,  202,  163,  119,  216,
 /*   790 */   120,  101,  138,   73,  125,  126,  216,   77,  202,  114,
 /*   800 */   216,  292,   82,  254,  119,  225,  226,  153,  154,  155,
 /*   810 */   125,  126,  216,  264,  234,  125,  126,  115,  202,   99,
 /*   820 */   100,  225,  226,  138,  115,  209,  106,  211,  138,  114,
 /*   830 */   234,  116,  216,  133,  114,  115,  114,  167,  153,  119,
 /*   840 */   180,  114,  182,  123,  120,  125,  126,  125,  126,  164,
 /*   850 */   165,  131,  125,   32,  202,  202,  125,  126,  138,  139,
 /*   860 */   140,  141,   44,  173,  284,   13,   35,  136,  216,  216,
 /*   870 */   274,  221,  222,  223,  154,  155,   55,  225,  226,   43,
 /*   880 */   284,    4,  115,  183,   53,    4,  234,  120,   57,  316,
 /*   890 */   317,  318,  114,  173,   63,  173,  176,  313,  178,  179,
 /*   900 */   115,   80,   81,   82,   83,  120,    4,   86,   87,   88,
 /*   910 */    89,   90,   91,   92,   93,    4,   95,   96,   97,   98,
 /*   920 */    99,  100,  101,  102,  103,  104,  105,   16,  249,  250,
 /*   930 */    19,  252,   80,   81,   82,   83,  284,    4,   86,   87,
 /*   940 */    88,   89,   90,   91,   92,   93,  296,   95,   96,   97,
 /*   950 */    98,   99,  100,  101,  102,  103,  104,  105,  202,  107,
 /*   960 */     4,  282,  202,  202,    4,  232,  210,   56,  235,  316,
 /*   970 */   317,  318,  216,  321,  322,  242,  216,  216,    4,  143,
 /*   980 */    69,  225,  226,  222,  223,  225,  226,  115,   77,  167,
 /*   990 */   234,   35,  120,   82,  234,   84,  119,  290,  167,  115,
 /*  1000 */   119,    4,  125,  126,  248,   26,  125,  126,    5,   53,
 /*  1010 */    99,  100,  190,   57,  137,  138,  120,  106,  262,   63,
 /*  1020 */   118,  119,  262,  263,    4,  114,    4,  125,  126,  180,
 /*  1030 */   119,  324,  325,   30,  123,  115,  125,  126,  142,   36,
 /*  1040 */   284,    4,  131,  166,  284,  210,  202,    0,  202,  138,
 /*  1050 */   139,  140,  141,   16,   99,  100,  295,  296,  125,  126,
 /*  1060 */   216,    4,  216,   60,    4,  184,  210,   64,  115,  225,
 /*  1070 */   226,  225,  226,  120,  114,    4,   29,    4,  234,  119,
 /*  1080 */   234,  125,  126,  248,  173,  125,  126,  176,  202,  178,
 /*  1090 */   179,    4,  206,   56,  139,  140,    5,  164,  138,  125,
 /*  1100 */   126,  202,  216,    9,  248,   11,  262,   13,  262,  263,
 /*  1110 */    73,   14,  138,  153,   77,  216,   35,   23,  202,   82,
 /*  1120 */    26,   30,  125,  167,  225,  226,  218,   36,  284,  120,
 /*  1130 */   284,  120,  216,  234,  137,  204,   99,  100,   57,  119,
 /*  1140 */   166,  225,  226,  106,   63,  125,  126,  125,   54,  127,
 /*  1150 */   234,  114,  120,   59,  107,   64,  119,  210,   64,   65,
 /*  1160 */   123,  262,  125,  126,   70,  202,    4,   73,  131,   75,
 /*  1170 */     4,  162,    4,  265,  114,  138,  139,  140,  141,  216,
 /*  1180 */     4,  116,  125,  284,  218,  125,  126,  114,  225,  226,
 /*  1190 */   274,  154,  155,  285,  137,  248,  125,  234,  125,  126,
 /*  1200 */   284,  120,   10,  116,  110,  185,  112,  202,  137,  259,
 /*  1210 */   173,  261,  125,  176,   22,  178,  179,   80,   81,   82,
 /*  1220 */    83,  216,  291,   86,   87,   88,   89,   90,   91,   92,
 /*  1230 */    93,  265,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1240 */   103,  104,  105,   26,   79,  151,  173,  284,  161,   80,
 /*  1250 */    81,   82,   83,  116,  216,   86,   87,   88,   89,   90,
 /*  1260 */    91,   92,   93,  225,   95,   96,   97,   98,   99,  100,
 /*  1270 */   101,  102,  103,  104,  105,  109,  115,  109,  273,  114,
 /*  1280 */   115,  119,  188,   38,   14,  115,    4,  125,  126,   47,
 /*  1290 */   120,  125,  126,  125,  126,  119,    4,   80,   81,   82,
 /*  1300 */    83,  125,  126,   86,   87,   88,   89,   90,   91,   92,
 /*  1310 */    93,  114,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1320 */   103,  104,  105,   80,   81,   82,   83,   82,  152,   86,
 /*  1330 */    87,   88,   89,   90,   91,   92,   93,   62,   95,   96,
 /*  1340 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  187,
 /*  1350 */   181,   80,   81,   82,   83,   29,    4,   86,   87,   88,
 /*  1360 */    89,   90,   91,   92,   93,   81,   95,   96,   97,   98,
 /*  1370 */    99,  100,  101,  102,  103,  104,  105,   32,  221,  222,
 /*  1380 */   223,   80,   81,   82,   83,  210,  115,   86,   87,   88,
 /*  1390 */    89,   90,   91,   92,   93,  202,   95,   96,   97,   98,
 /*  1400 */    99,  100,  101,  102,  103,  104,  105,  125,  126,  216,
 /*  1410 */   118,  307,  308,  290,  216,  217,  115,  125,  126,   80,
 /*  1420 */    81,   82,   83,  248,  181,   86,   87,   88,   89,   90,
 /*  1430 */    91,   92,   93,  107,   95,   96,   97,   98,   99,  100,
 /*  1440 */   101,  102,  103,  104,  105,    4,  164,  324,  325,   80,
 /*  1450 */    81,   82,   83,  296,  115,   86,   87,   88,   89,   90,
 /*  1460 */    91,   92,   93,   62,   95,   96,   97,   98,   99,  100,
 /*  1470 */   101,  102,  103,  104,  105,  210,  218,  125,  126,   80,
 /*  1480 */    81,   82,   83,   55,  115,   86,   87,   88,   89,   90,
 /*  1490 */    91,   92,   93,   14,   95,   96,   97,   98,   99,  100,
 /*  1500 */   101,  102,  103,  104,  105,  153,  228,  314,  315,   80,
 /*  1510 */    81,   82,   83,  248,  115,   86,   87,   88,   89,   90,
 /*  1520 */    91,   92,   93,  265,   95,   96,   97,   98,   99,  100,
 /*  1530 */   101,  102,  103,  104,  105,    4,  107,   80,   81,   82,
 /*  1540 */    83,  197,  198,   86,   87,   88,   89,   90,   91,   92,
 /*  1550 */    93,  120,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1560 */   103,  104,  105,  285,    4,  124,  125,  126,   80,   81,
 /*  1570 */    82,   83,   14,  116,   86,   87,   88,   89,   90,   91,
 /*  1580 */    92,   93,    4,   95,   96,   97,   98,   99,  100,  101,
 /*  1590 */   102,  103,  104,  105,    4,  107,   80,   81,   82,   83,
 /*  1600 */   317,  318,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1610 */     4,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1620 */   104,  105,   16,  107,   14,   19,   80,   81,   82,   83,
 /*  1630 */   317,  318,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1640 */   202,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1650 */   104,  105,  202,    4,  216,   77,  125,  126,   14,    4,
 /*  1660 */   115,  211,   56,  225,  226,  120,  216,  202,    4,  138,
 /*  1670 */   202,  115,  234,  202,   14,   69,  120,   99,  100,  119,
 /*  1680 */   114,  216,  202,   77,  216,  125,  126,  216,   82,  115,
 /*  1690 */   225,  226,  114,  225,  226,  115,  216,  166,  138,  234,
 /*  1700 */   120,   38,  234,  125,  115,   99,  100,  202,  115,  131,
 /*  1710 */   202,  164,  106,  120,    4,  125,  126,  139,  140,  141,
 /*  1720 */   114,  216,  284,    4,  216,  119,  166,  262,  138,  123,
 /*  1730 */   115,  125,  126,    7,  115,  120,    4,  131,   12,  202,
 /*  1740 */   202,  202,  274,  117,  138,  139,  140,  141,   16,  284,
 /*  1750 */   279,   19,  284,  216,  216,  216,    4,  319,    4,  279,
 /*  1760 */   322,  120,  225,  226,  225,  226,   40,    4,  119,  317,
 /*  1770 */   318,  234,  202,  234,  125,  126,  117,  202,  273,  173,
 /*  1780 */   125,  126,  176,  202,  178,  179,  216,  138,   56,  125,
 /*  1790 */   126,  216,  101,  138,  202,  225,  226,  216,  202,  262,
 /*  1800 */   218,   69,  294,  114,  234,  202,  225,  226,  216,   77,
 /*  1810 */   202,  147,  216,  202,   82,  234,  202,  225,  226,  216,
 /*  1820 */   115,  284,    4,  284,  216,  114,  234,  216,  225,  226,
 /*  1830 */   216,   99,  100,  225,  226,  125,  126,  234,  106,  225,
 /*  1840 */   226,    4,  234,  157,  125,  126,  114,  265,  234,  317,
 /*  1850 */   318,  119,  202,  171,  284,  123,  206,  125,  126,  115,
 /*  1860 */   202,  109,    4,  131,  206,  284,  216,  202,  317,  318,
 /*  1870 */   138,  139,  140,  141,  216,    4,  284,  125,  126,  125,
 /*  1880 */   126,  216,  119,  173,  273,    4,  202,  284,  125,  126,
 /*  1890 */   225,  226,  284,  115,  243,    4,  245,  115,  284,  234,
 /*  1900 */   216,  138,  120,  184,  114,  173,  152,  311,  176,  313,
 /*  1910 */   178,  179,   80,   81,   82,   83,   58,  115,   86,   87,
 /*  1920 */    88,   89,   90,   91,   92,   93,    4,   95,   96,   97,
 /*  1930 */    98,   99,  100,  101,  102,  103,  104,  105,   16,   73,
 /*  1940 */   202,  202,  202,  125,  126,  202,  218,  202,   50,  284,
 /*  1950 */   266,  267,   18,  202,  216,  216,  216,  206,  202,  216,
 /*  1960 */   115,  216,  125,  126,    4,  225,  226,  216,  225,  226,
 /*  1970 */   225,  226,  216,  107,  234,  138,  118,  234,   56,  234,
 /*  1980 */   115,  225,  226,  125,  126,    6,  202,  202,  202,  118,
 /*  1990 */   234,  202,  114,  265,    4,  116,  125,  126,  114,   77,
 /*  2000 */   216,  216,  216,  185,   82,  216,  125,  126,    4,  225,
 /*  2010 */   226,  225,  226,    8,  225,  226,  125,  126,  234,  138,
 /*  2020 */   234,   99,  100,  234,  284,  202,    4,  284,  106,  284,
 /*  2030 */   202,  243,  202,  245,  206,  202,  114,  115,   16,  216,
 /*  2040 */   284,  119,  154,  155,  216,  123,  216,  125,  126,  216,
 /*  2050 */     4,  202,  202,  131,  114,  225,  226,  202,  225,  226,
 /*  2060 */   138,  139,  140,  141,  234,  216,  216,  234,  284,    4,
 /*  2070 */   284,  216,  115,  284,  225,  226,  202,  186,   56,  119,
 /*  2080 */   225,  226,   50,  234,  114,  125,  126,  114,    4,  234,
 /*  2090 */   216,  202,  202,  191,  192,  173,  273,   50,  176,   77,
 /*  2100 */   178,  179,  114,    4,   82,  216,  216,  149,    4,  202,
 /*  2110 */   202,  202,  135,  153,  284,  125,  126,  284,    4,   82,
 /*  2120 */   123,   99,  100,  216,  216,  216,    4,  143,  106,  125,
 /*  2130 */   126,  241,  202,  284,  225,  226,  114,  115,   16,  284,
 /*  2140 */   202,  119,  138,  234,  206,  123,  216,  125,  126,   13,
 /*  2150 */   116,  162,  202,  131,  216,  225,  226,  148,  120,  174,
 /*  2160 */   138,  139,  140,  141,  234,  119,  216,  202,   89,    4,
 /*  2170 */    89,  125,  126,  202,  202,  225,  226,  187,   56,   18,
 /*  2180 */   273,  216,  292,   89,  234,   89,   24,  216,  216,    4,
 /*  2190 */   125,  126,    4,  284,  175,  173,  225,  226,  176,   77,
 /*  2200 */   178,  179,  118,  138,   82,  234,  241,  148,    4,  125,
 /*  2210 */   126,  155,  166,  202,  284,  107,  107,  206,  119,  202,
 /*  2220 */    25,   99,  100,  119,  125,  126,    4,  216,  106,  125,
 /*  2230 */   126,   62,  120,  216,  284,  202,  114,  138,   16,  125,
 /*  2240 */   126,  119,  138,    4,   51,  123,    4,  125,  126,  216,
 /*  2250 */   202,  202,  202,  131,    4,  284,  202,  292,  225,  226,
 /*  2260 */   138,  139,  140,  141,  216,  216,  216,  234,   51,  202,
 /*  2270 */   216,    4,  202,  225,  226,  225,  226,  143,   56,  225,
 /*  2280 */   226,  183,  234,  216,  234,  114,  216,  173,  234,  113,
 /*  2290 */   125,  126,  202,  163,  202,  173,  114,  123,  176,   77,
 /*  2300 */   178,  179,  180,  138,   82,  115,  216,    4,  216,  113,
 /*  2310 */   125,  126,  111,  125,  126,  225,  226,  284,  115,   16,
 /*  2320 */    49,   99,  100,  138,  234,   48,  138,  285,  106,  125,
 /*  2330 */   126,  215,  284,  231,  284,  202,  114,  115,  284,  206,
 /*  2340 */   202,  119,  138,  202,  206,  123,    4,  125,  126,  216,
 /*  2350 */     4,  268,  231,  131,  216,  202,  202,  216,  202,   56,
 /*  2360 */   138,  139,  140,  141,  125,  126,  308,  125,  126,  216,
 /*  2370 */   216,  310,  216,  310,  284,  125,  126,  202,  225,  226,
 /*  2380 */    77,  225,  226,  202,  201,   82,  119,  234,  108,  203,
 /*  2390 */   234,  216,  125,  126,  203,  173,  202,  216,  176,  202,
 /*  2400 */   178,  179,   99,  100,  202,  138,  201,    4,  166,  106,
 /*  2410 */   216,  201,  173,  216,  201,   65,  202,  114,  216,   16,
 /*  2420 */   206,  205,  119,   78,  174,  202,  123,  208,  125,  126,
 /*  2430 */   216,  202,  202,  202,  131,  241,  202,  284,  202,  216,
 /*  2440 */   284,  138,  139,  140,  141,  216,  216,  216,  225,  226,
 /*  2450 */   216,  202,  216,  154,  225,  226,  120,  234,  271,   56,
 /*  2460 */   118,  225,  226,  234,  202,  216,  117,  125,  126,  171,
 /*  2470 */   234,  125,  126,  168,  225,  226,  173,  250,  216,  176,
 /*  2480 */    77,  178,  179,  234,  256,   82,  292,  225,  226,  257,
 /*  2490 */   202,  202,  105,  258,  202,  169,  234,  202,  202,   82,
 /*  2500 */   260,  170,   99,  100,  216,  216,  285,  284,  216,  106,
 /*  2510 */   114,  216,  216,  284,  225,  226,  202,  114,  202,  293,
 /*  2520 */   284,  230,  119,  234,  202,  202,  123,  105,  125,  126,
 /*  2530 */   216,  202,  216,  284,  131,  202,  312,  202,  216,  216,
 /*  2540 */   116,  138,  139,  140,  141,  216,  284,  225,  226,  216,
 /*  2550 */   167,  216,  288,  180,  225,  226,  234,  241,  225,  226,
 /*  2560 */   225,  226,  260,  234,  202,  259,  202,  234,  275,  234,
 /*  2570 */   202,  202,  202,  284,   46,  275,  173,  202,  216,  176,
 /*  2580 */   216,  178,  179,  320,  216,  216,  216,  225,  226,  225,
 /*  2590 */   226,  216,   27,  320,  117,  271,  234,  155,  234,  252,
 /*  2600 */   225,  226,  191,  325,  202,  227,  284,  143,  292,  234,
 /*  2610 */   202,  227,   39,  284,  237,  227,  142,  284,  216,  284,
 /*  2620 */   229,  227,  230,  237,  216,  227,  227,  225,  226,  271,
 /*  2630 */   230,  227,  227,  225,  226,  117,  234,  205,  117,  230,
 /*  2640 */   205,  117,  234,  271,   33,  180,  284,  299,  284,  117,
 /*  2650 */   172,  300,   80,  256,  244,  117,  277,  256,  277,  284,
 /*  2660 */   117,  114,  280,  283,  244,  143,  277,  277,  256,  117,
 /*  2670 */   256,  205,  205,  117,  246,   78,  117,  271,  271,  246,
 /*  2680 */   117,  117,  246,  246,  117,  174,  284,  294,  117,  271,
 /*  2690 */    20,  117,  284,  117,  271,  117,  271,   17,  303,  253,
 /*  2700 */   255,  228,  259,  259,  270,  235,  255,  228,  239,  229,
 /*  2710 */   272,  272,  272,  256,  200,  296,  303,  296,  289,  218,
 /*  2720 */   305,  305,  218,  218,  253,  218,  251,  297,  245,  298,
 /*  2730 */   269,  236,  236,  286,  236,  225,  309,  225,   73,  240,
 /*  2740 */     4,  326,  326,  326,  326,  326,  326,  326,  326,  323,
};
#define YY_SHIFT_USE_DFLT (-108)
#define YY_SHIFT_COUNT (525)
#define YY_SHIFT_MIN   (-107)
#define YY_SHIFT_MAX   (2736)
static const short yy_shift_ofst[] = {
 /*     0 */  1326,  720, 1037, 1094,  911, 1732, 1606, 2222, 2222, 2222,
 /*    10 */  1866,  248, 2122, 2303, 2303, 2303, 2303, 2303, 2303, 2303,
 /*    20 */  2303,  103,   -4,  122, 2022, 1922, 2303, 2303, 2303, 2303,
 /*    30 */  2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2403, 2303,
 /*    40 */  2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2403,
 /*    50 */  2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303,
 /*    60 */  2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303,  654,
 /*    70 */   470,  470,  227,  956,  956, 1441,  685,  163, 1858,  275,
 /*    80 */  1441, 2114, 2114, 2114, 2342, 2114,  955,  955, 2346, 1022,
 /*    90 */   368,  153,  960, 2267, 1162, 2046, 1960, 2104, 1073, 2099,
 /*   100 */  1073, 1763, 1649, 1176,  275,  902, 2250, 2239, 2239, 2239,
 /*   110 */  2239,  443, 2239, 2114, 2346, 2346, 1022, 1902, 1902, 1888,
 /*   120 */   536,  536,  -42, 1578,  877, 1560,  690, 1531,  974, 1020,
 /*   130 */   659,  881,  722, 1003,  317, 1003,  309,  571,  831,   18,
 /*   140 */   669, 2084, 2004, 1818, 1990, 2242, 1352, 2204, 1871, 2188,
 /*   150 */  1719, 2185, 2165, 2065, 1881, 1891, 1754, 1292, 1837,  731,
 /*   160 */  1664, 1655, 1060, 1282,  933, 1087, 1087, 1087,  604,  442,
 /*   170 */  1710, 1081, 1081,  437,  608, 1590,  435,  405,  700, 1752,
 /*   180 */  1168, 1166,  481, 2346, 2346,  240,  240, 1047,  455,  822,
 /*   190 */  2665, 2665, 2736, 2665, 2665, -108, -108, -108,  452,  617,
 /*   200 */   617,  617,  617,  617,  617,  617,  617,  617,  617,  660,
 /*   210 */   419,  852,  821, 1516, 1488, 1457, 1429, 1399, 1369, 1339,
 /*   220 */  1301, 1271, 1243, 1217, 1169, 1137, 1832, 1546,  -72,  579,
 /*   230 */   579,  -11,  552,  552,  552,  552,  236,  -98,  -25,  357,
 /*   240 */   357,  -35,  124,   27,  331,  331,  331,   69,  201, 1091,
 /*   250 */   186,   33,  593, 1726, 1071, 1057,  727,  997,  -59,  362,
 /*   260 */  -107, 1009, 1245, 1245,  896, 1782,  836, 1192, 1245,  624,
 /*   270 */   670,  670,  301, 1192,  605,  605,  210,   87,  614, 2680,
 /*   280 */  2680, 2578, 2576, 2574, 2670, 2670, 2571, 2511, 2567, 2597,
 /*   290 */  2564, 2597, 2563, 2597, 2559, 2597, 2556, 2345, 2298, 2552,
 /*   300 */  2345, 2572, 2478, 2298, 2478, 2522, 2547, 2543, 2478, 2298,
 /*   310 */  2538, 2572, 2478, 2298, 2532, 2465, 2611, 2524, 2345, 2521,
 /*   320 */  2396, 2345, 2518, 2396, 2464, 2464, 2464, 2464, 2573, 2396,
 /*   330 */  2464, 2474, 2464, 2573, 2464, 2464, 2411, 2442, 2477, 2565,
 /*   340 */  2565, 2528, 2528, 2331, 2383, 2373, 2424, 2422, 2396, 2417,
 /*   350 */  2387, 2331, 2326, 2305, 2298, 2299, 2349, 2336, 2345, 2350,
 /*   360 */  2350, 2280, 2280, 2280, 2280, -108, -108, -108, -108, -108,
 /*   370 */  -108, -108, -108, -108, -108,   42,   60,  338, 1165,  243,
 /*   380 */   546,   77,  516, 1615, 1593,  436, 1580,  467, 1556, 1545,
 /*   390 */  1170,  953,  872,  126,  156,  515,  785,  767,   99,   89,
 /*   400 */   444,  310,   68,  715, 2277, 2271, 2201, 2196, 2203, 2190,
 /*   410 */  2174, 2182, 2130, 2176, 2171, 2134, 2098, 2217, 2112, 2193,
 /*   420 */  2169, 2195, 2109, 2108, 2056, 2019, 2059, 2162, 2161, 1985,
 /*   430 */  2096, 2094, 2081, 2079, 2009, 2038, 1989, 2136, 1984, 2034,
 /*   440 */  1997, 2037, 1958, 1977, 1988, 2047, 1973, 1970, 1957, 1940,
 /*   450 */  2032, 2005, 1884, 1879, 1979, 1878, 1898, 1934, 1865, 1682,
 /*   460 */  1790, 1845, 1802, 1778, 1744, 1641, 1686, 1711, 1705, 1689,
 /*   470 */  1641, 1691, 1659, 1626, 1547, 1619, 1589, 1431, 1574, 1663,
 /*   480 */  1660, 1566, 1431, 1644, 1610, 1558, 1479, 1428, 1401, 1345,
 /*   490 */  1284, 1275, 1242, 1270, 1161, 1197, 1065, 1032, 1011, 1097,
 /*   500 */   920,  849,  979,  724,  884,  778,  818,  724,  709,  609,
 /*   510 */   702,  639,  574,  613,  398,  329,  313,  298,  209,  182,
 /*   520 */    88,   39,   93,    5,    1,  -64,
};
#define YY_REDUCE_USE_DFLT (-179)
#define YY_REDUCE_COUNT (374)
#define YY_REDUCE_MIN   (-178)
#define YY_REDUCE_MAX   (2514)
static const short yy_reduce_ofst[] = {
 /*     0 */  -161,   -8,  756,  117, 1438,  652,   94,  846,  760, -102,
 /*    10 */   -51, 1537,  -10, 1468,  916, 1465,  596,  206,  899,  844,
 /*    20 */   203,  -97, 2408, 2402, 2375, 2364, 2362, 2335, 2333, 2329,
 /*    30 */  2322, 2289, 2262, 2249, 2236, 2229, 2223, 2156, 2153, 2090,
 /*    40 */  2054, 2050, 2048, 2033, 1971, 1950, 1930, 1909, 1855, 1849,
 /*    50 */  1833, 1830, 1789, 1786, 1784, 1756, 1745, 1743, 1740, 1665,
 /*    60 */  1614, 1608, 1603, 1592, 1581, 1570, 1539,  963,  580,   57,
 /*    70 */   761,  180,  364,  653,  573,  168, 1684,  679, 1596,  616,
 /*    80 */   381, 2316, 2194, 1965,  382, 1890, 1157,  650, 1193,   52,
 /*    90 */   908,  341,  127, 2214, 2138, 2133, 2011, 1938, 1480, 1751,
 /*   100 */  1471, 1828, 1658, 1650, 1450,  886, 1508, 1907, 1823, 1611,
 /*   110 */  1505,  733, 1005,  509,  276,  584,  369, 1123,  707, -178,
 /*   120 */  1278,   65,   81, 1038, 2370, 2369, 2292, 1972, 1972, 2368,
 /*   130 */  2323, 2314, 2296, 1788, 2295, 1651, 1972, 1728, 1551, 2292,
 /*   140 */  2288, 2234, 1972, 1972, 1972, 1972, 1972, 1972, 1972, 2231,
 /*   150 */  1972, 1972, 1972, 1972, 2230, 1972, 1972, 1972, 2202, 2197,
 /*   160 */  2181, 2175, 2154, 2141, 2092, 1582, 1258,  966, 2070, 2067,
 /*   170 */  1850, 1532, 1452, 2049, 2017, 1972, 1908, 1889,  931, 1874,
 /*   180 */  1785, 1739, 1738, 1575, 1538, 1313, 1283, 1344, 1265,  950,
 /*   190 */  1175,  947, 1198,  856,  835, 1104,  549,  -84, 2042, 2042,
 /*   200 */  2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
 /*   210 */  2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
 /*   220 */  2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
 /*   230 */  2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2499, 2512,
 /*   240 */  2510, 2042, 2427, 2427, 2498, 2496, 2495, 2461, 2426, 2483,
 /*   250 */  2475, 2447, 2431, 2430, 2507, 2505, 2504, 2501, 2471, 2514,
 /*   260 */  2457, 2451, 2440, 2439, 2480, 2469, 2470, 2479, 2438, 2434,
 /*   270 */  2444, 2443, 2429, 2473, 2421, 2419, 2042, 2445, 2446, 2416,
 /*   280 */  2415, 2358, 2425, 2423, 2413, 2395, 2418, 2393, 2358, 2437,
 /*   290 */  2358, 2436, 2358, 2433, 2358, 2428, 2407, 2467, 2414, 2406,
 /*   300 */  2466, 2420, 2390, 2412, 2389, 2380, 2382, 2358, 2381, 2401,
 /*   310 */  2358, 2410, 2379, 2397, 2358, 2351, 2348, 2372, 2435, 2358,
 /*   320 */  2409, 2432, 2358, 2400, 2405, 2404, 2399, 2398, 2386, 2392,
 /*   330 */  2394, 2391, 2388, 2377, 2384, 2378, 2278, 2347, 2324, 2273,
 /*   340 */  2263, 2300, 2293, 2302, 2306, 2264, 2224, 2226, 2291, 2221,
 /*   350 */  2042, 2240, 2235, 2232, 2228, 2227, 2187, 2219, 2216, 2191,
 /*   360 */  2186, 2213, 2210, 2205, 2183, 2063, 2061, 2058, 2121, 2102,
 /*   370 */  2083, 2042, 2042, 2042, 2116,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   867, 1182, 1182, 1302, 1182, 1182, 1182, 1182, 1182, 1182,
 /*    10 */  1302, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
 /*    20 */  1182, 1302, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
 /*    30 */  1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
 /*    40 */  1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
 /*    50 */  1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
 /*    60 */  1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1051,
 /*    70 */  1344, 1344, 1344, 1321, 1321, 1344, 1044, 1344, 1344,  895,
 /*    80 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,  918,
 /*    90 */  1040,  908, 1051, 1344, 1344, 1344, 1344, 1344, 1113, 1127,
 /*   100 */  1113, 1105, 1094, 1344, 1344, 1344, 1218, 1121, 1121, 1121,
 /*   110 */  1121,  991, 1121, 1344, 1344, 1344, 1344, 1153, 1152, 1344,
 /*   120 */  1079, 1079, 1184, 1344, 1271, 1276, 1344, 1344, 1344, 1344,
 /*   130 */  1344, 1344, 1114, 1344, 1344, 1344, 1052, 1040, 1321, 1344,
 /*   140 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*   150 */  1344, 1128, 1106, 1095, 1344, 1344, 1344, 1344, 1344, 1344,
 /*   160 */  1344, 1344, 1344, 1344, 1344, 1040, 1040, 1040, 1344, 1344,
 /*   170 */  1344, 1321, 1321, 1344, 1344, 1344, 1344, 1344,  905, 1344,
 /*   180 */  1344, 1344,  873, 1344, 1344, 1321, 1321,  867, 1302, 1073,
 /*   190 */  1302, 1302,  913, 1302, 1302, 1295, 1030, 1030, 1089, 1112,
 /*   200 */  1111, 1110, 1109, 1057, 1099, 1087, 1091, 1195, 1090, 1184,
 /*   210 */  1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
 /*   220 */  1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1155, 1167,
 /*   230 */  1154, 1162, 1171, 1163, 1166, 1157, 1156, 1158, 1344, 1344,
 /*   240 */  1344, 1159, 1344, 1344, 1344, 1344, 1344, 1043, 1344, 1344,
 /*   250 */  1013, 1344, 1344, 1245, 1344, 1344,  920, 1344, 1028,  876,
 /*   260 */  1098, 1041, 1069, 1069,  958,  982,  942, 1079, 1069, 1059,
 /*   270 */  1073, 1073, 1190, 1079, 1344, 1344, 1160, 1041, 1028, 1286,
 /*   280 */  1286, 1060, 1060, 1060, 1270, 1270, 1060, 1218, 1060, 1004,
 /*   290 */  1060, 1004, 1060, 1004, 1060, 1004, 1060,  902, 1098, 1060,
 /*   300 */   902,  995, 1101, 1098, 1101, 1133, 1117, 1060, 1101, 1098,
 /*   310 */  1060,  995, 1101, 1098, 1060, 1252, 1250, 1060,  902, 1060,
 /*   320 */  1203,  902, 1060, 1203,  993,  993,  993,  993,  974, 1203,
 /*   330 */   993,  958,  993,  974,  993,  993, 1340, 1344, 1060, 1331,
 /*   340 */  1331, 1082, 1082, 1088, 1073, 1344, 1344, 1209, 1203, 1184,
 /*   350 */  1161, 1088, 1086, 1083, 1098, 1344, 1060,  977,  902,  884,
 /*   360 */   884,  872,  872,  872,  872, 1299, 1299, 1295,  960,  960,
 /*   370 */  1046, 1170, 1169, 1168,  929, 1183, 1344, 1344, 1344, 1344,
 /*   380 */  1344, 1344, 1219, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*   390 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1305,
 /*   400 */  1344, 1344, 1344, 1344, 1344,  868, 1344, 1344, 1344, 1344,
 /*   410 */  1344, 1289, 1344, 1344, 1344, 1344, 1344, 1344, 1249, 1248,
 /*   420 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*   430 */  1344, 1344, 1344, 1344, 1344, 1102, 1344, 1237, 1344, 1344,
 /*   440 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*   450 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*   460 */  1344, 1344, 1344, 1344, 1344, 1016, 1022, 1344, 1344, 1344,
 /*   470 */  1017, 1344, 1344, 1146, 1344, 1344, 1344, 1193, 1344, 1344,
 /*   480 */  1344, 1344, 1084, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
 /*   490 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1337, 1074, 1344,
 /*   500 */  1344, 1183, 1344, 1304, 1344, 1344, 1344, 1303, 1344, 1344,
 /*   510 */  1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1147, 1146,
 /*   520 */  1185,  911,  891, 1344,  882, 1344,  864,  869, 1288, 1285,
 /*   530 */  1282, 1287, 1281, 1283, 1280, 1284, 1279, 1277, 1278, 1275,
 /*   540 */  1273, 1272, 1274, 1269, 1265, 1225, 1223, 1221, 1230, 1229,
 /*   550 */  1228, 1227, 1226, 1222, 1220, 1224, 1216, 1215, 1124, 1103,
 /*   560 */  1092, 1011, 1264, 1262, 1263, 1214, 1212, 1213, 1010, 1009,
 /*   570 */  1008, 1003, 1002, 1001, 1000, 1292, 1301, 1300, 1298, 1297,
 /*   580 */  1296, 1290, 1291, 1201, 1200, 1198, 1197, 1199,  904, 1241,
 /*   590 */  1244, 1243, 1242, 1247, 1246, 1239, 1251, 1256, 1255, 1260,
 /*   600 */  1259, 1258, 1257, 1254, 1236, 1132, 1131, 1129, 1126, 1136,
 /*   610 */  1135, 1134, 1125, 1118, 1130, 1108, 1116, 1115, 1104, 1107,
 /*   620 */   996, 1097, 1093, 1096, 1012, 1240, 1007, 1006, 1005,  903,
 /*   630 */   894, 1062,  893,  892,  907,  980,  981,  989,  992,  987,
 /*   640 */   990,  986,  985,  984,  988,  983,  979,  910,  909,  919,
 /*   650 */   973,  956,  945,  912,  947,  944,  943,  948,  965,  964,
 /*   660 */   971,  970,  969,  968,  967,  963,  966,  962,  961,  949,
 /*   670 */   941,  940,  959,  939,  976,  975,  972,  938,  999,  998,
 /*   680 */   997,  994,  937,  936,  935,  934,  933,  932, 1181, 1343,
 /*   690 */  1339, 1342, 1341, 1338, 1180, 1186, 1174, 1172, 1014, 1025,
 /*   700 */  1024, 1023, 1020, 1021, 1035, 1033, 1032, 1031, 1068, 1067,
 /*   710 */  1066, 1065, 1064, 1063, 1056, 1054, 1049, 1048, 1055, 1053,
 /*   720 */  1050, 1071, 1072, 1070, 1047, 1039, 1037, 1038, 1036, 1123,
 /*   730 */  1120, 1122, 1119, 1058, 1045, 1042, 1029, 1319, 1317, 1320,
 /*   740 */  1318, 1316, 1324, 1326, 1325, 1330, 1328, 1327, 1323, 1336,
 /*   750 */  1335, 1334, 1333, 1332, 1322, 1329, 1315, 1314, 1313, 1312,
 /*   760 */  1076, 1081, 1080, 1075, 1019, 1185, 1173, 1183, 1177, 1310,
 /*   770 */  1308, 1311, 1307, 1306, 1206, 1208, 1211, 1210, 1207, 1078,
 /*   780 */  1077, 1205, 1204, 1309, 1176, 1151,  925,  923,  924, 1233,
 /*   790 */  1232, 1235, 1234, 1231,  927,  926,  922,  921, 1149, 1145,
 /*   800 */  1144, 1261, 1178, 1179, 1143, 1148, 1141, 1140, 1139, 1165,
 /*   810 */  1164, 1150, 1142,  914, 1018, 1015, 1175, 1138, 1061, 1137,
 /*   820 */   955,  954,  953,  952,  951,  950, 1027, 1026,  931,  946,
 /*   830 */   930,  928,  906,  896,  901,  899,  900,  898,  897,  889,
 /*   840 */   886,  888,  885,  890,  887,  883,  881,  880,  879,  878,
 /*   850 */   877,  917,  916,  915,  911,  875,  874,  871,  870,  866,
 /*   860 */   865,  863,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /* MATERIALIZED => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "MATERIALIZED",  "NO",            "NULLS",         "OTHERS",      
  "PLAN",          "QUERY",         "KEY",           "OF",          
  "OFFSET",        "PARTITION",     "PRAGMA",        "PRECEDING",   
  "RAISE",         "RANGE",         "RECURSIVE",     "RELEASE",     
  "REPLACE",       "RESTRICT",      "ROW",           "ROWS",        
  "ROLLBACK",      "SAVEPOINT",     "TEMP",          "TIES",        
  "TRIGGER",       "UNBOUNDED",     "VACUUM",        "VIEW",        
  "VIRTUAL",       "WITH",          "WITHOUT",       "REINDEX",     
  "RENAME",        "CTIME_KW",      "IF",            "ANY",         
  "OR",            "AND",           "NOT",           "IS",          
  "BETWEEN",       "IN",            "ISNULL",        "NOTNULL",     
  "NE",            "EQ",            "GT",            "LE",          
  "LT",            "GE",            "ESCAPE",        "BITAND",      
  "BITOR",         "LSHIFT",        "RSHIFT",        "PLUS",        
  "MINUS",         "STAR",          "SLASH",         "REM",         
  "CONCAT",        "COLLATE",       "BITNOT",        "SEMI",        
  "TRANSACTION",   "ID_TRANS",      "COMMIT",        "TO",          
  "CREATE",        "TABLE",         "LP",            "RP",          
  "AS",            "DOT",           "ID_TAB_NEW",    "ID_DB",       
  "COMMA",         "CTX_ROWID_KW",  "CTX_STRICT_KW",  "EXISTS",      
  "ID_COL_NEW",    "STRING",        "JOIN_KW",       "ID_COL_TYPE", 
  "RIGHT_ASSOC",   "CONSTRAINT",    "DEFAULT",       "NULL",        
  "PRIMARY",       "UNIQUE",        "CHECK",         "REFERENCES",  
  "ID_CONSTR",     "ID_COLLATE",    "ID_TAB",        "INTEGER",     
  "FLOAT",         "BLOB",          "AUTOINCR",      "ON",          
  "INSERT",        "DELETE",        "UPDATE",        "ID_FK_MATCH", 
  "SET",           "DEFERRABLE",    "FOREIGN",       "DROP",        
  "ID_VIEW_NEW",   "ID_VIEW",       "SELECT",        "VALUES",      
  "UNION",         "ALL",           "EXCEPT",        "INTERSECT",   
  "DISTINCT",      "ID_ALIAS",      "FROM",          "USING",       
  "JOIN",          "ID_JOIN_OPTS",  "ID_IDX",        "ORDER",       
  "GROUP",         "HAVING",        "LIMIT",         "WHERE",       
  "RETURNING",     "ID_COL",        "INTO",          "NOTHING",     
  "ID_FN",         "ID_ERR_MSG",    "VARIABLE",      "CASE",        
  "WHEN",          "THEN",          "ELSE",          "INDEX",       
  "ID_IDX_NEW",    "ID_PRAGMA",     "ID_TRIG_NEW",   "ID_TRIG",     
  "ALTER",         "ADD",           "WINDOW",        "OVER",        
  "FILTER",        "error",         "cmd",           "input",       
  "cmdlist",       "ecmd",          "explain",       "cmdx",        
  "transtype",     "trans_opt",     "nm",            "savepoint_opt",
  "temp",          "ifnotexists",   "fullname",      "columnlist",  
  "conslist_opt",  "table_options",  "select",        "table_option",
  "column",        "columnid",      "type",          "carglist",    
  "id",            "id_opt",        "ids",           "typetoken",   
  "typename",      "signed",        "plus_num",      "minus_num",   
  "ccons",         "term",          "expr",          "onconf",      
  "sortorder",     "autoinc",       "idxlist_opt",   "refargs",     
  "defer_subclause",  "gen_always",    "tnm",           "refarg",      
  "refact",        "init_deferred_pred_opt",  "conslist",      "tconscomma",  
  "tcons",         "idxlist",       "defer_subclause_opt",  "resolvetype", 
  "orconf",        "raisetype",     "ifexists",      "select_stmt", 
  "with",          "selectnowith",  "oneselect",     "multiselect_op",
  "values",        "distinct",      "selcollist",    "from",        
  "where_opt",     "groupby_opt",   "having_opt",    "orderby_opt", 
  "limit_opt",     "window_clause",  "nexprlist",     "exprlist",    
  "sclp",          "as",            "joinsrc",       "singlesrc",   
  "seltablist",    "joinop",        "joinconstr_opt",  "dbnm",        
  "indexed_opt",   "idlist",        "sortlist",      "nulls",       
  "delete_stmt",   "returning",     "update_stmt",   "setlist",     
  "idlist_opt",    "insert_stmt",   "insert_cmd",    "upsert",      
  "exprx",         "not_opt",       "likeop",        "case_operand",
  "case_exprlist",  "case_else",     "filter_over",   "uniqueflag",  
  "idxlist_single",  "collate",       "vinto",         "nmnum",       
  "number",        "trigger_time",  "trigger_event",  "foreach_clause",
  "when_clause",   "trigger_cmd_list",  "trigger_cmd",   "database_kw_opt",
  "key_opt",       "kwcolumn_opt",  "create_vtab",   "vtabarglist", 
  "vtabarg",       "vtabargtoken",  "anylist",       "wqlist",      
  "wqas",          "wqcte",         "windowdefn_list",  "windowdefn",  
  "window",        "frame_opt",     "range_or_rows",  "frame_bound_s",
  "frame_exclude_opt",  "frame_bound_e",  "frame_bound",   "frame_exclude",
  "filter_clause",  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= table_option",
 /*  35 */ "table_options ::= table_options COMMA table_option",
 /*  36 */ "table_option ::= WITHOUT nm",
 /*  37 */ "table_option ::= nm",
 /*  38 */ "table_option ::= WITHOUT CTX_ROWID_KW",
 /*  39 */ "table_option ::= CTX_STRICT_KW",
 /*  40 */ "ifnotexists ::=",
 /*  41 */ "ifnotexists ::= IF NOT EXISTS",
 /*  42 */ "temp ::= TEMP",
 /*  43 */ "temp ::=",
 /*  44 */ "columnlist ::= columnlist COMMA column",
 /*  45 */ "columnlist ::= column",
 /*  46 */ "column ::= columnid type carglist",
 /*  47 */ "columnid ::= nm",
 /*  48 */ "columnid ::= ID_COL_NEW",
 /*  49 */ "id ::= ID",
 /*  50 */ "id_opt ::= id",
 /*  51 */ "id_opt ::=",
 /*  52 */ "ids ::= ID|STRING",
 /*  53 */ "nm ::= id",
 /*  54 */ "nm ::= STRING",
 /*  55 */ "nm ::= JOIN_KW",
 /*  56 */ "type ::=",
 /*  57 */ "type ::= typetoken",
 /*  58 */ "typetoken ::= typename",
 /*  59 */ "typetoken ::= typename LP signed RP",
 /*  60 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  61 */ "typename ::= ids",
 /*  62 */ "typename ::= typename ids",
 /*  63 */ "typename ::= ID_COL_TYPE",
 /*  64 */ "signed ::= plus_num",
 /*  65 */ "signed ::= minus_num",
 /*  66 */ "carglist ::= carglist ccons",
 /*  67 */ "carglist ::=",
 /*  68 */ "ccons ::= CONSTRAINT nm",
 /*  69 */ "ccons ::= DEFAULT term",
 /*  70 */ "ccons ::= DEFAULT LP expr RP",
 /*  71 */ "ccons ::= DEFAULT PLUS term",
 /*  72 */ "ccons ::= DEFAULT MINUS term",
 /*  73 */ "ccons ::= DEFAULT id",
 /*  74 */ "ccons ::= DEFAULT CTIME_KW",
 /*  75 */ "ccons ::= NULL onconf",
 /*  76 */ "ccons ::= NOT NULL onconf",
 /*  77 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  78 */ "ccons ::= UNIQUE onconf",
 /*  79 */ "ccons ::= CHECK LP expr RP",
 /*  80 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  81 */ "ccons ::= defer_subclause",
 /*  82 */ "ccons ::= COLLATE ids",
 /*  83 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  84 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  85 */ "ccons ::= COLLATE ID_COLLATE",
 /*  86 */ "ccons ::= REFERENCES ID_TAB",
 /*  87 */ "ccons ::= CHECK LP RP",
 /*  88 */ "term ::= NULL",
 /*  89 */ "term ::= INTEGER",
 /*  90 */ "term ::= FLOAT",
 /*  91 */ "term ::= STRING|BLOB",
 /*  92 */ "tnm ::= term",
 /*  93 */ "tnm ::= nm",
 /*  94 */ "gen_always ::= GENERATED ALWAYS",
 /*  95 */ "gen_always ::=",
 /*  96 */ "autoinc ::=",
 /*  97 */ "autoinc ::= AUTOINCR",
 /*  98 */ "refargs ::=",
 /*  99 */ "refargs ::= refargs refarg",
 /* 100 */ "refarg ::= MATCH nm",
 /* 101 */ "refarg ::= ON INSERT refact",
 /* 102 */ "refarg ::= ON DELETE refact",
 /* 103 */ "refarg ::= ON UPDATE refact",
 /* 104 */ "refarg ::= MATCH ID_FK_MATCH",
 /* 105 */ "refact ::= SET NULL",
 /* 106 */ "refact ::= SET DEFAULT",
 /* 107 */ "refact ::= CASCADE",
 /* 108 */ "refact ::= RESTRICT",
 /* 109 */ "refact ::= NO ACTION",
 /* 110 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 111 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 112 */ "init_deferred_pred_opt ::=",
 /* 113 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 114 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 115 */ "conslist_opt ::=",
 /* 116 */ "conslist_opt ::= COMMA conslist",
 /* 117 */ "conslist ::= conslist tconscomma tcons",
 /* 118 */ "conslist ::= tcons",
 /* 119 */ "tconscomma ::= COMMA",
 /* 120 */ "tconscomma ::=",
 /* 121 */ "tcons ::= CONSTRAINT nm",
 /* 122 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 123 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 124 */ "tcons ::= CHECK LP expr RP onconf",
 /* 125 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 126 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 127 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 128 */ "tcons ::= CHECK LP RP onconf",
 /* 129 */ "defer_subclause_opt ::=",
 /* 130 */ "defer_subclause_opt ::= defer_subclause",
 /* 131 */ "onconf ::=",
 /* 132 */ "onconf ::= ON CONFLICT resolvetype",
 /* 133 */ "orconf ::=",
 /* 134 */ "orconf ::= OR resolvetype",
 /* 135 */ "resolvetype ::= raisetype",
 /* 136 */ "resolvetype ::= IGNORE",
 /* 137 */ "resolvetype ::= REPLACE",
 /* 138 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 139 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 140 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 141 */ "ifexists ::= IF EXISTS",
 /* 142 */ "ifexists ::=",
 /* 143 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 144 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 145 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 146 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 147 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 148 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 149 */ "cmd ::= select_stmt",
 /* 150 */ "select_stmt ::= select",
 /* 151 */ "select ::= with selectnowith",
 /* 152 */ "selectnowith ::= oneselect",
 /* 153 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 154 */ "selectnowith ::= values",
 /* 155 */ "selectnowith ::= selectnowith COMMA values",
 /* 156 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 157 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 158 */ "values ::= VALUES LP nexprlist RP",
 /* 159 */ "values ::= values COMMA LP exprlist RP",
 /* 160 */ "multiselect_op ::= UNION",
 /* 161 */ "multiselect_op ::= UNION ALL",
 /* 162 */ "multiselect_op ::= EXCEPT",
 /* 163 */ "multiselect_op ::= INTERSECT",
 /* 164 */ "distinct ::= DISTINCT",
 /* 165 */ "distinct ::= ALL",
 /* 166 */ "distinct ::=",
 /* 167 */ "sclp ::= selcollist COMMA",
 /* 168 */ "sclp ::=",
 /* 169 */ "selcollist ::= sclp expr as",
 /* 170 */ "selcollist ::= sclp STAR",
 /* 171 */ "selcollist ::= sclp tnm DOT STAR",
 /* 172 */ "selcollist ::= sclp",
 /* 173 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 174 */ "as ::= AS nm",
 /* 175 */ "as ::= ids",
 /* 176 */ "as ::= AS ID_ALIAS",
 /* 177 */ "as ::= ID_ALIAS",
 /* 178 */ "as ::=",
 /* 179 */ "from ::=",
 /* 180 */ "from ::= FROM joinsrc",
 /* 181 */ "joinsrc ::= singlesrc seltablist",
 /* 182 */ "joinsrc ::=",
 /* 183 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 184 */ "seltablist ::=",
 /* 185 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 186 */ "singlesrc ::= LP select RP as",
 /* 187 */ "singlesrc ::= LP joinsrc RP as",
 /* 188 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 189 */ "singlesrc ::=",
 /* 190 */ "singlesrc ::= nm DOT",
 /* 191 */ "singlesrc ::= nm DOT ID_TAB",
 /* 192 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 193 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 194 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 195 */ "joinconstr_opt ::= ON expr",
 /* 196 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 197 */ "joinconstr_opt ::=",
 /* 198 */ "dbnm ::=",
 /* 199 */ "dbnm ::= DOT nm",
 /* 200 */ "fullname ::= nm dbnm",
 /* 201 */ "joinop ::= COMMA",
 /* 202 */ "joinop ::= JOIN",
 /* 203 */ "joinop ::= JOIN_KW JOIN",
 /* 204 */ "joinop ::= JOIN_KW nm JOIN",
 /* 205 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 206 */ "joinop ::= ID_JOIN_OPTS",
 /* 207 */ "indexed_opt ::=",
 /* 208 */ "indexed_opt ::= INDEXED BY nm",
 /* 209 */ "indexed_opt ::= NOT INDEXED",
 /* 210 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 211 */ "orderby_opt ::=",
 /* 212 */ "orderby_opt ::= ORDER BY sortlist",
 /* 213 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 214 */ "sortlist ::= expr sortorder nulls",
 /* 215 */ "sortorder ::= ASC",
 /* 216 */ "sortorder ::= DESC",
 /* 217 */ "sortorder ::=",
 /* 218 */ "nulls ::= NULLS FIRST",
 /* 219 */ "nulls ::= NULLS LAST",
 /* 220 */ "nulls ::=",
 /* 221 */ "groupby_opt ::=",
 /* 222 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 223 */ "groupby_opt ::= GROUP BY",
 /* 224 */ "having_opt ::=",
 /* 225 */ "having_opt ::= HAVING expr",
 /* 226 */ "limit_opt ::=",
 /* 227 */ "limit_opt ::= LIMIT expr",
 /* 228 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 229 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 230 */ "cmd ::= delete_stmt",
 /* 231 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning",
 /* 232 */ "delete_stmt ::= with DELETE FROM",
 /* 233 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 234 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 235 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 236 */ "where_opt ::=",
 /* 237 */ "where_opt ::= WHERE expr",
 /* 238 */ "where_opt ::= WHERE",
 /* 239 */ "returning ::=",
 /* 240 */ "returning ::= RETURNING selcollist",
 /* 241 */ "cmd ::= update_stmt",
 /* 242 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning",
 /* 243 */ "update_stmt ::= with UPDATE orconf",
 /* 244 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 245 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 246 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 247 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 248 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 249 */ "setlist ::= nm EQ expr",
 /* 250 */ "setlist ::= LP idlist RP EQ expr",
 /* 251 */ "setlist ::=",
 /* 252 */ "setlist ::= setlist COMMA",
 /* 253 */ "setlist ::= setlist COMMA ID_COL",
 /* 254 */ "setlist ::= ID_COL",
 /* 255 */ "idlist_opt ::=",
 /* 256 */ "idlist_opt ::= LP idlist RP",
 /* 257 */ "idlist ::= idlist COMMA nm",
 /* 258 */ "idlist ::= nm",
 /* 259 */ "idlist ::=",
 /* 260 */ "idlist ::= idlist COMMA ID_COL",
 /* 261 */ "idlist ::= ID_COL",
 /* 262 */ "cmd ::= insert_stmt",
 /* 263 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning",
 /* 264 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning",
 /* 265 */ "insert_stmt ::= with insert_cmd INTO",
 /* 266 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 267 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 268 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 269 */ "insert_cmd ::= INSERT orconf",
 /* 270 */ "insert_cmd ::= REPLACE",
 /* 271 */ "upsert ::=",
 /* 272 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 273 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 274 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 275 */ "exprx ::= expr not_opt IN ID_DB",
 /* 276 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 277 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 278 */ "exprx ::= tnm DOT ID_TAB|ID_COL",
 /* 279 */ "exprx ::= tnm DOT nm DOT ID_COL",
 /* 280 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 281 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 282 */ "exprx ::= CTIME_KW",
 /* 283 */ "exprx ::= LP nexprlist RP",
 /* 284 */ "exprx ::= tnm",
 /* 285 */ "exprx ::= tnm DOT nm",
 /* 286 */ "exprx ::= tnm DOT nm DOT nm",
 /* 287 */ "exprx ::= VARIABLE",
 /* 288 */ "exprx ::= expr COLLATE ids",
 /* 289 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 290 */ "exprx ::= ID LP distinct exprlist RP",
 /* 291 */ "exprx ::= ID LP STAR RP",
 /* 292 */ "exprx ::= expr AND expr",
 /* 293 */ "exprx ::= expr OR expr",
 /* 294 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 295 */ "exprx ::= expr EQ|NE expr",
 /* 296 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 297 */ "exprx ::= expr PLUS|MINUS expr",
 /* 298 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 299 */ "exprx ::= expr CONCAT expr",
 /* 300 */ "exprx ::= expr not_opt likeop expr",
 /* 301 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 302 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 303 */ "exprx ::= expr NOT NULL",
 /* 304 */ "exprx ::= expr IS not_opt expr",
 /* 305 */ "exprx ::= NOT expr",
 /* 306 */ "exprx ::= BITNOT expr",
 /* 307 */ "exprx ::= MINUS expr",
 /* 308 */ "exprx ::= PLUS expr",
 /* 309 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 310 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 311 */ "exprx ::= LP select RP",
 /* 312 */ "exprx ::= expr not_opt IN LP select RP",
 /* 313 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 314 */ "exprx ::= EXISTS LP select RP",
 /* 315 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 316 */ "exprx ::= RAISE LP IGNORE RP",
 /* 317 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 318 */ "exprx ::= ID LP distinct exprlist RP filter_over",
 /* 319 */ "exprx ::= ID LP STAR RP filter_over",
 /* 320 */ "expr ::=",
 /* 321 */ "expr ::= exprx",
 /* 322 */ "not_opt ::=",
 /* 323 */ "not_opt ::= NOT",
 /* 324 */ "likeop ::= LIKE_KW|MATCH",
 /* 325 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 326 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 327 */ "case_else ::= ELSE expr",
 /* 328 */ "case_else ::=",
 /* 329 */ "case_operand ::= exprx",
 /* 330 */ "case_operand ::=",
 /* 331 */ "exprlist ::= nexprlist",
 /* 332 */ "exprlist ::=",
 /* 333 */ "nexprlist ::= nexprlist COMMA expr",
 /* 334 */ "nexprlist ::= exprx",
 /* 335 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 336 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 337 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 338 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 339 */ "uniqueflag ::= UNIQUE",
 /* 340 */ "uniqueflag ::=",
 /* 341 */ "idxlist_opt ::=",
 /* 342 */ "idxlist_opt ::= LP idxlist RP",
 /* 343 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 344 */ "idxlist ::= idxlist_single",
 /* 345 */ "idxlist_single ::= nm collate sortorder",
 /* 346 */ "idxlist_single ::= ID_COL",
 /* 347 */ "collate ::=",
 /* 348 */ "collate ::= COLLATE ids",
 /* 349 */ "collate ::= COLLATE ID_COLLATE",
 /* 350 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 351 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 352 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 353 */ "cmd ::= VACUUM vinto",
 /* 354 */ "cmd ::= VACUUM nm vinto",
 /* 355 */ "vinto ::= INTO expr",
 /* 356 */ "vinto ::=",
 /* 357 */ "cmd ::= PRAGMA nm dbnm",
 /* 358 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 359 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 360 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 361 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 362 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 363 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 364 */ "nmnum ::= plus_num",
 /* 365 */ "nmnum ::= nm",
 /* 366 */ "nmnum ::= ON",
 /* 367 */ "nmnum ::= DELETE",
 /* 368 */ "nmnum ::= DEFAULT",
 /* 369 */ "plus_num ::= PLUS number",
 /* 370 */ "plus_num ::= number",
 /* 371 */ "minus_num ::= MINUS number",
 /* 372 */ "number ::= INTEGER",
 /* 373 */ "number ::= FLOAT",
 /* 374 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 375 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 376 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 377 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 378 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 379 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 380 */ "trigger_time ::= BEFORE",
 /* 381 */ "trigger_time ::= AFTER",
 /* 382 */ "trigger_time ::= INSTEAD OF",
 /* 383 */ "trigger_time ::=",
 /* 384 */ "trigger_event ::= DELETE",
 /* 385 */ "trigger_event ::= INSERT",
 /* 386 */ "trigger_event ::= UPDATE",
 /* 387 */ "trigger_event ::= UPDATE OF idlist",
 /* 388 */ "foreach_clause ::=",
 /* 389 */ "foreach_clause ::= FOR EACH ROW",
 /* 390 */ "when_clause ::=",
 /* 391 */ "when_clause ::= WHEN expr",
 /* 392 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 393 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 394 */ "trigger_cmd_list ::= SEMI",
 /* 395 */ "trigger_cmd ::= update_stmt",
 /* 396 */ "trigger_cmd ::= insert_stmt",
 /* 397 */ "trigger_cmd ::= delete_stmt",
 /* 398 */ "trigger_cmd ::= select_stmt",
 /* 399 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 400 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 401 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 402 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 403 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 404 */ "cmd ::= DETACH database_kw_opt expr",
 /* 405 */ "key_opt ::=",
 /* 406 */ "key_opt ::= KEY expr",
 /* 407 */ "database_kw_opt ::= DATABASE",
 /* 408 */ "database_kw_opt ::=",
 /* 409 */ "cmd ::= REINDEX",
 /* 410 */ "cmd ::= REINDEX nm dbnm",
 /* 411 */ "cmd ::= REINDEX ID_COLLATE",
 /* 412 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 413 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 414 */ "cmd ::= ANALYZE",
 /* 415 */ "cmd ::= ANALYZE nm dbnm",
 /* 416 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 417 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 418 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 419 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 420 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
 /* 421 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 422 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 423 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 424 */ "kwcolumn_opt ::=",
 /* 425 */ "kwcolumn_opt ::= COLUMNKW",
 /* 426 */ "cmd ::= create_vtab",
 /* 427 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 428 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 429 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 430 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 431 */ "vtabarglist ::= vtabarg",
 /* 432 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 433 */ "vtabarg ::=",
 /* 434 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 435 */ "vtabargtoken ::= ANY",
 /* 436 */ "vtabargtoken ::= LP anylist RP",
 /* 437 */ "anylist ::=",
 /* 438 */ "anylist ::= anylist LP anylist RP",
 /* 439 */ "anylist ::= anylist ANY",
 /* 440 */ "with ::=",
 /* 441 */ "with ::= WITH wqlist",
 /* 442 */ "with ::= WITH RECURSIVE wqlist",
 /* 443 */ "wqas ::= AS",
 /* 444 */ "wqas ::= AS MATERIALIZED",
 /* 445 */ "wqas ::= AS NOT MATERIALIZED",
 /* 446 */ "wqlist ::= wqcte",
 /* 447 */ "wqlist ::= wqlist COMMA wqcte",
 /* 448 */ "wqlist ::= ID_TAB_NEW",
 /* 449 */ "wqcte ::= nm idxlist_opt wqas LP select RP",
 /* 450 */ "windowdefn_list ::= windowdefn",
 /* 451 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 452 */ "windowdefn ::= nm AS LP window RP",
 /* 453 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 454 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 455 */ "window ::= ORDER BY sortlist frame_opt",
 /* 456 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 457 */ "window ::= frame_opt",
 /* 458 */ "window ::= nm frame_opt",
 /* 459 */ "frame_opt ::=",
 /* 460 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 461 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 462 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 463 */ "frame_bound_s ::= frame_bound",
 /* 464 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 465 */ "frame_bound_e ::= frame_bound",
 /* 466 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 467 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 468 */ "frame_bound ::= CURRENT ROW",
 /* 469 */ "frame_exclude_opt ::=",
 /* 470 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 471 */ "frame_exclude ::= NO OTHERS",
 /* 472 */ "frame_exclude ::= CURRENT ROW",
 /* 473 */ "frame_exclude ::= GROUP",
 /* 474 */ "frame_exclude ::= TIES",
 /* 475 */ "window_clause ::= WINDOW windowdefn_list",
 /* 476 */ "filter_over ::= filter_clause over_clause",
 /* 477 */ "filter_over ::= over_clause",
 /* 478 */ "filter_over ::= filter_clause",
 /* 479 */ "over_clause ::= OVER LP window RP",
 /* 480 */ "over_clause ::= OVER nm",
 /* 481 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 194: /* cmd */
    case 197: /* ecmd */
    case 199: /* cmdx */
    case 247: /* select_stmt */
    case 276: /* delete_stmt */
    case 278: /* update_stmt */
    case 281: /* insert_stmt */
    case 302: /* trigger_cmd */
    case 306: /* create_vtab */
{
parser_safe_delete((yypminor->yy475));
}
      break;
    case 198: /* explain */
{
parser_safe_delete((yypminor->yy407));
}
      break;
    case 200: /* transtype */
    case 201: /* trans_opt */
{
parser_safe_delete((yypminor->yy176));
}
      break;
    case 202: /* nm */
    case 213: /* columnid */
    case 216: /* id */
    case 217: /* id_opt */
    case 218: /* ids */
    case 220: /* typename */
    case 271: /* dbnm */
    case 293: /* collate */
    case 308: /* vtabarg */
    case 309: /* vtabargtoken */
    case 310: /* anylist */
{
parser_safe_delete((yypminor->yy467));
}
      break;
    case 203: /* savepoint_opt */
    case 205: /* ifnotexists */
    case 229: /* autoinc */
    case 233: /* gen_always */
    case 239: /* tconscomma */
    case 246: /* ifexists */
    case 285: /* not_opt */
    case 291: /* uniqueflag */
    case 303: /* database_kw_opt */
    case 305: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy151));
}
      break;
    case 204: /* temp */
    case 253: /* distinct */
{
parser_safe_delete((yypminor->yy650));
}
      break;
    case 206: /* fullname */
{
parser_safe_delete((yypminor->yy44));
}
      break;
    case 207: /* columnlist */
{
parser_safe_delete((yypminor->yy382));
}
      break;
    case 208: /* conslist_opt */
    case 238: /* conslist */
{
parser_safe_delete((yypminor->yy589));
}
      break;
    case 209: /* table_options */
{
parser_safe_delete((yypminor->yy329));
}
      break;
    case 210: /* select */
    case 249: /* selectnowith */
{
parser_safe_delete((yypminor->yy373));
}
      break;
    case 211: /* table_option */
{
parser_safe_delete((yypminor->yy559));
}
      break;
    case 212: /* column */
{
parser_safe_delete((yypminor->yy211));
}
      break;
    case 214: /* type */
    case 219: /* typetoken */
{
parser_safe_delete((yypminor->yy321));
}
      break;
    case 215: /* carglist */
{
parser_safe_delete((yypminor->yy651));
}
      break;
    case 221: /* signed */
    case 222: /* plus_num */
    case 223: /* minus_num */
    case 225: /* term */
    case 295: /* nmnum */
    case 296: /* number */
{
parser_safe_delete((yypminor->yy277));
}
      break;
    case 224: /* ccons */
{
parser_safe_delete((yypminor->yy560));
}
      break;
    case 226: /* expr */
    case 256: /* where_opt */
    case 258: /* having_opt */
    case 284: /* exprx */
    case 287: /* case_operand */
    case 289: /* case_else */
    case 294: /* vinto */
    case 300: /* when_clause */
    case 304: /* key_opt */
{
parser_safe_delete((yypminor->yy228));
}
      break;
    case 227: /* onconf */
    case 243: /* resolvetype */
    case 244: /* orconf */
{
parser_safe_delete((yypminor->yy282));
}
      break;
    case 228: /* sortorder */
{
parser_safe_delete((yypminor->yy561));
}
      break;
    case 230: /* idxlist_opt */
    case 241: /* idxlist */
{
parser_safe_delete((yypminor->yy247));
}
      break;
    case 231: /* refargs */
{
parser_safe_delete((yypminor->yy229));
}
      break;
    case 232: /* defer_subclause */
    case 242: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy305));
}
      break;
    case 234: /* tnm */
{
parser_safe_delete((yypminor->yy70));
}
      break;
    case 235: /* refarg */
{
parser_safe_delete((yypminor->yy63));
}
      break;
    case 236: /* refact */
{
parser_safe_delete((yypminor->yy412));
}
      break;
    case 237: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy652));
}
      break;
    case 240: /* tcons */
{
parser_safe_delete((yypminor->yy362));
}
      break;
    case 248: /* with */
{
parser_safe_delete((yypminor->yy33));
}
      break;
    case 250: /* oneselect */
{
parser_safe_delete((yypminor->yy446));
}
      break;
    case 251: /* multiselect_op */
{
parser_safe_delete((yypminor->yy430));
}
      break;
    case 252: /* values */
{
parser_safe_delete((yypminor->yy422));
}
      break;
    case 254: /* selcollist */
    case 264: /* sclp */
    case 277: /* returning */
{
parser_safe_delete((yypminor->yy562));
}
      break;
    case 255: /* from */
    case 266: /* joinsrc */
{
parser_safe_delete((yypminor->yy507));
}
      break;
    case 257: /* groupby_opt */
    case 262: /* nexprlist */
    case 263: /* exprlist */
    case 288: /* case_exprlist */
{
parser_safe_delete((yypminor->yy203));
}
      break;
    case 259: /* orderby_opt */
    case 274: /* sortlist */
{
parser_safe_delete((yypminor->yy459));
}
      break;
    case 260: /* limit_opt */
{
parser_safe_delete((yypminor->yy396));
}
      break;
    case 261: /* window_clause */
    case 314: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy67));
}
      break;
    case 265: /* as */
{
parser_safe_delete((yypminor->yy496));
}
      break;
    case 267: /* singlesrc */
{
parser_safe_delete((yypminor->yy125));
}
      break;
    case 268: /* seltablist */
{
parser_safe_delete((yypminor->yy39));
}
      break;
    case 269: /* joinop */
{
parser_safe_delete((yypminor->yy429));
}
      break;
    case 270: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy243));
}
      break;
    case 272: /* indexed_opt */
{
parser_safe_delete((yypminor->yy636));
}
      break;
    case 273: /* idlist */
    case 280: /* idlist_opt */
    case 307: /* vtabarglist */
{
parser_safe_delete((yypminor->yy259));
}
      break;
    case 275: /* nulls */
{
parser_safe_delete((yypminor->yy619));
}
      break;
    case 279: /* setlist */
{
parser_safe_delete((yypminor->yy297));
}
      break;
    case 282: /* insert_cmd */
{
parser_safe_delete((yypminor->yy8));
}
      break;
    case 283: /* upsert */
{
parser_safe_delete((yypminor->yy336));
}
      break;
    case 286: /* likeop */
{
parser_safe_delete((yypminor->yy232));
}
      break;
    case 290: /* filter_over */
{
parser_safe_delete((yypminor->yy439));
}
      break;
    case 292: /* idxlist_single */
{
parser_safe_delete((yypminor->yy556));
}
      break;
    case 297: /* trigger_time */
{
parser_safe_delete((yypminor->yy136));
}
      break;
    case 298: /* trigger_event */
{
parser_safe_delete((yypminor->yy187));
}
      break;
    case 299: /* foreach_clause */
{
parser_safe_delete((yypminor->yy547));
}
      break;
    case 301: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy262));
}
      break;
    case 311: /* wqlist */
{
parser_safe_delete((yypminor->yy312));
}
      break;
    case 312: /* wqas */
{
parser_safe_delete((yypminor->yy3));
}
      break;
    case 313: /* wqcte */
{
parser_safe_delete((yypminor->yy182));
}
      break;
    case 315: /* windowdefn */
{
parser_safe_delete((yypminor->yy154));
}
      break;
    case 316: /* window */
{
parser_safe_delete((yypminor->yy538));
}
      break;
    case 317: /* frame_opt */
{
parser_safe_delete((yypminor->yy65));
}
      break;
    case 318: /* range_or_rows */
{
parser_safe_delete((yypminor->yy6));
}
      break;
    case 319: /* frame_bound_s */
    case 321: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy573));
}
      break;
    case 322: /* frame_bound */
{
parser_safe_delete((yypminor->yy573));parser_safe_delete((yypminor->yy573));parser_safe_delete((yypminor->yy573));
}
      break;
    case 324: /* filter_clause */
{
parser_safe_delete((yypminor->yy298));
}
      break;
    case 325: /* over_clause */
{
parser_safe_delete((yypminor->yy548));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   UNUSED(yypMinor);
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 195, 1 },
  { 196, 2 },
  { 196, 1 },
  { 197, 1 },
  { 197, 3 },
  { 198, 0 },
  { 198, 1 },
  { 198, 3 },
  { 199, 1 },
  { 194, 3 },
  { 201, 0 },
  { 201, 1 },
  { 201, 2 },
  { 201, 2 },
  { 200, 0 },
  { 200, 1 },
  { 200, 1 },
  { 200, 1 },
  { 194, 2 },
  { 194, 2 },
  { 194, 2 },
  { 203, 1 },
  { 203, 0 },
  { 194, 2 },
  { 194, 3 },
  { 194, 5 },
  { 194, 2 },
  { 194, 3 },
  { 194, 5 },
  { 194, 10 },
  { 194, 7 },
  { 194, 7 },
  { 194, 5 },
  { 209, 0 },
  { 209, 1 },
  { 209, 3 },
  { 211, 2 },
  { 211, 1 },
  { 211, 2 },
  { 211, 1 },
  { 205, 0 },
  { 205, 3 },
  { 204, 1 },
  { 204, 0 },
  { 207, 3 },
  { 207, 1 },
  { 212, 3 },
  { 213, 1 },
  { 213, 1 },
  { 216, 1 },
  { 217, 1 },
  { 217, 0 },
  { 218, 1 },
  { 202, 1 },
  { 202, 1 },
  { 202, 1 },
  { 214, 0 },
  { 214, 1 },
  { 219, 1 },
  { 219, 4 },
  { 219, 6 },
  { 220, 1 },
  { 220, 2 },
  { 220, 1 },
  { 221, 1 },
  { 221, 1 },
  { 215, 2 },
  { 215, 0 },
  { 224, 2 },
  { 224, 2 },
  { 224, 4 },
  { 224, 3 },
  { 224, 3 },
  { 224, 2 },
  { 224, 2 },
  { 224, 2 },
  { 224, 3 },
  { 224, 5 },
  { 224, 2 },
  { 224, 4 },
  { 224, 4 },
  { 224, 1 },
  { 224, 2 },
  { 224, 6 },
  { 224, 2 },
  { 224, 2 },
  { 224, 2 },
  { 224, 3 },
  { 225, 1 },
  { 225, 1 },
  { 225, 1 },
  { 225, 1 },
  { 234, 1 },
  { 234, 1 },
  { 233, 2 },
  { 233, 0 },
  { 229, 0 },
  { 229, 1 },
  { 231, 0 },
  { 231, 2 },
  { 235, 2 },
  { 235, 3 },
  { 235, 3 },
  { 235, 3 },
  { 235, 2 },
  { 236, 2 },
  { 236, 2 },
  { 236, 1 },
  { 236, 1 },
  { 236, 2 },
  { 232, 3 },
  { 232, 2 },
  { 237, 0 },
  { 237, 2 },
  { 237, 2 },
  { 208, 0 },
  { 208, 2 },
  { 238, 3 },
  { 238, 1 },
  { 239, 1 },
  { 239, 0 },
  { 240, 2 },
  { 240, 7 },
  { 240, 5 },
  { 240, 5 },
  { 240, 10 },
  { 240, 2 },
  { 240, 7 },
  { 240, 4 },
  { 242, 0 },
  { 242, 1 },
  { 227, 0 },
  { 227, 3 },
  { 244, 0 },
  { 244, 2 },
  { 243, 1 },
  { 243, 1 },
  { 243, 1 },
  { 194, 4 },
  { 194, 6 },
  { 194, 4 },
  { 246, 2 },
  { 246, 0 },
  { 194, 8 },
  { 194, 7 },
  { 194, 5 },
  { 194, 4 },
  { 194, 6 },
  { 194, 4 },
  { 194, 1 },
  { 247, 1 },
  { 210, 2 },
  { 249, 1 },
  { 249, 3 },
  { 249, 1 },
  { 249, 3 },
  { 250, 9 },
  { 250, 10 },
  { 252, 4 },
  { 252, 5 },
  { 251, 1 },
  { 251, 2 },
  { 251, 1 },
  { 251, 1 },
  { 253, 1 },
  { 253, 1 },
  { 253, 0 },
  { 264, 2 },
  { 264, 0 },
  { 254, 3 },
  { 254, 2 },
  { 254, 4 },
  { 254, 1 },
  { 254, 4 },
  { 265, 2 },
  { 265, 1 },
  { 265, 2 },
  { 265, 1 },
  { 265, 0 },
  { 255, 0 },
  { 255, 2 },
  { 266, 2 },
  { 266, 0 },
  { 268, 4 },
  { 268, 0 },
  { 267, 4 },
  { 267, 4 },
  { 267, 4 },
  { 267, 6 },
  { 267, 0 },
  { 267, 2 },
  { 267, 3 },
  { 267, 1 },
  { 267, 3 },
  { 267, 1 },
  { 270, 2 },
  { 270, 4 },
  { 270, 0 },
  { 271, 0 },
  { 271, 2 },
  { 206, 2 },
  { 269, 1 },
  { 269, 1 },
  { 269, 2 },
  { 269, 3 },
  { 269, 4 },
  { 269, 1 },
  { 272, 0 },
  { 272, 3 },
  { 272, 2 },
  { 272, 3 },
  { 259, 0 },
  { 259, 3 },
  { 274, 5 },
  { 274, 3 },
  { 228, 1 },
  { 228, 1 },
  { 228, 0 },
  { 275, 2 },
  { 275, 2 },
  { 275, 0 },
  { 257, 0 },
  { 257, 3 },
  { 257, 2 },
  { 258, 0 },
  { 258, 2 },
  { 260, 0 },
  { 260, 2 },
  { 260, 4 },
  { 260, 4 },
  { 194, 1 },
  { 276, 7 },
  { 276, 3 },
  { 276, 5 },
  { 276, 6 },
  { 276, 4 },
  { 256, 0 },
  { 256, 2 },
  { 256, 1 },
  { 277, 0 },
  { 277, 2 },
  { 194, 1 },
  { 278, 10 },
  { 278, 3 },
  { 278, 5 },
  { 278, 6 },
  { 278, 4 },
  { 279, 5 },
  { 279, 7 },
  { 279, 3 },
  { 279, 5 },
  { 279, 0 },
  { 279, 2 },
  { 279, 3 },
  { 279, 1 },
  { 280, 0 },
  { 280, 3 },
  { 273, 3 },
  { 273, 1 },
  { 273, 0 },
  { 273, 3 },
  { 273, 1 },
  { 194, 1 },
  { 281, 8 },
  { 281, 8 },
  { 281, 3 },
  { 281, 5 },
  { 281, 4 },
  { 281, 6 },
  { 282, 2 },
  { 282, 1 },
  { 283, 0 },
  { 283, 11 },
  { 283, 8 },
  { 283, 4 },
  { 284, 4 },
  { 284, 6 },
  { 284, 1 },
  { 284, 3 },
  { 284, 5 },
  { 284, 3 },
  { 284, 6 },
  { 284, 1 },
  { 284, 3 },
  { 284, 1 },
  { 284, 3 },
  { 284, 5 },
  { 284, 1 },
  { 284, 3 },
  { 284, 6 },
  { 284, 5 },
  { 284, 4 },
  { 284, 3 },
  { 284, 3 },
  { 284, 3 },
  { 284, 3 },
  { 284, 3 },
  { 284, 3 },
  { 284, 3 },
  { 284, 3 },
  { 284, 4 },
  { 284, 6 },
  { 284, 2 },
  { 284, 3 },
  { 284, 4 },
  { 284, 2 },
  { 284, 2 },
  { 284, 2 },
  { 284, 2 },
  { 284, 6 },
  { 284, 6 },
  { 284, 3 },
  { 284, 6 },
  { 284, 5 },
  { 284, 4 },
  { 284, 5 },
  { 284, 4 },
  { 284, 6 },
  { 284, 6 },
  { 284, 5 },
  { 226, 0 },
  { 226, 1 },
  { 285, 0 },
  { 285, 1 },
  { 286, 1 },
  { 288, 5 },
  { 288, 4 },
  { 289, 2 },
  { 289, 0 },
  { 287, 1 },
  { 287, 0 },
  { 263, 1 },
  { 263, 0 },
  { 262, 3 },
  { 262, 1 },
  { 194, 12 },
  { 194, 8 },
  { 194, 7 },
  { 194, 5 },
  { 291, 1 },
  { 291, 0 },
  { 230, 0 },
  { 230, 3 },
  { 241, 3 },
  { 241, 1 },
  { 292, 3 },
  { 292, 1 },
  { 293, 0 },
  { 293, 2 },
  { 293, 2 },
  { 194, 4 },
  { 194, 6 },
  { 194, 4 },
  { 194, 2 },
  { 194, 3 },
  { 294, 2 },
  { 294, 0 },
  { 194, 3 },
  { 194, 5 },
  { 194, 6 },
  { 194, 5 },
  { 194, 6 },
  { 194, 4 },
  { 194, 2 },
  { 295, 1 },
  { 295, 1 },
  { 295, 1 },
  { 295, 1 },
  { 295, 1 },
  { 222, 2 },
  { 222, 1 },
  { 223, 2 },
  { 296, 1 },
  { 296, 1 },
  { 194, 15 },
  { 194, 12 },
  { 194, 14 },
  { 194, 10 },
  { 194, 7 },
  { 194, 5 },
  { 297, 1 },
  { 297, 1 },
  { 297, 2 },
  { 297, 0 },
  { 298, 1 },
  { 298, 1 },
  { 298, 1 },
  { 298, 3 },
  { 299, 0 },
  { 299, 3 },
  { 300, 0 },
  { 300, 2 },
  { 301, 3 },
  { 301, 2 },
  { 301, 1 },
  { 302, 1 },
  { 302, 1 },
  { 302, 1 },
  { 302, 1 },
  { 245, 1 },
  { 194, 4 },
  { 194, 6 },
  { 194, 4 },
  { 194, 6 },
  { 194, 3 },
  { 304, 0 },
  { 304, 2 },
  { 303, 1 },
  { 303, 0 },
  { 194, 1 },
  { 194, 3 },
  { 194, 2 },
  { 194, 4 },
  { 194, 2 },
  { 194, 1 },
  { 194, 3 },
  { 194, 4 },
  { 194, 2 },
  { 194, 6 },
  { 194, 6 },
  { 194, 6 },
  { 194, 6 },
  { 194, 5 },
  { 194, 3 },
  { 305, 0 },
  { 305, 1 },
  { 194, 1 },
  { 306, 8 },
  { 306, 11 },
  { 306, 7 },
  { 306, 5 },
  { 307, 1 },
  { 307, 3 },
  { 308, 0 },
  { 308, 2 },
  { 309, 1 },
  { 309, 3 },
  { 310, 0 },
  { 310, 4 },
  { 310, 2 },
  { 248, 0 },
  { 248, 2 },
  { 248, 3 },
  { 312, 1 },
  { 312, 2 },
  { 312, 3 },
  { 311, 1 },
  { 311, 3 },
  { 311, 1 },
  { 313, 6 },
  { 314, 1 },
  { 314, 3 },
  { 315, 5 },
  { 316, 5 },
  { 316, 6 },
  { 316, 4 },
  { 316, 5 },
  { 316, 1 },
  { 316, 2 },
  { 317, 0 },
  { 317, 3 },
  { 317, 6 },
  { 318, 1 },
  { 319, 1 },
  { 319, 2 },
  { 321, 1 },
  { 321, 2 },
  { 322, 2 },
  { 322, 2 },
  { 320, 0 },
  { 320, 2 },
  { 323, 2 },
  { 323, 2 },
  { 323, 1 },
  { 323, 1 },
  { 261, 2 },
  { 290, 2 },
  { 290, 1 },
  { 290, 1 },
  { 325, 4 },
  { 325, 2 },
  { 324, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy475); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy475);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy475 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy475 = yymsp[-1].minor.yy475;
                                                yygotominor.yy475->explain = yymsp[-2].minor.yy407->explain;
                                                yygotominor.yy475->queryPlan = yymsp[-2].minor.yy407->queryPlan;
                                                delete yymsp[-2].minor.yy407;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy407 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy407 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy407 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 395: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==395);
      case 396: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==396);
      case 397: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==397);
      case 398: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==398);
      case 426: /* cmd ::= create_vtab */ yytestcase(yyruleno==426);
{yygotominor.yy475 = yymsp[0].minor.yy475;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy475 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy176->type,
                                                        yymsp[0].minor.yy176->transactionKw,
                                                        yymsp[0].minor.yy176->name
                                                    );
                                                delete yymsp[0].minor.yy176;
                                                delete yymsp[-1].minor.yy176;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy176 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy176 = new ParserStubTransDetails();
                                                yygotominor.yy176->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy176 = new ParserStubTransDetails();
                                                yygotominor.yy176->transactionKw = true;
                                                yygotominor.yy176->name = *(yymsp[0].minor.yy467);
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy176 = new ParserStubTransDetails();
                                                yygotominor.yy176->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy176 = new ParserStubTransDetails();
                                                yygotominor.yy176->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy176 = new ParserStubTransDetails();
                                                yygotominor.yy176->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy475 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy176->transactionKw,
                                                        yymsp[0].minor.yy176->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy176;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy475 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy176->transactionKw,
                                                        yymsp[0].minor.yy176->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy176;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy475 = new SqliteRollback(
                                                        yymsp[0].minor.yy176->transactionKw,
                                                        yymsp[0].minor.yy176->name
                                                    );
                                                delete yymsp[0].minor.yy176;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 41: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==41);
      case 94: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==94);
      case 97: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==97);
      case 119: /* tconscomma ::= COMMA */ yytestcase(yyruleno==119);
      case 141: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==141);
      case 323: /* not_opt ::= NOT */ yytestcase(yyruleno==323);
      case 339: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==339);
      case 407: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==407);
      case 424: /* kwcolumn_opt ::= */ yytestcase(yyruleno==424);
{yygotominor.yy151 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 40: /* ifnotexists ::= */ yytestcase(yyruleno==40);
      case 95: /* gen_always ::= */ yytestcase(yyruleno==95);
      case 96: /* autoinc ::= */ yytestcase(yyruleno==96);
      case 120: /* tconscomma ::= */ yytestcase(yyruleno==120);
      case 142: /* ifexists ::= */ yytestcase(yyruleno==142);
      case 322: /* not_opt ::= */ yytestcase(yyruleno==322);
      case 340: /* uniqueflag ::= */ yytestcase(yyruleno==340);
      case 408: /* database_kw_opt ::= */ yytestcase(yyruleno==408);
      case 425: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==425);
{yygotominor.yy151 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy475 = new SqliteSavepoint(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy475 = new SqliteRelease(*(yymsp[-1].minor.yy151), *(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy475 = new SqliteRollback(
                                                        yymsp[-3].minor.yy176->transactionKw,
                                                        *(yymsp[-1].minor.yy151),
                                                        *(yymsp[0].minor.yy467)
                                                    );
                                                delete yymsp[-1].minor.yy151;
                                                delete yymsp[-3].minor.yy176;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,203,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy475 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy151),
                                                        *(yymsp[-8].minor.yy650),
                                                        yymsp[-5].minor.yy44->name1,
                                                        yymsp[-5].minor.yy44->name2,
                                                        *(yymsp[-3].minor.yy382),
                                                        *(yymsp[-2].minor.yy589),
                                                        *(yymsp[0].minor.yy329)
                                                    );
                                                delete yymsp[-6].minor.yy151;
                                                delete yymsp[-8].minor.yy650;
                                                delete yymsp[-3].minor.yy382;
                                                delete yymsp[-2].minor.yy589;
                                                delete yymsp[-5].minor.yy44;
                                                delete yymsp[0].minor.yy329;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy475 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy151),
                                                        *(yymsp[-5].minor.yy650),
                                                        yymsp[-2].minor.yy44->name1,
                                                        yymsp[-2].minor.yy44->name2,
                                                        yymsp[0].minor.yy373
                                                    );
                                                delete yymsp[-3].minor.yy151;
                                                delete yymsp[-5].minor.yy650;
                                                delete yymsp[-2].minor.yy44;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 144: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==144);
      case 378: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==378);
{  yy_destructor(yypParser,204,&yymsp[-5].minor);
  yy_destructor(yypParser,202,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 145: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==145);
      case 379: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==379);
{  yy_destructor(yypParser,204,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
{yygotominor.yy329 = new ParserCreateTableOptionList();}
        break;
      case 34: /* table_options ::= table_option */
{
                                                yygotominor.yy329 = new ParserCreateTableOptionList();
                                                yygotominor.yy329->append(yymsp[0].minor.yy559);
                                            }
        break;
      case 35: /* table_options ::= table_options COMMA table_option */
{
                                                yymsp[-2].minor.yy329->append(yymsp[0].minor.yy559);
                                                yygotominor.yy329 = yymsp[-2].minor.yy329;
                                                DONT_INHERIT_TOKENS("table_options");
                                            }
        break;
      case 36: /* table_option ::= WITHOUT nm */
{
                                                if (yymsp[0].minor.yy467->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy467)));

                                                yygotominor.yy559 = new ParserStubCreateTableOption(ParserStubCreateTableOption::WITHOUT_ROWID);
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 37: /* table_option ::= nm */
      case 38: /* table_option ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==38);
      case 39: /* table_option ::= CTX_STRICT_KW */ yytestcase(yyruleno==39);
{
                                                if (yymsp[0].minor.yy467->toLower() != "strict")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy467)));

                                                yygotominor.yy559 = new ParserStubCreateTableOption(ParserStubCreateTableOption::STRICT);
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 42: /* temp ::= TEMP */
{yygotominor.yy650 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 43: /* temp ::= */
      case 166: /* distinct ::= */ yytestcase(yyruleno==166);
{yygotominor.yy650 = new int(0);}
        break;
      case 44: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy382->append(yymsp[0].minor.yy211);
                                                yygotominor.yy382 = yymsp[-2].minor.yy382;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 45: /* columnlist ::= column */
{
                                                yygotominor.yy382 = new ParserCreateTableColumnList();
                                                yygotominor.yy382->append(yymsp[0].minor.yy211);
                                            }
        break;
      case 46: /* column ::= columnid type carglist */
{
                                                yygotominor.yy211 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy467), yymsp[-1].minor.yy321, *(yymsp[0].minor.yy651));
                                                delete yymsp[-2].minor.yy467;
                                                delete yymsp[0].minor.yy651;
                                                objectForTokens = yygotominor.yy211;
                                            }
        break;
      case 47: /* columnid ::= nm */
      case 48: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==48);
      case 53: /* nm ::= id */ yytestcase(yyruleno==53);
      case 61: /* typename ::= ids */ yytestcase(yyruleno==61);
      case 199: /* dbnm ::= DOT nm */ yytestcase(yyruleno==199);
      case 348: /* collate ::= COLLATE ids */ yytestcase(yyruleno==348);
      case 349: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==349);
{yygotominor.yy467 = yymsp[0].minor.yy467;}
        break;
      case 49: /* id ::= ID */
{
                                                yygotominor.yy467 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 50: /* id_opt ::= id */
{
                                                yygotominor.yy467 = yymsp[0].minor.yy467;
                                            }
        break;
      case 51: /* id_opt ::= */
{
                                                yygotominor.yy467 = new QString();
                                            }
        break;
      case 52: /* ids ::= ID|STRING */
      case 55: /* nm ::= JOIN_KW */ yytestcase(yyruleno==55);
{yygotominor.yy467 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 54: /* nm ::= STRING */
{yygotominor.yy467 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 56: /* type ::= */
{yygotominor.yy321 = nullptr;}
        break;
      case 57: /* type ::= typetoken */
{yygotominor.yy321 = yymsp[0].minor.yy321;}
        break;
      case 58: /* typetoken ::= typename */
{
                                                yygotominor.yy321 = new SqliteColumnType(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 59: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy321 = new SqliteColumnType(*(yymsp[-3].minor.yy467), *(yymsp[-1].minor.yy277));
                                                delete yymsp[-3].minor.yy467;
                                                delete yymsp[-1].minor.yy277;
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 60: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy321 = new SqliteColumnType(*(yymsp[-5].minor.yy467), *(yymsp[-3].minor.yy277), *(yymsp[-1].minor.yy277));
                                                delete yymsp[-5].minor.yy467;
                                                delete yymsp[-3].minor.yy277;
                                                delete yymsp[-1].minor.yy277;
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 62: /* typename ::= typename ids */
      case 63: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==63);
{
                                                yymsp[-1].minor.yy467->append(" " + *(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                yygotominor.yy467 = yymsp[-1].minor.yy467;
                                            }
        break;
      case 64: /* signed ::= plus_num */
      case 65: /* signed ::= minus_num */ yytestcase(yyruleno==65);
      case 364: /* nmnum ::= plus_num */ yytestcase(yyruleno==364);
      case 369: /* plus_num ::= PLUS number */ yytestcase(yyruleno==369);
      case 370: /* plus_num ::= number */ yytestcase(yyruleno==370);
{yygotominor.yy277 = yymsp[0].minor.yy277;}
        break;
      case 66: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy651->append(yymsp[0].minor.yy560);
                                                yygotominor.yy651 = yymsp[-1].minor.yy651;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 67: /* carglist ::= */
{yygotominor.yy651 = new ParserCreateTableColumnConstraintList();}
        break;
      case 68: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefNameOnly(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefTerm(*(yymsp[0].minor.yy277));
                                                delete yymsp[0].minor.yy277;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefExpr(yymsp[-1].minor.yy228);
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 71: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefTerm(*(yymsp[0].minor.yy277), false);
                                                delete yymsp[0].minor.yy277;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 72: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefTerm(*(yymsp[0].minor.yy277), true);
                                                delete yymsp[0].minor.yy277;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 73: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefId(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 74: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 75: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initNull(*(yymsp[0].minor.yy282));
                                                delete yymsp[0].minor.yy282;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 76: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initNotNull(*(yymsp[0].minor.yy282));
                                                delete yymsp[0].minor.yy282;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 77: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initPk(*(yymsp[-2].minor.yy561), *(yymsp[-1].minor.yy282), *(yymsp[0].minor.yy151));
                                                delete yymsp[-2].minor.yy561;
                                                delete yymsp[0].minor.yy151;
                                                delete yymsp[-1].minor.yy282;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 78: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initUnique(*(yymsp[0].minor.yy282));
                                                delete yymsp[0].minor.yy282;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 79: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initCheck(yymsp[-1].minor.yy228);
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 80: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initFk(*(yymsp[-2].minor.yy467), *(yymsp[-1].minor.yy247), *(yymsp[0].minor.yy229));
                                                delete yymsp[-2].minor.yy467;
                                                delete yymsp[0].minor.yy229;
                                                delete yymsp[-1].minor.yy247;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 81: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefer(yymsp[0].minor.yy305->initially, yymsp[0].minor.yy305->deferrable);
                                                delete yymsp[0].minor.yy305;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 82: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initColl(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 83: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 84: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==84);
      case 85: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==85);
      case 86: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==86);
{
                                                if (!yymsp[0].minor.yy467->isNull() && yymsp[0].minor.yy467->toLower() != "stored" && yymsp[0].minor.yy467->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy467)));

                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy560->initGeneratedAs(yymsp[-2].minor.yy228, *(yymsp[-5].minor.yy151), *(yymsp[0].minor.yy467));
												delete yymsp[-5].minor.yy151;
												delete yymsp[0].minor.yy467;
												objectForTokens = yygotominor.yy560;
											}
        break;
      case 87: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initCheck();
                                                objectForTokens = yygotominor.yy560;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 88: /* term ::= NULL */
{yygotominor.yy277 = new QVariant();}
        break;
      case 89: /* term ::= INTEGER */
      case 372: /* number ::= INTEGER */ yytestcase(yyruleno==372);
{yygotominor.yy277 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 90: /* term ::= FLOAT */
      case 373: /* number ::= FLOAT */ yytestcase(yyruleno==373);
{yygotominor.yy277 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 91: /* term ::= STRING|BLOB */
{yygotominor.yy277 = new QVariant(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 92: /* tnm ::= term */
{
												yygotominor.yy70 = new ParserTermOrLiteral(*(yymsp[0].minor.yy277));
												delete yymsp[0].minor.yy277;
											}
        break;
      case 93: /* tnm ::= nm */
{
												yygotominor.yy70 = new ParserTermOrLiteral(*(yymsp[0].minor.yy467));
												delete yymsp[0].minor.yy467;
											}
        break;
      case 98: /* refargs ::= */
{yygotominor.yy229 = new ParserFkConditionList();}
        break;
      case 99: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy229->append(yymsp[0].minor.yy63);
                                                yygotominor.yy229 = yymsp[-1].minor.yy229;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 100: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy63 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 101: /* refarg ::= ON INSERT refact */
{yygotominor.yy63 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy412)); delete yymsp[0].minor.yy412;}
        break;
      case 102: /* refarg ::= ON DELETE refact */
{yygotominor.yy63 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy412)); delete yymsp[0].minor.yy412;}
        break;
      case 103: /* refarg ::= ON UPDATE refact */
      case 104: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==104);
{yygotominor.yy63 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy412)); delete yymsp[0].minor.yy412;}
        break;
      case 105: /* refact ::= SET NULL */
{yygotominor.yy412 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 106: /* refact ::= SET DEFAULT */
{yygotominor.yy412 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 107: /* refact ::= CASCADE */
{yygotominor.yy412 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 108: /* refact ::= RESTRICT */
{yygotominor.yy412 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 109: /* refact ::= NO ACTION */
{yygotominor.yy412 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 110: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy305 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy652));
                                                delete yymsp[0].minor.yy652;
                                            }
        break;
      case 111: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy305 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy652));
                                                delete yymsp[0].minor.yy652;
                                            }
        break;
      case 112: /* init_deferred_pred_opt ::= */
{yygotominor.yy652 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 113: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy652 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 114: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy652 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 115: /* conslist_opt ::= */
{yygotominor.yy589 = new ParserCreateTableConstraintList();}
        break;
      case 116: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy589 = yymsp[0].minor.yy589;}
        break;
      case 117: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy362->afterComma = *(yymsp[-1].minor.yy151);
                                                yymsp[-2].minor.yy589->append(yymsp[0].minor.yy362);
                                                yygotominor.yy589 = yymsp[-2].minor.yy589;
                                                delete yymsp[-1].minor.yy151;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 118: /* conslist ::= tcons */
{
                                                yygotominor.yy589 = new ParserCreateTableConstraintList();
                                                yygotominor.yy589->append(yymsp[0].minor.yy362);
                                            }
        break;
      case 121: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy362 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy362->initNameOnly(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy362;
                                            }
        break;
      case 122: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy362 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy362->initPk(*(yymsp[-3].minor.yy247), *(yymsp[-2].minor.yy151), *(yymsp[0].minor.yy282));
                                                delete yymsp[-2].minor.yy151;
                                                delete yymsp[0].minor.yy282;
                                                delete yymsp[-3].minor.yy247;
                                                objectForTokens = yygotominor.yy362;
                                            }
        break;
      case 123: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy362 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy362->initUnique(*(yymsp[-2].minor.yy247), *(yymsp[0].minor.yy282));
                                                delete yymsp[0].minor.yy282;
                                                delete yymsp[-2].minor.yy247;
                                                objectForTokens = yygotominor.yy362;
                                            }
        break;
      case 124: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy362 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy362->initCheck(yymsp[-2].minor.yy228, *(yymsp[0].minor.yy282));
                                                objectForTokens = yygotominor.yy362;
                                            }
        break;
      case 125: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 126: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==126);
      case 127: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==127);
{
                                                yygotominor.yy362 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy362->initFk(
                                                    *(yymsp[-6].minor.yy247),
                                                    *(yymsp[-3].minor.yy467),
                                                    *(yymsp[-2].minor.yy247),
                                                    *(yymsp[-1].minor.yy229),
                                                    yymsp[0].minor.yy305->initially,
                                                    yymsp[0].minor.yy305->deferrable
                                                );
                                                delete yymsp[-3].minor.yy467;
                                                delete yymsp[-1].minor.yy229;
                                                delete yymsp[0].minor.yy305;
                                                delete yymsp[-2].minor.yy247;
                                                delete yymsp[-6].minor.yy247;
                                                objectForTokens = yygotominor.yy362;
                                            }
        break;
      case 128: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy362 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy362->initCheck();
                                                objectForTokens = yygotominor.yy362;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,227,&yymsp[0].minor);
}
        break;
      case 129: /* defer_subclause_opt ::= */
{yygotominor.yy305 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 130: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy305 = yymsp[0].minor.yy305;}
        break;
      case 131: /* onconf ::= */
      case 133: /* orconf ::= */ yytestcase(yyruleno==133);
{yygotominor.yy282 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 132: /* onconf ::= ON CONFLICT resolvetype */
      case 134: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==134);
{yygotominor.yy282 = yymsp[0].minor.yy282;}
        break;
      case 135: /* resolvetype ::= raisetype */
      case 136: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==136);
      case 137: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==137);
{yygotominor.yy282 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 138: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy475 = new SqliteDropTable(*(yymsp[-1].minor.yy151), yymsp[0].minor.yy44->name1, yymsp[0].minor.yy44->name2);
                                                delete yymsp[-1].minor.yy151;
                                                delete yymsp[0].minor.yy44;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 139: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 140: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==140);
      case 147: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==147);
      case 148: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==148);
      case 191: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==191);
      case 192: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==192);
      case 193: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==193);
      case 194: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==194);
      case 337: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==337);
      case 338: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==338);
      case 351: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==351);
      case 352: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==352);
      case 362: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==362);
      case 363: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==363);
      case 401: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==401);
      case 402: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==402);
      case 412: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==412);
      case 413: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==413);
      case 416: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==416);
      case 417: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==417);
      case 422: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==422);
      case 423: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==423);
      case 429: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==429);
      case 430: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==430);
{  yy_destructor(yypParser,202,&yymsp[-2].minor);
}
        break;
      case 143: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy475 = new SqliteCreateView(*(yymsp[-6].minor.yy650), *(yymsp[-4].minor.yy151), yymsp[-3].minor.yy44->name1, yymsp[-3].minor.yy44->name2, yymsp[0].minor.yy373, *(yymsp[-2].minor.yy247));
                                                delete yymsp[-6].minor.yy650;
                                                delete yymsp[-4].minor.yy151;
                                                delete yymsp[-3].minor.yy44;
                                                delete yymsp[-2].minor.yy247;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 146: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy475 = new SqliteDropView(*(yymsp[-1].minor.yy151), yymsp[0].minor.yy44->name1, yymsp[0].minor.yy44->name2);
                                                delete yymsp[-1].minor.yy151;
                                                delete yymsp[0].minor.yy44;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 149: /* cmd ::= select_stmt */
      case 230: /* cmd ::= delete_stmt */ yytestcase(yyruleno==230);
      case 241: /* cmd ::= update_stmt */ yytestcase(yyruleno==241);
      case 262: /* cmd ::= insert_stmt */ yytestcase(yyruleno==262);
{
                                                yygotominor.yy475 = yymsp[0].minor.yy475;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 150: /* select_stmt ::= select */
{
                                                yygotominor.yy475 = yymsp[0].minor.yy373;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 151: /* select ::= with selectnowith */
{
                                                yygotominor.yy373 = yymsp[0].minor.yy373;
                                                yymsp[0].minor.yy373->setWith(yymsp[-1].minor.yy33);
                                                objectForTokens = yygotominor.yy373;
                                            }
        break;
      case 152: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy373 = SqliteSelect::append(yymsp[0].minor.yy446);
                                                objectForTokens = yygotominor.yy373;
                                            }
        break;
      case 153: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy373 = SqliteSelect::append(yymsp[-2].minor.yy373, *(yymsp[-1].minor.yy430), yymsp[0].minor.yy446);
                                                delete yymsp[-1].minor.yy430;
                                                objectForTokens = yygotominor.yy373;
                                            }
        break;
      case 154: /* selectnowith ::= values */
{
                                                yygotominor.yy373 = SqliteSelect::append(*(yymsp[0].minor.yy422));
                                                delete yymsp[0].minor.yy422;
                                                objectForTokens = yygotominor.yy373;
                                            }
        break;
      case 155: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy373 = SqliteSelect::append(yymsp[-2].minor.yy373, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy422));
                                                delete yymsp[0].minor.yy422;
                                                objectForTokens = yygotominor.yy373;
                                            }
        break;
      case 156: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy446 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy650),
                                                        *(yymsp[-6].minor.yy562),
                                                        yymsp[-5].minor.yy507,
                                                        yymsp[-4].minor.yy228,
                                                        *(yymsp[-3].minor.yy203),
                                                        yymsp[-2].minor.yy228,
                                                        *(yymsp[-1].minor.yy459),
                                                        yymsp[0].minor.yy396
                                                    );
                                                delete yymsp[-6].minor.yy562;
                                                delete yymsp[-7].minor.yy650;
                                                delete yymsp[-3].minor.yy203;
                                                delete yymsp[-1].minor.yy459;
                                                objectForTokens = yygotominor.yy446;
                                            }
        break;
      case 157: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy446 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy650),
                                                        *(yymsp[-7].minor.yy562),
                                                        yymsp[-6].minor.yy507,
                                                        yymsp[-5].minor.yy228,
                                                        *(yymsp[-4].minor.yy203),
                                                        yymsp[-3].minor.yy228,
														*(yymsp[-2].minor.yy67),
                                                        *(yymsp[-1].minor.yy459),
                                                        yymsp[0].minor.yy396
                                                    );
                                                delete yymsp[-7].minor.yy562;
                                                delete yymsp[-8].minor.yy650;
                                                delete yymsp[-4].minor.yy203;
                                                delete yymsp[-1].minor.yy459;
												delete yymsp[-2].minor.yy67;
                                                objectForTokens = yygotominor.yy446;
											}
        break;
      case 158: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy422 = new ParserExprNestedList();
                                                yygotominor.yy422->append(*(yymsp[-1].minor.yy203));
                                                delete yymsp[-1].minor.yy203;
                                            }
        break;
      case 159: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy422->append(*(yymsp[-1].minor.yy203));
                                                yygotominor.yy422 = yymsp[-4].minor.yy422;
                                                delete yymsp[-1].minor.yy203;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 160: /* multiselect_op ::= UNION */
{yygotominor.yy430 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 161: /* multiselect_op ::= UNION ALL */
{yygotominor.yy430 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 162: /* multiselect_op ::= EXCEPT */
{yygotominor.yy430 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 163: /* multiselect_op ::= INTERSECT */
{yygotominor.yy430 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 164: /* distinct ::= DISTINCT */
{yygotominor.yy650 = new int(1);}
        break;
      case 165: /* distinct ::= ALL */
{yygotominor.yy650 = new int(2);}
        break;
      case 167: /* sclp ::= selcollist COMMA */
{yygotominor.yy562 = yymsp[-1].minor.yy562;}
        break;
      case 168: /* sclp ::= */
      case 239: /* returning ::= */ yytestcase(yyruleno==239);
{yygotominor.yy562 = new ParserResultColumnList();}
        break;
      case 169: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy228,
                                                        yymsp[0].minor.yy496 ? yymsp[0].minor.yy496->asKw : false,
                                                        yymsp[0].minor.yy496 ? yymsp[0].minor.yy496->name : QString()
                                                    );

                                                yymsp[-2].minor.yy562->append(obj);
                                                yygotominor.yy562 = yymsp[-2].minor.yy562;
                                                delete yymsp[0].minor.yy496;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 170: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy562->append(obj);
                                                yygotominor.yy562 = yymsp[-1].minor.yy562;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 171: /* selcollist ::= sclp tnm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        yymsp[-2].minor.yy70->toName()
                                                    );
													
												if (!yymsp[-2].minor.yy70->isName())
													parserContext->errorAtToken("Syntax error <expected name, not literal value>", -3);
													
                                                yymsp[-3].minor.yy562->append(obj);
                                                yygotominor.yy562 = yymsp[-3].minor.yy562;
                                                delete yymsp[-2].minor.yy70;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 172: /* selcollist ::= sclp */
      case 173: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==173);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy562 = yymsp[0].minor.yy562;
                                            }
        break;
      case 174: /* as ::= AS nm */
{
                                                yygotominor.yy496 = new ParserStubAlias(*(yymsp[0].minor.yy467), true);
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 175: /* as ::= ids */
      case 176: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==176);
      case 177: /* as ::= ID_ALIAS */ yytestcase(yyruleno==177);
{
                                                yygotominor.yy496 = new ParserStubAlias(*(yymsp[0].minor.yy467), false);
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 178: /* as ::= */
{yygotominor.yy496 = nullptr;}
        break;
      case 179: /* from ::= */
{yygotominor.yy507 = nullptr;}
        break;
      case 180: /* from ::= FROM joinsrc */
{yygotominor.yy507 = yymsp[0].minor.yy507;}
        break;
      case 181: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy507 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy125,
                                                        *(yymsp[0].minor.yy39)
                                                    );
                                                delete yymsp[0].minor.yy39;
                                                objectForTokens = yygotominor.yy507;
                                            }
        break;
      case 182: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy507 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy507;
                                            }
        break;
      case 183: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy429, yymsp[-1].minor.yy125, yymsp[0].minor.yy243);

                                                yymsp[-3].minor.yy39->append(src);
                                                yygotominor.yy39 = yymsp[-3].minor.yy39;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 184: /* seltablist ::= */
{
                                                yygotominor.yy39 = new ParserOtherSourceList();
                                            }
        break;
      case 185: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy125 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy467),
                                                        *(yymsp[-2].minor.yy467),
                                                        yymsp[-1].minor.yy496 ? yymsp[-1].minor.yy496->asKw : false,
                                                        yymsp[-1].minor.yy496 ? yymsp[-1].minor.yy496->name : QString(),
                                                        yymsp[0].minor.yy636 ? yymsp[0].minor.yy636->notIndexedKw : false,
                                                        yymsp[0].minor.yy636 ? yymsp[0].minor.yy636->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy467;
                                                delete yymsp[-2].minor.yy467;
                                                delete yymsp[-1].minor.yy496;
                                                if (yymsp[0].minor.yy636)
                                                    delete yymsp[0].minor.yy636;
                                                objectForTokens = yygotominor.yy125;
                                            }
        break;
      case 186: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy125 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy373,
                                                        yymsp[0].minor.yy496 ? yymsp[0].minor.yy496->asKw : false,
                                                        yymsp[0].minor.yy496 ? yymsp[0].minor.yy496->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy496;
                                                objectForTokens = yygotominor.yy125;
                                            }
        break;
      case 187: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy125 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy507,
                                                        yymsp[0].minor.yy496 ? yymsp[0].minor.yy496->asKw : false,
                                                        yymsp[0].minor.yy496 ? yymsp[0].minor.yy496->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy496;
                                                objectForTokens = yygotominor.yy125;
                                            }
        break;
      case 188: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy125 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy467),
                                                        *(yymsp[-4].minor.yy467),
                                                        yymsp[0].minor.yy496 ? yymsp[0].minor.yy496->asKw : false,
                                                        yymsp[0].minor.yy496 ? yymsp[0].minor.yy496->name : QString(),
                                                        *(yymsp[-2].minor.yy203)
                                                    );
                                                delete yymsp[-5].minor.yy467;
                                                delete yymsp[-4].minor.yy467;
                                                delete yymsp[0].minor.yy496;
                                                if (yymsp[-2].minor.yy203)
                                                    delete yymsp[-2].minor.yy203;

                                                objectForTokens = yygotominor.yy125;
                                            }
        break;
      case 189: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy125 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy125;
                                            }
        break;
      case 190: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy125 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy125->database = *(yymsp[-1].minor.yy467);
                                                delete yymsp[-1].minor.yy467;
                                                objectForTokens = yygotominor.yy125;
                                            }
        break;
      case 195: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy243 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy228);
                                                objectForTokens = yygotominor.yy243;
                                            }
        break;
      case 196: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy243 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy259));
                                                delete yymsp[-1].minor.yy259;
                                                objectForTokens = yygotominor.yy243;
                                            }
        break;
      case 197: /* joinconstr_opt ::= */
{yygotominor.yy243 = nullptr;}
        break;
      case 198: /* dbnm ::= */
      case 347: /* collate ::= */ yytestcase(yyruleno==347);
      case 433: /* vtabarg ::= */ yytestcase(yyruleno==433);
      case 437: /* anylist ::= */ yytestcase(yyruleno==437);
{yygotominor.yy467 = new QString();}
        break;
      case 200: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy44 = new ParserFullName();
                                                yygotominor.yy44->name1 = *(yymsp[-1].minor.yy467);
                                                yygotominor.yy44->name2 = *(yymsp[0].minor.yy467);
                                                delete yymsp[-1].minor.yy467;
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 201: /* joinop ::= COMMA */
{
                                                yygotominor.yy429 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy429;
                                            }
        break;
      case 202: /* joinop ::= JOIN */
{
                                                yygotominor.yy429 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy429;
                                            }
        break;
      case 203: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy429 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy429;
                                            }
        break;
      case 204: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy429 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy467));
                                                delete yymsp[-1].minor.yy467;
                                                objectForTokens = yygotominor.yy429;
                                            }
        break;
      case 205: /* joinop ::= JOIN_KW nm nm JOIN */
      case 206: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==206);
{
                                                yygotominor.yy429 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy467), *(yymsp[-1].minor.yy467));
                                                delete yymsp[-2].minor.yy467;
                                                objectForTokens = yygotominor.yy429;
                                            }
        break;
      case 207: /* indexed_opt ::= */
{yygotominor.yy636 = nullptr;}
        break;
      case 208: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy636 = new ParserIndexedBy(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 209: /* indexed_opt ::= NOT INDEXED */
      case 210: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==210);
{yygotominor.yy636 = new ParserIndexedBy(true);}
        break;
      case 211: /* orderby_opt ::= */
{yygotominor.yy459 = new ParserOrderByList();}
        break;
      case 212: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy459 = yymsp[0].minor.yy459;}
        break;
      case 213: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy228, *(yymsp[-1].minor.yy561), *(yymsp[0].minor.yy619));
                                                yymsp[-4].minor.yy459->append(obj);
                                                yygotominor.yy459 = yymsp[-4].minor.yy459;
                                                delete yymsp[-1].minor.yy561;
												delete yymsp[0].minor.yy619;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 214: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy228, *(yymsp[-1].minor.yy561), *(yymsp[0].minor.yy619));
                                                yygotominor.yy459 = new ParserOrderByList();
                                                yygotominor.yy459->append(obj);
                                                delete yymsp[-1].minor.yy561;
												delete yymsp[0].minor.yy619;
                                                objectForTokens = obj;
                                            }
        break;
      case 215: /* sortorder ::= ASC */
{yygotominor.yy561 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 216: /* sortorder ::= DESC */
{yygotominor.yy561 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 217: /* sortorder ::= */
{yygotominor.yy561 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 218: /* nulls ::= NULLS FIRST */
{yygotominor.yy619 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 219: /* nulls ::= NULLS LAST */
{yygotominor.yy619 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 220: /* nulls ::= */
{yygotominor.yy619 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 221: /* groupby_opt ::= */
      case 332: /* exprlist ::= */ yytestcase(yyruleno==332);
{yygotominor.yy203 = new ParserExprList();}
        break;
      case 222: /* groupby_opt ::= GROUP BY nexprlist */
      case 331: /* exprlist ::= nexprlist */ yytestcase(yyruleno==331);
{yygotominor.yy203 = yymsp[0].minor.yy203;}
        break;
      case 223: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy203 = new ParserExprList();
                                            }
        break;
      case 224: /* having_opt ::= */
      case 236: /* where_opt ::= */ yytestcase(yyruleno==236);
      case 328: /* case_else ::= */ yytestcase(yyruleno==328);
      case 330: /* case_operand ::= */ yytestcase(yyruleno==330);
      case 356: /* vinto ::= */ yytestcase(yyruleno==356);
      case 390: /* when_clause ::= */ yytestcase(yyruleno==390);
      case 405: /* key_opt ::= */ yytestcase(yyruleno==405);
{yygotominor.yy228 = nullptr;}
        break;
      case 225: /* having_opt ::= HAVING expr */
      case 237: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==237);
      case 321: /* expr ::= exprx */ yytestcase(yyruleno==321);
      case 327: /* case_else ::= ELSE expr */ yytestcase(yyruleno==327);
      case 329: /* case_operand ::= exprx */ yytestcase(yyruleno==329);
      case 355: /* vinto ::= INTO expr */ yytestcase(yyruleno==355);
      case 391: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==391);
      case 406: /* key_opt ::= KEY expr */ yytestcase(yyruleno==406);
{yygotominor.yy228 = yymsp[0].minor.yy228;}
        break;
      case 226: /* limit_opt ::= */
{yygotominor.yy396 = nullptr;}
        break;
      case 227: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy396 = new SqliteLimit(yymsp[0].minor.yy228);
                                                objectForTokens = yygotominor.yy396;
                                            }
        break;
      case 228: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy396 = new SqliteLimit(yymsp[-2].minor.yy228, yymsp[0].minor.yy228, true);
                                                objectForTokens = yygotominor.yy396;
                                            }
        break;
      case 229: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy396 = new SqliteLimit(yymsp[-2].minor.yy228, yymsp[0].minor.yy228, false);
                                                objectForTokens = yygotominor.yy396;
                                            }
        break;
      case 231: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning */
{
                                                if (yymsp[-2].minor.yy636)
                                                {
                                                    if (!yymsp[-2].minor.yy636->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy475 = new SqliteDelete(
                                                                yymsp[-3].minor.yy44->name1,
                                                                yymsp[-3].minor.yy44->name2,
                                                                yymsp[-2].minor.yy636->indexedBy,
                                                                yymsp[-1].minor.yy228,
                                                                yymsp[-6].minor.yy33,
                                                                *(yymsp[0].minor.yy562)
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy475 = new SqliteDelete(
                                                                yymsp[-3].minor.yy44->name1,
                                                                yymsp[-3].minor.yy44->name2,
                                                                yymsp[-2].minor.yy636->notIndexedKw,
                                                                yymsp[-1].minor.yy228,
                                                                yymsp[-6].minor.yy33,
                                                                *(yymsp[0].minor.yy562)
                                                            );
                                                    }
                                                    delete yymsp[-2].minor.yy636;
                                                }
                                                else
                                                {
                                                    yygotominor.yy475 = new SqliteDelete(
                                                            yymsp[-3].minor.yy44->name1,
                                                            yymsp[-3].minor.yy44->name2,
                                                            false,
                                                            yymsp[-1].minor.yy228,
                                                            yymsp[-6].minor.yy33,
                                                            *(yymsp[0].minor.yy562)
                                                        );
                                                }
                                                delete yymsp[-3].minor.yy44;
                                                delete yymsp[0].minor.yy562;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 232: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy33;
                                                yygotominor.yy475 = q;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 233: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy33;
                                                q->database = *(yymsp[-1].minor.yy467);
                                                yygotominor.yy475 = q;
                                                objectForTokens = yygotominor.yy475;
                                                delete yymsp[-1].minor.yy467;
                                            }
        break;
      case 234: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 245: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==245);
{  yy_destructor(yypParser,248,&yymsp[-5].minor);
  yy_destructor(yypParser,202,&yymsp[-2].minor);
}
        break;
      case 235: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 246: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==246);
{  yy_destructor(yypParser,248,&yymsp[-3].minor);
}
        break;
      case 238: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy228 = new SqliteExpr();
                                            }
        break;
      case 240: /* returning ::= RETURNING selcollist */
{yygotominor.yy562 = yymsp[0].minor.yy562;}
        break;
      case 242: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning */
{
                                                yygotominor.yy475 = new SqliteUpdate(
                                                        *(yymsp[-7].minor.yy282),
                                                        yymsp[-6].minor.yy44->name1,
                                                        yymsp[-6].minor.yy44->name2,
                                                        yymsp[-5].minor.yy636 ? yymsp[-5].minor.yy636->notIndexedKw : false,
                                                        yymsp[-5].minor.yy636 ? yymsp[-5].minor.yy636->indexedBy : QString(),
                                                        *(yymsp[-3].minor.yy297),
														yymsp[-2].minor.yy507,
                                                        yymsp[-1].minor.yy228,
                                                        yymsp[-9].minor.yy33,
                                                        *(yymsp[0].minor.yy562)
                                                    );
                                                delete yymsp[-7].minor.yy282;
                                                delete yymsp[-6].minor.yy44;
                                                delete yymsp[-3].minor.yy297;
                                                delete yymsp[0].minor.yy562;
                                                if (yymsp[-5].minor.yy636)
                                                    delete yymsp[-5].minor.yy636;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 243: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy33;
                                                yygotominor.yy475 = q;
                                                objectForTokens = yygotominor.yy475;
                                                delete yymsp[0].minor.yy282;
                                            }
        break;
      case 244: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy33;
                                                q->database = *(yymsp[-1].minor.yy467);
                                                yygotominor.yy475 = q;
                                                objectForTokens = yygotominor.yy475;
                                                delete yymsp[-2].minor.yy282;
                                                delete yymsp[-1].minor.yy467;
                                            }
        break;
      case 247: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy297->append(ParserSetValue(*(yymsp[-2].minor.yy467), yymsp[0].minor.yy228));
                                                yygotominor.yy297 = yymsp[-4].minor.yy297;
                                                delete yymsp[-2].minor.yy467;
                                            }
        break;
      case 248: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy297->append(ParserSetValue(*(yymsp[-3].minor.yy259), yymsp[0].minor.yy228));
                                                yygotominor.yy297 = yymsp[-6].minor.yy297;
                                                delete yymsp[-3].minor.yy259;
                                            }
        break;
      case 249: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy297 = new ParserSetValueList();
                                                yygotominor.yy297->append(ParserSetValue(*(yymsp[-2].minor.yy467), yymsp[0].minor.yy228));
                                                delete yymsp[-2].minor.yy467;
                                            }
        break;
      case 250: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy297 = new ParserSetValueList();
                                                yygotominor.yy297->append(ParserSetValue(*(yymsp[-3].minor.yy259), yymsp[0].minor.yy228));
                                                delete yymsp[-3].minor.yy259;
                                            }
        break;
      case 251: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy297 = new ParserSetValueList();
                                            }
        break;
      case 252: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy297 = yymsp[-1].minor.yy297;
                                            }
        break;
      case 253: /* setlist ::= setlist COMMA ID_COL */
      case 254: /* setlist ::= ID_COL */ yytestcase(yyruleno==254);
{  yy_destructor(yypParser,279,&yymsp[-2].minor);
}
        break;
      case 255: /* idlist_opt ::= */
{yygotominor.yy259 = new QStringList();}
        break;
      case 256: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy259 = yymsp[-1].minor.yy259;}
        break;
      case 257: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy259 = yymsp[-2].minor.yy259;
                                                *(yygotominor.yy259) << *(yymsp[0].minor.yy467);
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 258: /* idlist ::= nm */
{
                                                yygotominor.yy259 = new QStringList();
                                                *(yygotominor.yy259) << *(yymsp[0].minor.yy467);
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 259: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy259 = new QStringList();
                                            }
        break;
      case 260: /* idlist ::= idlist COMMA ID_COL */
      case 261: /* idlist ::= ID_COL */ yytestcase(yyruleno==261);
{  yy_destructor(yypParser,273,&yymsp[-2].minor);
}
        break;
      case 263: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning */
{
                                                yygotominor.yy475 = new SqliteInsert(
                                                        yymsp[-6].minor.yy8->replace,
                                                        yymsp[-6].minor.yy8->orConflict,
                                                        yymsp[-4].minor.yy44->name1,
                                                        yymsp[-4].minor.yy44->name2,
                                                        *(yymsp[-3].minor.yy259),
                                                        yymsp[-2].minor.yy373,
                                                        yymsp[-7].minor.yy33,
                                                        yymsp[-1].minor.yy336,
                                                        *(yymsp[0].minor.yy562)
                                                    );
                                                delete yymsp[-4].minor.yy44;
                                                delete yymsp[-6].minor.yy8;
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[0].minor.yy562;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 264: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning */
{
                                                yygotominor.yy475 = new SqliteInsert(
                                                        yymsp[-6].minor.yy8->replace,
                                                        yymsp[-6].minor.yy8->orConflict,
                                                        yymsp[-4].minor.yy44->name1,
                                                        yymsp[-4].minor.yy44->name2,
                                                        *(yymsp[-3].minor.yy259),
                                                        yymsp[-7].minor.yy33,
                                                        *(yymsp[0].minor.yy562)
                                                    );
                                                delete yymsp[-4].minor.yy44;
                                                delete yymsp[-6].minor.yy8;
                                                delete yymsp[-3].minor.yy259;
                                                delete yymsp[0].minor.yy562;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 265: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy8->replace;
                                                q->onConflict = yymsp[-1].minor.yy8->orConflict;
                                                q->with = yymsp[-2].minor.yy33;
                                                yygotominor.yy475 = q;
                                                objectForTokens = yygotominor.yy475;
                                                delete yymsp[-1].minor.yy8;
                                            }
        break;
      case 266: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy8->replace;
                                                q->onConflict = yymsp[-3].minor.yy8->orConflict;
                                                q->with = yymsp[-4].minor.yy33;
                                                q->database = *(yymsp[-1].minor.yy467);
                                                yygotominor.yy475 = q;
                                                objectForTokens = yygotominor.yy475;
                                                delete yymsp[-3].minor.yy8;
                                                delete yymsp[-1].minor.yy467;
                                            }
        break;
      case 267: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,248,&yymsp[-3].minor);
  yy_destructor(yypParser,282,&yymsp[-2].minor);
}
        break;
      case 268: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,248,&yymsp[-5].minor);
  yy_destructor(yypParser,282,&yymsp[-4].minor);
  yy_destructor(yypParser,202,&yymsp[-2].minor);
}
        break;
      case 269: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy8 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy282));
                                                delete yymsp[0].minor.yy282;
                                            }
        break;
      case 270: /* insert_cmd ::= REPLACE */
{yygotominor.yy8 = new ParserStubInsertOrReplace(true);}
        break;
      case 271: /* upsert ::= */
{
                                                yygotominor.yy336 = nullptr;
                                            }
        break;
      case 272: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy336 = new SqliteUpsert(*(yymsp[-7].minor.yy459), yymsp[-5].minor.yy228, *(yymsp[-1].minor.yy297), yymsp[0].minor.yy228);
                                                delete yymsp[-7].minor.yy459;
                                                delete yymsp[-1].minor.yy297;
                                                objectForTokens = yygotominor.yy336;
                                            }
        break;
      case 273: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy336 = new SqliteUpsert(*(yymsp[-4].minor.yy459), yymsp[-2].minor.yy228);
                                                delete yymsp[-4].minor.yy459;
                                                objectForTokens = yygotominor.yy336;
                                            }
        break;
      case 274: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy336 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy336;
                                            }
        break;
      case 275: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,226,&yymsp[-3].minor);
}
        break;
      case 276: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 277: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==277);
{  yy_destructor(yypParser,226,&yymsp[-5].minor);
  yy_destructor(yypParser,202,&yymsp[-2].minor);
}
        break;
      case 278: /* exprx ::= tnm DOT ID_TAB|ID_COL */
{  yy_destructor(yypParser,234,&yymsp[-2].minor);
}
        break;
      case 279: /* exprx ::= tnm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,234,&yymsp[-4].minor);
  yy_destructor(yypParser,202,&yymsp[-2].minor);
}
        break;
      case 280: /* exprx ::= expr COLLATE ID_COLLATE */
      case 281: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==281);
{  yy_destructor(yypParser,226,&yymsp[-2].minor);
}
        break;
      case 282: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 283: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initRowValue(*(yymsp[-1].minor.yy203));
                                                delete yymsp[-1].minor.yy203;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 284: /* exprx ::= tnm */
{
                                                yygotominor.yy228 = new SqliteExpr();
												if (yymsp[0].minor.yy70->isLiteral())
													yygotominor.yy228->initLiteral(yymsp[0].minor.yy70->toLiteral());
												else
													yygotominor.yy228->initId(yymsp[0].minor.yy70->toName());
													//parserContext->errorBeforeLastToken("Syntax error <expected literal value>");

                                                delete yymsp[0].minor.yy70;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 285: /* exprx ::= tnm DOT nm */
{
                                                yygotominor.yy228 = new SqliteExpr();
												if (yymsp[-2].minor.yy70->isName())
													yygotominor.yy228->initId(yymsp[-2].minor.yy70->toName(), *(yymsp[0].minor.yy467));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-2].minor.yy70;
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 286: /* exprx ::= tnm DOT nm DOT nm */
{
                                                yygotominor.yy228 = new SqliteExpr();
												if (yymsp[-4].minor.yy70->isName())
													yygotominor.yy228->initId(yymsp[-4].minor.yy70->toName(), *(yymsp[-2].minor.yy467), *(yymsp[0].minor.yy467));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-4].minor.yy70;
                                                delete yymsp[-2].minor.yy467;
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 287: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 288: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initCollate(yymsp[-2].minor.yy228, *(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 289: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initCast(yymsp[-3].minor.yy228, yymsp[-1].minor.yy321);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 290: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy650), *(yymsp[-1].minor.yy203));
                                                delete yymsp[-2].minor.yy650;
                                                delete yymsp[-1].minor.yy203;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 291: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 292: /* exprx ::= expr AND expr */
      case 293: /* exprx ::= expr OR expr */ yytestcase(yyruleno==293);
      case 294: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==294);
      case 295: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==295);
      case 296: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==296);
      case 297: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==297);
      case 298: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==298);
      case 299: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==299);
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initBinOp(yymsp[-2].minor.yy228, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy228);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 300: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initLike(yymsp[-3].minor.yy228, *(yymsp[-2].minor.yy151), *(yymsp[-1].minor.yy232), yymsp[0].minor.yy228);
                                                delete yymsp[-2].minor.yy151;
                                                delete yymsp[-1].minor.yy232;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 301: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initLike(yymsp[-5].minor.yy228, *(yymsp[-4].minor.yy151), *(yymsp[-3].minor.yy232), yymsp[-2].minor.yy228, yymsp[0].minor.yy228);
                                                delete yymsp[-4].minor.yy151;
                                                delete yymsp[-3].minor.yy232;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 302: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initNull(yymsp[-1].minor.yy228, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 303: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initNull(yymsp[-2].minor.yy228, "NOT NULL");
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 304: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initIs(yymsp[-3].minor.yy228, *(yymsp[-1].minor.yy151), yymsp[0].minor.yy228);
                                                delete yymsp[-1].minor.yy151;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 305: /* exprx ::= NOT expr */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initUnaryOp(yymsp[0].minor.yy228, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 306: /* exprx ::= BITNOT expr */
      case 308: /* exprx ::= PLUS expr */ yytestcase(yyruleno==308);
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initUnaryOp(yymsp[0].minor.yy228, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 307: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                if (yymsp[0].minor.yy228->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy228->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy228->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy228;
                                                }
                                                else
                                                {
                                                    yygotominor.yy228->initUnaryOp(yymsp[0].minor.yy228, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 309: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initBetween(yymsp[-5].minor.yy228, *(yymsp[-4].minor.yy151), yymsp[-2].minor.yy228, yymsp[0].minor.yy228);
                                                delete yymsp[-4].minor.yy151;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 310: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initIn(yymsp[-5].minor.yy228, *(yymsp[-4].minor.yy151), *(yymsp[-1].minor.yy203));
                                                delete yymsp[-4].minor.yy151;
                                                delete yymsp[-1].minor.yy203;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 311: /* exprx ::= LP select RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initSubSelect(yymsp[-1].minor.yy373);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 312: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initIn(yymsp[-5].minor.yy228, *(yymsp[-4].minor.yy151), yymsp[-1].minor.yy373);
                                                delete yymsp[-4].minor.yy151;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 313: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initIn(yymsp[-4].minor.yy228, *(yymsp[-3].minor.yy151), *(yymsp[-1].minor.yy467), *(yymsp[0].minor.yy467));
                                                delete yymsp[-3].minor.yy151;
                                                delete yymsp[-1].minor.yy467;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 314: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initExists(yymsp[-1].minor.yy373);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 315: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initCase(yymsp[-3].minor.yy228, *(yymsp[-2].minor.yy203), yymsp[-1].minor.yy228);
                                                delete yymsp[-2].minor.yy203;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 316: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 317: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy467));
                                                delete yymsp[-1].minor.yy467;
                                                objectForTokens = yygotominor.yy228;
                                            }
        break;
      case 318: /* exprx ::= ID LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initWindowFunction(yymsp[-5].minor.yy0->value, *(yymsp[-3].minor.yy650), *(yymsp[-2].minor.yy203), yymsp[0].minor.yy439);
                                                delete yymsp[-3].minor.yy650;
                                                delete yymsp[-2].minor.yy203;
                                                objectForTokens = yygotominor.yy228;
											}
        break;
      case 319: /* exprx ::= ID LP STAR RP filter_over */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                yygotominor.yy228->initWindowFunction(yymsp[-4].minor.yy0->value, yymsp[0].minor.yy439);
                                                objectForTokens = yygotominor.yy228;
											}
        break;
      case 320: /* expr ::= */
{
                                                yygotominor.yy228 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy228;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 324: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy232 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 325: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy203->append(yymsp[-2].minor.yy228);
                                                yymsp[-4].minor.yy203->append(yymsp[0].minor.yy228);
                                                yygotominor.yy203 = yymsp[-4].minor.yy203;
                                            }
        break;
      case 326: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy203 = new ParserExprList();
                                                yygotominor.yy203->append(yymsp[-2].minor.yy228);
                                                yygotominor.yy203->append(yymsp[0].minor.yy228);
                                            }
        break;
      case 333: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy203->append(yymsp[0].minor.yy228);
                                                yygotominor.yy203 = yymsp[-2].minor.yy203;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 334: /* nexprlist ::= exprx */
{
                                                yygotominor.yy203 = new ParserExprList();
                                                yygotominor.yy203->append(yymsp[0].minor.yy228);
                                            }
        break;
      case 335: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy475 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy151),
                                                        *(yymsp[-8].minor.yy151),
                                                        *(yymsp[-7].minor.yy467),
                                                        *(yymsp[-6].minor.yy467),
                                                        *(yymsp[-4].minor.yy467),
                                                        *(yymsp[-2].minor.yy459),
                                                        yymsp[0].minor.yy228
                                                    );
                                                delete yymsp[-8].minor.yy151;
                                                delete yymsp[-10].minor.yy151;
                                                delete yymsp[-7].minor.yy467;
                                                delete yymsp[-6].minor.yy467;
                                                delete yymsp[-4].minor.yy467;
                                                delete yymsp[-2].minor.yy459;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 336: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,202,&yymsp[-3].minor);
}
        break;
      case 341: /* idxlist_opt ::= */
{yygotominor.yy247 = new ParserIndexedColumnList();}
        break;
      case 342: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy247 = yymsp[-1].minor.yy247;}
        break;
      case 343: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy247->append(yymsp[0].minor.yy556);
                                                yygotominor.yy247 = yymsp[-2].minor.yy247;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 344: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy247 = new ParserIndexedColumnList();
                                                yygotominor.yy247->append(yymsp[0].minor.yy556);
                                            }
        break;
      case 345: /* idxlist_single ::= nm collate sortorder */
      case 346: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==346);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy467),
                                                        *(yymsp[-1].minor.yy467),
                                                        *(yymsp[0].minor.yy561)
                                                    );
                                                yygotominor.yy556 = obj;
                                                delete yymsp[0].minor.yy561;
                                                delete yymsp[-2].minor.yy467;
                                                delete yymsp[-1].minor.yy467;
                                                objectForTokens = yygotominor.yy556;
                                            }
        break;
      case 350: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy475 = new SqliteDropIndex(*(yymsp[-1].minor.yy151), yymsp[0].minor.yy44->name1, yymsp[0].minor.yy44->name2);
                                                delete yymsp[-1].minor.yy151;
                                                delete yymsp[0].minor.yy44;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 353: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy475 = new SqliteVacuum(yymsp[0].minor.yy228);
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 354: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy475 = new SqliteVacuum(*(yymsp[-1].minor.yy467), yymsp[0].minor.yy228);
                                                delete yymsp[-1].minor.yy467;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 357: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy475 = new SqlitePragma(*(yymsp[-1].minor.yy467), *(yymsp[0].minor.yy467));
                                                delete yymsp[-1].minor.yy467;
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 358: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 360: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==360);
{
                                                yygotominor.yy475 = new SqlitePragma(*(yymsp[-3].minor.yy467), *(yymsp[-2].minor.yy467), *(yymsp[0].minor.yy277), true);
                                                delete yymsp[-3].minor.yy467;
                                                delete yymsp[-2].minor.yy467;
                                                delete yymsp[0].minor.yy277;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 359: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 361: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==361);
{
                                                yygotominor.yy475 = new SqlitePragma(*(yymsp[-4].minor.yy467), *(yymsp[-3].minor.yy467), *(yymsp[-1].minor.yy277), false);
                                                delete yymsp[-4].minor.yy467;
                                                delete yymsp[-3].minor.yy467;
                                                delete yymsp[-1].minor.yy277;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 365: /* nmnum ::= nm */
{
                                                yygotominor.yy277 = new QVariant(*(yymsp[0].minor.yy467));
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 366: /* nmnum ::= ON */
      case 367: /* nmnum ::= DELETE */ yytestcase(yyruleno==367);
      case 368: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==368);
{yygotominor.yy277 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 371: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy277->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy277) = -(yymsp[0].minor.yy277->toDouble());
                                                else if (yymsp[0].minor.yy277->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy277) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy277) = -(yymsp[0].minor.yy277->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy277 = yymsp[0].minor.yy277;
                                            }
        break;
      case 374: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy475 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy650),
                                                        *(yymsp[-11].minor.yy151),
                                                        *(yymsp[-10].minor.yy467),
                                                        *(yymsp[-9].minor.yy467),
                                                        *(yymsp[-5].minor.yy467),
                                                        *(yymsp[-8].minor.yy136),
                                                        yymsp[-7].minor.yy187,
                                                        *(yymsp[-4].minor.yy547),
                                                        yymsp[-3].minor.yy228,
                                                        *(yymsp[-1].minor.yy262),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy151;
                                                delete yymsp[-13].minor.yy650;
                                                delete yymsp[-8].minor.yy136;
                                                delete yymsp[-4].minor.yy547;
                                                delete yymsp[-10].minor.yy467;
                                                delete yymsp[-5].minor.yy467;
                                                delete yymsp[-9].minor.yy467;
                                                delete yymsp[-1].minor.yy262;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 375: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy475 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy650),
                                                        *(yymsp[-8].minor.yy151),
                                                        *(yymsp[-7].minor.yy467),
                                                        *(yymsp[-6].minor.yy467),
                                                        *(yymsp[-2].minor.yy467),
                                                        *(yymsp[-5].minor.yy136),
                                                        yymsp[-4].minor.yy187,
                                                        *(yymsp[-1].minor.yy547),
                                                        yymsp[0].minor.yy228,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy151;
                                                delete yymsp[-10].minor.yy650;
                                                delete yymsp[-5].minor.yy136;
                                                delete yymsp[-1].minor.yy547;
                                                delete yymsp[-7].minor.yy467;
                                                delete yymsp[-2].minor.yy467;
                                                delete yymsp[-6].minor.yy467;
                                                objectForTokens = yygotominor.yy475;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 376: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy475 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy650),
													*(yymsp[-10].minor.yy151),
													*(yymsp[-9].minor.yy467),
													*(yymsp[-8].minor.yy467),
													*(yymsp[-4].minor.yy467),
													*(yymsp[-7].minor.yy136),
													yymsp[-6].minor.yy187,
													*(yymsp[-3].minor.yy547),
													yymsp[-2].minor.yy228,
													*(yymsp[0].minor.yy262),
													3
                                                );
                                                delete yymsp[-10].minor.yy151;
                                                delete yymsp[-12].minor.yy650;
                                                delete yymsp[-7].minor.yy136;
                                                delete yymsp[-3].minor.yy547;
                                                delete yymsp[-9].minor.yy467;
                                                delete yymsp[-4].minor.yy467;
                                                delete yymsp[-8].minor.yy467;
                                                delete yymsp[0].minor.yy262;
                                                objectForTokens = yygotominor.yy475;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 377: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,204,&yymsp[-8].minor);
  yy_destructor(yypParser,202,&yymsp[-5].minor);
  yy_destructor(yypParser,297,&yymsp[-3].minor);
  yy_destructor(yypParser,298,&yymsp[-2].minor);
}
        break;
      case 380: /* trigger_time ::= BEFORE */
{yygotominor.yy136 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 381: /* trigger_time ::= AFTER */
{yygotominor.yy136 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 382: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy136 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 383: /* trigger_time ::= */
{yygotominor.yy136 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 384: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy187 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy187;
                                            }
        break;
      case 385: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy187 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy187;
                                            }
        break;
      case 386: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy187 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy187;
                                            }
        break;
      case 387: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy187 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy259));
                                                delete yymsp[0].minor.yy259;
                                                objectForTokens = yygotominor.yy187;
                                            }
        break;
      case 388: /* foreach_clause ::= */
{yygotominor.yy547 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 389: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy547 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 392: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy262->append(yymsp[-1].minor.yy475);
                                                yygotominor.yy262 = yymsp[-2].minor.yy262;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 393: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy262 = new ParserQueryList();
                                                yygotominor.yy262->append(yymsp[-1].minor.yy475);
                                            }
        break;
      case 394: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy262 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 399: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 400: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy475 = new SqliteDropTrigger(*(yymsp[-1].minor.yy151), yymsp[0].minor.yy44->name1, yymsp[0].minor.yy44->name2);
                                                delete yymsp[-1].minor.yy151;
                                                delete yymsp[0].minor.yy44;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 403: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy475 = new SqliteAttach(*(yymsp[-4].minor.yy151), yymsp[-3].minor.yy228, yymsp[-1].minor.yy228, yymsp[0].minor.yy228);
                                                delete yymsp[-4].minor.yy151;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 404: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy475 = new SqliteDetach(*(yymsp[-1].minor.yy151), yymsp[0].minor.yy228);
                                                delete yymsp[-1].minor.yy151;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 409: /* cmd ::= REINDEX */
{yygotominor.yy475 = new SqliteReindex();}
        break;
      case 410: /* cmd ::= REINDEX nm dbnm */
      case 411: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==411);
{
                                                yygotominor.yy475 = new SqliteReindex(*(yymsp[-1].minor.yy467), *(yymsp[0].minor.yy467));
                                                delete yymsp[-1].minor.yy467;
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 414: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy475 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 415: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy475 = new SqliteAnalyze(*(yymsp[-1].minor.yy467), *(yymsp[0].minor.yy467));
                                                delete yymsp[-1].minor.yy467;
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 418: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy475 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy44->name1,
                                                        yymsp[-3].minor.yy44->name2,
                                                        *(yymsp[0].minor.yy467)
                                                    );
                                                delete yymsp[0].minor.yy467;
                                                delete yymsp[-3].minor.yy44;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 419: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy475 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy44->name1,
                                                        yymsp[-3].minor.yy44->name2,
                                                        *(yymsp[-1].minor.yy151),
                                                        yymsp[0].minor.yy211
                                                    );
                                                delete yymsp[-1].minor.yy151;
                                                delete yymsp[-3].minor.yy44;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 420: /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
{
                                                yygotominor.yy475 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy44->name1,
                                                        yymsp[-3].minor.yy44->name2,
                                                        *(yymsp[-1].minor.yy151),
                                                        *(yymsp[0].minor.yy467)
                                                    );
                                                delete yymsp[-1].minor.yy151;
                                                delete yymsp[-3].minor.yy44;
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 421: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,206,&yymsp[-3].minor);
}
        break;
      case 427: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy475 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy151),
                                                        *(yymsp[-3].minor.yy467),
                                                        *(yymsp[-2].minor.yy467),
                                                        *(yymsp[0].minor.yy467)
                                                    );
                                                delete yymsp[-4].minor.yy151;
                                                delete yymsp[-3].minor.yy467;
                                                delete yymsp[-2].minor.yy467;
                                                delete yymsp[0].minor.yy467;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 428: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy475 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy151),
                                                        *(yymsp[-6].minor.yy467),
                                                        *(yymsp[-5].minor.yy467),
                                                        *(yymsp[-3].minor.yy467),
                                                        *(yymsp[-1].minor.yy259)
                                                    );
                                                delete yymsp[-6].minor.yy467;
                                                delete yymsp[-5].minor.yy467;
                                                delete yymsp[-3].minor.yy467;
                                                delete yymsp[-7].minor.yy151;
                                                delete yymsp[-1].minor.yy259;
                                                objectForTokens = yygotominor.yy475;
                                            }
        break;
      case 431: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy259 = new QStringList();
                                                yygotominor.yy259->append((yymsp[0].minor.yy467)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 432: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy259->append((yymsp[0].minor.yy467)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy259 = yymsp[-2].minor.yy259;
                                                delete yymsp[0].minor.yy467;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 434: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy467->append(" "+ *(yymsp[0].minor.yy467));
                                                yygotominor.yy467 = yymsp[-1].minor.yy467;
                                                delete yymsp[0].minor.yy467;
                                            }
        break;
      case 435: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy467 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 436: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy467 = new QString("(");
                                                yygotominor.yy467->append(*(yymsp[-1].minor.yy467));
                                                yygotominor.yy467->append(")");
                                                delete yymsp[-1].minor.yy467;
                                            }
        break;
      case 438: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy467 = yymsp[-3].minor.yy467;
                                                yygotominor.yy467->append("(");
                                                yygotominor.yy467->append(*(yymsp[-1].minor.yy467));
                                                yygotominor.yy467->append(")");
                                                delete yymsp[-1].minor.yy467;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 439: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy467 = yymsp[-1].minor.yy467;
                                                yygotominor.yy467->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 440: /* with ::= */
{yygotominor.yy33 = nullptr;}
        break;
      case 441: /* with ::= WITH wqlist */
{
                                                yygotominor.yy33 = new SqliteWith();
												yygotominor.yy33->cteList = *(yymsp[0].minor.yy312);
												delete yymsp[0].minor.yy312;
                                                objectForTokens = yygotominor.yy33;
                                            }
        break;
      case 442: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy33 = new SqliteWith();
												yygotominor.yy33->cteList = *(yymsp[0].minor.yy312);
                                                yygotominor.yy33->recursive = true;
												delete yymsp[0].minor.yy312;
                                                objectForTokens = yygotominor.yy33;
                                            }
        break;
      case 443: /* wqas ::= AS */
{yygotominor.yy3 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::ANY);}
        break;
      case 444: /* wqas ::= AS MATERIALIZED */
{yygotominor.yy3 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::MATERIALIZED);}
        break;
      case 445: /* wqas ::= AS NOT MATERIALIZED */
{yygotominor.yy3 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::NOT_MATERIALIZED);}
        break;
      case 446: /* wqlist ::= wqcte */
{
												yygotominor.yy312 = new ParserCteList();
                                                yygotominor.yy312->append(yymsp[0].minor.yy182);
                                            }
        break;
      case 447: /* wqlist ::= wqlist COMMA wqcte */
{
                                                yygotominor.yy312 = yymsp[-2].minor.yy312;
                                                yygotominor.yy312->append(yymsp[0].minor.yy182);
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 448: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 449: /* wqcte ::= nm idxlist_opt wqas LP select RP */
{
                                                yygotominor.yy182 = new SqliteWith::CommonTableExpression(*(yymsp[-5].minor.yy467), *(yymsp[-4].minor.yy247), yymsp[-1].minor.yy373, *(yymsp[-3].minor.yy3));
                                                delete yymsp[-5].minor.yy467;
                                                delete yymsp[-4].minor.yy247;
                                                delete yymsp[-3].minor.yy3;
												objectForTokens = yygotominor.yy182;
											}
        break;
      case 450: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy67 = new ParserWindowDefList();
												yygotominor.yy67->append(yymsp[0].minor.yy154);
											}
        break;
      case 451: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy67->append(yymsp[0].minor.yy154);
												yygotominor.yy67 = yymsp[-2].minor.yy67;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 452: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy154 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy467), yymsp[-1].minor.yy538);
												delete yymsp[-4].minor.yy467;
												objectForTokens = yygotominor.yy154;
											}
        break;
      case 453: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy538 = new SqliteWindowDefinition::Window();
												yygotominor.yy538->initPartitionBy(QString(), *(yymsp[-2].minor.yy203), *(yymsp[-1].minor.yy459), yymsp[0].minor.yy65);
												delete yymsp[-2].minor.yy203;
												delete yymsp[-1].minor.yy459;
												objectForTokens = yygotominor.yy538;
											}
        break;
      case 454: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy538 = new SqliteWindowDefinition::Window();
												yygotominor.yy538->initPartitionBy(*(yymsp[-5].minor.yy467), *(yymsp[-2].minor.yy203), *(yymsp[-1].minor.yy459), yymsp[0].minor.yy65);
												delete yymsp[-2].minor.yy203;
												delete yymsp[-5].minor.yy467;
												delete yymsp[-1].minor.yy459;
												objectForTokens = yygotominor.yy538;
											}
        break;
      case 455: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy538 = new SqliteWindowDefinition::Window();
												yygotominor.yy538->initOrderBy(QString(), *(yymsp[-1].minor.yy459), yymsp[0].minor.yy65);
												delete yymsp[-1].minor.yy459;
												objectForTokens = yygotominor.yy538;
											}
        break;
      case 456: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy538 = new SqliteWindowDefinition::Window();
												yygotominor.yy538->initOrderBy(*(yymsp[-4].minor.yy467), *(yymsp[-1].minor.yy459), yymsp[0].minor.yy65);
												delete yymsp[-1].minor.yy459;
												delete yymsp[-4].minor.yy467;
												objectForTokens = yygotominor.yy538;
											}
        break;
      case 457: /* window ::= frame_opt */
{
												yygotominor.yy538 = new SqliteWindowDefinition::Window();
												yygotominor.yy538->init(QString(), yymsp[0].minor.yy65);
												objectForTokens = yygotominor.yy538;
											}
        break;
      case 458: /* window ::= nm frame_opt */
{
												yygotominor.yy538 = new SqliteWindowDefinition::Window();
												yygotominor.yy538->init(QString(), yymsp[0].minor.yy65);
												delete yymsp[-1].minor.yy467;
												objectForTokens = yygotominor.yy538;
											}
        break;
      case 459: /* frame_opt ::= */
{yygotominor.yy65 = nullptr;}
        break;
      case 460: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy65 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy6), yymsp[-1].minor.yy573, nullptr, *(yymsp[0].minor.yy435));
												delete yymsp[-2].minor.yy6;
												delete yymsp[0].minor.yy435;
												objectForTokens = yygotominor.yy65;
											}
        break;
      case 461: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy65 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy6), yymsp[-3].minor.yy573, yymsp[-1].minor.yy573, *(yymsp[0].minor.yy435));
												delete yymsp[-5].minor.yy6;
												delete yymsp[0].minor.yy435;
												objectForTokens = yygotominor.yy65;
											}
        break;
      case 462: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy6 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 463: /* frame_bound_s ::= frame_bound */
      case 465: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==465);
{
												yygotominor.yy573 = yymsp[0].minor.yy573;
												objectForTokens = yygotominor.yy573;
											}
        break;
      case 464: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 466: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==466);
      case 468: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==468);
{
												yygotominor.yy573 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy573;
											}
        break;
      case 467: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy573 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy228, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy573;
											}
        break;
      case 469: /* frame_exclude_opt ::= */
{
												yygotominor.yy435 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 470: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy435 = yymsp[0].minor.yy435;
											}
        break;
      case 471: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy435 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 472: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy435 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 473: /* frame_exclude ::= GROUP */
{
												yygotominor.yy435 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 474: /* frame_exclude ::= TIES */
{
												yygotominor.yy435 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 475: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy67 = yymsp[0].minor.yy67;
											}
        break;
      case 476: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy439 = new SqliteFilterOver(yymsp[-1].minor.yy298, yymsp[0].minor.yy548);
												objectForTokens = yygotominor.yy439;
											}
        break;
      case 477: /* filter_over ::= over_clause */
{
												yygotominor.yy439 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy548);
												objectForTokens = yygotominor.yy439;
											}
        break;
      case 478: /* filter_over ::= filter_clause */
{
												yygotominor.yy439 = new SqliteFilterOver(yymsp[0].minor.yy298, nullptr);
												objectForTokens = yygotominor.yy439;
											}
        break;
      case 479: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy548 = new SqliteFilterOver::Over(yymsp[-1].minor.yy538);
												objectForTokens = yygotominor.yy548;
											}
        break;
      case 480: /* over_clause ::= OVER nm */
{
												yygotominor.yy548 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy467));
												delete yymsp[0].minor.yy467;
												objectForTokens = yygotominor.yy548;
											}
        break;
      case 481: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy298 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy228);
												objectForTokens = yygotominor.yy298;
											}
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "common/unused.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecopy.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 320
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 78
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  bool* yy5;
  SqliteFilterOver::Over* yy23;
  SqliteWith::CommonTableExpression* yy28;
  ParserSetValueList* yy35;
  SqliteWindowDefinition* yy52;
  SqliteNulls* yy55;
  ParserStubTransDetails* yy90;
  SqliteIndexedColumn* yy102;
  ParserOrderByList* yy103;
  ParserResultColumnList* yy105;
  ParserExprNestedList* yy106;
  SqliteSortOrder* yy125;
  ParserFkConditionList* yy126;
  SqliteWindowDefinition::Window::Frame::Bound* yy127;
  SqliteQuery* yy135;
  SqliteWith* yy136;
  SqliteSelect::Core::JoinConstraint* yy137;
  SqliteExpr* yy142;
  ParserCreateTableColumnConstraintList* yy175;
  ParserDeferSubClause* yy185;
  ParserExprList* yy197;
  ParserCreateTableColumnList* yy218;
  SqliteLimit* yy224;
  SqliteForeignKey::Condition::Reaction* yy234;
  SqliteInitially* yy236;
  SqliteCreateTable::Constraint* yy238;
  SqliteSelect::CompoundOperator* yy250;
  ParserWindowDefList* yy265;
  ParserFullName* yy280;
  SqliteConflictAlgo* yy281;
  SqliteCreateTable::Column* yy303;
  SqliteSelect* yy321;
  SqliteWindowDefinition::Window* yy322;
  SqliteWindowDefinition::Window::Frame* yy349;
  SqliteFilterOver* yy357;
  SqliteSelect::Core::SingleSource* yy361;
  SqliteCreateTrigger::Event* yy375;
  ParserIndexedBy* yy378;
  QVariant* yy381;
  QStringList* yy391;
  ParserIndexedColumnList* yy409;
  ParserStubAlias* yy416;
  ParserCteList* yy442;
  SqliteWindowDefinition::Window::Frame::Exclude* yy449;
  int* yy456;
  ParserQueryList* yy462;
  ParserOtherSourceList* yy473;
  SqliteSelect::Core::JoinSource* yy487;
  SqliteExpr::LikeOp* yy496;
  SqliteColumnType* yy499;
  SqliteCreateTrigger::Scope* yy500;
  SqliteForeignKey::Condition* yy519;
  SqliteFilterOver::Filter* yy525;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy534;
  SqliteSelect::Core::JoinOp* yy543;
  SqliteCreateTable::Column::Constraint* yy560;
  ParserStubExplain* yy599;
  SqliteUpsert* yy610;
  SqliteCreateTrigger::Time* yy614;
  SqliteSelect::Core* yy626;
  ParserStubInsertOrReplace* yy628;
  QString* yy633;
  ParserCreateTableConstraintList* yy637;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 845
#define YYNRULE 477
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2719)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   512,  758,  396,  837,  242,  241,  240,   68,   69,  507,
 /*    10 */   345,  757,  500,  801,  801,   66,   66,   67,   67,   67,
 /*    20 */    67,  842,   65,   65,   65,   65,   64,   64,   63,   63,
 /*    30 */    63,   62,  253,   63,   63,   63,   62,  253, 1164, 1164,
 /*    40 */    65,   65,   65,   65,   64,   64,   63,   63,   63,   62,
 /*    50 */   253,  505,   67,   67,   67,   67,   42,   65,   65,   65,
 /*    60 */    65,   64,   64,   63,   63,   63,   62,  253,   78,  837,
 /*    70 */   351,  837,  792,  804,  416, 1164, 1164,   55, 1164, 1164,
 /*    80 */  1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,  158,
 /*    90 */  1164, 1164, 1164, 1164,   52,   53, 1164, 1164, 1164, 1164,
 /*   100 */  1164,   54,  599,  512,  684,  684,   59,  157,  111,    3,
 /*   110 */   439,  436,  435,  275,  798,  500,  497,  415,  325,  808,
 /*   120 */   510,  636,  835,  834,  337,  811,  157,  661,  434,  439,
 /*   130 */   436,  435,  798,  810,  809,  808,  324,  836,   64,   64,
 /*   140 */    63,   63,   63,   62,  253,   70,  134,  434, 1283, 1283,
 /*   150 */    67,   67,   67,   67,  505,   65,   65,   65,   65,   64,
 /*   160 */    64,   63,   63,   63,   62,  253,  798,  788,  837,   13,
 /*   170 */   798,  509,  789,  509,   85,  792,  837,  347,   22,  452,
 /*   180 */    55,  651,   86,  709,  511,  528,  511,  370,  835,  834,
 /*   190 */   835,  834,  804,  793,  223,  793,  118,   52,   53,  701,
 /*   200 */   837,  710,  529,  528,   54, 1011,   15,  837,  487,  841,
 /*   210 */   443,  772,    3, 1011,  515,  117,  709,  798,  808,  497,
 /*   220 */  1011,  836,  808,  510,  811,  613,  650,  512,  811,  468,
 /*   230 */   453,  528,  810,  809,  808,  798,  810,  809,  808,  500,
 /*   240 */  1011,  329,  708,  489,  726,  163,  613, 1077,  245,  693,
 /*   250 */   366,  456,  761, 1011,  664, 1011, 1011,  836,  487, 1011,
 /*   260 */   550,   77,  270,  269, 1011, 1011, 1011, 1011, 1011,  798,
 /*   270 */   663,  836,   13,  798,  457,  789,  695,  694,  505,  738,
 /*   280 */   419,  588,   77,  707,  703,  338, 1011,  835,  834,  549,
 /*   290 */   548,  254,  537,  547,  845,  835,  834,  568,  836,  792,
 /*   300 */   738,  783,  782,  700,   55,  539,  738,  538,  805,  894,
 /*   310 */   589,  591,  384,  389,  590,  837,  488,  755,  518,  835,
 /*   320 */   834,   52,   53,  395,  794,   47,  835,  834,   54, 1077,
 /*   330 */   815,  773,  357, 1275,   11,  412,    3, 1077,  111,  805,
 /*   340 */  1275,  798,  805,  497, 1077,  472,  808,  510,  613,  794,
 /*   350 */   729,  512,  811,  509,  123,  668,  280,  169,  255,  798,
 /*   360 */   810,  809,  808,  500, 1077,   50,  511,  754,  279,  652,
 /*   370 */   653,  353,  509,  805,  697,  793,  209, 1077,  667, 1077,
 /*   380 */  1077,   49,  794,  588,   77,  511,   24,  896, 1077, 1077,
 /*   390 */  1077, 1077,  774,  798,  793,  223,   13,  798,  127,  789,
 /*   400 */   843,  138,  505,  350,  447,  540,   62,  253,  352,  178,
 /*   410 */  1077,   23,  589,  591,  104,  692,  590,   78,  836,  122,
 /*   420 */   509,  837,   49,  792,  541,  542,  837,  509,   55,  525,
 /*   430 */   468,  451,  761,  511,  835,  834,  309,  413,  173,  312,
 /*   440 */   511,  317,  793,  223,  594,   52,   53,  525,  111,  793,
 /*   450 */   209,  366,   54, 1062,  354,  837,  176,  837,  800,  812,
 /*   460 */     3, 1062,  813,  799,  637,  798,  481,  497, 1062,  740,
 /*   470 */   808,  510,  804,  818,   88,  525,  811,  836,  468,  469,
 /*   480 */    75,  349,  188,  798,  810,  809,  808,  365, 1062,  540,
 /*   490 */   797,  778,  638,  252,  367,  543,  781,  565,  261,  366,
 /*   500 */   624, 1062,  836, 1062, 1062,   60,  761,   46,  541,  398,
 /*   510 */  1166, 1166, 1062,  726, 1062, 1062,  627,  798,  657,  812,
 /*   520 */    13,  798,  813,  789,  771,  628,  836,  296,  425,  303,
 /*   530 */   397, 1235,  356,  567, 1062,  554,  770,  272,  458,  837,
 /*   540 */   835,  834,  331,  743,   78,  835,  834,   68,   69,  507,
 /*   550 */   345, 1166, 1166,  801,  801,   66,   66,   67,   67,   67,
 /*   560 */    67,  838,   65,   65,   65,   65,   64,   64,   63,   63,
 /*   570 */    63,   62,  253,  246,  835,  834,  835,  834,  586,  399,
 /*   580 */   781,  554,  381,  168,  783,  782,  718,  715,  582,  583,
 /*   590 */   409,  804, 1166, 1166,  392,  786,  785,   68,   69,  507,
 /*   600 */   345,   57,  714,  801,  801,   66,   66,   67,   67,   67,
 /*   610 */    67,  172,   65,   65,   65,   65,   64,   64,   63,   63,
 /*   620 */    63,   62,  253,  837, 1235,  837,  568,  721,  837,   68,
 /*   630 */    69,  507,  345, 1166, 1166,  801,  801,   66,   66,   67,
 /*   640 */    67,   67,   67,  771,   65,   65,   65,   65,   64,   64,
 /*   650 */    63,   63,   63,   62,  253,  770,  738,  432,  835,  834,
 /*   660 */   130,  357, 1274,  837,  111,  284,  371,  781,  288, 1274,
 /*   670 */   837,   51,  271,  484,  796, 1166, 1166,  738,   68,   69,
 /*   680 */   507,  345,   26,  738,  801,  801,   66,   66,   67,   67,
 /*   690 */    67,   67,  795,   65,   65,   65,   65,   64,   64,   63,
 /*   700 */    63,   63,   62,  253,  751,  807,  580,  837,   27,  804,
 /*   710 */   290,  581,   68,   69,  507,  345, 1166, 1166,  801,  801,
 /*   720 */    66,   66,   67,   67,   67,   67,  751,   65,   65,   65,
 /*   730 */    65,   64,   64,   63,   63,   63,   62,  253,  819,  407,
 /*   740 */   804,  837,  835,  834,  835,  834,  787,  835,  834,  837,
 /*   750 */   406,   68,   69,  507,  345, 1165, 1165,  801,  801,   66,
 /*   760 */    66,   67,   67,   67,   67,  490,   65,   65,   65,   65,
 /*   770 */    64,   64,   63,   63,   63,   62,  253,   44,  286,  837,
 /*   780 */   395,  837,  835,  834,  270,  269,  475,   87,  837,  835,
 /*   790 */   834,  837, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
 /*   800 */  1165, 1165, 1165, 1165, 1165, 1165,  544, 1165, 1165, 1165,
 /*   810 */  1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,    9,   56,
 /*   820 */   168,  578,   49,  783,  782,  837,  835,  834,  804,  727,
 /*   830 */   556,   68,   69,  507,  345, 1166, 1166,  801,  801,   66,
 /*   840 */    66,   67,   67,   67,   67,  826,   65,   65,   65,   65,
 /*   850 */    64,   64,   63,   63,   63,   62,  253,  843,    1,  804,
 /*   860 */   835,  834,  776,  687,  721,  837,  490,  114,  835,  834,
 /*   870 */   837,  803,   68,   69,  507,  345, 1166, 1166,  801,  801,
 /*   880 */    66,   66,   67,   67,   67,   67,  578,   65,   65,   65,
 /*   890 */    65,   64,   64,   63,   63,   63,   62,  253,  835,  834,
 /*   900 */   835,  834,  374,  238,  564,  564,  775,  835,  834,  191,
 /*   910 */   835,  834,  837,  531,  493,   68,   69,  507,  345,  642,
 /*   920 */   641,  801,  801,   66,   66,   67,   67,   67,   67,  824,
 /*   930 */    65,   65,   65,   65,   64,   64,   63,   63,   63,   62,
 /*   940 */   253,  531, 1084,  723,  835,  834,  565,  837,  245,  693,
 /*   950 */   503,  456,   68,   69,  507,  345,  471, 1084,  801,  801,
 /*   960 */    66,   66,   67,   67,   67,   67,  837,   65,   65,   65,
 /*   970 */    65,   64,   64,   63,   63,   63,   62,  253,  637, 1085,
 /*   980 */   837,  356,  566,  113,  835,  834,  764,  521,   88,  835,
 /*   990 */   834,  836,  837,  137, 1085,  837, 1084,  686,   21,  470,
 /*  1000 */   633,   68,   69,  507,  345, 1084,  836,  801,  801,   66,
 /*  1010 */    66,   67,   67,   67,   67,  190,   65,   65,   65,   65,
 /*  1020 */    64,   64,   63,   63,   63,   62,  253,  422, 1086,  593,
 /*  1030 */   420,  835,  834, 1085,  169,   50,  837,  169,   68,   69,
 /*  1040 */   507,  345, 1085, 1086,  801,  801,   66,   66,   67,   67,
 /*  1050 */    67,   67,  112,   65,   65,   65,   65,   64,   64,   63,
 /*  1060 */    63,   63,   62,  253,  637, 1087,  835,  834,  313,  348,
 /*  1070 */   822,  833,  393,  623,   88,   78,  486,  836,  831,  646,
 /*  1080 */  1087,  836, 1086,   74,  509,  835,  834,  832,  330,  576,
 /*  1090 */   440, 1086,  804,   31,  573,  509,  837,  511,  512,  835,
 /*  1100 */   834,  836,  837,  485,  733,    5,  793,  223,  511, 1220,
 /*  1110 */   500,  835,  834,  479,  835,  834,  753,  793,  223, 1087,
 /*  1120 */   844,    2,  837,   68,   69,  507,  345,  626, 1087,  801,
 /*  1130 */   801,   66,   66,   67,   67,   67,   67,  386,   65,   65,
 /*  1140 */    65,   65,   64,   64,   63,   63,   63,   62,  253,  505,
 /*  1150 */  1249,  265,  837,  468,  459,  835,  834,  573,  722,  509,
 /*  1160 */   250,   20,  478,  454,   78,  344,  421,  748,  574,  602,
 /*  1170 */   792,  934,  511,  738,  366,   55,  169,    7,  421,  836,
 /*  1180 */   837,  793,  209,  174,  121,  326,  445,  321,  444,  159,
 /*  1190 */   477,  836,   52,   53,  738,  794,  747,  512,  738,   54,
 /*  1200 */   738,  297,  482,  319,  716,   22, 1021,    3,   50,  500,
 /*  1210 */   709,  804,  798,  777,  497,  835,  834,  808,  510,  738,
 /*  1220 */   794,  835,  834,  811,  672,  738,  501,  483,  710,  804,
 /*  1230 */   798,  810,  809,  808,  527,  619,  619,  837,  761,  837,
 /*  1240 */   257,  835,  834,  709, 1283, 1283,  236,  235,  505,  745,
 /*  1250 */   683,  293,  256,  794, 1323,  184,  516,    2,   50,  570,
 /*  1260 */   337,   71,  527,  282,  798,   78,  358,   13,  798,  792,
 /*  1270 */   789,  808,  332,  836,   55,  740,  836,  811,  496,  722,
 /*  1280 */   330,   78,  509,  327,  679,  810,  809,  808,  467,   22,
 /*  1290 */   455,   52,   53,  836,  709,  511,  509,  391,   54,  835,
 /*  1300 */   834,  677,  330,  476,  793,  223,    3,  726,  339,  511,
 /*  1310 */   336,  798,  710,  497,  117,  836,  808,  510,  793,  223,
 /*  1320 */   836,  837,  811,  137,  117,  702,  117,  709,  509,  798,
 /*  1330 */   810,  809,  808,    6,  327,  679,  836,  414, 1028, 1028,
 /*  1340 */   387,  511,  466,  361,  247, 1283, 1283,  765,  804,  746,
 /*  1350 */   793,  118,  546,  615,  267,  741,  835,  834,  835,  834,
 /*  1360 */   767,  366,  577,  798,  731,  361,   13,  798,  403,  789,
 /*  1370 */   742,   68,   69,  507,  345,  366,  380,  801,  801,   66,
 /*  1380 */    66,   67,   67,   67,   67,  615,   65,   65,   65,   65,
 /*  1390 */    64,   64,   63,   63,   63,   62,  253,  732,  171,  499,
 /*  1400 */   786,  785,   68,   69,  507,  345,  678,  761,  801,  801,
 /*  1410 */    66,   66,   67,   67,   67,   67,  614,   65,   65,   65,
 /*  1420 */    65,   64,   64,   63,   63,   63,   62,  253,  572,  401,
 /*  1430 */   108,  130,  739,  450,  733,    5,   76,  676,  247,  817,
 /*  1440 */   835,  834,  836,   68,   69,  507,  345,  645,  442,  801,
 /*  1450 */   801,   66,   66,   67,   67,   67,   67,  533,   65,   65,
 /*  1460 */    65,   65,   64,   64,   63,   63,   63,   62,  253,  837,
 /*  1470 */    76,  837,  781,   68,   69,  507,  345, 1184,  659,  801,
 /*  1480 */   801,   66,   66,   67,   67,   67,   67,  606,   65,   65,
 /*  1490 */    65,   65,   64,   64,   63,   63,   63,   62,  253,  778,
 /*  1500 */   498,  252,   19,   68,   69,  507,  345,   18,  189,  801,
 /*  1510 */   801,   66,   66,   67,   67,   67,   67,   17,   65,   65,
 /*  1520 */    65,   65,   64,   64,   63,   63,   63,   62,  253,  492,
 /*  1530 */   955,  752,    5,   68,   69,  507,  345,  625,  316,  801,
 /*  1540 */   801,   66,   66,   67,   67,   67,   67,   12,   65,   65,
 /*  1550 */    65,   65,   64,   64,   63,   63,   63,   62,  253,   49,
 /*  1560 */  1199,   68,   69,  507,  345,  117,  673,  801,  801,   66,
 /*  1570 */    66,   67,   67,   67,   67,  814,   65,   65,   65,   65,
 /*  1580 */    64,   64,   63,   63,   63,   62,  253,  636,  835,  834,
 /*  1590 */   835,  834,   68,   69,  507,  345,  167,   32,  801,  801,
 /*  1600 */    66,   66,   67,   67,   67,   67,  837,   65,   65,   65,
 /*  1610 */    65,   64,   64,   63,   63,   63,   62,  253,  558, 1250,
 /*  1620 */    68,   69,  507,  345,  737,    5,  801,  801,   66,   66,
 /*  1630 */    67,   67,   67,   67,  512,   65,   65,   65,   65,   64,
 /*  1640 */    64,   63,   63,   63,   62,  253,  500, 1248,  717,  479,
 /*  1650 */    68,   69,  507,  345,  166,  837,  801,  801,   66,   66,
 /*  1660 */    67,   67,   67,   67,  110,   65,   65,   65,   65,   64,
 /*  1670 */    64,   63,   63,   63,   62,  253,  837,  165,  509,  837,
 /*  1680 */   310,  622,  509,  158,  311,  505,  509,  736,    5,  839,
 /*  1690 */   337,  511,  164,  836,  827,  511,  837,  124,  478,  511,
 /*  1700 */   793,  223,  836,  836,  793,  118,  792,  836,  793,  223,
 /*  1710 */   509,   55,  462,  837,  670,  804,  669,  117,  509,  617,
 /*  1720 */   534,  431,  704,  511,  298,  835,  834,  260,   52,   53,
 /*  1730 */   837,  511,  793,  118,  305,   54,  266,  837,  259,  699,
 /*  1740 */   793,  118,  460,    3,  388,    8,  837,  836,  798,  509,
 /*  1750 */   497,  698,  170,  808,  510,  117,   16,  366,  512,  811,
 /*  1760 */   117,  761,  511,  804,  107,  366,  798,  810,  809,  808,
 /*  1770 */   500,  793,  223,  479,  835,  834,  691,  765,  338,  509,
 /*  1780 */   377,  370,  734,    5,  534,  837,  696,  319,  375,  761,
 /*  1790 */   610,  836,  511,  604,  837,  835,  834,  761,  835,  834,
 /*  1800 */   798,  793,  231,   13,  798, 1173,  789,  473,  610,  505,
 /*  1810 */   557,  604,  726,  334,  333,  835,  834,   41,  726,  735,
 /*  1820 */     5,  605,  480,  337,  825,  836,  168,  596,  366,  689,
 /*  1830 */   792,  836,  835,  834,  804,   55,  836,  836,   83,  272,
 /*  1840 */   458,  509,  688,  557,  561,  596,  609,  448,  669,  835,
 /*  1850 */   834,  551,   52,   53,  511,   73,  835,  834,  761,   54,
 /*  1860 */   383,  837,  561,  793,  217,  835,  834,    3,  247,  247,
 /*  1870 */   721,  116,  798,  823,  497,  302,  300,  808,  510,  258,
 /*  1880 */   299,  379,  804,  811,  491,  763,  836,  408,  836,  836,
 /*  1890 */   798,  810,  809,  808,  643,  512,  509,  681,  762,  509,
 /*  1900 */   160,  449,  820,  816,  835,  834,  115,  500,  519,  511,
 /*  1910 */   765,  133,  511,  835,  834,  836,  836,  551,  793,  222,
 /*  1920 */   761,  793,  226,  806,  798,  263,  519,   13,  798,   29,
 /*  1930 */   789,  837,   68,   72,  507,  345,  836,  441,  801,  801,
 /*  1940 */    66,   66,   67,   67,   67,   67,  505,   65,   65,   65,
 /*  1950 */    65,   64,   64,   63,   63,   63,   62,  253,  649,  512,
 /*  1960 */   502,  509,   40,  728,  509,  640,  837,  792,  438,  509,
 /*  1970 */   318,  500,   55,  836,  511,  761,  836,  511,  761,   82,
 /*  1980 */   835,  834,  511,  793,  224,  724,  793,  232,  719,   52,
 /*  1990 */    53,  793,  230,  289,  837,  509,   54,  563,  836,  287,
 /*  2000 */    81,  836,   28,  559,    3,  658,  836,  433,  511,  798,
 /*  2010 */   505,  497,  836,  837,  835,  510,  837,  793,  233,  706,
 /*  2020 */   811,   80,  509,  156,  722,  512,  722,  798,  810,  809,
 /*  2030 */   808,  792,  324,  509,  285,  511,   55,  500,  555,  187,
 /*  2040 */   761,  722,  429,  761,  793,  237,  511,  836,  761,  837,
 /*  2050 */   835,  834,  618,   52,   53,  793,  274,  152,  509,  837,
 /*  2060 */    54,  798,    4,  837,   13,  798,  101,  789,    3,  315,
 /*  2070 */   712,  511,  711,  798,  761,  497,  505,  509,  808,  510,
 /*  2080 */   793,  346,   99,  509,  811,  835,  834,  264,   39,  705,
 /*  2090 */   511,  798,  810,  809,  808,  509,  511,  792,  512,  793,
 /*  2100 */   229,  761,   55,  162,   98,  793,  221,  655,  511,  378,
 /*  2110 */   500,   38,  761,  835,  834,   37,  836,  793,  207,   52,
 /*  2120 */    53,   36,  837,   97,  376,  798,   54,  105,   13,  798,
 /*  2130 */   509,  789,  835,  834,    3,  835,  834,  761,  465,  798,
 /*  2140 */   616,  497,  509,  511,  808,  510,  597,  598,  584,  505,
 /*  2150 */   811,  836,  793,  194,  592,  511,  761,  798,  810,  809,
 /*  2160 */   808,  410,  761,  587,  793,  206,  585,  169,  835,  834,
 /*  2170 */   792,  713,  621,  680,  761,   55,  571,  320,  835,  834,
 /*  2180 */    34,  612,  835,  834,  836,  579,  836,  337,  656,   14,
 /*  2190 */   836,  798,   52,   53,   13,  798,  181,  789, 1174,   54,
 /*  2200 */   836,  836,  837,  147,  295,  292,  283,    3, 1176,  761,
 /*  2210 */   552,  536,  798,  837,  497,  634,  276,  808,  510,  836,
 /*  2220 */   372,  761,  512,  811,  382,  192,  560,   92,  836,  836,
 /*  2230 */   798,  810,  809,  808,  500,  522,  535,  394,   69,  507,
 /*  2240 */   345,  835,  834,  801,  801,   66,   66,   67,   67,   67,
 /*  2250 */    67,  139,   65,   65,   65,   65,   64,   64,   63,   63,
 /*  2260 */    63,   62,  253,  314,  798,  509,  517,   13,  798,  509,
 /*  2270 */   789,  307,  404,  505,  765,  247,  836,  523,  511,   90,
 /*  2280 */   509,  243,  511,  509,  836,  836,  239,  793,  220,  369,
 /*  2290 */   836,  793,  225,  511,  792,  368,  511,  509,  508,   55,
 /*  2300 */   328,  308,  793,  364,  180,  793,  363,  262,  837,  109,
 /*  2310 */   511,  836,  423,  836,  836,  840,   52,   53,  830,  793,
 /*  2320 */   362,  835,  834,   54,  829,  836,  294,  514,  512,  430,
 /*  2330 */   291,    3,  835,  834,  608,  828,  798,  281,  497,  836,
 /*  2340 */   500,  808,  510,  836,  761,  509,  103,  811,  761,  179,
 /*  2350 */   836,  177,  509,  837,  798,  810,  809,  808,  511,  761,
 /*  2360 */   509,  513,  761,   25,  509,  511,  821,  793,  205,  837,
 /*  2370 */   253,  277,  837,  511,  793,  119,  761,  511,  175,  505,
 /*  2380 */   690,   45,  793,  204,  836,  273,  793,  203,  798,   61,
 /*  2390 */   791,   13,  798,  553,  789,  272,   27,  474,  507,  345,
 /*  2400 */   792,  341,  801,  801,   66,   66,   67,   67,   67,   67,
 /*  2410 */   186,   65,   65,   65,   65,   64,   64,   63,   63,   63,
 /*  2420 */    62,  253,   52,   53,  761,  340,   48,  835,  834,   54,
 /*  2430 */   790,  761,  509,  837,  494,   58,   84,    3,  278,  761,
 /*  2440 */   603,  268,  798,  761,  497,  511,  509,  808,  510,  335,
 /*  2450 */   251,  836,  509,  811,  793,  201,  490,  509,  760,  511,
 /*  2460 */   798,  810,  809,  808,  509,  511,  759,  390,  793,  200,
 /*  2470 */   511,  756,  835,  834,  793,  219,  750,  511,  837,  793,
 /*  2480 */   199,  244,  509,  744,  461,  562,  793,  227,  835,  834,
 /*  2490 */   136,  835,  834,  509,  798,  511,  509,   13,  798,  509,
 /*  2500 */   789,  524,  135,  458,  793,  228,  511,  685,  161,  511,
 /*  2510 */   509,  761,  511,  160,  446,  793,  218,  509,  793,  215,
 /*  2520 */   682,  793,  198,  511,  671,  761,  666,  665,  509,  385,
 /*  2530 */   511,  761,  793,  197,  662,  322,  761,  661,  766,  793,
 /*  2540 */   196,  511,  509,  761,  509,  660,  762,  509,  639,  632,
 /*  2550 */   793,  195,  835,  834,  360,  511,  631,  511,  509,  630,
 /*  2560 */   511,  761,  629,  359,  793,  208,  793,  213,  620,  793,
 /*  2570 */   212,  511,  761,  338,  155,  761,  154,  509,  761,  509,
 /*  2580 */   793,  120,  509,  102,  428,  249,  836,  132,  153,  761,
 /*  2590 */   511,  306,  511,  411,   35,  511,  761,  835,  834,  793,
 /*  2600 */   211,  793,  210,  151,  793,  216,  509,  761,  426,  509,
 /*  2610 */   100,  464,  611,  131,  150,  607,  149,  106,  185,  511,
 /*  2620 */   418,  761,  511,  761,  511,  129,  761,  417,  793,  214,
 /*  2630 */   601,  793,  202,  793,   89,  595,  405,  761,  148,  575,
 /*  2640 */   128,  402,  146,   96,  725,  400,  145,   95,  144,   94,
 /*  2650 */    93,  143,  142,   34,  545,  373,  761,  141,  761,   33,
 /*  2660 */   532,  761,  126,  125,   30,  530,  526,  140,   79,  520,
 /*  2670 */   342,  769,  506,  193,  784,  183,  730,  780,  182,  495,
 /*  2680 */   763,  720,  657,  323,  234,  761,  437,  301,  761,  355,
 /*  2690 */   761,  600,   10,  304,  424,  802,  248,  779,  768,  644,
 /*  2700 */    91,   43,  504,  343,  654,  427,  648,  749,  647,  675,
 /*  2710 */   674,  635,  837,   78, 1324, 1324, 1324, 1324,  569,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,   31,   75,    4,  142,  143,  144,   79,   80,   81,
 /*    10 */    82,   41,   16,   85,   86,   87,   88,   89,   90,   91,
 /*    20 */    92,  106,   94,   95,   96,   97,   98,   99,  100,  101,
 /*    30 */   102,  103,  104,  100,  101,  102,  103,  104,   42,   43,
 /*    40 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*    50 */   104,   55,   89,   90,   91,   92,   93,   94,   95,   96,
 /*    60 */    97,   98,   99,  100,  101,  102,  103,  104,   72,    4,
 /*    70 */   110,    4,   76,    4,  144,   79,   80,   81,   82,   83,
 /*    80 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   43,
 /*    90 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   100 */   104,  105,  172,    4,   42,   43,  178,  127,  121,  113,
 /*   110 */   130,  131,  132,  186,  118,   16,  120,   24,  129,  123,
 /*   120 */   124,  122,  123,  124,  199,  129,  127,  140,  148,  130,
 /*   130 */   131,  132,  136,  137,  138,  139,  147,  212,   98,   99,
 /*   140 */   100,  101,  102,  103,  104,   83,   84,  148,  152,  153,
 /*   150 */    89,   90,   91,   92,   55,   94,   95,   96,   97,   98,
 /*   160 */    99,  100,  101,  102,  103,  104,  170,  114,    4,  173,
 /*   170 */   174,  199,  176,  199,  121,   76,    4,  114,  113,  207,
 /*   180 */    81,   15,  113,  118,  212,  118,  212,  141,  123,  124,
 /*   190 */   123,  124,  123,  221,  222,  221,  222,   98,   99,  100,
 /*   200 */     4,  136,  135,  136,  105,  106,  113,    4,  199,  191,
 /*   210 */    44,  286,  113,  114,  196,  243,  151,  118,  123,  120,
 /*   220 */   121,  212,  123,  124,  129,  207,   60,    4,  129,  257,
 /*   230 */   258,  164,  137,  138,  139,  136,  137,  138,  139,   16,
 /*   240 */   141,  121,  121,  269,  199,  124,  207,   24,  244,  245,
 /*   250 */   278,  247,  278,  154,   21,  156,  157,  212,  199,  160,
 /*   260 */   242,  243,   98,   99,  165,  166,  167,  168,  169,  170,
 /*   270 */    37,  212,  173,  174,  154,  176,  156,  157,   55,   35,
 /*   280 */   276,  242,  243,  162,  163,  199,  187,  123,  124,  271,
 /*   290 */   272,  113,  128,  275,    0,  123,  124,   78,  212,   76,
 /*   300 */    56,  137,  138,  100,   81,  141,   62,  143,  136,  116,
 /*   310 */   271,  272,  146,  268,  275,    4,  307,  308,  300,  123,
 /*   320 */   124,   98,   99,   29,    5,  141,  123,  124,  105,  106,
 /*   330 */   134,  114,  113,  114,  295,  296,  113,  114,  121,  136,
 /*   340 */   121,  118,  170,  120,  121,  161,  123,  124,  207,   30,
 /*   350 */   114,    4,  129,  199,    9,   36,   11,  121,   13,  136,
 /*   360 */   137,  138,  139,   16,  141,  121,  212,  308,   23,  128,
 /*   370 */   129,   26,  199,  170,  114,  221,  222,  154,   59,  156,
 /*   380 */   157,  121,   63,  242,  243,  212,   88,  116,  165,  166,
 /*   390 */   167,  168,  306,  170,  221,  222,  173,  174,   53,  176,
 /*   400 */   106,  116,   55,   58,  100,  199,  103,  104,   63,   64,
 /*   410 */   187,  113,  271,  272,   69,  114,  275,   72,  212,   74,
 /*   420 */   199,    4,  121,   76,  218,  219,    4,  199,   81,  118,
 /*   430 */   257,  258,  278,  212,  123,  124,   67,  296,  116,   70,
 /*   440 */   212,  114,  221,  222,   59,   98,   99,  136,  121,  221,
 /*   450 */   222,  278,  105,  106,  109,    4,  111,    4,  129,  155,
 /*   460 */   113,  114,  158,   26,  199,  118,  312,  120,  121,  315,
 /*   470 */   123,  124,    4,  208,  209,  164,  129,  212,  257,  258,
 /*   480 */   113,  112,  115,  136,  137,  138,  139,  210,  141,  199,
 /*   490 */   114,  214,  215,  216,  149,  289,  290,   78,  233,  278,
 /*   500 */   235,  154,  212,  156,  157,  177,  278,  179,  218,  219,
 /*   510 */    42,   43,  165,  199,  167,  168,  228,  170,  230,  155,
 /*   520 */   173,  174,  158,  176,   10,  237,  212,  142,  143,  144,
 /*   530 */   185,   13,  113,  114,  187,  118,   22,  152,  153,    4,
 /*   540 */   123,  124,  314,  315,   72,  123,  124,   79,   80,   81,
 /*   550 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   560 */    92,  108,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   570 */   102,  103,  104,  113,  123,  124,  123,  124,  106,  289,
 /*   580 */   290,  164,  268,  115,  137,  138,  164,  136,  142,  143,
 /*   590 */   144,  123,   42,   43,  217,  218,  219,   79,   80,   81,
 /*   600 */    82,   51,  151,   85,   86,   87,   88,   89,   90,   91,
 /*   610 */    92,  121,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   620 */   102,  103,  104,    4,  106,    4,   78,  159,    4,   79,
 /*   630 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*   640 */    90,   91,   92,   10,   94,   95,   96,   97,   98,   99,
 /*   650 */   100,  101,  102,  103,  104,   22,   35,  114,  123,  124,
 /*   660 */   121,  113,  114,    4,  121,   67,  201,  290,   70,  121,
 /*   670 */     4,  121,  249,   52,  114,   42,   43,   56,   79,   80,
 /*   680 */    81,   82,  259,   62,   85,   86,   87,   88,   89,   90,
 /*   690 */    91,   92,  114,   94,   95,   96,   97,   98,   99,  100,
 /*   700 */   101,  102,  103,  104,   32,  170,    7,    4,  169,    4,
 /*   710 */   112,   12,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   720 */    87,   88,   89,   90,   91,   92,   54,   94,   95,   96,
 /*   730 */    97,   98,   99,  100,  101,  102,  103,  104,  119,   40,
 /*   740 */     4,    4,  123,  124,  123,  124,  114,  123,  124,    4,
 /*   750 */   285,   79,   80,   81,   82,   42,   43,   85,   86,   87,
 /*   760 */    88,   89,   90,   91,   92,  165,   94,   95,   96,   97,
 /*   770 */    98,   99,  100,  101,  102,  103,  104,  178,  180,    4,
 /*   780 */    29,    4,  123,  124,   98,   99,  165,  187,    4,  123,
 /*   790 */   124,    4,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   800 */    87,   88,   89,   90,   91,   92,  182,   94,   95,   96,
 /*   810 */    97,   98,   99,  100,  101,  102,  103,  104,  113,  113,
 /*   820 */   115,  118,  121,  137,  138,    4,  123,  124,  123,  170,
 /*   830 */   164,   79,   80,   81,   82,   42,   43,   85,   86,   87,
 /*   840 */    88,   89,   90,   91,   92,  108,   94,   95,   96,   97,
 /*   850 */    98,   99,  100,  101,  102,  103,  104,  106,  113,  123,
 /*   860 */   123,  124,  114,  118,  159,    4,  165,  115,  123,  124,
 /*   870 */     4,  135,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   880 */    87,   88,   89,   90,   91,   92,  183,   94,   95,   96,
 /*   890 */    97,   98,   99,  100,  101,  102,  103,  104,  123,  124,
 /*   900 */   123,  124,  301,  302,  117,  118,  114,  123,  124,  113,
 /*   910 */   123,  124,    4,  136,  115,   79,   80,   81,   82,  212,
 /*   920 */   213,   85,   86,   87,   88,   89,   90,   91,   92,  108,
 /*   930 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   940 */   104,  164,  106,  159,  123,  124,   78,    4,  244,  245,
 /*   950 */   175,  247,   79,   80,   81,   82,   38,  121,   85,   86,
 /*   960 */    87,   88,   89,   90,   91,   92,    4,   94,   95,   96,
 /*   970 */    97,   98,   99,  100,  101,  102,  103,  104,  199,  106,
 /*   980 */     4,  113,  114,  121,  123,  124,  114,  208,  209,  123,
 /*   990 */   124,  212,    4,  199,  121,    4,  160,  136,   14,   81,
 /*  1000 */   134,   79,   80,   81,   82,  169,  212,   85,   86,   87,
 /*  1010 */    88,   89,   90,   91,   92,  113,   94,   95,   96,   97,
 /*  1020 */    98,   99,  100,  101,  102,  103,  104,  114,  106,   26,
 /*  1030 */   114,  123,  124,  160,  121,  121,    4,  121,   79,   80,
 /*  1040 */    81,   82,  169,  121,   85,   86,   87,   88,   89,   90,
 /*  1050 */    91,   92,  121,   94,   95,   96,   97,   98,   99,  100,
 /*  1060 */   101,  102,  103,  104,  199,  106,  123,  124,  199,  204,
 /*  1070 */   108,   21,  203,  208,  209,   72,  115,  212,   28,  136,
 /*  1080 */   121,  212,  160,  113,  199,  123,  124,   37,  199,  181,
 /*  1090 */    34,  169,    4,   49,  118,  199,    4,  212,    4,  123,
 /*  1100 */   124,  212,    4,  309,  310,  311,  221,  222,  212,  106,
 /*  1110 */    16,  123,  124,   19,  123,  124,  114,  221,  222,  160,
 /*  1120 */   194,  195,    4,   79,   80,   81,   82,  136,  169,   85,
 /*  1130 */    86,   87,   88,   89,   90,   91,   92,   81,   94,   95,
 /*  1140 */    96,   97,   98,   99,  100,  101,  102,  103,  104,   55,
 /*  1150 */   106,  262,    4,  257,  258,  123,  124,  181,  214,  199,
 /*  1160 */   104,   14,   68,  278,   72,  280,  199,   46,  136,  114,
 /*  1170 */    76,  115,  212,   35,  278,   81,  121,   83,  199,  212,
 /*  1180 */     4,  221,  222,  127,  128,  129,  130,  131,  132,  133,
 /*  1190 */    52,  212,   98,   99,   56,    5,   61,    4,   35,  105,
 /*  1200 */    62,  114,   19,  147,  260,  113,  114,  113,  121,   16,
 /*  1210 */   118,  123,  118,  125,  120,  123,  124,  123,  124,   56,
 /*  1220 */    30,  123,  124,  129,   76,   62,   36,   44,  136,    4,
 /*  1230 */   136,  137,  138,  139,  136,  117,  118,    4,  278,    4,
 /*  1240 */   273,  123,  124,  151,  152,  153,   98,   99,   55,   66,
 /*  1250 */   284,  114,  273,   63,  192,  193,  194,  195,  121,  114,
 /*  1260 */   199,  113,  164,  199,  170,   72,  121,  173,  174,   76,
 /*  1270 */   176,  123,  312,  212,   81,  315,  212,  129,  207,  214,
 /*  1280 */   199,   72,  199,  317,  318,  137,  138,  139,  207,  113,
 /*  1290 */   207,   98,   99,  212,  118,  212,  199,  236,  105,  123,
 /*  1300 */   124,  284,  199,  165,  221,  222,  113,  199,  254,  212,
 /*  1310 */   256,  118,  136,  120,  243,  212,  123,  124,  221,  222,
 /*  1320 */   212,    4,  129,  199,  243,  260,  243,  151,  199,  136,
 /*  1330 */   137,  138,  139,   80,  317,  318,  212,  128,  162,  163,
 /*  1340 */   257,  212,  261,  262,  279,  152,  153,  286,  123,  166,
 /*  1350 */   221,  222,  288,  118,  257,   61,  123,  124,  123,  124,
 /*  1360 */   135,  278,   65,  170,  261,  262,  173,  174,   71,  176,
 /*  1370 */    32,   79,   80,   81,   82,  278,  268,   85,   86,   87,
 /*  1380 */    88,   89,   90,   91,   92,  150,   94,   95,   96,   97,
 /*  1390 */    98,   99,  100,  101,  102,  103,  104,  121,  269,  217,
 /*  1400 */   218,  219,   79,   80,   81,   82,  114,  278,   85,   86,
 /*  1410 */    87,   88,   89,   90,   91,   92,  183,   94,   95,   96,
 /*  1420 */    97,   98,   99,  100,  101,  102,  103,  104,  131,  199,
 /*  1430 */   113,  121,   54,  309,  310,  311,  160,  114,  279,  220,
 /*  1440 */   123,  124,  212,   79,   80,   81,   82,  228,  229,   85,
 /*  1450 */    86,   87,   88,   89,   90,   91,   92,  298,   94,   95,
 /*  1460 */    96,   97,   98,   99,  100,  101,  102,  103,  104,    4,
 /*  1470 */   160,    4,  290,   79,   80,   81,   82,  180,  114,   85,
 /*  1480 */    86,   87,   88,   89,   90,   91,   92,  170,   94,   95,
 /*  1490 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  214,
 /*  1500 */   215,  216,   14,   79,   80,   81,   82,   14,  114,   85,
 /*  1510 */    86,   87,   88,   89,   90,   91,   92,   14,   94,   95,
 /*  1520 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  207,
 /*  1530 */   114,  310,  311,   79,   80,   81,   82,  121,  114,   85,
 /*  1540 */    86,   87,   88,   89,   90,   91,   92,   14,   94,   95,
 /*  1550 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  121,
 /*  1560 */   106,   79,   80,   81,   82,  243,  212,   85,   86,   87,
 /*  1570 */    88,   89,   90,   91,   92,  221,   94,   95,   96,   97,
 /*  1580 */    98,   99,  100,  101,  102,  103,  104,  122,  123,  124,
 /*  1590 */   123,  124,   79,   80,   81,   82,   14,  115,   85,   86,
 /*  1600 */    87,   88,   89,   90,   91,   92,    4,   94,   95,   96,
 /*  1610 */    97,   98,   99,  100,  101,  102,  103,  104,  151,  106,
 /*  1620 */    79,   80,   81,   82,  310,  311,   85,   86,   87,   88,
 /*  1630 */    89,   90,   91,   92,    4,   94,   95,   96,   97,   98,
 /*  1640 */    99,  100,  101,  102,  103,  104,   16,  106,   38,   19,
 /*  1650 */    79,   80,   81,   82,  114,    4,   85,   86,   87,   88,
 /*  1660 */    89,   90,   91,   92,  113,   94,   95,   96,   97,   98,
 /*  1670 */    99,  100,  101,  102,  103,  104,    4,  114,  199,    4,
 /*  1680 */   199,  207,  199,   43,  203,   55,  199,  310,  311,  199,
 /*  1690 */   199,  212,  114,  212,  199,  212,    4,  116,   68,  212,
 /*  1700 */   221,  222,  212,  212,  221,  222,   76,  212,  221,  222,
 /*  1710 */   199,   81,  116,    4,  238,    4,  240,  243,  199,  207,
 /*  1720 */   118,   81,  162,  212,  207,  123,  124,  236,   98,   99,
 /*  1730 */     4,  212,  221,  222,  199,  105,  257,    4,  203,  100,
 /*  1740 */   221,  222,  121,  113,  257,  113,    4,  212,  118,  199,
 /*  1750 */   120,  114,  269,  123,  124,  243,  113,  278,    4,  129,
 /*  1760 */   243,  278,  212,    4,  113,  278,  136,  137,  138,  139,
 /*  1770 */    16,  221,  222,   19,  123,  124,  114,  286,  199,  199,
 /*  1780 */   269,  141,  310,  311,  182,    4,  155,  147,  269,  278,
 /*  1790 */   118,  212,  212,  118,    4,  123,  124,  278,  123,  124,
 /*  1800 */   170,  221,  222,  173,  174,  177,  176,  257,  136,   55,
 /*  1810 */   118,  136,  199,  224,  224,  123,  124,  169,  199,  310,
 /*  1820 */   311,  170,   68,  199,  199,  212,  115,  118,  278,  114,
 /*  1830 */    76,  212,  123,  124,  123,   81,  212,  212,   57,  152,
 /*  1840 */   153,  199,  114,  151,  118,  136,  238,  113,  240,  123,
 /*  1850 */   124,  118,   98,   99,  212,  113,  123,  124,  278,  105,
 /*  1860 */   236,    4,  136,  221,  222,  123,  124,  113,  279,  279,
 /*  1870 */   159,  114,  118,  199,  120,  199,  199,  123,  124,  203,
 /*  1880 */   203,  268,  123,  129,  305,  306,  212,  268,  212,  212,
 /*  1890 */   136,  137,  138,  139,  135,    4,  199,  114,  117,  199,
 /*  1900 */   188,  189,  199,  199,  123,  124,  114,   16,  118,  212,
 /*  1910 */   286,   18,  212,  123,  124,  212,  212,  184,  221,  222,
 /*  1920 */   278,  221,  222,  199,  170,   49,  136,  173,  174,  113,
 /*  1930 */   176,    4,   79,   80,   81,   82,  212,  115,   85,   86,
 /*  1940 */    87,   88,   89,   90,   91,   92,   55,   94,   95,   96,
 /*  1950 */    97,   98,   99,  100,  101,  102,  103,  104,    6,    4,
 /*  1960 */   199,  199,  113,  199,  199,    8,    4,   76,   49,  199,
 /*  1970 */   114,   16,   81,  212,  212,  278,  212,  212,  278,  113,
 /*  1980 */   123,  124,  212,  221,  222,  199,  221,  222,  199,   98,
 /*  1990 */    99,  221,  222,  199,    4,  199,  105,  203,  212,  199,
 /*  2000 */   113,  212,  113,  203,  113,  114,  212,   49,  212,  118,
 /*  2010 */    55,  120,  212,    4,  123,  124,    4,  221,  222,  162,
 /*  2020 */   129,  113,  199,  133,  214,    4,  214,  136,  137,  138,
 /*  2030 */   139,   76,  147,  199,  199,  212,   81,   16,  203,  115,
 /*  2040 */   278,  214,   81,  278,  221,  222,  212,  212,  278,    4,
 /*  2050 */   123,  124,  120,   98,   99,  221,  222,  141,  199,    4,
 /*  2060 */   105,  170,   13,    4,  173,  174,  160,  176,  113,  114,
 /*  2070 */   260,  212,  260,  118,  278,  120,   55,  199,  123,  124,
 /*  2080 */   221,  222,  146,  199,  129,  123,  124,  260,   88,  162,
 /*  2090 */   212,  136,  137,  138,  139,  199,  212,   76,    4,  221,
 /*  2100 */   222,  278,   81,  199,  171,  221,  222,  145,  212,   18,
 /*  2110 */    16,   88,  278,  123,  124,   88,  212,  221,  222,   98,
 /*  2120 */    99,   88,    4,  146,   24,  170,  105,   50,  173,  174,
 /*  2130 */   199,  176,  123,  124,  113,  123,  124,  278,  199,  118,
 /*  2140 */   150,  120,  199,  212,  123,  124,  153,  172,  136,   55,
 /*  2150 */   129,  212,  221,  222,  106,  212,  278,  136,  137,  138,
 /*  2160 */   139,   25,  278,  106,  221,  222,   61,  121,  123,  124,
 /*  2170 */    76,  199,  117,  199,  278,   81,  117,  199,  123,  124,
 /*  2180 */   171,  136,  123,  124,  212,   50,  212,  199,  199,  113,
 /*  2190 */   212,  170,   98,   99,  173,  174,  161,  176,  177,  105,
 /*  2200 */   212,  212,    4,  141,  180,  112,  199,  113,  114,  278,
 /*  2210 */   203,  114,  118,    4,  120,  199,  199,  123,  124,  212,
 /*  2220 */   203,  278,    4,  129,  236,  113,  120,  112,  212,  212,
 /*  2230 */   136,  137,  138,  139,   16,  117,  114,   48,   80,   81,
 /*  2240 */    82,  123,  124,   85,   86,   87,   88,   89,   90,   91,
 /*  2250 */    92,  110,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  2260 */   102,  103,  104,  199,  170,  199,   47,  173,  174,  199,
 /*  2270 */   176,  199,  199,   55,  286,  279,  212,  199,  212,  211,
 /*  2280 */   199,  263,  212,  199,  212,  212,  302,  221,  222,  304,
 /*  2290 */   212,  221,  222,  212,   76,  304,  212,  199,  199,   81,
 /*  2300 */   199,  199,  221,  222,  107,  221,  222,  227,    4,  227,
 /*  2310 */   212,  212,  199,  212,  212,  198,   98,   99,  198,  221,
 /*  2320 */   222,  123,  124,  105,  198,  212,  199,  198,    4,   77,
 /*  2330 */   199,  113,  123,  124,  136,   64,  118,  199,  120,  212,
 /*  2340 */    16,  123,  124,  212,  278,  199,  202,  129,  278,  200,
 /*  2350 */   212,  200,  199,    4,  136,  137,  138,  139,  212,  278,
 /*  2360 */   199,  205,  278,  121,  199,  212,  206,  221,  222,    4,
 /*  2370 */   104,  199,    4,  212,  221,  222,  278,  212,   73,   55,
 /*  2380 */    81,  177,  221,  222,  212,  281,  221,  222,  170,  279,
 /*  2390 */   245,  173,  174,  184,  176,  152,  169,  166,   81,   82,
 /*  2400 */    76,  251,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  2410 */   253,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2420 */   103,  104,   98,   99,  278,  252,  167,  123,  124,  105,
 /*  2430 */   255,  278,  199,    4,  226,  168,  113,  113,  199,  278,
 /*  2440 */   136,  287,  118,  278,  120,  212,  199,  123,  124,  254,
 /*  2450 */   104,  212,  199,  129,  221,  222,  165,  199,  255,  212,
 /*  2460 */   136,  137,  138,  139,  199,  212,  270,   45,  221,  222,
 /*  2470 */   212,  270,  123,  124,  221,  222,  313,  212,    4,  221,
 /*  2480 */   222,   27,  199,  313,  247,  136,  221,  222,  123,  124,
 /*  2490 */   266,  123,  124,  199,  170,  212,  199,  173,  174,  199,
 /*  2500 */   176,  136,  116,  153,  221,  222,  212,  266,  116,  212,
 /*  2510 */   199,  278,  212,  188,  141,  221,  222,  199,  221,  222,
 /*  2520 */   318,  221,  222,  212,  223,  278,  223,  232,  199,   39,
 /*  2530 */   212,  278,  221,  222,  225,  223,  278,  140,  170,  221,
 /*  2540 */   222,  212,  199,  278,  199,  223,  117,  199,  232,  223,
 /*  2550 */   221,  222,  123,  124,  226,  212,  223,  212,  199,  223,
 /*  2560 */   212,  278,  223,  226,  221,  222,  221,  222,  266,  221,
 /*  2570 */   222,  212,  278,  199,  116,  278,  116,  199,  278,  199,
 /*  2580 */   221,  222,  199,  202,  226,  266,  212,  202,  116,  278,
 /*  2590 */   212,  293,  212,   33,  177,  212,  278,  123,  124,  221,
 /*  2600 */   222,  221,  222,  116,  221,  222,  199,  278,  294,  199,
 /*  2610 */   239,  199,  251,   79,  116,  251,  116,  113,  274,  212,
 /*  2620 */   141,  278,  212,  278,  212,  202,  278,  251,  221,  222,
 /*  2630 */   277,  221,  222,  221,  222,  239,  266,  278,  116,  251,
 /*  2640 */   202,  266,  116,  241,  170,   77,  116,  241,  116,  241,
 /*  2650 */   241,  116,  116,  171,  288,  266,  278,  116,  278,  297,
 /*  2660 */    20,  278,  116,  116,  297,  266,  266,  116,  299,   17,
 /*  2670 */   250,  224,  282,  248,  290,  254,  265,  290,  254,  305,
 /*  2680 */   306,  267,  230,  224,  234,  278,  225,  250,  278,  197,
 /*  2690 */   278,  251,  248,  267,  267,  214,  291,  214,  214,  214,
 /*  2700 */   264,  283,  240,  246,  231,  292,  231,  316,  231,  221,
 /*  2710 */   221,  235,    4,   72,  319,  319,  319,  319,  303,
};
#define YY_SHIFT_USE_DFLT (-139)
#define YY_SHIFT_COUNT (515)
#define YY_SHIFT_MIN   (-138)
#define YY_SHIFT_MAX   (2708)
static const short yy_shift_ofst[] = {
 /*     0 */   751,   -4,  345, 1193,  472, 1094, 1754, 1630, 2094, 2094,
 /*    10 */  2094, 1003,  347, 2021, 2218, 2218, 2218, 2218, 2218, 2218,
 /*    20 */  2218, 2218, 1092,  164,  164,   -1,   99,  223, 1955, 1891,
 /*    30 */  2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
 /*    40 */  2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
 /*    50 */  2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
 /*    60 */  2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
 /*    70 */  2218, 2218, 2324,  621,  621, 1465, 1176,  385, 1781, 1465,
 /*    80 */  2368, 2368, 2368, 2429, 2368,  686,  686,  988, 1088,  468,
 /*    90 */  1056,   65, 1790, 1733,  417, 1692, 1726, 1651, 1709, 1651,
 /*   100 */  1675, 1672, 1235, 1118, 2009, 2474, 2474, 2474, 2474, 1640,
 /*   110 */  2474, 2368,  988,  988, 1088, 1712, 1712, 1687,  633,  633,
 /*   120 */  1044, 1148,   67,  311,  203, 1098,  777, 1602,  787,  976,
 /*   130 */  1317,  319,  703,  319,  745,  451,  705, 1138,  172, 2118,
 /*   140 */  2365,  624, 2209,  666, 1467, 2349, 2059, 1032,  908, 2304,
 /*   150 */  2198, 2045, 2012, 1233, 1990, 2055,  991,  866, 1962,  943,
 /*   160 */  1742,  861, 1927, 1857, 1711, 1711, 1711,  422,  784,  659,
 /*   170 */   244,  244,  775,  535,  196,  619, 1297,  962,  821,  737,
 /*   180 */   453,  988, 1163, 1163,  294, 1209,  600, 2641, 2641, 2708,
 /*   190 */  2641, 2641, -139, -139,  550,  959,  922,  873,  836,  793,
 /*   200 */   793,  793,  793,  793,  793,  793,  793,  793,  518,  672,
 /*   210 */  1541, 1513, 1482, 1454, 1424, 1394, 1364, 1323, 1292,  599,
 /*   220 */   752,  -72, 1853, 1571, 2158, 2317, 2317,  -37,   61,   61,
 /*   230 */    61,   61,  -54,   40,  -20,   95,   95,  -67,  548,  219,
 /*   240 */   166,  166,  166,  121, 1183,  120, 1190,   62,  446,  699,
 /*   250 */  1759, 1225,   69,  736,  304, 1050,  539, 1310,  918,  918,
 /*   260 */   -13, 1416,   46,  514,  918,  184,  701,  701,  514,  447,
 /*   270 */   447, 1276,  364,  328,  303, 2652, 2551, 2547, 2546, 2640,
 /*   280 */  2640, 2541, 2482, 2536, 2568, 2535, 2568, 2532, 2568, 2530,
 /*   290 */  2568, 2526, 2252, 2227, 2522, 2252, 2534, 2227, 2479, 2504,
 /*   300 */  2500, 2227, 2498, 2534, 2227, 2487, 2417, 2560, 2472, 2252,
 /*   310 */  2460, 2323, 2252, 2458, 2323, 2373, 2373, 2373, 2373, 2490,
 /*   320 */  2323, 2373, 2397, 2373, 2490, 2373, 2373, 2325, 2392, 2350,
 /*   330 */  2386, 2454, 2454, 2422, 2422, 2267, 2291, 2346, 2323, 2267,
 /*   340 */  2259, 2231, 2227, 2243, 2204, 2299, 2266, 2305, 2242, 2252,
 /*   350 */  2271, 2271, 2197, 2197, 2197, 2197, -139, -139, -139, -139,
 /*   360 */  -139, -139, -139, -139, -139, -139,  713,  598,  868,  419,
 /*   370 */  -138,  369,  -73,  298, 1145, 1137,  -70, 1087,   93, 1055,
 /*   380 */   916,  913,  543,  327,  241,  233,  -11,  301,  260,  236,
 /*   390 */   -30,  217,   53,  367, 2219, 2189, 2141, 2115, 2122, 2097,
 /*   400 */  2106, 2112, 2035, 2093, 2076, 2062, 2024, 2135, 2046, 2077,
 /*   410 */  2105, 2136, 2057, 2048, 1993, 1975, 1977, 2100, 2091, 1933,
 /*   420 */  2033, 2027, 2023, 2000, 1936, 1906, 2049, 1916, 1924, 1932,
 /*   430 */  1961, 1885, 1890, 1908, 1958, 1889, 1887, 1856, 1866, 1919,
 /*   440 */  1957, 1849, 1822, 1952, 1816, 1876, 1893, 1792, 1648, 1734,
 /*   450 */  1783, 1757, 1728, 1715, 1628, 1662, 1621, 1631, 1643, 1637,
 /*   460 */  1632, 1621, 1639, 1596, 1581, 1560, 1578, 1563, 1438, 1540,
 /*   470 */  1610, 1582, 1551, 1438, 1533, 1503, 1493, 1488, 1378, 1294,
 /*   480 */  1338, 1253, 1135, 1121, 1147, 1002,  970,  961,  931,  914,
 /*   490 */   984,  862,  872,  902,  799,  862,  792,  796,  748,  632,
 /*   500 */   706,  578,  560,  376,  490,  460,  437,  329,  322,  285,
 /*   510 */   271,  193,  178,   63,  -40,  -85,
};
#define YY_REDUCE_USE_DFLT (-76)
#define YY_REDUCE_COUNT (365)
#define YY_REDUCE_MIN   (-75)
#define YY_REDUCE_MAX   (2492)
static const short yy_reduce_ofst[] = {
 /*     0 */  1062,  -28,   18, 1083,   39,  960,  228,  154,  896,  221,
 /*    10 */   173,  141, 1550,  885, 1519, 1511, 1487, 1483, 1129, 1479,
 /*    20 */  1097,  -26, 1081,  290,  206,  265, 2412, 2410, 2407, 2383,
 /*    30 */  2380, 2378, 2359, 2348, 2345, 2343, 2329, 2318, 2311, 2300,
 /*    40 */  2297, 2294, 2283, 2265, 2258, 2253, 2247, 2233, 2165, 2161,
 /*    50 */  2153, 2146, 2098, 2084, 2081, 2070, 2066, 1943, 1931, 1896,
 /*    60 */  1884, 1878, 1859, 1834, 1823, 1796, 1770, 1765, 1762, 1700,
 /*    70 */  1697, 1642, 1580, 1124,  794,  865, 1103,    4, 2374,  779,
 /*    80 */  1988, 1624, 1491, 1579, 1061, 1182,  377,    9,  277, 1065,
 /*    90 */  1219,  889, 2017, 2007, 1835, 1800, 1794,  979, 1677,  967,
 /*   100 */  1676, 1535, 1481,  869, 1064, 1619, 1613, 1108,  314,  288,
 /*   110 */    45,  -75,   59,   86, 1285, 1017,  966,  704, 1590, 1589,
 /*   120 */  1159, 1354, 2239, 2172, 2099, 1972, 1972, 2138, 2131, 2127,
 /*   130 */  2113, 1608, 2102, 1476, 2101, 1972, 1827, 1509, 2099, 2078,
 /*   140 */  1972, 1972, 1972, 1972, 1972, 1972, 1972, 2073, 1972, 1972,
 /*   150 */  1972, 1972, 2072, 1972, 1972, 1972, 2064, 2016, 1989, 1978,
 /*   160 */  1974, 1972, 1939, 1904, 1812, 1810,  944, 1789, 1786, 1764,
 /*   170 */  1472, 1377, 1761, 1724, 1704, 1703,  465, 1674, 1625, 1495,
 /*   180 */  1490, 1230, 1314, 1221,  926, 1517, 1054, 1512, 1474,  707,
 /*   190 */  1322, 1071,  601,  423, 1996, 1996, 1996, 1996, 1996, 1996,
 /*   200 */  1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996,
 /*   210 */  1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996,
 /*   220 */  1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996,
 /*   230 */  1996, 1996, 1996, 1996, 2476, 2489, 2488, 1996, 2415, 2415,
 /*   240 */  2477, 2475, 2473, 2436, 2391, 2457, 2462, 2418, 2413, 2405,
 /*   250 */  2485, 2484, 2483, 2481, 2444, 2492, 2440, 2437, 2427, 2426,
 /*   260 */  2461, 2450, 2452, 2459, 2414, 2411, 2424, 2421, 2447, 2387,
 /*   270 */  2384, 2420, 2425, 2390, 1996, 2369, 2302, 2400, 2399, 2367,
 /*   280 */  2362, 2389, 2366, 2302, 2409, 2302, 2408, 2302, 2406, 2302,
 /*   290 */  2402, 2375, 2438, 2388, 2370, 2423, 2396, 2376, 2353, 2344,
 /*   300 */  2302, 2364, 2302, 2371, 2361, 2302, 2314, 2298, 2319, 2385,
 /*   310 */  2302, 2358, 2381, 2302, 2337, 2339, 2336, 2333, 2326, 2316,
 /*   320 */  2328, 2322, 2309, 2312, 2295, 2303, 2301, 2202, 2241, 2237,
 /*   330 */  2224, 2170, 2163, 2201, 2196, 2203, 2195, 2154, 2208, 2175,
 /*   340 */  2157, 2173, 2150, 2145, 2104, 2110, 1996, 2160, 2156, 2144,
 /*   350 */  2151, 2149, 2129, 2126, 2120, 2117, 1991, 1985, 1984, 2082,
 /*   360 */  2080, 2018, 1996, 1996, 1996, 2068,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   850, 1176, 1283, 1164, 1283, 1164, 1164, 1164, 1164, 1164,
 /*    10 */  1164, 1283, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
 /*    20 */  1164, 1164, 1028, 1322, 1322, 1322, 1164, 1164, 1164, 1164,
 /*    30 */  1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
 /*    40 */  1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
 /*    50 */  1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
 /*    60 */  1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
 /*    70 */  1164, 1164, 1114, 1299, 1299, 1322, 1021, 1322, 1322, 1322,
 /*    80 */  1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,  897, 1017,
 /*    90 */   887, 1028, 1322, 1322, 1322, 1322, 1322, 1088, 1102, 1088,
 /*   100 */  1080, 1071, 1322, 1322, 1200, 1096, 1096, 1096, 1096,  968,
 /*   110 */  1096, 1322, 1322, 1322, 1322, 1135, 1134, 1322, 1056, 1056,
 /*   120 */  1166, 1322, 1253, 1258, 1112, 1322, 1322, 1322, 1322, 1322,
 /*   130 */  1089, 1322, 1322, 1322, 1322, 1029, 1017, 1299, 1112, 1322,
 /*   140 */  1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1103,
 /*   150 */  1081, 1072, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
 /*   160 */  1322, 1322, 1322, 1322, 1017, 1017, 1017, 1322, 1322, 1322,
 /*   170 */  1299, 1299, 1322, 1113, 1322, 1322,  884, 1322, 1322, 1322,
 /*   180 */   856, 1322, 1299, 1299,  850, 1283, 1050, 1283, 1283,  892,
 /*   190 */  1283, 1283, 1276, 1007, 1066, 1166, 1166, 1166, 1166, 1170,
 /*   200 */  1171, 1034, 1076, 1064, 1177, 1068, 1067, 1169, 1166, 1166,
 /*   210 */  1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
 /*   220 */  1166, 1166, 1166, 1166, 1137, 1149, 1136, 1144, 1145, 1148,
 /*   230 */  1139, 1153, 1138, 1140, 1322, 1322, 1322, 1141, 1322, 1322,
 /*   240 */  1322, 1322, 1322, 1020, 1322,  990, 1322, 1322, 1322, 1227,
 /*   250 */  1322, 1322,  899, 1322, 1005,  859, 1075, 1018, 1046, 1046,
 /*   260 */   935,  959,  921, 1056, 1046, 1036, 1050, 1050, 1056, 1322,
 /*   270 */  1322, 1018, 1005, 1172, 1142, 1267, 1037, 1037, 1037, 1252,
 /*   280 */  1252, 1037, 1200, 1037,  981, 1037,  981, 1037,  981, 1037,
 /*   290 */   981, 1037,  881, 1075, 1037,  881,  972, 1075, 1108, 1092,
 /*   300 */  1037, 1075, 1037,  972, 1075, 1037, 1234, 1232, 1037,  881,
 /*   310 */  1037, 1185,  881, 1037, 1185,  970,  970,  970,  970,  951,
 /*   320 */  1185,  970,  935,  970,  951,  970,  970, 1318, 1037, 1322,
 /*   330 */  1037, 1309, 1309, 1059, 1059, 1065, 1050, 1191, 1185, 1065,
 /*   340 */  1063, 1060, 1075, 1322, 1322, 1166, 1143,  878,  954,  881,
 /*   350 */   867,  867,  855,  855,  855,  855, 1280, 1280, 1276,  937,
 /*   360 */   937, 1023, 1152, 1151, 1150,  908, 1178, 1322, 1322, 1322,
 /*   370 */  1322, 1322, 1322, 1201, 1322, 1322, 1322, 1322, 1322, 1322,
 /*   380 */  1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
 /*   390 */  1322, 1322, 1322, 1322, 1322,  851, 1322, 1322, 1322, 1322,
 /*   400 */  1322, 1270, 1322, 1322, 1322, 1322, 1322, 1322, 1231, 1230,
 /*   410 */  1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
 /*   420 */  1322, 1322, 1322, 1322, 1322, 1322, 1219, 1322, 1322, 1322,
 /*   430 */  1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
 /*   440 */  1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
 /*   450 */  1322, 1322, 1322, 1116, 1165, 1322,  993,  999, 1322, 1322,
 /*   460 */  1322,  994, 1322, 1322, 1322, 1322, 1322, 1322, 1175, 1322,
 /*   470 */  1322, 1322, 1322, 1061, 1322, 1322, 1322, 1322, 1322, 1322,
 /*   480 */  1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1315, 1051,
 /*   490 */  1322, 1285, 1322, 1322, 1322, 1284, 1322, 1322, 1322, 1322,
 /*   500 */  1322, 1322, 1322, 1322, 1322, 1322, 1115, 1167, 1129, 1322,
 /*   510 */  1128, 1127,  890, 1322,  865, 1322,  847,  852, 1269, 1266,
 /*   520 */  1268, 1263, 1264, 1262, 1265, 1261, 1259, 1260, 1257, 1255,
 /*   530 */  1254, 1256, 1251, 1247, 1207, 1205, 1203, 1212, 1211, 1210,
 /*   540 */  1209, 1208, 1204, 1202, 1206, 1198, 1197, 1099, 1078, 1069,
 /*   550 */   988, 1246, 1244, 1245, 1196, 1194, 1195,  987,  986,  985,
 /*   560 */   980,  979,  978,  977, 1273, 1282, 1281, 1279, 1278, 1277,
 /*   570 */  1271, 1272, 1183, 1182, 1180, 1179, 1181,  883, 1223, 1226,
 /*   580 */  1225, 1224, 1229, 1228, 1221, 1233, 1238, 1237, 1242, 1241,
 /*   590 */  1240, 1239, 1236, 1218, 1107, 1106, 1104, 1101, 1111, 1110,
 /*   600 */  1109, 1100, 1093, 1105, 1083, 1091, 1090, 1079, 1082,  973,
 /*   610 */  1074, 1070, 1073,  989, 1222,  984,  983,  982,  882,  877,
 /*   620 */  1039,  876,  875,  886,  957,  958,  966,  969,  964,  967,
 /*   630 */   963,  962,  961,  965,  960,  956,  889,  888,  898,  950,
 /*   640 */   933,  924,  891,  926,  923,  922,  927,  942,  941,  948,
 /*   650 */   947,  946,  945,  944,  940,  943,  939,  938,  928,  920,
 /*   660 */   919,  936,  918,  953,  952,  949,  917,  976,  975,  974,
 /*   670 */   971,  916,  915,  914,  913,  912,  911, 1163, 1321, 1317,
 /*   680 */  1320, 1319, 1316, 1162, 1168, 1157, 1118, 1117, 1156, 1154,
 /*   690 */  1167, 1155, 1126,  991, 1002, 1001, 1000,  997,  998, 1012,
 /*   700 */  1010, 1009, 1008, 1045, 1044, 1043, 1042, 1041, 1040, 1033,
 /*   710 */  1031, 1026, 1025, 1038, 1032, 1030, 1027, 1048, 1049, 1047,
 /*   720 */  1024, 1016, 1014, 1015, 1013, 1098, 1095, 1097, 1094, 1035,
 /*   730 */  1022, 1019, 1006, 1297, 1295, 1298, 1296, 1294, 1302, 1304,
 /*   740 */  1303, 1308, 1306, 1305, 1301, 1314, 1313, 1312, 1311, 1310,
 /*   750 */  1300, 1307, 1293, 1292, 1291, 1290, 1053, 1058, 1057, 1052,
 /*   760 */   996, 1165, 1288, 1286, 1289, 1188, 1190, 1193, 1192, 1189,
 /*   770 */  1055, 1054, 1187, 1186, 1287, 1158, 1133,  904,  902,  903,
 /*   780 */  1215, 1214, 1217, 1216, 1213,  906,  905,  901,  900, 1131,
 /*   790 */   995,  992, 1125, 1124, 1243, 1160, 1161, 1123, 1119, 1159,
 /*   800 */  1147, 1146, 1132, 1122,  893, 1120, 1130, 1121,  932,  931,
 /*   810 */   930,  929, 1004, 1003,  910,  925,  909,  907,  885,  880,
 /*   820 */   879,  874,  872,  869,  871,  868,  873,  870,  866,  864,
 /*   830 */   863,  862,  861,  860,  896,  895,  894,  890,  858,  857,
 /*   840 */   854,  853,  849,  848,  846,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "NO",            "NULLS",         "OTHERS",        "PLAN",        
  "QUERY",         "KEY",           "OF",            "OFFSET",      
  "PARTITION",     "PRAGMA",        "PRECEDING",     "RAISE",       
  "RANGE",         "RECURSIVE",     "RELEASE",       "REPLACE",     
  "RESTRICT",      "ROW",           "ROWS",          "ROLLBACK",    
  "SAVEPOINT",     "TEMP",          "TIES",          "TRIGGER",     
  "UNBOUNDED",     "VACUUM",        "VIEW",          "VIRTUAL",     
  "WITH",          "WITHOUT",       "REINDEX",       "RENAME",      
  "CTIME_KW",      "IF",            "ANY",           "OR",          
  "AND",           "NOT",           "IS",            "BETWEEN",     
  "IN",            "ISNULL",        "NOTNULL",       "NE",          
  "EQ",            "GT",            "LE",            "LT",          
  "GE",            "ESCAPE",        "BITAND",        "BITOR",       
  "LSHIFT",        "RSHIFT",        "PLUS",          "MINUS",       
  "STAR",          "SLASH",         "REM",           "CONCAT",      
  "COLLATE",       "BITNOT",        "SEMI",          "TRANSACTION", 
  "ID_TRANS",      "COMMIT",        "TO",            "CREATE",      
  "TABLE",         "LP",            "RP",            "AS",          
  "DOT",           "ID_TAB_NEW",    "ID_DB",         "CTX_ROWID_KW",
  "EXISTS",        "COMMA",         "ID_COL_NEW",    "STRING",      
  "JOIN_KW",       "ID_COL_TYPE",   "RIGHT_ASSOC",   "CONSTRAINT",  
  "DEFAULT",       "NULL",          "PRIMARY",       "UNIQUE",      
  "CHECK",         "REFERENCES",    "ID_CONSTR",     "ID_COLLATE",  
  "ID_TAB",        "INTEGER",       "FLOAT",         "BLOB",        
  "AUTOINCR",      "ON",            "INSERT",        "DELETE",      
  "UPDATE",        "ID_FK_MATCH",   "SET",           "DEFERRABLE",  
  "FOREIGN",       "DROP",          "ID_VIEW_NEW",   "ID_VIEW",     
  "SELECT",        "VALUES",        "UNION",         "ALL",         
  "EXCEPT",        "INTERSECT",     "DISTINCT",      "ID_ALIAS",    
  "FROM",          "USING",         "JOIN",          "ID_JOIN_OPTS",
  "ID_IDX",        "ORDER",         "GROUP",         "HAVING",      
  "LIMIT",         "WHERE",         "ID_COL",        "INTO",        
  "NOTHING",       "CASE",          "ID_FN",         "ID_ERR_MSG",  
  "VARIABLE",      "WHEN",          "THEN",          "ELSE",        
  "INDEX",         "ID_IDX_NEW",    "ID_PRAGMA",     "ID_TRIG_NEW", 
  "ID_TRIG",       "ALTER",         "ADD",           "WINDOW",      
  "OVER",          "FILTER",        "error",         "cmd",         
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "transtype",     "trans_opt",     "nm",          
  "savepoint_opt",  "temp",          "ifnotexists",   "fullname",    
  "columnlist",    "conslist_opt",  "table_options",  "select",      
  "column",        "columnid",      "type",          "carglist",    
  "id",            "id_opt",        "ids",           "typetoken",   
  "typename",      "signed",        "plus_num",      "minus_num",   
  "ccons",         "term",          "expr",          "onconf",      
  "sortorder",     "autoinc",       "idxlist_opt",   "refargs",     
  "defer_subclause",  "gen_always",    "refarg",        "refact",      
  "init_deferred_pred_opt",  "conslist",      "tconscomma",    "tcons",       
  "idxlist",       "defer_subclause_opt",  "resolvetype",   "orconf",      
  "raisetype",     "ifexists",      "select_stmt",   "with",        
  "selectnowith",  "oneselect",     "multiselect_op",  "values",      
  "distinct",      "selcollist",    "from",          "where_opt",   
  "groupby_opt",   "having_opt",    "orderby_opt",   "limit_opt",   
  "window_clause",  "nexprlist",     "exprlist",      "sclp",        
  "as",            "joinsrc",       "singlesrc",     "seltablist",  
  "joinop",        "joinconstr_opt",  "dbnm",          "indexed_opt", 
  "idlist",        "sortlist",      "nulls",         "delete_stmt", 
  "update_stmt",   "setlist",       "idlist_opt",    "insert_stmt", 
  "insert_cmd",    "upsert",        "exprx",         "not_opt",     
  "case_operand",  "case_exprlist",  "case_else",     "likeop",      
  "filter_over",   "uniqueflag",    "idxlist_single",  "collate",     
  "vinto",         "nmnum",         "number",        "trigger_time",
  "trigger_event",  "foreach_clause",  "when_clause",   "trigger_cmd_list",
  "trigger_cmd",   "database_kw_opt",  "key_opt",       "kwcolumn_opt",
  "create_vtab",   "vtabarglist",   "vtabarg",       "vtabargtoken",
  "anylist",       "wqlist",        "wqcte",         "windowdefn_list",
  "windowdefn",    "window",        "frame_opt",     "range_or_rows",
  "frame_bound_s",  "frame_exclude_opt",  "frame_bound_e",  "frame_bound", 
  "frame_exclude",  "filter_clause",  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= WITHOUT nm",
 /*  35 */ "table_options ::= WITHOUT CTX_ROWID_KW",
 /*  36 */ "ifnotexists ::=",
 /*  37 */ "ifnotexists ::= IF NOT EXISTS",
 /*  38 */ "temp ::= TEMP",
 /*  39 */ "temp ::=",
 /*  40 */ "columnlist ::= columnlist COMMA column",
 /*  41 */ "columnlist ::= column",
 /*  42 */ "column ::= columnid type carglist",
 /*  43 */ "columnid ::= nm",
 /*  44 */ "columnid ::= ID_COL_NEW",
 /*  45 */ "id ::= ID",
 /*  46 */ "id_opt ::= id",
 /*  47 */ "id_opt ::=",
 /*  48 */ "ids ::= ID|STRING",
 /*  49 */ "nm ::= id",
 /*  50 */ "nm ::= STRING",
 /*  51 */ "nm ::= JOIN_KW",
 /*  52 */ "type ::=",
 /*  53 */ "type ::= typetoken",
 /*  54 */ "typetoken ::= typename",
 /*  55 */ "typetoken ::= typename LP signed RP",
 /*  56 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  57 */ "typename ::= ids",
 /*  58 */ "typename ::= typename ids",
 /*  59 */ "typename ::= ID_COL_TYPE",
 /*  60 */ "signed ::= plus_num",
 /*  61 */ "signed ::= minus_num",
 /*  62 */ "carglist ::= carglist ccons",
 /*  63 */ "carglist ::=",
 /*  64 */ "ccons ::= CONSTRAINT nm",
 /*  65 */ "ccons ::= DEFAULT term",
 /*  66 */ "ccons ::= DEFAULT LP expr RP",
 /*  67 */ "ccons ::= DEFAULT PLUS term",
 /*  68 */ "ccons ::= DEFAULT MINUS term",
 /*  69 */ "ccons ::= DEFAULT id",
 /*  70 */ "ccons ::= DEFAULT CTIME_KW",
 /*  71 */ "ccons ::= NULL onconf",
 /*  72 */ "ccons ::= NOT NULL onconf",
 /*  73 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  74 */ "ccons ::= UNIQUE onconf",
 /*  75 */ "ccons ::= CHECK LP expr RP",
 /*  76 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  77 */ "ccons ::= defer_subclause",
 /*  78 */ "ccons ::= COLLATE ids",
 /*  79 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  80 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  81 */ "ccons ::= COLLATE ID_COLLATE",
 /*  82 */ "ccons ::= REFERENCES ID_TAB",
 /*  83 */ "ccons ::= CHECK LP RP",
 /*  84 */ "term ::= NULL",
 /*  85 */ "term ::= INTEGER",
 /*  86 */ "term ::= FLOAT",
 /*  87 */ "term ::= STRING|BLOB",
 /*  88 */ "gen_always ::= GENERATED ALWAYS",
 /*  89 */ "gen_always ::=",
 /*  90 */ "autoinc ::=",
 /*  91 */ "autoinc ::= AUTOINCR",
 /*  92 */ "refargs ::=",
 /*  93 */ "refargs ::= refargs refarg",
 /*  94 */ "refarg ::= MATCH nm",
 /*  95 */ "refarg ::= ON INSERT refact",
 /*  96 */ "refarg ::= ON DELETE refact",
 /*  97 */ "refarg ::= ON UPDATE refact",
 /*  98 */ "refarg ::= MATCH ID_FK_MATCH",
 /*  99 */ "refact ::= SET NULL",
 /* 100 */ "refact ::= SET DEFAULT",
 /* 101 */ "refact ::= CASCADE",
 /* 102 */ "refact ::= RESTRICT",
 /* 103 */ "refact ::= NO ACTION",
 /* 104 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 105 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 106 */ "init_deferred_pred_opt ::=",
 /* 107 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 108 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 109 */ "conslist_opt ::=",
 /* 110 */ "conslist_opt ::= COMMA conslist",
 /* 111 */ "conslist ::= conslist tconscomma tcons",
 /* 112 */ "conslist ::= tcons",
 /* 113 */ "tconscomma ::= COMMA",
 /* 114 */ "tconscomma ::=",
 /* 115 */ "tcons ::= CONSTRAINT nm",
 /* 116 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 117 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 118 */ "tcons ::= CHECK LP expr RP onconf",
 /* 119 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 120 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 121 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 122 */ "tcons ::= CHECK LP RP onconf",
 /* 123 */ "defer_subclause_opt ::=",
 /* 124 */ "defer_subclause_opt ::= defer_subclause",
 /* 125 */ "onconf ::=",
 /* 126 */ "onconf ::= ON CONFLICT resolvetype",
 /* 127 */ "orconf ::=",
 /* 128 */ "orconf ::= OR resolvetype",
 /* 129 */ "resolvetype ::= raisetype",
 /* 130 */ "resolvetype ::= IGNORE",
 /* 131 */ "resolvetype ::= REPLACE",
 /* 132 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 133 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 134 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 135 */ "ifexists ::= IF EXISTS",
 /* 136 */ "ifexists ::=",
 /* 137 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 138 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 139 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 140 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 141 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 142 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 143 */ "cmd ::= select_stmt",
 /* 144 */ "select_stmt ::= select",
 /* 145 */ "select ::= with selectnowith",
 /* 146 */ "selectnowith ::= oneselect",
 /* 147 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 148 */ "selectnowith ::= values",
 /* 149 */ "selectnowith ::= selectnowith COMMA values",
 /* 150 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 151 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 152 */ "values ::= VALUES LP nexprlist RP",
 /* 153 */ "values ::= values COMMA LP exprlist RP",
 /* 154 */ "multiselect_op ::= UNION",
 /* 155 */ "multiselect_op ::= UNION ALL",
 /* 156 */ "multiselect_op ::= EXCEPT",
 /* 157 */ "multiselect_op ::= INTERSECT",
 /* 158 */ "distinct ::= DISTINCT",
 /* 159 */ "distinct ::= ALL",
 /* 160 */ "distinct ::=",
 /* 161 */ "sclp ::= selcollist COMMA",
 /* 162 */ "sclp ::=",
 /* 163 */ "selcollist ::= sclp expr as",
 /* 164 */ "selcollist ::= sclp STAR",
 /* 165 */ "selcollist ::= sclp nm DOT STAR",
 /* 166 */ "selcollist ::= sclp",
 /* 167 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 168 */ "as ::= AS nm",
 /* 169 */ "as ::= ids",
 /* 170 */ "as ::= AS ID_ALIAS",
 /* 171 */ "as ::= ID_ALIAS",
 /* 172 */ "as ::=",
 /* 173 */ "from ::=",
 /* 174 */ "from ::= FROM joinsrc",
 /* 175 */ "joinsrc ::= singlesrc seltablist",
 /* 176 */ "joinsrc ::=",
 /* 177 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 178 */ "seltablist ::=",
 /* 179 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 180 */ "singlesrc ::= LP select RP as",
 /* 181 */ "singlesrc ::= LP joinsrc RP as",
 /* 182 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 183 */ "singlesrc ::=",
 /* 184 */ "singlesrc ::= nm DOT",
 /* 185 */ "singlesrc ::= nm DOT ID_TAB",
 /* 186 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 187 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 188 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 189 */ "joinconstr_opt ::= ON expr",
 /* 190 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 191 */ "joinconstr_opt ::=",
 /* 192 */ "dbnm ::=",
 /* 193 */ "dbnm ::= DOT nm",
 /* 194 */ "fullname ::= nm dbnm",
 /* 195 */ "joinop ::= COMMA",
 /* 196 */ "joinop ::= JOIN",
 /* 197 */ "joinop ::= JOIN_KW JOIN",
 /* 198 */ "joinop ::= JOIN_KW nm JOIN",
 /* 199 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 200 */ "joinop ::= ID_JOIN_OPTS",
 /* 201 */ "indexed_opt ::=",
 /* 202 */ "indexed_opt ::= INDEXED BY nm",
 /* 203 */ "indexed_opt ::= NOT INDEXED",
 /* 204 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 205 */ "orderby_opt ::=",
 /* 206 */ "orderby_opt ::= ORDER BY sortlist",
 /* 207 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 208 */ "sortlist ::= expr sortorder nulls",
 /* 209 */ "sortorder ::= ASC",
 /* 210 */ "sortorder ::= DESC",
 /* 211 */ "sortorder ::=",
 /* 212 */ "nulls ::= NULLS FIRST",
 /* 213 */ "nulls ::= NULLS LAST",
 /* 214 */ "nulls ::=",
 /* 215 */ "groupby_opt ::=",
 /* 216 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 217 */ "groupby_opt ::= GROUP BY",
 /* 218 */ "having_opt ::=",
 /* 219 */ "having_opt ::= HAVING expr",
 /* 220 */ "limit_opt ::=",
 /* 221 */ "limit_opt ::= LIMIT expr",
 /* 222 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 223 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 224 */ "cmd ::= delete_stmt",
 /* 225 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt",
 /* 226 */ "delete_stmt ::= with DELETE FROM",
 /* 227 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 228 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 229 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 230 */ "where_opt ::=",
 /* 231 */ "where_opt ::= WHERE expr",
 /* 232 */ "where_opt ::= WHERE",
 /* 233 */ "cmd ::= update_stmt",
 /* 234 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt",
 /* 235 */ "update_stmt ::= with UPDATE orconf",
 /* 236 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 237 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 238 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 239 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 240 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 241 */ "setlist ::= nm EQ expr",
 /* 242 */ "setlist ::= LP idlist RP EQ expr",
 /* 243 */ "setlist ::=",
 /* 244 */ "setlist ::= setlist COMMA",
 /* 245 */ "setlist ::= setlist COMMA ID_COL",
 /* 246 */ "setlist ::= ID_COL",
 /* 247 */ "idlist_opt ::=",
 /* 248 */ "idlist_opt ::= LP idlist RP",
 /* 249 */ "idlist ::= idlist COMMA nm",
 /* 250 */ "idlist ::= nm",
 /* 251 */ "idlist ::=",
 /* 252 */ "idlist ::= idlist COMMA ID_COL",
 /* 253 */ "idlist ::= ID_COL",
 /* 254 */ "cmd ::= insert_stmt",
 /* 255 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert",
 /* 256 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES",
 /* 257 */ "insert_stmt ::= with insert_cmd INTO",
 /* 258 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 259 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 260 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 261 */ "insert_cmd ::= INSERT orconf",
 /* 262 */ "insert_cmd ::= REPLACE",
 /* 263 */ "upsert ::=",
 /* 264 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 265 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 266 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 267 */ "exprx ::= nm DOT",
 /* 268 */ "exprx ::= nm DOT nm DOT",
 /* 269 */ "exprx ::= expr not_opt BETWEEN expr AND",
 /* 270 */ "exprx ::= CASE case_operand case_exprlist case_else",
 /* 271 */ "exprx ::= expr not_opt IN LP exprlist",
 /* 272 */ "exprx ::= expr not_opt IN ID_DB",
 /* 273 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 274 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 275 */ "exprx ::= nm DOT ID_TAB|ID_COL",
 /* 276 */ "exprx ::= nm DOT nm DOT ID_COL",
 /* 277 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 278 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 279 */ "exprx ::= term",
 /* 280 */ "exprx ::= CTIME_KW",
 /* 281 */ "exprx ::= LP nexprlist RP",
 /* 282 */ "exprx ::= id",
 /* 283 */ "exprx ::= JOIN_KW",
 /* 284 */ "exprx ::= nm DOT nm",
 /* 285 */ "exprx ::= nm DOT nm DOT nm",
 /* 286 */ "exprx ::= VARIABLE",
 /* 287 */ "exprx ::= expr COLLATE ids",
 /* 288 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 289 */ "exprx ::= ID LP distinct exprlist RP",
 /* 290 */ "exprx ::= ID LP STAR RP",
 /* 291 */ "exprx ::= expr AND expr",
 /* 292 */ "exprx ::= expr OR expr",
 /* 293 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 294 */ "exprx ::= expr EQ|NE expr",
 /* 295 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 296 */ "exprx ::= expr PLUS|MINUS expr",
 /* 297 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 298 */ "exprx ::= expr CONCAT expr",
 /* 299 */ "exprx ::= expr not_opt likeop expr",
 /* 300 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 301 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 302 */ "exprx ::= expr NOT NULL",
 /* 303 */ "exprx ::= expr IS not_opt expr",
 /* 304 */ "exprx ::= NOT expr",
 /* 305 */ "exprx ::= BITNOT expr",
 /* 306 */ "exprx ::= MINUS expr",
 /* 307 */ "exprx ::= PLUS expr",
 /* 308 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 309 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 310 */ "exprx ::= LP select RP",
 /* 311 */ "exprx ::= expr not_opt IN LP select RP",
 /* 312 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 313 */ "exprx ::= EXISTS LP select RP",
 /* 314 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 315 */ "exprx ::= RAISE LP IGNORE RP",
 /* 316 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 317 */ "exprx ::= ID LP distinct exprlist RP filter_over",
 /* 318 */ "exprx ::= ID LP STAR RP filter_over",
 /* 319 */ "expr ::=",
 /* 320 */ "expr ::= exprx",
 /* 321 */ "not_opt ::=",
 /* 322 */ "not_opt ::= NOT",
 /* 323 */ "likeop ::= LIKE_KW|MATCH",
 /* 324 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 325 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 326 */ "case_else ::= ELSE expr",
 /* 327 */ "case_else ::=",
 /* 328 */ "case_operand ::= exprx",
 /* 329 */ "case_operand ::=",
 /* 330 */ "exprlist ::= nexprlist",
 /* 331 */ "exprlist ::=",
 /* 332 */ "nexprlist ::= nexprlist COMMA expr",
 /* 333 */ "nexprlist ::= exprx",
 /* 334 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 335 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 336 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 337 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 338 */ "uniqueflag ::= UNIQUE",
 /* 339 */ "uniqueflag ::=",
 /* 340 */ "idxlist_opt ::=",
 /* 341 */ "idxlist_opt ::= LP idxlist RP",
 /* 342 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 343 */ "idxlist ::= idxlist_single",
 /* 344 */ "idxlist_single ::= nm collate sortorder",
 /* 345 */ "idxlist_single ::= ID_COL",
 /* 346 */ "collate ::=",
 /* 347 */ "collate ::= COLLATE ids",
 /* 348 */ "collate ::= COLLATE ID_COLLATE",
 /* 349 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 350 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 351 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 352 */ "cmd ::= VACUUM vinto",
 /* 353 */ "cmd ::= VACUUM nm vinto",
 /* 354 */ "vinto ::= INTO expr",
 /* 355 */ "vinto ::=",
 /* 356 */ "cmd ::= PRAGMA nm dbnm",
 /* 357 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 358 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 359 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 360 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 361 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 362 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 363 */ "nmnum ::= plus_num",
 /* 364 */ "nmnum ::= nm",
 /* 365 */ "nmnum ::= ON",
 /* 366 */ "nmnum ::= DELETE",
 /* 367 */ "nmnum ::= DEFAULT",
 /* 368 */ "plus_num ::= PLUS number",
 /* 369 */ "plus_num ::= number",
 /* 370 */ "minus_num ::= MINUS number",
 /* 371 */ "number ::= INTEGER",
 /* 372 */ "number ::= FLOAT",
 /* 373 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 374 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 375 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 376 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 377 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 378 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 379 */ "trigger_time ::= BEFORE",
 /* 380 */ "trigger_time ::= AFTER",
 /* 381 */ "trigger_time ::= INSTEAD OF",
 /* 382 */ "trigger_time ::=",
 /* 383 */ "trigger_event ::= DELETE",
 /* 384 */ "trigger_event ::= INSERT",
 /* 385 */ "trigger_event ::= UPDATE",
 /* 386 */ "trigger_event ::= UPDATE OF idlist",
 /* 387 */ "foreach_clause ::=",
 /* 388 */ "foreach_clause ::= FOR EACH ROW",
 /* 389 */ "when_clause ::=",
 /* 390 */ "when_clause ::= WHEN expr",
 /* 391 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 392 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 393 */ "trigger_cmd_list ::= SEMI",
 /* 394 */ "trigger_cmd ::= update_stmt",
 /* 395 */ "trigger_cmd ::= insert_stmt",
 /* 396 */ "trigger_cmd ::= delete_stmt",
 /* 397 */ "trigger_cmd ::= select_stmt",
 /* 398 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 399 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 400 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 401 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 402 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 403 */ "cmd ::= DETACH database_kw_opt expr",
 /* 404 */ "key_opt ::=",
 /* 405 */ "key_opt ::= KEY expr",
 /* 406 */ "database_kw_opt ::= DATABASE",
 /* 407 */ "database_kw_opt ::=",
 /* 408 */ "cmd ::= REINDEX",
 /* 409 */ "cmd ::= REINDEX nm dbnm",
 /* 410 */ "cmd ::= REINDEX ID_COLLATE",
 /* 411 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 412 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 413 */ "cmd ::= ANALYZE",
 /* 414 */ "cmd ::= ANALYZE nm dbnm",
 /* 415 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 416 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 417 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 418 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 419 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 420 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 421 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 422 */ "kwcolumn_opt ::=",
 /* 423 */ "kwcolumn_opt ::= COLUMNKW",
 /* 424 */ "cmd ::= create_vtab",
 /* 425 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 426 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 427 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 428 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 429 */ "vtabarglist ::= vtabarg",
 /* 430 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 431 */ "vtabarg ::=",
 /* 432 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 433 */ "vtabargtoken ::= ANY",
 /* 434 */ "vtabargtoken ::= LP anylist RP",
 /* 435 */ "anylist ::=",
 /* 436 */ "anylist ::= anylist LP anylist RP",
 /* 437 */ "anylist ::= anylist ANY",
 /* 438 */ "with ::=",
 /* 439 */ "with ::= WITH wqlist",
 /* 440 */ "with ::= WITH RECURSIVE wqlist",
 /* 441 */ "wqlist ::= wqcte",
 /* 442 */ "wqlist ::= wqlist COMMA wqcte",
 /* 443 */ "wqlist ::= ID_TAB_NEW",
 /* 444 */ "wqcte ::= nm idxlist_opt AS LP select RP",
 /* 445 */ "windowdefn_list ::= windowdefn",
 /* 446 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 447 */ "windowdefn ::= nm AS LP window RP",
 /* 448 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 449 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 450 */ "window ::= ORDER BY sortlist frame_opt",
 /* 451 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 452 */ "window ::= frame_opt",
 /* 453 */ "window ::= nm frame_opt",
 /* 454 */ "frame_opt ::=",
 /* 455 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 456 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 457 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 458 */ "frame_bound_s ::= frame_bound",
 /* 459 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 460 */ "frame_bound_e ::= frame_bound",
 /* 461 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 462 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 463 */ "frame_bound ::= CURRENT ROW",
 /* 464 */ "frame_exclude_opt ::=",
 /* 465 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 466 */ "frame_exclude ::= NO OTHERS",
 /* 467 */ "frame_exclude ::= CURRENT ROW",
 /* 468 */ "frame_exclude ::= GROUP",
 /* 469 */ "frame_exclude ::= TIES",
 /* 470 */ "window_clause ::= WINDOW windowdefn_list",
 /* 471 */ "filter_over ::= filter_clause over_clause",
 /* 472 */ "filter_over ::= over_clause",
 /* 473 */ "filter_over ::= filter_clause",
 /* 474 */ "over_clause ::= OVER LP window RP",
 /* 475 */ "over_clause ::= OVER nm",
 /* 476 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 191: /* cmd */
    case 194: /* ecmd */
    case 196: /* cmdx */
    case 242: /* select_stmt */
    case 271: /* delete_stmt */
    case 272: /* update_stmt */
    case 275: /* insert_stmt */
    case 296: /* trigger_cmd */
    case 300: /* create_vtab */
{
parser_safe_delete((yypminor->yy135));
}
      break;
    case 195: /* explain */
{
parser_safe_delete((yypminor->yy599));
}
      break;
    case 197: /* transtype */
    case 198: /* trans_opt */
{
parser_safe_delete((yypminor->yy90));
}
      break;
    case 199: /* nm */
    case 206: /* table_options */
    case 209: /* columnid */
    case 212: /* id */
    case 213: /* id_opt */
    case 214: /* ids */
    case 216: /* typename */
    case 266: /* dbnm */
    case 287: /* collate */
    case 302: /* vtabarg */
    case 303: /* vtabargtoken */
    case 304: /* anylist */
{
parser_safe_delete((yypminor->yy633));
}
      break;
    case 200: /* savepoint_opt */
    case 202: /* ifnotexists */
    case 225: /* autoinc */
    case 229: /* gen_always */
    case 234: /* tconscomma */
    case 241: /* ifexists */
    case 279: /* not_opt */
    case 285: /* uniqueflag */
    case 297: /* database_kw_opt */
    case 299: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy5));
}
      break;
    case 201: /* temp */
    case 248: /* distinct */
{
parser_safe_delete((yypminor->yy456));
}
      break;
    case 203: /* fullname */
{
parser_safe_delete((yypminor->yy280));
}
      break;
    case 204: /* columnlist */
{
parser_safe_delete((yypminor->yy218));
}
      break;
    case 205: /* conslist_opt */
    case 233: /* conslist */
{
parser_safe_delete((yypminor->yy637));
}
      break;
    case 207: /* select */
    case 244: /* selectnowith */
{
parser_safe_delete((yypminor->yy321));
}
      break;
    case 208: /* column */
{
parser_safe_delete((yypminor->yy303));
}
      break;
    case 210: /* type */
    case 215: /* typetoken */
{
parser_safe_delete((yypminor->yy499));
}
      break;
    case 211: /* carglist */
{
parser_safe_delete((yypminor->yy175));
}
      break;
    case 217: /* signed */
    case 218: /* plus_num */
    case 219: /* minus_num */
    case 221: /* term */
    case 289: /* nmnum */
    case 290: /* number */
{
parser_safe_delete((yypminor->yy381));
}
      break;
    case 220: /* ccons */
{
parser_safe_delete((yypminor->yy560));
}
      break;
    case 222: /* expr */
    case 251: /* where_opt */
    case 253: /* having_opt */
    case 278: /* exprx */
    case 280: /* case_operand */
    case 282: /* case_else */
    case 288: /* vinto */
    case 294: /* when_clause */
    case 298: /* key_opt */
{
parser_safe_delete((yypminor->yy142));
}
      break;
    case 223: /* onconf */
    case 238: /* resolvetype */
    case 239: /* orconf */
{
parser_safe_delete((yypminor->yy281));
}
      break;
    case 224: /* sortorder */
{
parser_safe_delete((yypminor->yy125));
}
      break;
    case 226: /* idxlist_opt */
    case 236: /* idxlist */
{
parser_safe_delete((yypminor->yy409));
}
      break;
    case 227: /* refargs */
{
parser_safe_delete((yypminor->yy126));
}
      break;
    case 228: /* defer_subclause */
    case 237: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy185));
}
      break;
    case 230: /* refarg */
{
parser_safe_delete((yypminor->yy519));
}
      break;
    case 231: /* refact */
{
parser_safe_delete((yypminor->yy234));
}
      break;
    case 232: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy236));
}
      break;
    case 235: /* tcons */
{
parser_safe_delete((yypminor->yy238));
}
      break;
    case 243: /* with */
{
parser_safe_delete((yypminor->yy136));
}
      break;
    case 245: /* oneselect */
{
parser_safe_delete((yypminor->yy626));
}
      break;
    case 246: /* multiselect_op */
{
parser_safe_delete((yypminor->yy250));
}
      break;
    case 247: /* values */
{
parser_safe_delete((yypminor->yy106));
}
      break;
    case 249: /* selcollist */
    case 259: /* sclp */
{
parser_safe_delete((yypminor->yy105));
}
      break;
    case 250: /* from */
    case 261: /* joinsrc */
{
parser_safe_delete((yypminor->yy487));
}
      break;
    case 252: /* groupby_opt */
    case 257: /* nexprlist */
    case 258: /* exprlist */
    case 281: /* case_exprlist */
{
parser_safe_delete((yypminor->yy197));
}
      break;
    case 254: /* orderby_opt */
    case 269: /* sortlist */
{
parser_safe_delete((yypminor->yy103));
}
      break;
    case 255: /* limit_opt */
{
parser_safe_delete((yypminor->yy224));
}
      break;
    case 256: /* window_clause */
    case 307: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy265));
}
      break;
    case 260: /* as */
{
parser_safe_delete((yypminor->yy416));
}
      break;
    case 262: /* singlesrc */
{
parser_safe_delete((yypminor->yy361));
}
      break;
    case 263: /* seltablist */
{
parser_safe_delete((yypminor->yy473));
}
      break;
    case 264: /* joinop */
{
parser_safe_delete((yypminor->yy543));
}
      break;
    case 265: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy137));
}
      break;
    case 267: /* indexed_opt */
{
parser_safe_delete((yypminor->yy378));
}
      break;
    case 268: /* idlist */
    case 274: /* idlist_opt */
    case 301: /* vtabarglist */
{
parser_safe_delete((yypminor->yy391));
}
      break;
    case 270: /* nulls */
{
parser_safe_delete((yypminor->yy55));
}
      break;
    case 273: /* setlist */
{
parser_safe_delete((yypminor->yy35));
}
      break;
    case 276: /* insert_cmd */
{
parser_safe_delete((yypminor->yy628));
}
      break;
    case 277: /* upsert */
{
parser_safe_delete((yypminor->yy610));
}
      break;
    case 283: /* likeop */
{
parser_safe_delete((yypminor->yy496));
}
      break;
    case 284: /* filter_over */
{
parser_safe_delete((yypminor->yy357));
}
      break;
    case 286: /* idxlist_single */
{
parser_safe_delete((yypminor->yy102));
}
      break;
    case 291: /* trigger_time */
{
parser_safe_delete((yypminor->yy614));
}
      break;
    case 292: /* trigger_event */
{
parser_safe_delete((yypminor->yy375));
}
      break;
    case 293: /* foreach_clause */
{
parser_safe_delete((yypminor->yy500));
}
      break;
    case 295: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy462));
}
      break;
    case 305: /* wqlist */
{
parser_safe_delete((yypminor->yy442));
}
      break;
    case 306: /* wqcte */
{
parser_safe_delete((yypminor->yy28));
}
      break;
    case 308: /* windowdefn */
{
parser_safe_delete((yypminor->yy52));
}
      break;
    case 309: /* window */
{
parser_safe_delete((yypminor->yy322));
}
      break;
    case 310: /* frame_opt */
{
parser_safe_delete((yypminor->yy349));
}
      break;
    case 311: /* range_or_rows */
{
parser_safe_delete((yypminor->yy534));
}
      break;
    case 312: /* frame_bound_s */
    case 314: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy127));
}
      break;
    case 315: /* frame_bound */
{
parser_safe_delete((yypminor->yy127));parser_safe_delete((yypminor->yy127));parser_safe_delete((yypminor->yy127));
}
      break;
    case 317: /* filter_clause */
{
parser_safe_delete((yypminor->yy525));
}
      break;
    case 318: /* over_clause */
{
parser_safe_delete((yypminor->yy23));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   UNUSED(yypMinor);
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 192, 1 },
  { 193, 2 },
  { 193, 1 },
  { 194, 1 },
  { 194, 3 },
  { 195, 0 },
  { 195, 1 },
  { 195, 3 },
  { 196, 1 },
  { 191, 3 },
  { 198, 0 },
  { 198, 1 },
  { 198, 2 },
  { 198, 2 },
  { 197, 0 },
  { 197, 1 },
  { 197, 1 },
  { 197, 1 },
  { 191, 2 },
  { 191, 2 },
  { 191, 2 },
  { 200, 1 },
  { 200, 0 },
  { 191, 2 },
  { 191, 3 },
  { 191, 5 },
  { 191, 2 },
  { 191, 3 },
  { 191, 5 },
  { 191, 10 },
  { 191, 7 },
  { 191, 7 },
  { 191, 5 },
  { 206, 0 },
  { 206, 2 },
  { 206, 2 },
  { 202, 0 },
  { 202, 3 },
  { 201, 1 },
  { 201, 0 },
  { 204, 3 },
  { 204, 1 },
  { 208, 3 },
  { 209, 1 },
  { 209, 1 },
  { 212, 1 },
  { 213, 1 },
  { 213, 0 },
  { 214, 1 },
  { 199, 1 },
  { 199, 1 },
  { 199, 1 },
  { 210, 0 },
  { 210, 1 },
  { 215, 1 },
  { 215, 4 },
  { 215, 6 },
  { 216, 1 },
  { 216, 2 },
  { 216, 1 },
  { 217, 1 },
  { 217, 1 },
  { 211, 2 },
  { 211, 0 },
  { 220, 2 },
  { 220, 2 },
  { 220, 4 },
  { 220, 3 },
  { 220, 3 },
  { 220, 2 },
  { 220, 2 },
  { 220, 2 },
  { 220, 3 },
  { 220, 5 },
  { 220, 2 },
  { 220, 4 },
  { 220, 4 },
  { 220, 1 },
  { 220, 2 },
  { 220, 6 },
  { 220, 2 },
  { 220, 2 },
  { 220, 2 },
  { 220, 3 },
  { 221, 1 },
  { 221, 1 },
  { 221, 1 },
  { 221, 1 },
  { 229, 2 },
  { 229, 0 },
  { 225, 0 },
  { 225, 1 },
  { 227, 0 },
  { 227, 2 },
  { 230, 2 },
  { 230, 3 },
  { 230, 3 },
  { 230, 3 },
  { 230, 2 },
  { 231, 2 },
  { 231, 2 },
  { 231, 1 },
  { 231, 1 },
  { 231, 2 },
  { 228, 3 },
  { 228, 2 },
  { 232, 0 },
  { 232, 2 },
  { 232, 2 },
  { 205, 0 },
  { 205, 2 },
  { 233, 3 },
  { 233, 1 },
  { 234, 1 },
  { 234, 0 },
  { 235, 2 },
  { 235, 7 },
  { 235, 5 },
  { 235, 5 },
  { 235, 10 },
  { 235, 2 },
  { 235, 7 },
  { 235, 4 },
  { 237, 0 },
  { 237, 1 },
  { 223, 0 },
  { 223, 3 },
  { 239, 0 },
  { 239, 2 },
  { 238, 1 },
  { 238, 1 },
  { 238, 1 },
  { 191, 4 },
  { 191, 6 },
  { 191, 4 },
  { 241, 2 },
  { 241, 0 },
  { 191, 8 },
  { 191, 7 },
  { 191, 5 },
  { 191, 4 },
  { 191, 6 },
  { 191, 4 },
  { 191, 1 },
  { 242, 1 },
  { 207, 2 },
  { 244, 1 },
  { 244, 3 },
  { 244, 1 },
  { 244, 3 },
  { 245, 9 },
  { 245, 10 },
  { 247, 4 },
  { 247, 5 },
  { 246, 1 },
  { 246, 2 },
  { 246, 1 },
  { 246, 1 },
  { 248, 1 },
  { 248, 1 },
  { 248, 0 },
  { 259, 2 },
  { 259, 0 },
  { 249, 3 },
  { 249, 2 },
  { 249, 4 },
  { 249, 1 },
  { 249, 4 },
  { 260, 2 },
  { 260, 1 },
  { 260, 2 },
  { 260, 1 },
  { 260, 0 },
  { 250, 0 },
  { 250, 2 },
  { 261, 2 },
  { 261, 0 },
  { 263, 4 },
  { 263, 0 },
  { 262, 4 },
  { 262, 4 },
  { 262, 4 },
  { 262, 6 },
  { 262, 0 },
  { 262, 2 },
  { 262, 3 },
  { 262, 1 },
  { 262, 3 },
  { 262, 1 },
  { 265, 2 },
  { 265, 4 },
  { 265, 0 },
  { 266, 0 },
  { 266, 2 },
  { 203, 2 },
  { 264, 1 },
  { 264, 1 },
  { 264, 2 },
  { 264, 3 },
  { 264, 4 },
  { 264, 1 },
  { 267, 0 },
  { 267, 3 },
  { 267, 2 },
  { 267, 3 },
  { 254, 0 },
  { 254, 3 },
  { 269, 5 },
  { 269, 3 },
  { 224, 1 },
  { 224, 1 },
  { 224, 0 },
  { 270, 2 },
  { 270, 2 },
  { 270, 0 },
  { 252, 0 },
  { 252, 3 },
  { 252, 2 },
  { 253, 0 },
  { 253, 2 },
  { 255, 0 },
  { 255, 2 },
  { 255, 4 },
  { 255, 4 },
  { 191, 1 },
  { 271, 6 },
  { 271, 3 },
  { 271, 5 },
  { 271, 6 },
  { 271, 4 },
  { 251, 0 },
  { 251, 2 },
  { 251, 1 },
  { 191, 1 },
  { 272, 9 },
  { 272, 3 },
  { 272, 5 },
  { 272, 6 },
  { 272, 4 },
  { 273, 5 },
  { 273, 7 },
  { 273, 3 },
  { 273, 5 },
  { 273, 0 },
  { 273, 2 },
  { 273, 3 },
  { 273, 1 },
  { 274, 0 },
  { 274, 3 },
  { 268, 3 },
  { 268, 1 },
  { 268, 0 },
  { 268, 3 },
  { 268, 1 },
  { 191, 1 },
  { 275, 7 },
  { 275, 7 },
  { 275, 3 },
  { 275, 5 },
  { 275, 4 },
  { 275, 6 },
  { 276, 2 },
  { 276, 1 },
  { 277, 0 },
  { 277, 11 },
  { 277, 8 },
  { 277, 4 },
  { 278, 2 },
  { 278, 4 },
  { 278, 5 },
  { 278, 4 },
  { 278, 5 },
  { 278, 4 },
  { 278, 6 },
  { 278, 1 },
  { 278, 3 },
  { 278, 5 },
  { 278, 3 },
  { 278, 6 },
  { 278, 1 },
  { 278, 1 },
  { 278, 3 },
  { 278, 1 },
  { 278, 1 },
  { 278, 3 },
  { 278, 5 },
  { 278, 1 },
  { 278, 3 },
  { 278, 6 },
  { 278, 5 },
  { 278, 4 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 4 },
  { 278, 6 },
  { 278, 2 },
  { 278, 3 },
  { 278, 4 },
  { 278, 2 },
  { 278, 2 },
  { 278, 2 },
  { 278, 2 },
  { 278, 6 },
  { 278, 6 },
  { 278, 3 },
  { 278, 6 },
  { 278, 5 },
  { 278, 4 },
  { 278, 5 },
  { 278, 4 },
  { 278, 6 },
  { 278, 6 },
  { 278, 5 },
  { 222, 0 },
  { 222, 1 },
  { 279, 0 },
  { 279, 1 },
  { 283, 1 },
  { 281, 5 },
  { 281, 4 },
  { 282, 2 },
  { 282, 0 },
  { 280, 1 },
  { 280, 0 },
  { 258, 1 },
  { 258, 0 },
  { 257, 3 },
  { 257, 1 },
  { 191, 12 },
  { 191, 8 },
  { 191, 7 },
  { 191, 5 },
  { 285, 1 },
  { 285, 0 },
  { 226, 0 },
  { 226, 3 },
  { 236, 3 },
  { 236, 1 },
  { 286, 3 },
  { 286, 1 },
  { 287, 0 },
  { 287, 2 },
  { 287, 2 },
  { 191, 4 },
  { 191, 6 },
  { 191, 4 },
  { 191, 2 },
  { 191, 3 },
  { 288, 2 },
  { 288, 0 },
  { 191, 3 },
  { 191, 5 },
  { 191, 6 },
  { 191, 5 },
  { 191, 6 },
  { 191, 4 },
  { 191, 2 },
  { 289, 1 },
  { 289, 1 },
  { 289, 1 },
  { 289, 1 },
  { 289, 1 },
  { 218, 2 },
  { 218, 1 },
  { 219, 2 },
  { 290, 1 },
  { 290, 1 },
  { 191, 15 },
  { 191, 12 },
  { 191, 14 },
  { 191, 10 },
  { 191, 7 },
  { 191, 5 },
  { 291, 1 },
  { 291, 1 },
  { 291, 2 },
  { 291, 0 },
  { 292, 1 },
  { 292, 1 },
  { 292, 1 },
  { 292, 3 },
  { 293, 0 },
  { 293, 3 },
  { 294, 0 },
  { 294, 2 },
  { 295, 3 },
  { 295, 2 },
  { 295, 1 },
  { 296, 1 },
  { 296, 1 },
  { 296, 1 },
  { 296, 1 },
  { 240, 1 },
  { 191, 4 },
  { 191, 6 },
  { 191, 4 },
  { 191, 6 },
  { 191, 3 },
  { 298, 0 },
  { 298, 2 },
  { 297, 1 },
  { 297, 0 },
  { 191, 1 },
  { 191, 3 },
  { 191, 2 },
  { 191, 4 },
  { 191, 2 },
  { 191, 1 },
  { 191, 3 },
  { 191, 4 },
  { 191, 2 },
  { 191, 6 },
  { 191, 6 },
  { 191, 6 },
  { 191, 5 },
  { 191, 3 },
  { 299, 0 },
  { 299, 1 },
  { 191, 1 },
  { 300, 8 },
  { 300, 11 },
  { 300, 7 },
  { 300, 5 },
  { 301, 1 },
  { 301, 3 },
  { 302, 0 },
  { 302, 2 },
  { 303, 1 },
  { 303, 3 },
  { 304, 0 },
  { 304, 4 },
  { 304, 2 },
  { 243, 0 },
  { 243, 2 },
  { 243, 3 },
  { 305, 1 },
  { 305, 3 },
  { 305, 1 },
  { 306, 6 },
  { 307, 1 },
  { 307, 3 },
  { 308, 5 },
  { 309, 5 },
  { 309, 6 },
  { 309, 4 },
  { 309, 5 },
  { 309, 1 },
  { 309, 2 },
  { 310, 0 },
  { 310, 3 },
  { 310, 6 },
  { 311, 1 },
  { 312, 1 },
  { 312, 2 },
  { 314, 1 },
  { 314, 2 },
  { 315, 2 },
  { 315, 2 },
  { 313, 0 },
  { 313, 2 },
  { 316, 2 },
  { 316, 2 },
  { 316, 1 },
  { 316, 1 },
  { 256, 2 },
  { 284, 2 },
  { 284, 1 },
  { 284, 1 },
  { 318, 4 },
  { 318, 2 },
  { 317, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy135); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy135);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy135 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy135 = yymsp[-1].minor.yy135;
                                                yygotominor.yy135->explain = yymsp[-2].minor.yy599->explain;
                                                yygotominor.yy135->queryPlan = yymsp[-2].minor.yy599->queryPlan;
                                                delete yymsp[-2].minor.yy599;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy599 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy599 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy599 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 394: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==394);
      case 395: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==395);
      case 396: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==396);
      case 397: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==397);
      case 424: /* cmd ::= create_vtab */ yytestcase(yyruleno==424);
{yygotominor.yy135 = yymsp[0].minor.yy135;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy135 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy90->type,
                                                        yymsp[0].minor.yy90->transactionKw,
                                                        yymsp[0].minor.yy90->name
                                                    );
                                                delete yymsp[0].minor.yy90;
                                                delete yymsp[-1].minor.yy90;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy90 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy90 = new ParserStubTransDetails();
                                                yygotominor.yy90->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy90 = new ParserStubTransDetails();
                                                yygotominor.yy90->transactionKw = true;
                                                yygotominor.yy90->name = *(yymsp[0].minor.yy633);
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy90 = new ParserStubTransDetails();
                                                yygotominor.yy90->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy90 = new ParserStubTransDetails();
                                                yygotominor.yy90->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy90 = new ParserStubTransDetails();
                                                yygotominor.yy90->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy135 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy90->transactionKw,
                                                        yymsp[0].minor.yy90->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy90;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy135 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy90->transactionKw,
                                                        yymsp[0].minor.yy90->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy90;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy135 = new SqliteRollback(
                                                        yymsp[0].minor.yy90->transactionKw,
                                                        yymsp[0].minor.yy90->name
                                                    );
                                                delete yymsp[0].minor.yy90;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 37: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==37);
      case 88: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==88);
      case 91: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==91);
      case 113: /* tconscomma ::= COMMA */ yytestcase(yyruleno==113);
      case 135: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==135);
      case 322: /* not_opt ::= NOT */ yytestcase(yyruleno==322);
      case 338: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==338);
      case 406: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==406);
      case 422: /* kwcolumn_opt ::= */ yytestcase(yyruleno==422);
{yygotominor.yy5 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 36: /* ifnotexists ::= */ yytestcase(yyruleno==36);
      case 89: /* gen_always ::= */ yytestcase(yyruleno==89);
      case 90: /* autoinc ::= */ yytestcase(yyruleno==90);
      case 114: /* tconscomma ::= */ yytestcase(yyruleno==114);
      case 136: /* ifexists ::= */ yytestcase(yyruleno==136);
      case 321: /* not_opt ::= */ yytestcase(yyruleno==321);
      case 339: /* uniqueflag ::= */ yytestcase(yyruleno==339);
      case 407: /* database_kw_opt ::= */ yytestcase(yyruleno==407);
      case 423: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==423);
{yygotominor.yy5 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy135 = new SqliteSavepoint(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy135 = new SqliteRelease(*(yymsp[-1].minor.yy5), *(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy135 = new SqliteRollback(
                                                        yymsp[-3].minor.yy90->transactionKw,
                                                        *(yymsp[-1].minor.yy5),
                                                        *(yymsp[0].minor.yy633)
                                                    );
                                                delete yymsp[-1].minor.yy5;
                                                delete yymsp[-3].minor.yy90;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,200,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy135 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy5),
                                                        *(yymsp[-8].minor.yy456),
                                                        yymsp[-5].minor.yy280->name1,
                                                        yymsp[-5].minor.yy280->name2,
                                                        *(yymsp[-3].minor.yy218),
                                                        *(yymsp[-2].minor.yy637),
                                                        *(yymsp[0].minor.yy633)
                                                    );
                                                delete yymsp[-6].minor.yy5;
                                                delete yymsp[-8].minor.yy456;
                                                delete yymsp[-3].minor.yy218;
                                                delete yymsp[-2].minor.yy637;
                                                delete yymsp[-5].minor.yy280;
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy135 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy5),
                                                        *(yymsp[-5].minor.yy456),
                                                        yymsp[-2].minor.yy280->name1,
                                                        yymsp[-2].minor.yy280->name2,
                                                        yymsp[0].minor.yy321
                                                    );
                                                delete yymsp[-3].minor.yy5;
                                                delete yymsp[-5].minor.yy456;
                                                delete yymsp[-2].minor.yy280;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 138: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==138);
      case 377: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==377);
{  yy_destructor(yypParser,201,&yymsp[-5].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 139: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==139);
      case 378: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==378);
{  yy_destructor(yypParser,201,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
      case 192: /* dbnm ::= */ yytestcase(yyruleno==192);
      case 346: /* collate ::= */ yytestcase(yyruleno==346);
      case 431: /* vtabarg ::= */ yytestcase(yyruleno==431);
      case 435: /* anylist ::= */ yytestcase(yyruleno==435);
{yygotominor.yy633 = new QString();}
        break;
      case 34: /* table_options ::= WITHOUT nm */
      case 35: /* table_options ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==35);
{
                                                if (yymsp[0].minor.yy633->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy633)));

                                                yygotominor.yy633 = yymsp[0].minor.yy633;
                                            }
        break;
      case 38: /* temp ::= TEMP */
{yygotominor.yy456 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 39: /* temp ::= */
      case 160: /* distinct ::= */ yytestcase(yyruleno==160);
{yygotominor.yy456 = new int(0);}
        break;
      case 40: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy218->append(yymsp[0].minor.yy303);
                                                yygotominor.yy218 = yymsp[-2].minor.yy218;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 41: /* columnlist ::= column */
{
                                                yygotominor.yy218 = new ParserCreateTableColumnList();
                                                yygotominor.yy218->append(yymsp[0].minor.yy303);
                                            }
        break;
      case 42: /* column ::= columnid type carglist */
{
                                                yygotominor.yy303 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy633), yymsp[-1].minor.yy499, *(yymsp[0].minor.yy175));
												yygotominor.yy303->fixTypeVsGeneratedAs();
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[0].minor.yy175;
                                                objectForTokens = yygotominor.yy303;
                                            }
        break;
      case 43: /* columnid ::= nm */
      case 44: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==44);
      case 49: /* nm ::= id */ yytestcase(yyruleno==49);
      case 57: /* typename ::= ids */ yytestcase(yyruleno==57);
      case 193: /* dbnm ::= DOT nm */ yytestcase(yyruleno==193);
      case 347: /* collate ::= COLLATE ids */ yytestcase(yyruleno==347);
      case 348: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==348);
{yygotominor.yy633 = yymsp[0].minor.yy633;}
        break;
      case 45: /* id ::= ID */
{
                                                yygotominor.yy633 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 46: /* id_opt ::= id */
{
                                                yygotominor.yy633 = yymsp[0].minor.yy633;
                                            }
        break;
      case 47: /* id_opt ::= */
{
                                                yygotominor.yy633 = new QString();
                                            }
        break;
      case 48: /* ids ::= ID|STRING */
      case 51: /* nm ::= JOIN_KW */ yytestcase(yyruleno==51);
{yygotominor.yy633 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 50: /* nm ::= STRING */
{yygotominor.yy633 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 52: /* type ::= */
{yygotominor.yy499 = nullptr;}
        break;
      case 53: /* type ::= typetoken */
{yygotominor.yy499 = yymsp[0].minor.yy499;}
        break;
      case 54: /* typetoken ::= typename */
{
                                                yygotominor.yy499 = new SqliteColumnType(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy499;
                                            }
        break;
      case 55: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy499 = new SqliteColumnType(*(yymsp[-3].minor.yy633), *(yymsp[-1].minor.yy381));
                                                delete yymsp[-3].minor.yy633;
                                                delete yymsp[-1].minor.yy381;
                                                objectForTokens = yygotominor.yy499;
                                            }
        break;
      case 56: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy499 = new SqliteColumnType(*(yymsp[-5].minor.yy633), *(yymsp[-3].minor.yy381), *(yymsp[-1].minor.yy381));
                                                delete yymsp[-5].minor.yy633;
                                                delete yymsp[-3].minor.yy381;
                                                delete yymsp[-1].minor.yy381;
                                                objectForTokens = yygotominor.yy499;
                                            }
        break;
      case 58: /* typename ::= typename ids */
      case 59: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==59);
{
                                                yymsp[-1].minor.yy633->append(" " + *(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                yygotominor.yy633 = yymsp[-1].minor.yy633;
                                            }
        break;
      case 60: /* signed ::= plus_num */
      case 61: /* signed ::= minus_num */ yytestcase(yyruleno==61);
      case 363: /* nmnum ::= plus_num */ yytestcase(yyruleno==363);
      case 368: /* plus_num ::= PLUS number */ yytestcase(yyruleno==368);
      case 369: /* plus_num ::= number */ yytestcase(yyruleno==369);
{yygotominor.yy381 = yymsp[0].minor.yy381;}
        break;
      case 62: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy175->append(yymsp[0].minor.yy560);
                                                yygotominor.yy175 = yymsp[-1].minor.yy175;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 63: /* carglist ::= */
{yygotominor.yy175 = new ParserCreateTableColumnConstraintList();}
        break;
      case 64: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefNameOnly(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 65: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefTerm(*(yymsp[0].minor.yy381));
                                                delete yymsp[0].minor.yy381;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 66: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefExpr(yymsp[-1].minor.yy142);
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 67: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefTerm(*(yymsp[0].minor.yy381), false);
                                                delete yymsp[0].minor.yy381;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 68: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefTerm(*(yymsp[0].minor.yy381), true);
                                                delete yymsp[0].minor.yy381;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefId(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 71: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initNull(*(yymsp[0].minor.yy281));
                                                delete yymsp[0].minor.yy281;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 72: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initNotNull(*(yymsp[0].minor.yy281));
                                                delete yymsp[0].minor.yy281;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 73: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initPk(*(yymsp[-2].minor.yy125), *(yymsp[-1].minor.yy281), *(yymsp[0].minor.yy5));
                                                delete yymsp[-2].minor.yy125;
                                                delete yymsp[0].minor.yy5;
                                                delete yymsp[-1].minor.yy281;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 74: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initUnique(*(yymsp[0].minor.yy281));
                                                delete yymsp[0].minor.yy281;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 75: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initCheck(yymsp[-1].minor.yy142);
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 76: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initFk(*(yymsp[-2].minor.yy633), *(yymsp[-1].minor.yy409), *(yymsp[0].minor.yy126));
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[0].minor.yy126;
                                                delete yymsp[-1].minor.yy409;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 77: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initDefer(yymsp[0].minor.yy185->initially, yymsp[0].minor.yy185->deferrable);
                                                delete yymsp[0].minor.yy185;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 78: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initColl(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy560;
                                            }
        break;
      case 79: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 80: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==80);
      case 81: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==81);
      case 82: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==82);
{
                                                if (!yymsp[0].minor.yy633->isNull() && yymsp[0].minor.yy633->toLower() != "stored" && yymsp[0].minor.yy633->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy633)));

                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy560->initGeneratedAs(yymsp[-2].minor.yy142, *(yymsp[-5].minor.yy5), *(yymsp[0].minor.yy633));
												delete yymsp[-5].minor.yy5;
												delete yymsp[0].minor.yy633;
												objectForTokens = yygotominor.yy560;
											}
        break;
      case 83: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy560 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy560->initCheck();
                                                objectForTokens = yygotominor.yy560;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 84: /* term ::= NULL */
{yygotominor.yy381 = new QVariant();}
        break;
      case 85: /* term ::= INTEGER */
      case 371: /* number ::= INTEGER */ yytestcase(yyruleno==371);
{yygotominor.yy381 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 86: /* term ::= FLOAT */
      case 372: /* number ::= FLOAT */ yytestcase(yyruleno==372);
{yygotominor.yy381 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 87: /* term ::= STRING|BLOB */
      case 365: /* nmnum ::= ON */ yytestcase(yyruleno==365);
      case 366: /* nmnum ::= DELETE */ yytestcase(yyruleno==366);
      case 367: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==367);
{yygotominor.yy381 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 92: /* refargs ::= */
{yygotominor.yy126 = new ParserFkConditionList();}
        break;
      case 93: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy126->append(yymsp[0].minor.yy519);
                                                yygotominor.yy126 = yymsp[-1].minor.yy126;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 94: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy519 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 95: /* refarg ::= ON INSERT refact */
{yygotominor.yy519 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy234)); delete yymsp[0].minor.yy234;}
        break;
      case 96: /* refarg ::= ON DELETE refact */
{yygotominor.yy519 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy234)); delete yymsp[0].minor.yy234;}
        break;
      case 97: /* refarg ::= ON UPDATE refact */
      case 98: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==98);
{yygotominor.yy519 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy234)); delete yymsp[0].minor.yy234;}
        break;
      case 99: /* refact ::= SET NULL */
{yygotominor.yy234 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 100: /* refact ::= SET DEFAULT */
{yygotominor.yy234 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 101: /* refact ::= CASCADE */
{yygotominor.yy234 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 102: /* refact ::= RESTRICT */
{yygotominor.yy234 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 103: /* refact ::= NO ACTION */
{yygotominor.yy234 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 104: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy185 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy236));
                                                delete yymsp[0].minor.yy236;
                                            }
        break;
      case 105: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy185 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy236));
                                                delete yymsp[0].minor.yy236;
                                            }
        break;
      case 106: /* init_deferred_pred_opt ::= */
{yygotominor.yy236 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 107: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy236 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 108: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy236 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 109: /* conslist_opt ::= */
{yygotominor.yy637 = new ParserCreateTableConstraintList();}
        break;
      case 110: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy637 = yymsp[0].minor.yy637;}
        break;
      case 111: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy238->afterComma = *(yymsp[-1].minor.yy5);
                                                yymsp[-2].minor.yy637->append(yymsp[0].minor.yy238);
                                                yygotominor.yy637 = yymsp[-2].minor.yy637;
                                                delete yymsp[-1].minor.yy5;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 112: /* conslist ::= tcons */
{
                                                yygotominor.yy637 = new ParserCreateTableConstraintList();
                                                yygotominor.yy637->append(yymsp[0].minor.yy238);
                                            }
        break;
      case 115: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy238 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy238->initNameOnly(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy238;
                                            }
        break;
      case 116: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy238 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy238->initPk(*(yymsp[-3].minor.yy409), *(yymsp[-2].minor.yy5), *(yymsp[0].minor.yy281));
                                                delete yymsp[-2].minor.yy5;
                                                delete yymsp[0].minor.yy281;
                                                delete yymsp[-3].minor.yy409;
                                                objectForTokens = yygotominor.yy238;
                                            }
        break;
      case 117: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy238 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy238->initUnique(*(yymsp[-2].minor.yy409), *(yymsp[0].minor.yy281));
                                                delete yymsp[0].minor.yy281;
                                                delete yymsp[-2].minor.yy409;
                                                objectForTokens = yygotominor.yy238;
                                            }
        break;
      case 118: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy238 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy238->initCheck(yymsp[-2].minor.yy142, *(yymsp[0].minor.yy281));
                                                objectForTokens = yygotominor.yy238;
                                            }
        break;
      case 119: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 120: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==120);
      case 121: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==121);
{
                                                yygotominor.yy238 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy238->initFk(
                                                    *(yymsp[-6].minor.yy409),
                                                    *(yymsp[-3].minor.yy633),
                                                    *(yymsp[-2].minor.yy409),
                                                    *(yymsp[-1].minor.yy126),
                                                    yymsp[0].minor.yy185->initially,
                                                    yymsp[0].minor.yy185->deferrable
                                                );
                                                delete yymsp[-3].minor.yy633;
                                                delete yymsp[-1].minor.yy126;
                                                delete yymsp[0].minor.yy185;
                                                delete yymsp[-2].minor.yy409;
                                                delete yymsp[-6].minor.yy409;
                                                objectForTokens = yygotominor.yy238;
                                            }
        break;
      case 122: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy238 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy238->initCheck();
                                                objectForTokens = yygotominor.yy238;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,223,&yymsp[0].minor);
}
        break;
      case 123: /* defer_subclause_opt ::= */
{yygotominor.yy185 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 124: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy185 = yymsp[0].minor.yy185;}
        break;
      case 125: /* onconf ::= */
      case 127: /* orconf ::= */ yytestcase(yyruleno==127);
{yygotominor.yy281 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 126: /* onconf ::= ON CONFLICT resolvetype */
      case 128: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==128);
{yygotominor.yy281 = yymsp[0].minor.yy281;}
        break;
      case 129: /* resolvetype ::= raisetype */
      case 130: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==130);
      case 131: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==131);
{yygotominor.yy281 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 132: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy135 = new SqliteDropTable(*(yymsp[-1].minor.yy5), yymsp[0].minor.yy280->name1, yymsp[0].minor.yy280->name2);
                                                delete yymsp[-1].minor.yy5;
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 133: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 134: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==134);
      case 141: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==141);
      case 142: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==142);
      case 185: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==185);
      case 186: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==186);
      case 187: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==187);
      case 188: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==188);
      case 275: /* exprx ::= nm DOT ID_TAB|ID_COL */ yytestcase(yyruleno==275);
      case 336: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==336);
      case 337: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==337);
      case 350: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==350);
      case 351: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==351);
      case 361: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==361);
      case 362: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==362);
      case 400: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==400);
      case 401: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==401);
      case 411: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==411);
      case 412: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==412);
      case 415: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==415);
      case 416: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==416);
      case 420: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==420);
      case 421: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==421);
      case 427: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==427);
      case 428: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==428);
{  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 137: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy135 = new SqliteCreateView(*(yymsp[-6].minor.yy456), *(yymsp[-4].minor.yy5), yymsp[-3].minor.yy280->name1, yymsp[-3].minor.yy280->name2, yymsp[0].minor.yy321, *(yymsp[-2].minor.yy409));
                                                delete yymsp[-6].minor.yy456;
                                                delete yymsp[-4].minor.yy5;
                                                delete yymsp[-3].minor.yy280;
                                                delete yymsp[-2].minor.yy409;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 140: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy135 = new SqliteDropView(*(yymsp[-1].minor.yy5), yymsp[0].minor.yy280->name1, yymsp[0].minor.yy280->name2);
                                                delete yymsp[-1].minor.yy5;
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 143: /* cmd ::= select_stmt */
      case 224: /* cmd ::= delete_stmt */ yytestcase(yyruleno==224);
      case 233: /* cmd ::= update_stmt */ yytestcase(yyruleno==233);
      case 254: /* cmd ::= insert_stmt */ yytestcase(yyruleno==254);
{
                                                yygotominor.yy135 = yymsp[0].minor.yy135;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 144: /* select_stmt ::= select */
{
                                                yygotominor.yy135 = yymsp[0].minor.yy321;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 145: /* select ::= with selectnowith */
{
                                                yygotominor.yy321 = yymsp[0].minor.yy321;
                                                yymsp[0].minor.yy321->setWith(yymsp[-1].minor.yy136);
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 146: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy321 = SqliteSelect::append(yymsp[0].minor.yy626);
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 147: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy321 = SqliteSelect::append(yymsp[-2].minor.yy321, *(yymsp[-1].minor.yy250), yymsp[0].minor.yy626);
                                                delete yymsp[-1].minor.yy250;
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 148: /* selectnowith ::= values */
{
                                                yygotominor.yy321 = SqliteSelect::append(*(yymsp[0].minor.yy106));
                                                delete yymsp[0].minor.yy106;
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 149: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy321 = SqliteSelect::append(yymsp[-2].minor.yy321, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy106));
                                                delete yymsp[0].minor.yy106;
                                                objectForTokens = yygotominor.yy321;
                                            }
        break;
      case 150: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy626 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy456),
                                                        *(yymsp[-6].minor.yy105),
                                                        yymsp[-5].minor.yy487,
                                                        yymsp[-4].minor.yy142,
                                                        *(yymsp[-3].minor.yy197),
                                                        yymsp[-2].minor.yy142,
                                                        *(yymsp[-1].minor.yy103),
                                                        yymsp[0].minor.yy224
                                                    );
                                                delete yymsp[-6].minor.yy105;
                                                delete yymsp[-7].minor.yy456;
                                                delete yymsp[-3].minor.yy197;
                                                delete yymsp[-1].minor.yy103;
                                                objectForTokens = yygotominor.yy626;
                                            }
        break;
      case 151: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy626 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy456),
                                                        *(yymsp[-7].minor.yy105),
                                                        yymsp[-6].minor.yy487,
                                                        yymsp[-5].minor.yy142,
                                                        *(yymsp[-4].minor.yy197),
                                                        yymsp[-3].minor.yy142,
														*(yymsp[-2].minor.yy265),
                                                        *(yymsp[-1].minor.yy103),
                                                        yymsp[0].minor.yy224
                                                    );
                                                delete yymsp[-7].minor.yy105;
                                                delete yymsp[-8].minor.yy456;
                                                delete yymsp[-4].minor.yy197;
                                                delete yymsp[-1].minor.yy103;
												delete yymsp[-2].minor.yy265;
                                                objectForTokens = yygotominor.yy626;
											}
        break;
      case 152: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy106 = new ParserExprNestedList();
                                                yygotominor.yy106->append(*(yymsp[-1].minor.yy197));
                                                delete yymsp[-1].minor.yy197;
                                            }
        break;
      case 153: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy106->append(*(yymsp[-1].minor.yy197));
                                                yygotominor.yy106 = yymsp[-4].minor.yy106;
                                                delete yymsp[-1].minor.yy197;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 154: /* multiselect_op ::= UNION */
{yygotominor.yy250 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 155: /* multiselect_op ::= UNION ALL */
{yygotominor.yy250 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 156: /* multiselect_op ::= EXCEPT */
{yygotominor.yy250 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 157: /* multiselect_op ::= INTERSECT */
{yygotominor.yy250 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 158: /* distinct ::= DISTINCT */
{yygotominor.yy456 = new int(1);}
        break;
      case 159: /* distinct ::= ALL */
{yygotominor.yy456 = new int(2);}
        break;
      case 161: /* sclp ::= selcollist COMMA */
{yygotominor.yy105 = yymsp[-1].minor.yy105;}
        break;
      case 162: /* sclp ::= */
{yygotominor.yy105 = new ParserResultColumnList();}
        break;
      case 163: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy142,
                                                        yymsp[0].minor.yy416 ? yymsp[0].minor.yy416->asKw : false,
                                                        yymsp[0].minor.yy416 ? yymsp[0].minor.yy416->name : QString()
                                                    );

                                                yymsp[-2].minor.yy105->append(obj);
                                                yygotominor.yy105 = yymsp[-2].minor.yy105;
                                                delete yymsp[0].minor.yy416;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 164: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy105->append(obj);
                                                yygotominor.yy105 = yymsp[-1].minor.yy105;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 165: /* selcollist ::= sclp nm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        *(yymsp[-2].minor.yy633)
                                                    );
                                                yymsp[-3].minor.yy105->append(obj);
                                                yygotominor.yy105 = yymsp[-3].minor.yy105;
                                                delete yymsp[-2].minor.yy633;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 166: /* selcollist ::= sclp */
      case 167: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==167);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy105 = yymsp[0].minor.yy105;
                                            }
        break;
      case 168: /* as ::= AS nm */
{
                                                yygotominor.yy416 = new ParserStubAlias(*(yymsp[0].minor.yy633), true);
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 169: /* as ::= ids */
      case 170: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==170);
      case 171: /* as ::= ID_ALIAS */ yytestcase(yyruleno==171);
{
                                                yygotominor.yy416 = new ParserStubAlias(*(yymsp[0].minor.yy633), false);
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 172: /* as ::= */
{yygotominor.yy416 = nullptr;}
        break;
      case 173: /* from ::= */
{yygotominor.yy487 = nullptr;}
        break;
      case 174: /* from ::= FROM joinsrc */
{yygotominor.yy487 = yymsp[0].minor.yy487;}
        break;
      case 175: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy487 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy361,
                                                        *(yymsp[0].minor.yy473)
                                                    );
                                                delete yymsp[0].minor.yy473;
                                                objectForTokens = yygotominor.yy487;
                                            }
        break;
      case 176: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy487 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy487;
                                            }
        break;
      case 177: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy543, yymsp[-1].minor.yy361, yymsp[0].minor.yy137);

                                                yymsp[-3].minor.yy473->append(src);
                                                yygotominor.yy473 = yymsp[-3].minor.yy473;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 178: /* seltablist ::= */
{
                                                yygotominor.yy473 = new ParserOtherSourceList();
                                            }
        break;
      case 179: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy633),
                                                        *(yymsp[-2].minor.yy633),
                                                        yymsp[-1].minor.yy416 ? yymsp[-1].minor.yy416->asKw : false,
                                                        yymsp[-1].minor.yy416 ? yymsp[-1].minor.yy416->name : QString(),
                                                        yymsp[0].minor.yy378 ? yymsp[0].minor.yy378->notIndexedKw : false,
                                                        yymsp[0].minor.yy378 ? yymsp[0].minor.yy378->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy633;
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[-1].minor.yy416;
                                                if (yymsp[0].minor.yy378)
                                                    delete yymsp[0].minor.yy378;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 180: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy321,
                                                        yymsp[0].minor.yy416 ? yymsp[0].minor.yy416->asKw : false,
                                                        yymsp[0].minor.yy416 ? yymsp[0].minor.yy416->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy416;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 181: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy487,
                                                        yymsp[0].minor.yy416 ? yymsp[0].minor.yy416->asKw : false,
                                                        yymsp[0].minor.yy416 ? yymsp[0].minor.yy416->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy416;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 182: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy633),
                                                        *(yymsp[-4].minor.yy633),
                                                        yymsp[0].minor.yy416 ? yymsp[0].minor.yy416->asKw : false,
                                                        yymsp[0].minor.yy416 ? yymsp[0].minor.yy416->name : QString(),
                                                        *(yymsp[-2].minor.yy197)
                                                    );
                                                delete yymsp[-5].minor.yy633;
                                                delete yymsp[-4].minor.yy633;
                                                delete yymsp[0].minor.yy416;
                                                if (yymsp[-2].minor.yy197)
                                                    delete yymsp[-2].minor.yy197;

                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 183: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 184: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy361 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy361->database = *(yymsp[-1].minor.yy633);
                                                delete yymsp[-1].minor.yy633;
                                                objectForTokens = yygotominor.yy361;
                                            }
        break;
      case 189: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy137 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy142);
                                                objectForTokens = yygotominor.yy137;
                                            }
        break;
      case 190: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy137 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy391));
                                                delete yymsp[-1].minor.yy391;
                                                objectForTokens = yygotominor.yy137;
                                            }
        break;
      case 191: /* joinconstr_opt ::= */
{yygotominor.yy137 = nullptr;}
        break;
      case 194: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy280 = new ParserFullName();
                                                yygotominor.yy280->name1 = *(yymsp[-1].minor.yy633);
                                                yygotominor.yy280->name2 = *(yymsp[0].minor.yy633);
                                                delete yymsp[-1].minor.yy633;
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 195: /* joinop ::= COMMA */
{
                                                yygotominor.yy543 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy543;
                                            }
        break;
      case 196: /* joinop ::= JOIN */
{
                                                yygotominor.yy543 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy543;
                                            }
        break;
      case 197: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy543 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy543;
                                            }
        break;
      case 198: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy543 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy633));
                                                delete yymsp[-1].minor.yy633;
                                                objectForTokens = yygotominor.yy543;
                                            }
        break;
      case 199: /* joinop ::= JOIN_KW nm nm JOIN */
      case 200: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==200);
{
                                                yygotominor.yy543 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy633), *(yymsp[-1].minor.yy633));
                                                delete yymsp[-2].minor.yy633;
                                                objectForTokens = yygotominor.yy543;
                                            }
        break;
      case 201: /* indexed_opt ::= */
{yygotominor.yy378 = nullptr;}
        break;
      case 202: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy378 = new ParserIndexedBy(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 203: /* indexed_opt ::= NOT INDEXED */
      case 204: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==204);
{yygotominor.yy378 = new ParserIndexedBy(true);}
        break;
      case 205: /* orderby_opt ::= */
{yygotominor.yy103 = new ParserOrderByList();}
        break;
      case 206: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy103 = yymsp[0].minor.yy103;}
        break;
      case 207: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy142, *(yymsp[-1].minor.yy125), *(yymsp[0].minor.yy55));
                                                yymsp[-4].minor.yy103->append(obj);
                                                yygotominor.yy103 = yymsp[-4].minor.yy103;
                                                delete yymsp[-1].minor.yy125;
												delete yymsp[0].minor.yy55;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 208: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy142, *(yymsp[-1].minor.yy125), *(yymsp[0].minor.yy55));
                                                yygotominor.yy103 = new ParserOrderByList();
                                                yygotominor.yy103->append(obj);
                                                delete yymsp[-1].minor.yy125;
												delete yymsp[0].minor.yy55;
                                                objectForTokens = obj;
                                            }
        break;
      case 209: /* sortorder ::= ASC */
{yygotominor.yy125 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 210: /* sortorder ::= DESC */
{yygotominor.yy125 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 211: /* sortorder ::= */
{yygotominor.yy125 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 212: /* nulls ::= NULLS FIRST */
{yygotominor.yy55 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 213: /* nulls ::= NULLS LAST */
{yygotominor.yy55 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 214: /* nulls ::= */
{yygotominor.yy55 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 215: /* groupby_opt ::= */
      case 331: /* exprlist ::= */ yytestcase(yyruleno==331);
{yygotominor.yy197 = new ParserExprList();}
        break;
      case 216: /* groupby_opt ::= GROUP BY nexprlist */
      case 330: /* exprlist ::= nexprlist */ yytestcase(yyruleno==330);
{yygotominor.yy197 = yymsp[0].minor.yy197;}
        break;
      case 217: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy197 = new ParserExprList();
                                            }
        break;
      case 218: /* having_opt ::= */
      case 230: /* where_opt ::= */ yytestcase(yyruleno==230);
      case 327: /* case_else ::= */ yytestcase(yyruleno==327);
      case 329: /* case_operand ::= */ yytestcase(yyruleno==329);
      case 355: /* vinto ::= */ yytestcase(yyruleno==355);
      case 389: /* when_clause ::= */ yytestcase(yyruleno==389);
      case 404: /* key_opt ::= */ yytestcase(yyruleno==404);
{yygotominor.yy142 = nullptr;}
        break;
      case 219: /* having_opt ::= HAVING expr */
      case 231: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==231);
      case 320: /* expr ::= exprx */ yytestcase(yyruleno==320);
      case 326: /* case_else ::= ELSE expr */ yytestcase(yyruleno==326);
      case 328: /* case_operand ::= exprx */ yytestcase(yyruleno==328);
      case 354: /* vinto ::= INTO expr */ yytestcase(yyruleno==354);
      case 390: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==390);
      case 405: /* key_opt ::= KEY expr */ yytestcase(yyruleno==405);
{yygotominor.yy142 = yymsp[0].minor.yy142;}
        break;
      case 220: /* limit_opt ::= */
{yygotominor.yy224 = nullptr;}
        break;
      case 221: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy224 = new SqliteLimit(yymsp[0].minor.yy142);
                                                objectForTokens = yygotominor.yy224;
                                            }
        break;
      case 222: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy224 = new SqliteLimit(yymsp[-2].minor.yy142, yymsp[0].minor.yy142, true);
                                                objectForTokens = yygotominor.yy224;
                                            }
        break;
      case 223: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy224 = new SqliteLimit(yymsp[-2].minor.yy142, yymsp[0].minor.yy142, false);
                                                objectForTokens = yygotominor.yy224;
                                            }
        break;
      case 225: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt */
{
                                                if (yymsp[-1].minor.yy378)
                                                {
                                                    if (!yymsp[-1].minor.yy378->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy135 = new SqliteDelete(
                                                                yymsp[-2].minor.yy280->name1,
                                                                yymsp[-2].minor.yy280->name2,
                                                                yymsp[-1].minor.yy378->indexedBy,
                                                                yymsp[0].minor.yy142,
                                                                yymsp[-5].minor.yy136
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy135 = new SqliteDelete(
                                                                yymsp[-2].minor.yy280->name1,
                                                                yymsp[-2].minor.yy280->name2,
                                                                yymsp[-1].minor.yy378->notIndexedKw,
                                                                yymsp[0].minor.yy142,
                                                                yymsp[-5].minor.yy136
                                                            );
                                                    }
                                                    delete yymsp[-1].minor.yy378;
                                                }
                                                else
                                                {
                                                    yygotominor.yy135 = new SqliteDelete(
                                                            yymsp[-2].minor.yy280->name1,
                                                            yymsp[-2].minor.yy280->name2,
                                                            false,
                                                            yymsp[0].minor.yy142,
                                                            yymsp[-5].minor.yy136
                                                        );
                                                }
                                                delete yymsp[-2].minor.yy280;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 226: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy136;
                                                yygotominor.yy135 = q;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 227: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy136;
                                                q->database = *(yymsp[-1].minor.yy633);
                                                yygotominor.yy135 = q;
                                                objectForTokens = yygotominor.yy135;
                                                delete yymsp[-1].minor.yy633;
                                            }
        break;
      case 228: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 237: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==237);
{  yy_destructor(yypParser,243,&yymsp[-5].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 229: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 238: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==238);
{  yy_destructor(yypParser,243,&yymsp[-3].minor);
}
        break;
      case 232: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy142 = new SqliteExpr();
                                            }
        break;
      case 234: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt */
{
                                                yygotominor.yy135 = new SqliteUpdate(
                                                        *(yymsp[-6].minor.yy281),
                                                        yymsp[-5].minor.yy280->name1,
                                                        yymsp[-5].minor.yy280->name2,
                                                        yymsp[-4].minor.yy378 ? yymsp[-4].minor.yy378->notIndexedKw : false,
                                                        yymsp[-4].minor.yy378 ? yymsp[-4].minor.yy378->indexedBy : QString(),
                                                        *(yymsp[-2].minor.yy35),
														yymsp[-1].minor.yy487,
                                                        yymsp[0].minor.yy142,
                                                        yymsp[-8].minor.yy136
                                                    );
                                                delete yymsp[-6].minor.yy281;
                                                delete yymsp[-5].minor.yy280;
                                                delete yymsp[-2].minor.yy35;
                                                if (yymsp[-4].minor.yy378)
                                                    delete yymsp[-4].minor.yy378;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 235: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy136;
                                                yygotominor.yy135 = q;
                                                objectForTokens = yygotominor.yy135;
                                                delete yymsp[0].minor.yy281;
                                            }
        break;
      case 236: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy136;
                                                q->database = *(yymsp[-1].minor.yy633);
                                                yygotominor.yy135 = q;
                                                objectForTokens = yygotominor.yy135;
                                                delete yymsp[-2].minor.yy281;
                                                delete yymsp[-1].minor.yy633;
                                            }
        break;
      case 239: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy35->append(ParserSetValue(*(yymsp[-2].minor.yy633), yymsp[0].minor.yy142));
                                                yygotominor.yy35 = yymsp[-4].minor.yy35;
                                                delete yymsp[-2].minor.yy633;
                                            }
        break;
      case 240: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy35->append(ParserSetValue(*(yymsp[-3].minor.yy391), yymsp[0].minor.yy142));
                                                yygotominor.yy35 = yymsp[-6].minor.yy35;
                                                delete yymsp[-3].minor.yy391;
                                            }
        break;
      case 241: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy35 = new ParserSetValueList();
                                                yygotominor.yy35->append(ParserSetValue(*(yymsp[-2].minor.yy633), yymsp[0].minor.yy142));
                                                delete yymsp[-2].minor.yy633;
                                            }
        break;
      case 242: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy35 = new ParserSetValueList();
                                                yygotominor.yy35->append(ParserSetValue(*(yymsp[-3].minor.yy391), yymsp[0].minor.yy142));
                                                delete yymsp[-3].minor.yy391;
                                            }
        break;
      case 243: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy35 = new ParserSetValueList();
                                            }
        break;
      case 244: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy35 = yymsp[-1].minor.yy35;
                                            }
        break;
      case 245: /* setlist ::= setlist COMMA ID_COL */
      case 246: /* setlist ::= ID_COL */ yytestcase(yyruleno==246);
{  yy_destructor(yypParser,273,&yymsp[-2].minor);
}
        break;
      case 247: /* idlist_opt ::= */
{yygotominor.yy391 = new QStringList();}
        break;
      case 248: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy391 = yymsp[-1].minor.yy391;}
        break;
      case 249: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy391 = yymsp[-2].minor.yy391;
                                                *(yygotominor.yy391) << *(yymsp[0].minor.yy633);
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 250: /* idlist ::= nm */
{
                                                yygotominor.yy391 = new QStringList();
                                                *(yygotominor.yy391) << *(yymsp[0].minor.yy633);
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 251: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy391 = new QStringList();
                                            }
        break;
      case 252: /* idlist ::= idlist COMMA ID_COL */
      case 253: /* idlist ::= ID_COL */ yytestcase(yyruleno==253);
{  yy_destructor(yypParser,268,&yymsp[-2].minor);
}
        break;
      case 255: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert */
{
                                                yygotominor.yy135 = new SqliteInsert(
                                                        yymsp[-5].minor.yy628->replace,
                                                        yymsp[-5].minor.yy628->orConflict,
                                                        yymsp[-3].minor.yy280->name1,
                                                        yymsp[-3].minor.yy280->name2,
                                                        *(yymsp[-2].minor.yy391),
                                                        yymsp[-1].minor.yy321,
                                                        yymsp[-6].minor.yy136,
                                                        yymsp[0].minor.yy610
                                                    );
                                                delete yymsp[-3].minor.yy280;
                                                delete yymsp[-5].minor.yy628;
                                                delete yymsp[-2].minor.yy391;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 256: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES */
{
                                                yygotominor.yy135 = new SqliteInsert(
                                                        yymsp[-5].minor.yy628->replace,
                                                        yymsp[-5].minor.yy628->orConflict,
                                                        yymsp[-3].minor.yy280->name1,
                                                        yymsp[-3].minor.yy280->name2,
                                                        *(yymsp[-2].minor.yy391),
                                                        yymsp[-6].minor.yy136
                                                    );
                                                delete yymsp[-3].minor.yy280;
                                                delete yymsp[-5].minor.yy628;
                                                delete yymsp[-2].minor.yy391;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 257: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy628->replace;
                                                q->onConflict = yymsp[-1].minor.yy628->orConflict;
                                                q->with = yymsp[-2].minor.yy136;
                                                yygotominor.yy135 = q;
                                                objectForTokens = yygotominor.yy135;
                                                delete yymsp[-1].minor.yy628;
                                            }
        break;
      case 258: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy628->replace;
                                                q->onConflict = yymsp[-3].minor.yy628->orConflict;
                                                q->with = yymsp[-4].minor.yy136;
                                                q->database = *(yymsp[-1].minor.yy633);
                                                yygotominor.yy135 = q;
                                                objectForTokens = yygotominor.yy135;
                                                delete yymsp[-3].minor.yy628;
                                                delete yymsp[-1].minor.yy633;
                                            }
        break;
      case 259: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,243,&yymsp[-3].minor);
  yy_destructor(yypParser,276,&yymsp[-2].minor);
}
        break;
      case 260: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,243,&yymsp[-5].minor);
  yy_destructor(yypParser,276,&yymsp[-4].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 261: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy628 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy281));
                                                delete yymsp[0].minor.yy281;
                                            }
        break;
      case 262: /* insert_cmd ::= REPLACE */
{yygotominor.yy628 = new ParserStubInsertOrReplace(true);}
        break;
      case 263: /* upsert ::= */
{
                                                yygotominor.yy610 = nullptr;
                                            }
        break;
      case 264: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy610 = new SqliteUpsert(*(yymsp[-7].minor.yy103), yymsp[-5].minor.yy142, *(yymsp[-1].minor.yy35), yymsp[0].minor.yy142);
                                                delete yymsp[-7].minor.yy103;
                                                delete yymsp[-1].minor.yy35;
                                                objectForTokens = yygotominor.yy610;
                                            }
        break;
      case 265: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy610 = new SqliteUpsert(*(yymsp[-4].minor.yy103), yymsp[-2].minor.yy142);
                                                delete yymsp[-4].minor.yy103;
                                                objectForTokens = yygotominor.yy610;
                                            }
        break;
      case 266: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy610 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy610;
                                            }
        break;
      case 267: /* exprx ::= nm DOT */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initId(*(yymsp[-1].minor.yy633), QString(), QString());
                                                delete yymsp[-1].minor.yy633;
                                                objectForTokens = yygotominor.yy142;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: nm.>");
                                            }
        break;
      case 268: /* exprx ::= nm DOT nm DOT */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initId(*(yymsp[-3].minor.yy633), *(yymsp[-1].minor.yy633), QString());
                                                delete yymsp[-3].minor.yy633;
                                                delete yymsp[-1].minor.yy633;
                                                objectForTokens = yygotominor.yy142;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: nm.nm.>");
                                            }
        break;
      case 269: /* exprx ::= expr not_opt BETWEEN expr AND */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                delete yymsp[-3].minor.yy5;
                                                delete yymsp[-4].minor.yy142;
                                                delete yymsp[-1].minor.yy142;
                                                objectForTokens = yygotominor.yy142;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: expr not_opt BETWEEN expr AND>");
                                            }
        break;
      case 270: /* exprx ::= CASE case_operand case_exprlist case_else */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                delete yymsp[-1].minor.yy197;
                                                delete yymsp[-2].minor.yy142;
                                                delete yymsp[0].minor.yy142;
                                                objectForTokens = yygotominor.yy142;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: CASE operand exprlist else>");
                                            }
        break;
      case 271: /* exprx ::= expr not_opt IN LP exprlist */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                delete yymsp[-3].minor.yy5;
                                                delete yymsp[0].minor.yy197;
                                                delete yymsp[-4].minor.yy142;
                                                objectForTokens = yygotominor.yy142;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: expr not_opt IN LP exprlist>");
                                            }
        break;
      case 272: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,222,&yymsp[-3].minor);
}
        break;
      case 273: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 274: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==274);
{  yy_destructor(yypParser,222,&yymsp[-5].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 276: /* exprx ::= nm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,199,&yymsp[-4].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 277: /* exprx ::= expr COLLATE ID_COLLATE */
      case 278: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==278);
{  yy_destructor(yypParser,222,&yymsp[-2].minor);
}
        break;
      case 279: /* exprx ::= term */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initLiteral(*(yymsp[0].minor.yy381));
                                                delete yymsp[0].minor.yy381;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 280: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 281: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initRowValue(*(yymsp[-1].minor.yy197));
                                                delete yymsp[-1].minor.yy197;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 282: /* exprx ::= id */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initId(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 283: /* exprx ::= JOIN_KW */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initId(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 284: /* exprx ::= nm DOT nm */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initId(*(yymsp[-2].minor.yy633), *(yymsp[0].minor.yy633));
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 285: /* exprx ::= nm DOT nm DOT nm */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initId(*(yymsp[-4].minor.yy633), *(yymsp[-2].minor.yy633), *(yymsp[0].minor.yy633));
                                                delete yymsp[-4].minor.yy633;
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 286: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 287: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initCollate(yymsp[-2].minor.yy142, *(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 288: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initCast(yymsp[-3].minor.yy142, yymsp[-1].minor.yy499);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 289: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy456), *(yymsp[-1].minor.yy197));
                                                delete yymsp[-2].minor.yy456;
                                                delete yymsp[-1].minor.yy197;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 290: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 291: /* exprx ::= expr AND expr */
      case 292: /* exprx ::= expr OR expr */ yytestcase(yyruleno==292);
      case 293: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==293);
      case 294: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==294);
      case 295: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==295);
      case 296: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==296);
      case 297: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==297);
      case 298: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==298);
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initBinOp(yymsp[-2].minor.yy142, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy142);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 299: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initLike(yymsp[-3].minor.yy142, *(yymsp[-2].minor.yy5), *(yymsp[-1].minor.yy496), yymsp[0].minor.yy142);
                                                delete yymsp[-2].minor.yy5;
                                                delete yymsp[-1].minor.yy496;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 300: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initLike(yymsp[-5].minor.yy142, *(yymsp[-4].minor.yy5), *(yymsp[-3].minor.yy496), yymsp[-2].minor.yy142, yymsp[0].minor.yy142);
                                                delete yymsp[-4].minor.yy5;
                                                delete yymsp[-3].minor.yy496;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 301: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initNull(yymsp[-1].minor.yy142, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 302: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initNull(yymsp[-2].minor.yy142, "NOT NULL");
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 303: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initIs(yymsp[-3].minor.yy142, *(yymsp[-1].minor.yy5), yymsp[0].minor.yy142);
                                                delete yymsp[-1].minor.yy5;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 304: /* exprx ::= NOT expr */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initUnaryOp(yymsp[0].minor.yy142, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 305: /* exprx ::= BITNOT expr */
      case 307: /* exprx ::= PLUS expr */ yytestcase(yyruleno==307);
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initUnaryOp(yymsp[0].minor.yy142, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 306: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                if (yymsp[0].minor.yy142->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy142->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy142->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy142;
                                                }
                                                else
                                                {
                                                    yygotominor.yy142->initUnaryOp(yymsp[0].minor.yy142, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 308: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initBetween(yymsp[-5].minor.yy142, *(yymsp[-4].minor.yy5), yymsp[-2].minor.yy142, yymsp[0].minor.yy142);
                                                delete yymsp[-4].minor.yy5;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 309: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initIn(yymsp[-5].minor.yy142, *(yymsp[-4].minor.yy5), *(yymsp[-1].minor.yy197));
                                                delete yymsp[-4].minor.yy5;
                                                delete yymsp[-1].minor.yy197;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 310: /* exprx ::= LP select RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initSubSelect(yymsp[-1].minor.yy321);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 311: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initIn(yymsp[-5].minor.yy142, *(yymsp[-4].minor.yy5), yymsp[-1].minor.yy321);
                                                delete yymsp[-4].minor.yy5;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 312: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initIn(yymsp[-4].minor.yy142, *(yymsp[-3].minor.yy5), *(yymsp[-1].minor.yy633), *(yymsp[0].minor.yy633));
                                                delete yymsp[-3].minor.yy5;
                                                delete yymsp[-1].minor.yy633;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 313: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initExists(yymsp[-1].minor.yy321);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 314: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initCase(yymsp[-3].minor.yy142, *(yymsp[-2].minor.yy197), yymsp[-1].minor.yy142);
                                                delete yymsp[-2].minor.yy197;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 315: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 316: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy633));
                                                delete yymsp[-1].minor.yy633;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 317: /* exprx ::= ID LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initWindowFunction(yymsp[-5].minor.yy0->value, *(yymsp[-3].minor.yy456), *(yymsp[-2].minor.yy197), yymsp[0].minor.yy357);
                                                delete yymsp[-3].minor.yy456;
                                                delete yymsp[-2].minor.yy197;
                                                objectForTokens = yygotominor.yy142;
											}
        break;
      case 318: /* exprx ::= ID LP STAR RP filter_over */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                yygotominor.yy142->initWindowFunction(yymsp[-4].minor.yy0->value, yymsp[0].minor.yy357);
                                                objectForTokens = yygotominor.yy142;
											}
        break;
      case 319: /* expr ::= */
{
                                                yygotominor.yy142 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy142;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 323: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy496 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 324: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy197->append(yymsp[-2].minor.yy142);
                                                yymsp[-4].minor.yy197->append(yymsp[0].minor.yy142);
                                                yygotominor.yy197 = yymsp[-4].minor.yy197;
                                            }
        break;
      case 325: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy197 = new ParserExprList();
                                                yygotominor.yy197->append(yymsp[-2].minor.yy142);
                                                yygotominor.yy197->append(yymsp[0].minor.yy142);
                                            }
        break;
      case 332: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy197->append(yymsp[0].minor.yy142);
                                                yygotominor.yy197 = yymsp[-2].minor.yy197;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 333: /* nexprlist ::= exprx */
{
                                                yygotominor.yy197 = new ParserExprList();
                                                yygotominor.yy197->append(yymsp[0].minor.yy142);
                                            }
        break;
      case 334: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy135 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy5),
                                                        *(yymsp[-8].minor.yy5),
                                                        *(yymsp[-7].minor.yy633),
                                                        *(yymsp[-6].minor.yy633),
                                                        *(yymsp[-4].minor.yy633),
                                                        *(yymsp[-2].minor.yy103),
                                                        yymsp[0].minor.yy142
                                                    );
                                                delete yymsp[-8].minor.yy5;
                                                delete yymsp[-10].minor.yy5;
                                                delete yymsp[-7].minor.yy633;
                                                delete yymsp[-6].minor.yy633;
                                                delete yymsp[-4].minor.yy633;
                                                delete yymsp[-2].minor.yy103;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 335: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,199,&yymsp[-3].minor);
}
        break;
      case 340: /* idxlist_opt ::= */
{yygotominor.yy409 = new ParserIndexedColumnList();}
        break;
      case 341: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy409 = yymsp[-1].minor.yy409;}
        break;
      case 342: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy409->append(yymsp[0].minor.yy102);
                                                yygotominor.yy409 = yymsp[-2].minor.yy409;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 343: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy409 = new ParserIndexedColumnList();
                                                yygotominor.yy409->append(yymsp[0].minor.yy102);
                                            }
        break;
      case 344: /* idxlist_single ::= nm collate sortorder */
      case 345: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==345);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy633),
                                                        *(yymsp[-1].minor.yy633),
                                                        *(yymsp[0].minor.yy125)
                                                    );
                                                yygotominor.yy102 = obj;
                                                delete yymsp[0].minor.yy125;
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[-1].minor.yy633;
                                                objectForTokens = yygotominor.yy102;
                                            }
        break;
      case 349: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy135 = new SqliteDropIndex(*(yymsp[-1].minor.yy5), yymsp[0].minor.yy280->name1, yymsp[0].minor.yy280->name2);
                                                delete yymsp[-1].minor.yy5;
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 352: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy135 = new SqliteVacuum(yymsp[0].minor.yy142);
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 353: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy135 = new SqliteVacuum(*(yymsp[-1].minor.yy633), yymsp[0].minor.yy142);
                                                delete yymsp[-1].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 356: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy135 = new SqlitePragma(*(yymsp[-1].minor.yy633), *(yymsp[0].minor.yy633));
                                                delete yymsp[-1].minor.yy633;
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 357: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 359: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==359);
{
                                                yygotominor.yy135 = new SqlitePragma(*(yymsp[-3].minor.yy633), *(yymsp[-2].minor.yy633), *(yymsp[0].minor.yy381), true);
                                                delete yymsp[-3].minor.yy633;
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[0].minor.yy381;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 358: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 360: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==360);
{
                                                yygotominor.yy135 = new SqlitePragma(*(yymsp[-4].minor.yy633), *(yymsp[-3].minor.yy633), *(yymsp[-1].minor.yy381), false);
                                                delete yymsp[-4].minor.yy633;
                                                delete yymsp[-3].minor.yy633;
                                                delete yymsp[-1].minor.yy381;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 364: /* nmnum ::= nm */
{
                                                yygotominor.yy381 = new QVariant(*(yymsp[0].minor.yy633));
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 370: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy381->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy381) = -(yymsp[0].minor.yy381->toDouble());
                                                else if (yymsp[0].minor.yy381->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy381) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy381) = -(yymsp[0].minor.yy381->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy381 = yymsp[0].minor.yy381;
                                            }
        break;
      case 373: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy135 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy456),
                                                        *(yymsp[-11].minor.yy5),
                                                        *(yymsp[-10].minor.yy633),
                                                        *(yymsp[-9].minor.yy633),
                                                        *(yymsp[-5].minor.yy633),
                                                        *(yymsp[-8].minor.yy614),
                                                        yymsp[-7].minor.yy375,
                                                        *(yymsp[-4].minor.yy500),
                                                        yymsp[-3].minor.yy142,
                                                        *(yymsp[-1].minor.yy462),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy5;
                                                delete yymsp[-13].minor.yy456;
                                                delete yymsp[-8].minor.yy614;
                                                delete yymsp[-4].minor.yy500;
                                                delete yymsp[-10].minor.yy633;
                                                delete yymsp[-5].minor.yy633;
                                                delete yymsp[-9].minor.yy633;
                                                delete yymsp[-1].minor.yy462;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 374: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy135 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy456),
                                                        *(yymsp[-8].minor.yy5),
                                                        *(yymsp[-7].minor.yy633),
                                                        *(yymsp[-6].minor.yy633),
                                                        *(yymsp[-2].minor.yy633),
                                                        *(yymsp[-5].minor.yy614),
                                                        yymsp[-4].minor.yy375,
                                                        *(yymsp[-1].minor.yy500),
                                                        yymsp[0].minor.yy142,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy5;
                                                delete yymsp[-10].minor.yy456;
                                                delete yymsp[-5].minor.yy614;
                                                delete yymsp[-1].minor.yy500;
                                                delete yymsp[-7].minor.yy633;
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[-6].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 375: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy135 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy456),
													*(yymsp[-10].minor.yy5),
													*(yymsp[-9].minor.yy633),
													*(yymsp[-8].minor.yy633),
													*(yymsp[-4].minor.yy633),
													*(yymsp[-7].minor.yy614),
													yymsp[-6].minor.yy375,
													*(yymsp[-3].minor.yy500),
													yymsp[-2].minor.yy142,
													*(yymsp[0].minor.yy462),
													3
                                                );
                                                delete yymsp[-10].minor.yy5;
                                                delete yymsp[-12].minor.yy456;
                                                delete yymsp[-7].minor.yy614;
                                                delete yymsp[-3].minor.yy500;
                                                delete yymsp[-9].minor.yy633;
                                                delete yymsp[-4].minor.yy633;
                                                delete yymsp[-8].minor.yy633;
                                                delete yymsp[0].minor.yy462;
                                                objectForTokens = yygotominor.yy135;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 376: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,201,&yymsp[-8].minor);
  yy_destructor(yypParser,199,&yymsp[-5].minor);
  yy_destructor(yypParser,291,&yymsp[-3].minor);
  yy_destructor(yypParser,292,&yymsp[-2].minor);
}
        break;
      case 379: /* trigger_time ::= BEFORE */
{yygotominor.yy614 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 380: /* trigger_time ::= AFTER */
{yygotominor.yy614 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 381: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy614 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 382: /* trigger_time ::= */
{yygotominor.yy614 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 383: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy375 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy375;
                                            }
        break;
      case 384: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy375 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy375;
                                            }
        break;
      case 385: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy375 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy375;
                                            }
        break;
      case 386: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy375 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy391));
                                                delete yymsp[0].minor.yy391;
                                                objectForTokens = yygotominor.yy375;
                                            }
        break;
      case 387: /* foreach_clause ::= */
{yygotominor.yy500 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 388: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy500 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 391: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy462->append(yymsp[-1].minor.yy135);
                                                yygotominor.yy462 = yymsp[-2].minor.yy462;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 392: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy462 = new ParserQueryList();
                                                yygotominor.yy462->append(yymsp[-1].minor.yy135);
                                            }
        break;
      case 393: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy462 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 398: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 399: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy135 = new SqliteDropTrigger(*(yymsp[-1].minor.yy5), yymsp[0].minor.yy280->name1, yymsp[0].minor.yy280->name2);
                                                delete yymsp[-1].minor.yy5;
                                                delete yymsp[0].minor.yy280;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 402: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy135 = new SqliteAttach(*(yymsp[-4].minor.yy5), yymsp[-3].minor.yy142, yymsp[-1].minor.yy142, yymsp[0].minor.yy142);
                                                delete yymsp[-4].minor.yy5;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 403: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy135 = new SqliteDetach(*(yymsp[-1].minor.yy5), yymsp[0].minor.yy142);
                                                delete yymsp[-1].minor.yy5;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 408: /* cmd ::= REINDEX */
{yygotominor.yy135 = new SqliteReindex();}
        break;
      case 409: /* cmd ::= REINDEX nm dbnm */
      case 410: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==410);
{
                                                yygotominor.yy135 = new SqliteReindex(*(yymsp[-1].minor.yy633), *(yymsp[0].minor.yy633));
                                                delete yymsp[-1].minor.yy633;
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 413: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy135 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 414: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy135 = new SqliteAnalyze(*(yymsp[-1].minor.yy633), *(yymsp[0].minor.yy633));
                                                delete yymsp[-1].minor.yy633;
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 417: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy135 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy280->name1,
                                                        yymsp[-3].minor.yy280->name2,
                                                        *(yymsp[0].minor.yy633)
                                                    );
                                                delete yymsp[0].minor.yy633;
                                                delete yymsp[-3].minor.yy280;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 418: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy135 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy280->name1,
                                                        yymsp[-3].minor.yy280->name2,
                                                        *(yymsp[-1].minor.yy5),
                                                        yymsp[0].minor.yy303
                                                    );
                                                delete yymsp[-1].minor.yy5;
                                                delete yymsp[-3].minor.yy280;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 419: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,203,&yymsp[-3].minor);
}
        break;
      case 425: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy135 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy5),
                                                        *(yymsp[-3].minor.yy633),
                                                        *(yymsp[-2].minor.yy633),
                                                        *(yymsp[0].minor.yy633)
                                                    );
                                                delete yymsp[-4].minor.yy5;
                                                delete yymsp[-3].minor.yy633;
                                                delete yymsp[-2].minor.yy633;
                                                delete yymsp[0].minor.yy633;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 426: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy135 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy5),
                                                        *(yymsp[-6].minor.yy633),
                                                        *(yymsp[-5].minor.yy633),
                                                        *(yymsp[-3].minor.yy633),
                                                        *(yymsp[-1].minor.yy391)
                                                    );
                                                delete yymsp[-6].minor.yy633;
                                                delete yymsp[-5].minor.yy633;
                                                delete yymsp[-3].minor.yy633;
                                                delete yymsp[-7].minor.yy5;
                                                delete yymsp[-1].minor.yy391;
                                                objectForTokens = yygotominor.yy135;
                                            }
        break;
      case 429: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy391 = new QStringList();
                                                yygotominor.yy391->append((yymsp[0].minor.yy633)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 430: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy391->append((yymsp[0].minor.yy633)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy391 = yymsp[-2].minor.yy391;
                                                delete yymsp[0].minor.yy633;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 432: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy633->append(" "+ *(yymsp[0].minor.yy633));
                                                yygotominor.yy633 = yymsp[-1].minor.yy633;
                                                delete yymsp[0].minor.yy633;
                                            }
        break;
      case 433: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy633 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 434: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy633 = new QString("(");
                                                yygotominor.yy633->append(*(yymsp[-1].minor.yy633));
                                                yygotominor.yy633->append(")");
                                                delete yymsp[-1].minor.yy633;
                                            }
        break;
      case 436: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy633 = yymsp[-3].minor.yy633;
                                                yygotominor.yy633->append("(");
                                                yygotominor.yy633->append(*(yymsp[-1].minor.yy633));
                                                yygotominor.yy633->append(")");
                                                delete yymsp[-1].minor.yy633;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 437: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy633 = yymsp[-1].minor.yy633;
                                                yygotominor.yy633->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 438: /* with ::= */
{yygotominor.yy136 = nullptr;}
        break;
      case 439: /* with ::= WITH wqlist */
{
                                                yygotominor.yy136 = new SqliteWith();
												yygotominor.yy136->cteList = *(yymsp[0].minor.yy442);
												delete yymsp[0].minor.yy442;
                                                objectForTokens = yygotominor.yy136;
                                            }
        break;
      case 440: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy136 = new SqliteWith();
												yygotominor.yy136->cteList = *(yymsp[0].minor.yy442);
                                                yygotominor.yy136->recursive = true;
												delete yymsp[0].minor.yy442;
                                                objectForTokens = yygotominor.yy136;
                                            }
        break;
      case 441: /* wqlist ::= wqcte */
{
												yygotominor.yy442 = new ParserCteList();
                                                yygotominor.yy442->append(yymsp[0].minor.yy28);
                                            }
        break;
      case 442: /* wqlist ::= wqlist COMMA wqcte */
{
                                                yygotominor.yy442 = yymsp[-2].minor.yy442;
                                                yygotominor.yy442->append(yymsp[0].minor.yy28);
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 443: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 444: /* wqcte ::= nm idxlist_opt AS LP select RP */
{
                                                yygotominor.yy28 = new SqliteWith::CommonTableExpression(*(yymsp[-5].minor.yy633), *(yymsp[-4].minor.yy409), yymsp[-1].minor.yy321);
                                                delete yymsp[-5].minor.yy633;
                                                delete yymsp[-4].minor.yy409;
												objectForTokens = yygotominor.yy28;
											}
        break;
      case 445: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy265 = new ParserWindowDefList();
												yygotominor.yy265->append(yymsp[0].minor.yy52);
											}
        break;
      case 446: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy265->append(yymsp[0].minor.yy52);
												yygotominor.yy265 = yymsp[-2].minor.yy265;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 447: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy52 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy633), yymsp[-1].minor.yy322);
												delete yymsp[-4].minor.yy633;
												objectForTokens = yygotominor.yy52;
											}
        break;
      case 448: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy322 = new SqliteWindowDefinition::Window();
												yygotominor.yy322->initPartitionBy(QString(), *(yymsp[-2].minor.yy197), *(yymsp[-1].minor.yy103), yymsp[0].minor.yy349);
												delete yymsp[-2].minor.yy197;
												delete yymsp[-1].minor.yy103;
												objectForTokens = yygotominor.yy322;
											}
        break;
      case 449: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy322 = new SqliteWindowDefinition::Window();
												yygotominor.yy322->initPartitionBy(*(yymsp[-5].minor.yy633), *(yymsp[-2].minor.yy197), *(yymsp[-1].minor.yy103), yymsp[0].minor.yy349);
												delete yymsp[-2].minor.yy197;
												delete yymsp[-5].minor.yy633;
												delete yymsp[-1].minor.yy103;
												objectForTokens = yygotominor.yy322;
											}
        break;
      case 450: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy322 = new SqliteWindowDefinition::Window();
												yygotominor.yy322->initOrderBy(QString(), *(yymsp[-1].minor.yy103), yymsp[0].minor.yy349);
												delete yymsp[-1].minor.yy103;
												objectForTokens = yygotominor.yy322;
											}
        break;
      case 451: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy322 = new SqliteWindowDefinition::Window();
												yygotominor.yy322->initOrderBy(*(yymsp[-4].minor.yy633), *(yymsp[-1].minor.yy103), yymsp[0].minor.yy349);
												delete yymsp[-1].minor.yy103;
												delete yymsp[-4].minor.yy633;
												objectForTokens = yygotominor.yy322;
											}
        break;
      case 452: /* window ::= frame_opt */
{
												yygotominor.yy322 = new SqliteWindowDefinition::Window();
												yygotominor.yy322->init(QString(), yymsp[0].minor.yy349);
												objectForTokens = yygotominor.yy322;
											}
        break;
      case 453: /* window ::= nm frame_opt */
{
												yygotominor.yy322 = new SqliteWindowDefinition::Window();
												yygotominor.yy322->init(QString(), yymsp[0].minor.yy349);
												delete yymsp[-1].minor.yy633;
												objectForTokens = yygotominor.yy322;
											}
        break;
      case 454: /* frame_opt ::= */
{yygotominor.yy349 = nullptr;}
        break;
      case 455: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy349 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy534), yymsp[-1].minor.yy127, nullptr, *(yymsp[0].minor.yy449));
												delete yymsp[-2].minor.yy534;
												delete yymsp[0].minor.yy449;
												objectForTokens = yygotominor.yy349;
											}
        break;
      case 456: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy349 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy534), yymsp[-3].minor.yy127, yymsp[-1].minor.yy127, *(yymsp[0].minor.yy449));
												delete yymsp[-5].minor.yy534;
												delete yymsp[0].minor.yy449;
												objectForTokens = yygotominor.yy349;
											}
        break;
      case 457: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy534 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 458: /* frame_bound_s ::= frame_bound */
      case 460: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==460);
{
												yygotominor.yy127 = yymsp[0].minor.yy127;
												objectForTokens = yygotominor.yy127;
											}
        break;
      case 459: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 461: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==461);
      case 463: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==463);
{
												yygotominor.yy127 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy127;
											}
        break;
      case 462: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy127 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy142, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy127;
											}
        break;
      case 464: /* frame_exclude_opt ::= */
{
												yygotominor.yy449 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 465: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy449 = yymsp[0].minor.yy449;
											}
        break;
      case 466: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy449 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 467: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy449 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 468: /* frame_exclude ::= GROUP */
{
												yygotominor.yy449 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 469: /* frame_exclude ::= TIES */
{
												yygotominor.yy449 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 470: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy265 = yymsp[0].minor.yy265;
											}
        break;
      case 471: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy357 = new SqliteFilterOver(yymsp[-1].minor.yy525, yymsp[0].minor.yy23);
												objectForTokens = yygotominor.yy357;
											}
        break;
      case 472: /* filter_over ::= over_clause */
{
												yygotominor.yy357 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy23);
												objectForTokens = yygotominor.yy357;
											}
        break;
      case 473: /* filter_over ::= filter_clause */
{
												yygotominor.yy357 = new SqliteFilterOver(yymsp[0].minor.yy525, nullptr);
												objectForTokens = yygotominor.yy357;
											}
        break;
      case 474: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy23 = new SqliteFilterOver::Over(yymsp[-1].minor.yy322);
												objectForTokens = yygotominor.yy23;
											}
        break;
      case 475: /* over_clause ::= OVER nm */
{
												yygotominor.yy23 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy633));
												delete yymsp[0].minor.yy633;
												objectForTokens = yygotominor.yy23;
											}
        break;
      case 476: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy525 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy142);
												objectForTokens = yygotominor.yy525;
											}
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
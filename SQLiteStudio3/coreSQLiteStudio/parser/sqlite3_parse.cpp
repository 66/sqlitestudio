/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecopy.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 319
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 78
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  QString* yy7;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy10;
  ParserExprList* yy39;
  ParserResultColumnList* yy57;
  SqliteFilterOver::Over* yy59;
  ParserQueryList* yy66;
  SqliteNulls* yy75;
  SqliteSelect::Core::JoinSource* yy79;
  SqliteSelect::Core::JoinConstraint* yy83;
  ParserFullName* yy84;
  SqliteSelect::Core* yy90;
  SqliteQuery* yy107;
  ParserCreateTableConstraintList* yy109;
  ParserExprNestedList* yy114;
  SqliteCreateTable::Constraint* yy142;
  SqliteSelect::CompoundOperator* yy143;
  SqliteSortOrder* yy161;
  ParserSetValueList* yy165;
  SqliteSelect::Core::SingleSource* yy169;
  SqliteSelect::Core::JoinOp* yy173;
  SqliteColumnType* yy177;
  ParserOtherSourceList* yy179;
  SqliteWindowDefinition::Window::Frame* yy197;
  int* yy202;
  ParserDeferSubClause* yy209;
  SqliteCreateTable::Column::Constraint* yy232;
  ParserStubAlias* yy233;
  SqliteExpr::LikeOp* yy244;
  SqliteCreateTrigger::Time* yy252;
  bool* yy255;
  SqliteWindowDefinition::Window* yy258;
  ParserStubExplain* yy259;
  SqliteWindowDefinition::Window::Frame::Exclude* yy267;
  SqliteSelect* yy273;
  SqliteConflictAlgo* yy274;
  QStringList* yy275;
  ParserCreateTableColumnConstraintList* yy287;
  SqliteForeignKey::Condition::Reaction* yy304;
  SqliteWindowDefinition* yy322;
  SqliteFilterOver::Filter* yy333;
  ParserIndexedColumnList* yy339;
  ParserIndexedBy* yy348;
  SqliteInitially* yy372;
  SqliteFilterOver* yy379;
  ParserStubTransDetails* yy392;
  ParserOrderByList* yy435;
  SqliteForeignKey::Condition* yy439;
  SqliteExpr* yy444;
  SqliteCreateTable::Column* yy459;
  SqliteIndexedColumn* yy464;
  ParserCreateTableColumnList* yy474;
  SqliteWindowDefinition::Window::Frame::Bound* yy477;
  SqliteWith* yy497;
  SqliteUpsert* yy500;
  ParserStubInsertOrReplace* yy512;
  QVariant* yy513;
  SqliteCreateTrigger::Scope* yy515;
  ParserWindowDefList* yy519;
  SqliteLimit* yy552;
  ParserFkConditionList* yy576;
  SqliteCreateTrigger::Event* yy631;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 849
#define YYNRULE 476
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2740)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   517,  763,  398,  841,  243,  242,  241,   68,   69,  512,
 /*    10 */   347,  762,  505,  805,  805,   66,   66,   67,   67,   67,
 /*    20 */    67,  846,   65,   65,   65,   65,   64,   64,   63,   63,
 /*    30 */    63,   62,  254,   63,   63,   63,   62,  254, 1168, 1168,
 /*    40 */    65,   65,   65,   65,   64,   64,   63,   63,   63,   62,
 /*    50 */   254,  510,   67,   67,   67,   67,   42,   65,   65,   65,
 /*    60 */    65,   64,   64,   63,   63,   63,   62,  254,  101,  841,
 /*    70 */   353,  841,  796,  669,  418, 1168, 1168,   55, 1168, 1168,
 /*    80 */  1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,  668,
 /*    90 */  1168, 1168, 1168, 1168,   52,   53, 1168, 1168, 1168, 1168,
 /*   100 */  1168,   54,  604,  517,  689,  689,   59,  156,  111,    3,
 /*   110 */   441,  438,  437,  276,  802,  505,  502,  417,  326,  812,
 /*   120 */   515,  641,  839,  838,  339,  815,  156,  666,  436,  441,
 /*   130 */   438,  437,  802,  814,  813,  812,  325,  840,   64,   64,
 /*   140 */    63,   63,   63,   62,  254,   70,  133,  436, 1287, 1287,
 /*   150 */    67,   67,   67,   67,  510,   65,   65,   65,   65,   64,
 /*   160 */    64,   63,   63,   63,   62,  254,  802,   24,  841,   13,
 /*   170 */   802,  514,  793,  514,  136,  796,  582,  349,   22,  454,
 /*   180 */    55,  808,  405,  714,  516,  533,  516,  840,  839,  838,
 /*   190 */   839,  838,   23,  797,  224,  797,  117,   52,   53,  706,
 /*   200 */   841,  715,  534,  533,   54, 1015,   15,  713,  331,  845,
 /*   210 */   162,  777,    3, 1015,  520,  116,  714,  802,  812,  502,
 /*   220 */  1015,  840,  812,  515,  815,  618,  808,  517,  815,  470,
 /*   230 */   455,  533,  814,  813,  812,  465,  814,  813,  812,  505,
 /*   240 */  1015,  330,  577,  491,  272,  489,  618, 1081,  712,  708,
 /*   250 */   368,  449,  766, 1015,   26, 1015, 1015,  255,  840, 1015,
 /*   260 */   555,   77,  271,  270, 1015, 1015, 1015, 1015, 1015,  802,
 /*   270 */   736,  363,   13,  802,  459,  793,  700,  699,  510,   62,
 /*   280 */   254,  593,   77,  487,  738,    5, 1015,  839,  838,  554,
 /*   290 */   553, 1188,  542,  552,  898,  573,  743,  657,  658,  796,
 /*   300 */   808,  787,  786,  514,   55,  544,  816,  543,  900,  817,
 /*   310 */   594,  596,  807,  479,  595,  841,  516,  743,  523,  839,
 /*   320 */   838,   52,   53,  743,  310,  797,  210,  313,   54, 1081,
 /*   330 */   359, 1279,  809,  837,   11,  414,    3, 1081, 1279,  841,
 /*   340 */   835,  802,  331,  502, 1081,  808,  812,  515,  618,  836,
 /*   350 */   469,  517,  815,  759,  122,  840,  281,  772,  256,  802,
 /*   360 */   814,  813,  812,  505, 1081,  642,  809,  737,  280,  351,
 /*   370 */   350,  355,  514,  841,  628,   86,  841, 1081,  840, 1081,
 /*   380 */  1081,   49,  766,  593,   77,  516,  116,  101, 1081, 1081,
 /*   390 */  1081, 1081,  821,  802,  797,  224,   13,  802,  126,  793,
 /*   400 */   650,  444,  510,  352,  468,  363,   76,  808,  354,  177,
 /*   410 */  1081,  705,  594,  596,  103,  483,  595,  101,  745,  121,
 /*   420 */   514,  591,  792,  796,  841,  492,  478,  514,   55,   83,
 /*   430 */   470,  453,  137,  516,  839,  838,  804,  415,  246,  698,
 /*   440 */   516,  458,  797,  224,  599,   52,   53,  809,  157,  797,
 /*   450 */   210,  368,   54, 1066,  356,  841,  175,  841,  839,  838,
 /*   460 */     3, 1066,  841,  803,  642,  802,  798,  502, 1066,  819,
 /*   470 */   812,  515,  808,  822,   86,  841,  815,  840,  470,  471,
 /*   480 */   172,  809,  798,  802,  814,  813,  812,  530, 1066,  545,
 /*   490 */   620,  798,  839,  838,  369,  839,  838,  506,  262,  368,
 /*   500 */   629, 1066,  840, 1066, 1066,  530,  766,  798,  546,  547,
 /*   510 */  1170, 1170, 1066,  673, 1066, 1066,   84,  802,  778,  731,
 /*   520 */    13,  802,  620,  793,  798,  111,  808,  297,  427,  304,
 /*   530 */   399, 1239,  840,  530, 1066,  473,  672,  273,  460,  823,
 /*   540 */   798,  332,  748,  839,  838,  841,  372,   68,   69,  512,
 /*   550 */   347, 1170, 1170,  805,  805,   66,   66,   67,   67,   67,
 /*   560 */    67,  842,   65,   65,   65,   65,   64,   64,   63,   63,
 /*   570 */    63,   62,  254,  776,  839,  838,  839,  838,  472,  548,
 /*   580 */   785,  839,  838,  167,    1,  775,  841,  720,  391,  692,
 /*   590 */   171,  808, 1170, 1170,  839,  838,  247,   68,   69,  512,
 /*   600 */   347,   57,  719,  805,  805,   66,   66,   67,   67,   67,
 /*   610 */    67,   56,   65,   65,   65,   65,   64,   64,   63,   63,
 /*   620 */    63,   62,  254,  841, 1239,  841,  129,  726,  811,   68,
 /*   630 */    69,  512,  347, 1170, 1170,  805,  805,   66,   66,   67,
 /*   640 */    67,   67,   67,  776,   65,   65,   65,   65,   64,   64,
 /*   650 */    63,   63,   63,   62,  254,  775,  743,  816,  569,  569,
 /*   660 */   817,  841,  367,  248,  839,  838,  782,  643,  253,  841,
 /*   670 */    75,   51,  188,  486,   27, 1170, 1170,  743,   68,   69,
 /*   680 */   512,  347,  538,  743,  805,  805,   66,   66,   67,   67,
 /*   690 */    67,   67,  801,   65,   65,   65,   65,   64,   64,   63,
 /*   700 */    63,   63,   62,  254,  756,  839,  838,  841,  129,  808,
 /*   710 */   841,  800,   68,   69,  512,  347, 1170, 1170,  805,  805,
 /*   720 */    66,   66,   67,   67,   67,   67,  756,   65,   65,   65,
 /*   730 */    65,   64,   64,   63,   63,   63,   62,  254,  841,  271,
 /*   740 */   270,  728,  839,  838,  839,  838,  285,   76,   60,  289,
 /*   750 */    46,   68,   69,  512,  347, 1169, 1169,  805,  805,   66,
 /*   760 */    66,   67,   67,   67,   67,  830,   65,   65,   65,   65,
 /*   770 */    64,   64,   63,   63,   63,   62,  254,   44,  787,  786,
 /*   780 */   839,  838,  624,  624,  799,  841,  477,  841,  839,  838,
 /*   790 */   841,  291, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
 /*   800 */  1169, 1169, 1169, 1169, 1169, 1169,  791, 1169, 1169, 1169,
 /*   810 */  1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,    9,   73,
 /*   820 */   167,  583,  587,  588,  411,  573,  839,  838,  808,  839,
 /*   830 */   838,   68,   69,  512,  347, 1170, 1170,  805,  805,   66,
 /*   840 */    66,   67,   67,   67,   67,   47,   65,   65,   65,   65,
 /*   850 */    64,   64,   63,   63,   63,   62,  254,  839,  838,  287,
 /*   860 */   359, 1278,  841,  780,  726,  474,  841,  113, 1278,  841,
 /*   870 */   536,  192,   68,   69,  512,  347, 1170, 1170,  805,  805,
 /*   880 */    66,   66,   67,   67,   67,   67,  583,   65,   65,   65,
 /*   890 */    65,   64,   64,   63,   63,   63,   62,  254,  536,  314,
 /*   900 */   545,  559,  779,  395,  839,  838,  839,  838,  570,  839,
 /*   910 */   838,  841,  840,  840,  498,   68,   69,  512,  347,  546,
 /*   920 */   400,  805,  805,   66,   66,   67,   67,   67,   67,  492,
 /*   930 */    65,   65,   65,   65,   64,   64,   63,   63,   63,   62,
 /*   940 */   254,  727, 1088,  358,  572,  787,  786,  559,  376,  239,
 /*   950 */   723,   85,   68,   69,  512,  347,  508, 1088,  805,  805,
 /*   960 */    66,   66,   67,   67,   67,   67,  828,   65,   65,   65,
 /*   970 */    65,   64,   64,   63,   63,   63,   62,  254,  107, 1089,
 /*   980 */   841,  839,  838,  678,  841,  839,  838,  707,  839,  838,
 /*   990 */   401,  785,  818,  734, 1089,  841, 1088,  504,  790,  789,
 /*  1000 */   168,   68,   69,  512,  347, 1088,  248,  805,  805,   66,
 /*  1010 */    66,   67,   67,   67,   67,  826,   65,   65,   65,   65,
 /*  1020 */    64,   64,   63,   63,   63,   62,  254,  341, 1090,  337,
 /*  1030 */   839,  838,  732, 1089,  688,  611,  841,  727,   68,   69,
 /*  1040 */   512,  347, 1089, 1090,  805,  805,   66,   66,   67,   67,
 /*  1050 */    67,   67,  183,   65,   65,   65,   65,   64,   64,   63,
 /*  1060 */    63,   63,   62,  254,  484, 1091,  328,  684,  642,  191,
 /*  1070 */   785,  647,  646,  246,  698,  727,  458,  526,   86,  514,
 /*  1080 */  1091,  840, 1090,  721,  514, 1326,  184,  521,    2,  485,
 /*  1090 */   442, 1090,  516,   31,  578,  514,  841,  516,  517,  839,
 /*  1100 */   838,  797,  210,  839,  838,  421,  797,  224,  516,  539,
 /*  1110 */   505,  750,  769,  481,  839,  838,  691,  797,  224, 1091,
 /*  1120 */   841,  717,  841,   68,   69,  512,  347,  494, 1091,  805,
 /*  1130 */   805,   66,   66,   67,   67,   67,   67,  388,   65,   65,
 /*  1140 */    65,   65,   64,   64,   63,   63,   63,   62,  254,  510,
 /*  1150 */  1253,  190,  841,  470,  461,  839,  838,  578,  766,  514,
 /*  1160 */   251,  768,  480,  456,  101,  346,  848,    2,  651,  743,
 /*  1170 */   796,  938,  516,  539,  368,   55,  675,    7,  674,  101,
 /*  1180 */   841,  797,  117,  173,  120,  327,  447,  322,  446,  158,
 /*  1190 */   743,  333,   52,   53,  745,  841,  743,  517,   21,   54,
 /*  1200 */   394,  790,  789,  320,  841,   22, 1025,    3,   50,  505,
 /*  1210 */   714,  751,  802,  331,  502,  839,  838,  812,  515,  112,
 /*  1220 */   585,  656,  841,  815,  677,  586,  840,  570,  715,  170,
 /*  1230 */   802,  814,  813,  812,  615,  416,  609,  841,  766,  839,
 /*  1240 */   838,  839,  838,  714, 1287, 1287,  237,  236,  510,  849,
 /*  1250 */   445,  682,  615,  409,  609,   50,  782,  503,  253,  757,
 /*  1260 */     5,   71,  358,  571,  802,  101,  655,   13,  802,  796,
 /*  1270 */   793,  812,  157,  785,   55,  110,  266,  815,  397,  841,
 /*  1280 */   514,  488,  514,  328,  684,  814,  813,  812,  423,   22,
 /*  1290 */   457,   52,   53,  516,  714,  516,  514,  501,   54,  839,
 /*  1300 */   838,  840,  797,  117,  797,  224,    3,  497,   74,  516,
 /*  1310 */   433,  802,  715,  502,  839,  838,  812,  515,  797,  224,
 /*  1320 */    20,  841,  815,  839,  838,  758,  116,  714,  841,  802,
 /*  1330 */   814,  813,  812,  116,  340,  767,  532,  702, 1032, 1032,
 /*  1340 */   389,  839,  838,  116,   49, 1287, 1287,  840,  373,  493,
 /*  1350 */   169,  808,  386,  711,  268,  847,  839,  838,  697,  766,
 /*  1360 */   753,  368,  258,  802,  532,   49,   13,  802,  752,  793,
 /*  1370 */   372,   68,   69,  512,  347,  368,  320,  805,  805,   66,
 /*  1380 */    66,   67,   67,   67,   67,  116,   65,   65,   65,   65,
 /*  1390 */    64,   64,   63,   63,   63,   62,  254,  627,  839,  838,
 /*  1400 */   742,    5,   68,   69,  512,  347,  683,  743,  805,  805,
 /*  1410 */    66,   66,   67,   67,   67,   67,  619,   65,   65,   65,
 /*  1420 */    65,   64,   64,   63,   63,   63,   62,  254,  743,  632,
 /*  1430 */   106,  662,  408,  116,  743,  741,    5,  681,  633,  561,
 /*  1440 */   839,  838,    6,   68,   69,  512,  347,  839,  838,  805,
 /*  1450 */   805,   66,   66,   67,   67,   67,   67,  747,   65,   65,
 /*  1460 */    65,   65,   64,   64,   63,   63,   63,   62,  254,  660,
 /*  1470 */   808,  841,  781,   68,   69,  512,  347,  744,  664,  805,
 /*  1480 */   805,   66,   66,   67,   67,   67,   67,  610,   65,   65,
 /*  1490 */    65,   65,   64,   64,   63,   63,   63,   62,  254,  159,
 /*  1500 */   451,  739,    5,   68,   69,  512,  347,  746,  189,  805,
 /*  1510 */   805,   66,   66,   67,   67,   67,   67,   19,   65,   65,
 /*  1520 */    65,   65,   64,   64,   63,   63,   63,   62,  254,  622,
 /*  1530 */   318,  740,    5,   68,   69,  512,  347,  111,  317,  805,
 /*  1540 */   805,   66,   66,   67,   67,   67,   67,   18,   65,   65,
 /*  1550 */    65,   65,   64,   64,   63,   63,   63,   62,  254,  434,
 /*  1560 */  1203,   68,   69,  512,  347,  116,  111,  805,  805,   66,
 /*  1570 */    66,   67,   67,   67,   67,  338,   65,   65,   65,   65,
 /*  1580 */    64,   64,   63,   63,   63,   62,  254,  614,  840,  674,
 /*  1590 */   839,  838,   68,   69,  512,  347,  841,   32,  805,  805,
 /*  1600 */    66,   66,   67,   67,   67,   67,  841,   65,   65,   65,
 /*  1610 */    65,   64,   64,   63,   63,   63,   62,  254,  299, 1254,
 /*  1620 */    68,   69,  512,  347,   17,  841,  805,  805,   66,   66,
 /*  1630 */    67,   67,   67,   67,  517,   65,   65,   65,   65,   64,
 /*  1640 */    64,   63,   63,   63,   62,  254,  505, 1252,  581,  481,
 /*  1650 */    68,   69,  512,  347,  116,  841,  805,  805,   66,   66,
 /*  1660 */    67,   67,   67,   67,  841,   65,   65,   65,   65,   64,
 /*  1670 */    64,   63,   63,   63,   62,  254,  136,   12,  514,  841,
 /*  1680 */   311,  496,  514,  397,  312,  510,  514,   49,  109,  840,
 /*  1690 */   423,  516,  166,  840,  339,  516,  841,  335,  480,  516,
 /*  1700 */   797,  224,  722,  840,  797,  224,  796,  840,  797,  117,
 /*  1710 */   514,   55,  123,  841,  424,  839,  838,  422,  808,  165,
 /*  1720 */   601,  168,  164,  516,  168,  839,  838,  163,   52,   53,
 /*  1730 */   841,  393,  797,  117,  283,   54,  267,  704,  601,  556,
 /*  1740 */   390,  709,  731,    3,  839,  838,  462,  840,  802,  514,
 /*  1750 */   502,  464,  248,  812,  515,  840,  379,  368,  517,  815,
 /*  1760 */   847,  368,  516,  808,  257,  766,  802,  814,  813,  812,
 /*  1770 */   505,  797,  224,  481,  839,  838,  558,  489,  566,  514,
 /*  1780 */   377,  770,  731,  839,  838,  452,  738,    5,  703,  766,
 /*  1790 */   840,  701,  516,  562,  841,  840,  566,  514,  839,  838,
 /*  1800 */   802,  797,  232,   13,  802,  556,  793,  475,    8,  510,
 /*  1810 */   516,  383,   16,  710,  696,  839,  838,  273,  460,  797,
 /*  1820 */   218,  514,  482,  551,  607,  514,  562,  524,  368,  167,
 /*  1830 */   796,  168,  839,  838,  516,   55, 1177,  808,  516,  298,
 /*  1840 */   450,  514,  621,  797,  223,  524,   50,  797,  227,  839,
 /*  1850 */   838,  382,   52,   53,  516,  294,  731,  514,  766,   54,
 /*  1860 */   638,  694,   50,  797,  225,  693,  115,    3,  841,  840,
 /*  1870 */   516,  686,  802,  726,  502,  841,  766,  812,  515,  797,
 /*  1880 */   233,  841,  808,  815,  490,  760,  514,   41,  132,  514,
 /*  1890 */   802,  814,  813,  812,  648,  517,  114,  264,  841,  516,
 /*  1900 */   766,   29,  516,  841,  766,  334,  654,  505,  797,  231,
 /*  1910 */   731,  797,  234,  839,  838,  575,  403,  443,  338,  841,
 /*  1920 */   766,   40,  360,  840,  802,  381,  631,   13,  802,  840,
 /*  1930 */   793,  840,   68,   72,  512,  347,  766,  645,  805,  805,
 /*  1940 */    66,   66,   67,   67,   67,   67,  510,   65,   65,   65,
 /*  1950 */    65,   64,   64,   63,   63,   63,   62,  254,  440,  517,
 /*  1960 */   248,  514,  339,  959,   81,  766,  319,  796,  766,  514,
 /*  1970 */   630,  505,   55,  306,  516,  840,   80,  260,   28,  410,
 /*  1980 */   514,  626,  516,  797,  238,  435,  840,  839,  838,   52,
 /*  1990 */    53,  797,  275,  516,  839,  838,   54,  325,  841,  261,
 /*  2000 */   839,  838,  797,  348,    3,  663,  843,  589,   79,  802,
 /*  2010 */   510,  502,  155,  617,  839,  515,  841,  839,  838,  840,
 /*  2020 */   815,  514,  839,  838,  500,  517,  431,  802,  814,  813,
 /*  2030 */   812,  796,  623,  514,  516,  841,   55,  505,  839,  838,
 /*  2040 */   766,  598,  727,  797,  230,  563,  516,  187,  766,  770,
 /*  2050 */     4,  613,  151,   52,   53,  797,  222,   99,  514,  766,
 /*  2060 */    54,  802,   97,  841,   13,  802,  841,  793,    3,  316,
 /*  2070 */    34,  516,  831,  802,   39,  502,  510,  339,  839,  515,
 /*  2080 */   797,  208,  829,  514,  815,  840,  514,  101,  716,   96,
 /*  2090 */   840,  802,  814,  813,  812,  840,  516,  796,  517,  516,
 /*  2100 */   766,   38,   55,  339,   37,  797,  195,  841,  797,  207,
 /*  2110 */   505,  576,  766,   36,  385,  380,  840,  839,  838,   52,
 /*  2120 */    53, 1224,   95,  378,  603,  802,   54,  727,   13,  802,
 /*  2130 */   514,  793,  602,  827,    3,  839,  838,  766,  303,  802,
 /*  2140 */   384,  502,  259,  516,  812,  515,  840,  597,  608,  510,
 /*  2150 */   815,  840,  797,  221,  839,  838,  514,  802,  814,  813,
 /*  2160 */   812,  824,  766,  820,  770,  766,  592,  579,  301,  516,
 /*  2170 */   796,  104,  300,  265,  840,   55,  840,  590,  797,  226,
 /*  2180 */   412,  840,  839,  838,  641,  839,  838,  584,  841,  168,
 /*  2190 */   770,  802,   52,   53,   13,  802,  146,  793, 1178,   54,
 /*  2200 */   290,   14,  514,  810,  568,  293,  507,    3, 1180,  766,
 /*  2210 */   180,  565,  802,  840,  502,  516,  840,  812,  515,  840,
 /*  2220 */   527,  193,  517,  815,  797,  366,  839,  838,  296,  733,
 /*  2230 */   802,  814,  813,  812,  505,  766,  541,  540,   69,  512,
 /*  2240 */   347,  549,  840,  805,  805,   66,   66,   67,   67,   67,
 /*  2250 */    67,  841,   65,   65,   65,   65,   64,   64,   63,   63,
 /*  2260 */    63,   62,  254,  729,  802,  514,  841,   13,  802,  514,
 /*  2270 */   793,  288,   90,  510,  138,  564,  840,  724,  516,  396,
 /*  2280 */   514,  766,  516,  514,  840,  841,  522,  797,  365,  248,
 /*  2290 */   840,  797,  364,  516,  796,  244,  516,  514,   88,   55,
 /*  2300 */   286,  767,  797,  206,  560,  797,  118,  839,  838,  161,
 /*  2310 */   516,  284,  467,  840,  277,  557,   52,   53,  374,  797,
 /*  2320 */   205,  517,  840,   54,  840,  840,  718,  840,  240,  263,
 /*  2330 */   514,    3,  108,  505,  844,  179,  802,  685,  502,  840,
 /*  2340 */   371,  812,  515,  516,  766,  514,  370,  815,  766,  834,
 /*  2350 */   840,  321,  797,  204,  802,  814,  813,  812,  516,  766,
 /*  2360 */   661,  639,  766,  841,  840,  315,  833,  797,  202,  308,
 /*  2370 */   839,  838,  510,  840,  840,  519,  766,  832,  840,  178,
 /*  2380 */   176,  432,  840,  567,  102,  839,  838,   25,  802,  825,
 /*  2390 */   406,   13,  802,  796,  793,  514,  174,  514,   55,  528,
 /*  2400 */   513,  254,  518,  840,  839,  838,  695,   61,  516,  766,
 /*  2410 */   516,  274,  840,  840,   45,   52,   53,  797,  201,  797,
 /*  2420 */   220,  795,   54,  329,  766,  309,  273,  517,  186,  425,
 /*  2430 */     3,   58,  771,   27,  476,  802,  840,  502,  840,  505,
 /*  2440 */   839,  515,  840,  343,  514,  342,  815,  514,  295,  292,
 /*  2450 */   514,  730,  282,  802,  814,  813,  812,  516,  514,   48,
 /*  2460 */   516,  840,  840,  516,  278,  840,  797,  200,  794,  797,
 /*  2470 */   228,  516,  797,  229,  766,  279,  766,  840,  510,   82,
 /*  2480 */   797,  219,  839,  838,  499,  252,  269,  802,  840,  336,
 /*  2490 */    13,  802,  492,  793,  392,  529,  495,  512,  347,  796,
 /*  2500 */   755,  805,  805,   66,   66,   67,   67,   67,   67,  765,
 /*  2510 */    65,   65,   65,   65,   64,   64,   63,   63,   63,   62,
 /*  2520 */   254,   52,   53,  766,  245,  764,  766,  761,   54,  766,
 /*  2530 */   134,  514,  749,  135,  463,  460,    3,  766,  690,  687,
 /*  2540 */   160,  802,  514,  502,  516,  514,  812,  515,  159,  676,
 /*  2550 */   448,  671,  815,  797,  216,  516,  514,  387,  516,  802,
 /*  2560 */   814,  813,  812,  670,  797,  199,  667,  797,  198,  516,
 /*  2570 */   323,  666,  514,  665,  362,  637,  644,  636,  797,  197,
 /*  2580 */   625,  635,  361,  154,  634,  516,  100,  153,  430,  131,
 /*  2590 */   250,  514,  152,  802,  797,  196,   13,  802,  307,  793,
 /*  2600 */   413,  428,   35,  150,  516,  130,  616,   98,  149,  514,
 /*  2610 */   766,  148,  185,  797,  209,  612,  514,  105,  420,  606,
 /*  2620 */   514,  766,  516,  419,  766,  600,  147,  514,  128,  516,
 /*  2630 */   580,  797,  214,  516,  127,  766,  407,  404,  797,  213,
 /*  2640 */   516,  514,  797,  119,  514,  145,  514,   94,  402,  797,
 /*  2650 */   212,  766,  144,   93,  516,  143,   92,  516,  514,  516,
 /*  2660 */   466,  142,  141,  797,  211,  550,  797,  217,  797,  215,
 /*  2670 */   766,  516,   34,  516,   91,  140,  537,  375,  125,  535,
 /*  2680 */   797,  203,  797,   87,  531,   33,   30,  525,  766,  124,
 /*  2690 */   139,  194,   78,  788,  344,  766,  774,  784,  324,  766,
 /*  2700 */   182,  511,  181,  735,  725,  662,  766,  235,  439,  605,
 /*  2710 */   302,  357,   10,  806,  783,  345,  773,  305,  426,  649,
 /*  2720 */   766,  249,   43,  766,  509,  766,  429,   89,  640,  659,
 /*  2730 */   574,  101,  680,  679,  653,  754,  841,  766,  652,  766,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,   31,   75,    4,  142,  143,  144,   79,   80,   81,
 /*    10 */    82,   41,   16,   85,   86,   87,   88,   89,   90,   91,
 /*    20 */    92,  106,   94,   95,   96,   97,   98,   99,  100,  101,
 /*    30 */   102,  103,  104,  100,  101,  102,  103,  104,   42,   43,
 /*    40 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*    50 */   104,   55,   89,   90,   91,   92,   93,   94,   95,   96,
 /*    60 */    97,   98,   99,  100,  101,  102,  103,  104,   72,    4,
 /*    70 */   110,    4,   76,   21,  144,   79,   80,   81,   82,   83,
 /*    80 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   37,
 /*    90 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   100 */   104,  105,  172,    4,   42,   43,  178,  127,  121,  113,
 /*   110 */   130,  131,  132,  186,  118,   16,  120,   24,  129,  123,
 /*   120 */   124,  122,  123,  124,  199,  129,  127,  140,  148,  130,
 /*   130 */   131,  132,  136,  137,  138,  139,  147,  212,   98,   99,
 /*   140 */   100,  101,  102,  103,  104,   83,   84,  148,  152,  153,
 /*   150 */    89,   90,   91,   92,   55,   94,   95,   96,   97,   98,
 /*   160 */    99,  100,  101,  102,  103,  104,  170,   88,    4,  173,
 /*   170 */   174,  199,  176,  199,  199,   76,   65,  114,  113,  207,
 /*   180 */    81,    4,   71,  118,  212,  118,  212,  212,  123,  124,
 /*   190 */   123,  124,  113,  221,  222,  221,  222,   98,   99,  100,
 /*   200 */     4,  136,  135,  136,  105,  106,  113,  121,  199,  191,
 /*   210 */   124,  286,  113,  114,  196,  243,  151,  118,  123,  120,
 /*   220 */   121,  212,  123,  124,  129,  207,    4,    4,  129,  257,
 /*   230 */   258,  164,  137,  138,  139,  136,  137,  138,  139,   16,
 /*   240 */   141,  121,  131,  269,  249,  199,  207,   24,  162,  163,
 /*   250 */   278,  100,  278,  154,  259,  156,  157,  113,  212,  160,
 /*   260 */   242,  243,   98,   99,  165,  166,  167,  168,  169,  170,
 /*   270 */   261,  262,  173,  174,  154,  176,  156,  157,   55,  103,
 /*   280 */   104,  242,  243,  308,  309,  310,  187,  123,  124,  271,
 /*   290 */   272,  180,  128,  275,  116,   78,   35,  128,  129,   76,
 /*   300 */   123,  137,  138,  199,   81,  141,  155,  143,  116,  158,
 /*   310 */   271,  272,  135,   52,  275,    4,  212,   56,  300,  123,
 /*   320 */   124,   98,   99,   62,   67,  221,  222,   70,  105,  106,
 /*   330 */   113,  114,  136,   21,  295,  296,  113,  114,  121,    4,
 /*   340 */    28,  118,  199,  120,  121,  123,  123,  124,  207,   37,
 /*   350 */   207,    4,  129,  307,    9,  212,   11,  135,   13,  136,
 /*   360 */   137,  138,  139,   16,  141,  199,  170,  121,   23,  112,
 /*   370 */   204,   26,  199,    4,  208,  209,    4,  154,  212,  156,
 /*   380 */   157,  121,  278,  242,  243,  212,  243,   72,  165,  166,
 /*   390 */   167,  168,  220,  170,  221,  222,  173,  174,   53,  176,
 /*   400 */   228,  229,   55,   58,  261,  262,  160,    4,   63,   64,
 /*   410 */   187,  100,  271,  272,   69,  311,  275,   72,  314,   74,
 /*   420 */   199,  106,  114,   76,    4,  165,  165,  199,   81,  121,
 /*   430 */   257,  258,  116,  212,  123,  124,  129,  296,  244,  245,
 /*   440 */   212,  247,  221,  222,   59,   98,   99,  136,   43,  221,
 /*   450 */   222,  278,  105,  106,  109,    4,  111,    4,  123,  124,
 /*   460 */   113,  114,    4,   26,  199,  118,    5,  120,  121,  134,
 /*   470 */   123,  124,    4,  208,  209,    4,  129,  212,  257,  258,
 /*   480 */   116,  170,    5,  136,  137,  138,  139,  118,  141,  199,
 /*   490 */   118,   30,  123,  124,  149,  123,  124,   36,  233,  278,
 /*   500 */   235,  154,  212,  156,  157,  136,  278,   30,  218,  219,
 /*   510 */    42,   43,  165,   36,  167,  168,  113,  170,  114,  199,
 /*   520 */   173,  174,  150,  176,   63,  121,  123,  142,  143,  144,
 /*   530 */   185,   13,  212,  164,  187,   38,   59,  152,  153,  119,
 /*   540 */    63,  313,  314,  123,  124,    4,  141,   79,   80,   81,
 /*   550 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   560 */    92,  108,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   570 */   102,  103,  104,   10,  123,  124,  123,  124,   81,  289,
 /*   580 */   290,  123,  124,  115,  113,   22,    4,  136,  268,  118,
 /*   590 */   121,  123,   42,   43,  123,  124,  113,   79,   80,   81,
 /*   600 */    82,   51,  151,   85,   86,   87,   88,   89,   90,   91,
 /*   610 */    92,  113,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   620 */   102,  103,  104,    4,  106,    4,  121,  159,  170,   79,
 /*   630 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*   640 */    90,   91,   92,   10,   94,   95,   96,   97,   98,   99,
 /*   650 */   100,  101,  102,  103,  104,   22,   35,  155,  117,  118,
 /*   660 */   158,    4,  210,  279,  123,  124,  214,  215,  216,    4,
 /*   670 */   113,  121,  115,   52,  169,   42,   43,   56,   79,   80,
 /*   680 */    81,   82,  298,   62,   85,   86,   87,   88,   89,   90,
 /*   690 */    91,   92,  114,   94,   95,   96,   97,   98,   99,  100,
 /*   700 */   101,  102,  103,  104,   32,  123,  124,    4,  121,    4,
 /*   710 */     4,  114,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   720 */    87,   88,   89,   90,   91,   92,   54,   94,   95,   96,
 /*   730 */    97,   98,   99,  100,  101,  102,  103,  104,    4,   98,
 /*   740 */    99,  159,  123,  124,  123,  124,   67,  160,  177,   70,
 /*   750 */   179,   79,   80,   81,   82,   42,   43,   85,   86,   87,
 /*   760 */    88,   89,   90,   91,   92,  108,   94,   95,   96,   97,
 /*   770 */    98,   99,  100,  101,  102,  103,  104,  178,  137,  138,
 /*   780 */   123,  124,  117,  118,  114,    4,  165,    4,  123,  124,
 /*   790 */     4,  112,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   800 */    87,   88,   89,   90,   91,   92,  114,   94,   95,   96,
 /*   810 */    97,   98,   99,  100,  101,  102,  103,  104,  113,  113,
 /*   820 */   115,  118,  142,  143,  144,   78,  123,  124,  123,  123,
 /*   830 */   124,   79,   80,   81,   82,   42,   43,   85,   86,   87,
 /*   840 */    88,   89,   90,   91,   92,  141,   94,   95,   96,   97,
 /*   850 */    98,   99,  100,  101,  102,  103,  104,  123,  124,  180,
 /*   860 */   113,  114,    4,  114,  159,  161,    4,  115,  121,    4,
 /*   870 */   136,  113,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   880 */    87,   88,   89,   90,   91,   92,  183,   94,   95,   96,
 /*   890 */    97,   98,   99,  100,  101,  102,  103,  104,  164,  199,
 /*   900 */   199,  118,  114,  203,  123,  124,  123,  124,   78,  123,
 /*   910 */   124,    4,  212,  212,  115,   79,   80,   81,   82,  218,
 /*   920 */   219,   85,   86,   87,   88,   89,   90,   91,   92,  165,
 /*   930 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   940 */   104,  214,  106,  113,  114,  137,  138,  164,  301,  302,
 /*   950 */   164,  187,   79,   80,   81,   82,  175,  121,   85,   86,
 /*   960 */    87,   88,   89,   90,   91,   92,  108,   94,   95,   96,
 /*   970 */    97,   98,   99,  100,  101,  102,  103,  104,  113,  106,
 /*   980 */     4,  123,  124,  212,    4,  123,  124,  260,  123,  124,
 /*   990 */   289,  290,  221,  114,  121,    4,  160,  217,  218,  219,
 /*  1000 */   121,   79,   80,   81,   82,  169,  279,   85,   86,   87,
 /*  1010 */    88,   89,   90,   91,   92,  108,   94,   95,   96,   97,
 /*  1020 */    98,   99,  100,  101,  102,  103,  104,  254,  106,  256,
 /*  1030 */   123,  124,  170,  160,  284,  170,    4,  214,   79,   80,
 /*  1040 */    81,   82,  169,  121,   85,   86,   87,   88,   89,   90,
 /*  1050 */    91,   92,  121,   94,   95,   96,   97,   98,   99,  100,
 /*  1060 */   101,  102,  103,  104,   19,  106,  316,  317,  199,  113,
 /*  1070 */   290,  212,  213,  244,  245,  214,  247,  208,  209,  199,
 /*  1080 */   121,  212,  160,  260,  199,  192,  193,  194,  195,   44,
 /*  1090 */    34,  169,  212,   49,  118,  199,    4,  212,    4,  123,
 /*  1100 */   124,  221,  222,  123,  124,  276,  221,  222,  212,  118,
 /*  1110 */    16,   66,  114,   19,  123,  124,  136,  221,  222,  160,
 /*  1120 */     4,  260,    4,   79,   80,   81,   82,  115,  169,   85,
 /*  1130 */    86,   87,   88,   89,   90,   91,   92,   81,   94,   95,
 /*  1140 */    96,   97,   98,   99,  100,  101,  102,  103,  104,   55,
 /*  1150 */   106,  113,    4,  257,  258,  123,  124,  181,  278,  199,
 /*  1160 */   104,  114,   68,  278,   72,  280,  194,  195,  136,   35,
 /*  1170 */    76,  115,  212,  182,  278,   81,  238,   83,  240,   72,
 /*  1180 */     4,  221,  222,  127,  128,  129,  130,  131,  132,  133,
 /*  1190 */    56,  311,   98,   99,  314,    4,   62,    4,   14,  105,
 /*  1200 */   217,  218,  219,  147,    4,  113,  114,  113,  121,   16,
 /*  1210 */   118,  166,  118,  199,  120,  123,  124,  123,  124,  121,
 /*  1220 */     7,   15,    4,  129,   76,   12,  212,   78,  136,  269,
 /*  1230 */   136,  137,  138,  139,  118,  128,  118,    4,  278,  123,
 /*  1240 */   124,  123,  124,  151,  152,  153,   98,   99,   55,    0,
 /*  1250 */    44,  284,  136,   40,  136,  121,  214,  215,  216,  309,
 /*  1260 */   310,  113,  113,  114,  170,   72,   60,  173,  174,   76,
 /*  1270 */   176,  123,   43,  290,   81,   57,  262,  129,   29,    4,
 /*  1280 */   199,  115,  199,  316,  317,  137,  138,  139,  199,  113,
 /*  1290 */   207,   98,   99,  212,  118,  212,  199,  207,  105,  123,
 /*  1300 */   124,  212,  221,  222,  221,  222,  113,  207,  113,  212,
 /*  1310 */    81,  118,  136,  120,  123,  124,  123,  124,  221,  222,
 /*  1320 */    14,    4,  129,  123,  124,  114,  243,  151,    4,  136,
 /*  1330 */   137,  138,  139,  243,  199,  117,  136,  114,  162,  163,
 /*  1340 */   257,  123,  124,  243,  121,  152,  153,  212,  201,  207,
 /*  1350 */   269,    4,  146,  162,  257,  106,  123,  124,  114,  278,
 /*  1360 */    46,  278,  273,  170,  164,  121,  173,  174,   61,  176,
 /*  1370 */   141,   79,   80,   81,   82,  278,  147,   85,   86,   87,
 /*  1380 */    88,   89,   90,   91,   92,  243,   94,   95,   96,   97,
 /*  1390 */    98,   99,  100,  101,  102,  103,  104,  207,  123,  124,
 /*  1400 */   309,  310,   79,   80,   81,   82,  114,   35,   85,   86,
 /*  1410 */    87,   88,   89,   90,   91,   92,  183,   94,   95,   96,
 /*  1420 */    97,   98,   99,  100,  101,  102,  103,  104,   56,  228,
 /*  1430 */   113,  230,  285,  243,   62,  309,  310,  114,  237,  164,
 /*  1440 */   123,  124,   80,   79,   80,   81,   82,  123,  124,   85,
 /*  1450 */    86,   87,   88,   89,   90,   91,   92,   32,   94,   95,
 /*  1460 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  145,
 /*  1470 */   123,    4,  125,   79,   80,   81,   82,   54,  114,   85,
 /*  1480 */    86,   87,   88,   89,   90,   91,   92,  170,   94,   95,
 /*  1490 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  188,
 /*  1500 */   189,  309,  310,   79,   80,   81,   82,   61,  114,   85,
 /*  1510 */    86,   87,   88,   89,   90,   91,   92,   14,   94,   95,
 /*  1520 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  207,
 /*  1530 */   114,  309,  310,   79,   80,   81,   82,  121,  114,   85,
 /*  1540 */    86,   87,   88,   89,   90,   91,   92,   14,   94,   95,
 /*  1550 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  114,
 /*  1560 */   106,   79,   80,   81,   82,  243,  121,   85,   86,   87,
 /*  1570 */    88,   89,   90,   91,   92,  199,   94,   95,   96,   97,
 /*  1580 */    98,   99,  100,  101,  102,  103,  104,  238,  212,  240,
 /*  1590 */   123,  124,   79,   80,   81,   82,    4,  115,   85,   86,
 /*  1600 */    87,   88,   89,   90,   91,   92,    4,   94,   95,   96,
 /*  1610 */    97,   98,   99,  100,  101,  102,  103,  104,  207,  106,
 /*  1620 */    79,   80,   81,   82,   14,    4,   85,   86,   87,   88,
 /*  1630 */    89,   90,   91,   92,    4,   94,   95,   96,   97,   98,
 /*  1640 */    99,  100,  101,  102,  103,  104,   16,  106,  181,   19,
 /*  1650 */    79,   80,   81,   82,  243,    4,   85,   86,   87,   88,
 /*  1660 */    89,   90,   91,   92,    4,   94,   95,   96,   97,   98,
 /*  1670 */    99,  100,  101,  102,  103,  104,  199,   14,  199,    4,
 /*  1680 */   199,  305,  199,   29,  203,   55,  199,  121,  113,  212,
 /*  1690 */   199,  212,   14,  212,  199,  212,    4,  224,   68,  212,
 /*  1700 */   221,  222,   38,  212,  221,  222,   76,  212,  221,  222,
 /*  1710 */   199,   81,  116,    4,  114,  123,  124,  114,    4,  114,
 /*  1720 */   118,  121,  114,  212,  121,  123,  124,  114,   98,   99,
 /*  1730 */     4,  236,  221,  222,  199,  105,  257,  100,  136,  118,
 /*  1740 */   257,  162,  199,  113,  123,  124,  121,  212,  118,  199,
 /*  1750 */   120,  116,  279,  123,  124,  212,  269,  278,    4,  129,
 /*  1760 */   106,  278,  212,    4,  273,  278,  136,  137,  138,  139,
 /*  1770 */    16,  221,  222,   19,  123,  124,  184,  199,  118,  199,
 /*  1780 */   269,  286,  199,  123,  124,  308,  309,  310,  114,  278,
 /*  1790 */   212,  155,  212,  118,    4,  212,  136,  199,  123,  124,
 /*  1800 */   170,  221,  222,  173,  174,  184,  176,  257,  113,   55,
 /*  1810 */   212,  268,  113,  162,  114,  123,  124,  152,  153,  221,
 /*  1820 */   222,  199,   68,  288,  114,  199,  151,  118,  278,  115,
 /*  1830 */    76,  121,  123,  124,  212,   81,  177,  123,  212,  114,
 /*  1840 */   113,  199,  150,  221,  222,  136,  121,  221,  222,  123,
 /*  1850 */   124,  268,   98,   99,  212,  114,  199,  199,  278,  105,
 /*  1860 */   134,  114,  121,  221,  222,  114,  114,  113,    4,  212,
 /*  1870 */   212,  114,  118,  159,  120,    4,  278,  123,  124,  221,
 /*  1880 */   222,    4,  123,  129,  306,  307,  199,  169,   18,  199,
 /*  1890 */   136,  137,  138,  139,  135,    4,  114,   49,    4,  212,
 /*  1900 */   278,  113,  212,    4,  278,  224,    6,   16,  221,  222,
 /*  1910 */   199,  221,  222,  123,  124,  114,  199,  115,  199,    4,
 /*  1920 */   278,  113,  121,  212,  170,  268,  136,  173,  174,  212,
 /*  1930 */   176,  212,   79,   80,   81,   82,  278,    8,   85,   86,
 /*  1940 */    87,   88,   89,   90,   91,   92,   55,   94,   95,   96,
 /*  1950 */    97,   98,   99,  100,  101,  102,  103,  104,   49,    4,
 /*  1960 */   279,  199,  199,  114,  113,  278,  114,   76,  278,  199,
 /*  1970 */   121,   16,   81,  199,  212,  212,  113,  203,  113,  268,
 /*  1980 */   199,  117,  212,  221,  222,   49,  212,  123,  124,   98,
 /*  1990 */    99,  221,  222,  212,  123,  124,  105,  147,    4,  236,
 /*  2000 */   123,  124,  221,  222,  113,  114,  199,  136,  113,  118,
 /*  2010 */    55,  120,  133,  136,  123,  124,    4,  123,  124,  212,
 /*  2020 */   129,  199,  123,  124,  305,    4,   81,  136,  137,  138,
 /*  2030 */   139,   76,  120,  199,  212,    4,   81,   16,  123,  124,
 /*  2040 */   278,   26,  214,  221,  222,  151,  212,  115,  278,  286,
 /*  2050 */    13,  136,  141,   98,   99,  221,  222,  160,  199,  278,
 /*  2060 */   105,  170,  146,    4,  173,  174,    4,  176,  113,  114,
 /*  2070 */   171,  212,  199,  118,   88,  120,   55,  199,  123,  124,
 /*  2080 */   221,  222,  199,  199,  129,  212,  199,   72,  260,  171,
 /*  2090 */   212,  136,  137,  138,  139,  212,  212,   76,    4,  212,
 /*  2100 */   278,   88,   81,  199,   88,  221,  222,    4,  221,  222,
 /*  2110 */    16,  117,  278,   88,  236,   18,  212,  123,  124,   98,
 /*  2120 */    99,  106,  146,   24,  172,  170,  105,  214,  173,  174,
 /*  2130 */   199,  176,  153,  199,  113,  123,  124,  278,  199,  118,
 /*  2140 */   236,  120,  203,  212,  123,  124,  212,  106,  136,   55,
 /*  2150 */   129,  212,  221,  222,  123,  124,  199,  136,  137,  138,
 /*  2160 */   139,  199,  278,  199,  286,  278,  106,  136,  199,  212,
 /*  2170 */    76,   50,  203,  260,  212,   81,  212,   61,  221,  222,
 /*  2180 */    25,  212,  123,  124,  122,  123,  124,   50,    4,  121,
 /*  2190 */   286,  170,   98,   99,  173,  174,  141,  176,  177,  105,
 /*  2200 */   199,  113,  199,  199,  203,  112,  199,  113,  114,  278,
 /*  2210 */   161,  120,  118,  212,  120,  212,  212,  123,  124,  212,
 /*  2220 */   117,  113,    4,  129,  221,  222,  123,  124,  180,  199,
 /*  2230 */   136,  137,  138,  139,   16,  278,  114,  114,   80,   81,
 /*  2240 */    82,  182,  212,   85,   86,   87,   88,   89,   90,   91,
 /*  2250 */    92,    4,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  2260 */   102,  103,  104,  199,  170,  199,    4,  173,  174,  199,
 /*  2270 */   176,  199,  112,   55,  110,  203,  212,  199,  212,   48,
 /*  2280 */   199,  278,  212,  199,  212,    4,   47,  221,  222,  279,
 /*  2290 */   212,  221,  222,  212,   76,  263,  212,  199,  211,   81,
 /*  2300 */   199,  117,  221,  222,  203,  221,  222,  123,  124,  199,
 /*  2310 */   212,  199,  199,  212,  199,  203,   98,   99,  203,  221,
 /*  2320 */   222,    4,  212,  105,  212,  212,  199,  212,  302,  227,
 /*  2330 */   199,  113,  227,   16,  198,  107,  118,  199,  120,  212,
 /*  2340 */   304,  123,  124,  212,  278,  199,  304,  129,  278,  198,
 /*  2350 */   212,  199,  221,  222,  136,  137,  138,  139,  212,  278,
 /*  2360 */   199,  199,  278,    4,  212,  199,  198,  221,  222,  199,
 /*  2370 */   123,  124,   55,  212,  212,  198,  278,   64,  212,  200,
 /*  2380 */   200,   77,  212,  136,  202,  123,  124,  121,  170,  206,
 /*  2390 */   199,  173,  174,   76,  176,  199,   73,  199,   81,  199,
 /*  2400 */   199,  104,  205,  212,  123,  124,   81,  279,  212,  278,
 /*  2410 */   212,  281,  212,  212,  177,   98,   99,  221,  222,  221,
 /*  2420 */   222,  245,  105,  199,  278,  199,  152,    4,  253,  199,
 /*  2430 */   113,  168,  170,  169,  166,  118,  212,  120,  212,   16,
 /*  2440 */   123,  124,  212,  251,  199,  252,  129,  199,  199,  199,
 /*  2450 */   199,  170,  199,  136,  137,  138,  139,  212,  199,  167,
 /*  2460 */   212,  212,  212,  212,  199,  212,  221,  222,  255,  221,
 /*  2470 */   222,  212,  221,  222,  278,  199,  278,  212,   55,  113,
 /*  2480 */   221,  222,  123,  124,  226,  104,  287,  170,  212,  254,
 /*  2490 */   173,  174,  165,  176,   45,  136,  226,   81,   82,   76,
 /*  2500 */   312,   85,   86,   87,   88,   89,   90,   91,   92,  255,
 /*  2510 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  2520 */   104,   98,   99,  278,   27,  270,  278,  270,  105,  278,
 /*  2530 */   116,  199,  312,  266,  247,  153,  113,  278,  266,  317,
 /*  2540 */   116,  118,  199,  120,  212,  199,  123,  124,  188,  223,
 /*  2550 */   141,  223,  129,  221,  222,  212,  199,   39,  212,  136,
 /*  2560 */   137,  138,  139,  232,  221,  222,  225,  221,  222,  212,
 /*  2570 */   223,  140,  199,  223,  226,  223,  232,  223,  221,  222,
 /*  2580 */   266,  223,  226,  116,  223,  212,  202,  116,  226,  202,
 /*  2590 */   266,  199,  116,  170,  221,  222,  173,  174,  293,  176,
 /*  2600 */    33,  294,  177,  116,  212,   79,  251,  239,  116,  199,
 /*  2610 */   278,  116,  274,  221,  222,  251,  199,  113,  141,  277,
 /*  2620 */   199,  278,  212,  251,  278,  239,  116,  199,  202,  212,
 /*  2630 */   251,  221,  222,  212,  202,  278,  266,  266,  221,  222,
 /*  2640 */   212,  199,  221,  222,  199,  116,  199,  241,   77,  221,
 /*  2650 */   222,  278,  116,  241,  212,  116,  241,  212,  199,  212,
 /*  2660 */   199,  116,  116,  221,  222,  288,  221,  222,  221,  222,
 /*  2670 */   278,  212,  171,  212,  241,  116,   20,  266,  116,  266,
 /*  2680 */   221,  222,  221,  222,  266,  297,  297,   17,  278,  116,
 /*  2690 */   116,  248,  299,  290,  250,  278,  224,  290,  224,  278,
 /*  2700 */   254,  282,  254,  265,  267,  230,  278,  234,  225,  251,
 /*  2710 */   250,  197,  248,  214,  214,  246,  214,  267,  267,  214,
 /*  2720 */   278,  291,  283,  278,  240,  278,  292,  264,  235,  231,
 /*  2730 */   303,   72,  221,  221,  231,  315,    4,  278,  231,  278,
};
#define YY_SHIFT_USE_DFLT (-139)
#define YY_SHIFT_COUNT (520)
#define YY_SHIFT_MIN   (-138)
#define YY_SHIFT_MAX   (2732)
static const short yy_shift_ofst[] = {
 /*     0 */  1654,   -4,  345, 1193,  315, 1094, 1754, 1630, 2094, 2094,
 /*    10 */  2094, 2015,  347, 2021, 2218, 2218, 2218, 2218, 2317, 2218,
 /*    20 */  2218, 2218, 1092,  164,  164,   -1,   99,  223, 1955, 1891,
 /*    30 */  2218, 2218, 2218, 2218, 2218, 2317, 2218, 2218, 2317, 2218,
 /*    40 */  2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
 /*    50 */  2317, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
 /*    60 */  2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
 /*    70 */  2218, 2218, 2423,  621,  621, 2062, 1176,  385, 2062, 2262,
 /*    80 */  2262, 2262, 2262,  641,  641,  619, 1347,  468, 1056,   65,
 /*    90 */  1709, 1621,  783, 1675, 1660, 1317, 1602, 1317, 1118, 1116,
 /*   100 */   372, 1218,  665, 1899, 2281, 2281, 2281, 2281, 1229, 2281,
 /*   110 */  2184, 2262,  619, 1347, 1311, 1311, 1665,  633,  633, 1044,
 /*   120 */  1148,   67,  369,  311, 1200,  734,  991,  541,  976,  865,
 /*   130 */   477,  703,  477,  471,  451,  705,  261,  196, 2103, 2359,
 /*   140 */  2059, 1592, 1275, 1894, 2247, 1994, 2031, 1467, 2012, 1915,
 /*   150 */  1877, 1871, 1233, 1692, 1864, 1790, 1726, 1324, 1032,  706,
 /*   160 */   980, 1651, 1191, 1714, 1714, 1714,  786,  582,  862, 1134,
 /*   170 */  1134,  781,  458,  335,  420,  111,  907,  858,  657,  453,
 /*   180 */   619, 1372, 1372,  619, 1249, 1107,  764, 2659, 2659, 2732,
 /*   190 */  2659, 2659, 2659, -139, -139,  550,  959,  922,  873,  836,
 /*   200 */   793,  793,  793,  793,  793,  793,  793,  793,  793,  518,
 /*   210 */   672, 1541, 1513, 1482, 1454, 1424, 1394, 1364, 1323, 1292,
 /*   220 */   599,  752,  -72, 1853, 1571, 2158, 2416, 2416,  -37,   61,
 /*   230 */    61,   61,   61,  -54,   40,  -20,   95,   95,  -67,  747,
 /*   240 */   217, 1206, 1206, 1206,   86, 1045,  120,  461,   62,  680,
 /*   250 */  1213, 1759,  222,  403,  177,  151,  312,  505,  587,  497,
 /*   260 */   497,  -13, 1849,  405,  563,  497,  704,  260,  260,  563,
 /*   270 */   808,  808,  246,  502,  571,  176, 2670, 2574, 2573, 2562,
 /*   280 */  2656, 2656, 2559, 2501, 2546, 2571, 2545, 2571, 2539, 2571,
 /*   290 */  2536, 2571, 2529, 2304, 2264, 2510, 2304, 2526, 2264, 2477,
 /*   300 */  2504, 2495, 2264, 2492, 2526, 2264, 2487, 2425, 2567, 2476,
 /*   310 */  2304, 2471, 2366, 2304, 2467, 2366, 2409, 2409, 2409, 2409,
 /*   320 */  2518, 2366, 2409, 2431, 2409, 2518, 2409, 2409, 2360, 2424,
 /*   330 */  2382, 2414, 2497, 2497, 2449, 2449, 2263, 2327, 2366, 2381,
 /*   340 */  2366, 2263, 2292, 2268, 2264, 2274, 2237, 2325, 2297, 2323,
 /*   350 */  2266, 2304, 2313, 2313, 2228, 2228, 2228, 2228, -139, -139,
 /*   360 */  -139, -139, -139, -139, -139, -139, -139, -139,  713,  679,
 /*   370 */  1149,  830, -138,  257,  -73,   79, 1801, 1741,  -70, 1725,
 /*   380 */    93, 1710, 1603, 1600, 1445, 1416,  169,   52,  -11, 1244,
 /*   390 */  1223,  879,  -30,  404,  308,  557, 2239, 2231, 2164, 2160,
 /*   400 */  2123, 2122, 2091, 2108, 2049, 2093, 2088, 2055, 2048, 2137,
 /*   410 */  2068, 2121, 2116, 2155, 2060, 2041, 1979, 1952, 1976, 2099,
 /*   420 */  2097, 1918, 2025, 2016, 2013, 1986, 1916, 1897, 2037, 1911,
 /*   430 */  1932, 1912, 1945, 1850, 1879, 1895, 1936, 1865, 1863, 1852,
 /*   440 */  1851, 1909, 1929, 1808, 1802, 1900, 1788, 1848, 1870, 1782,
 /*   450 */  1718, 1727, 1757, 1752, 1751, 1747, 1659, 1700, 1625, 1636,
 /*   460 */  1699, 1674, 1695, 1625, 1637, 1635, 1596, 1579, 1613, 1608,
 /*   470 */  1566, 1605, 1664, 1678, 1575, 1566, 1663, 1610, 1533, 1503,
 /*   480 */  1423, 1446, 1425, 1362, 1307, 1314, 1306, 1211, 1195, 1166,
 /*   490 */  1098, 1087, 1184, 1047, 1038, 1012,  931,  998,  956,  799,
 /*   500 */   931,  788,  758,  749,  692,  498,  670,  597,  578,  469,
 /*   510 */   483,  437,  307,  364,  316,  192,  178,  144,   63,  -40,
 /*   520 */   -85,
};
#define YY_REDUCE_USE_DFLT (-76)
#define YY_REDUCE_COUNT (367)
#define YY_REDUCE_MIN   (-75)
#define YY_REDUCE_MAX   (2514)
static const short yy_reduce_ofst[] = {
 /*     0 */   893,  -28,   18, 1083,   39,  880,  228,  104,  896,  221,
 /*    10 */   173,  141, 1550,  885, 1511, 1487, 1483, 1081,  960, 1479,
 /*    20 */  1097,  -26,  143,  701,  290,  265, 2461, 2459, 2447, 2445,
 /*    30 */  2442, 2428, 2421, 2417, 2410, 2392, 2373, 2357, 2346, 2343,
 /*    40 */  2332, 2259, 2251, 2248, 2245, 2198, 2196, 2146, 2131, 2098,
 /*    50 */  2084, 2081, 2070, 2066, 2003, 1957, 1931, 1887, 1884, 1859,
 /*    60 */  1834, 1822, 1781, 1770, 1762, 1690, 1687, 1658, 1642, 1626,
 /*    70 */  1622, 1598, 1580, 1477,  -25,  166,    9,  829,  869, 1904,
 /*    80 */  1878, 1763, 1495,  780,  983, 1578,  452,  727,  172, 1014,
 /*    90 */  2115, 2112, 2101, 2072, 2001, 1491, 1969, 1089, 1939, 1774,
 /*   100 */  1481, 1719,  700, 1535, 1711, 1657, 1583, 1543, 1201,  320,
 /*   110 */  1376,  -75,   46, 1042,  967,  750,  194, 1681, 1473,  384,
 /*   120 */   771, 2276, 2265, 2201, 2127, 2127, 2253, 2250, 2249, 2230,
 /*   130 */  1349, 2226,  938, 2224, 2127, 1913, 1222, 2201, 2200, 2127,
 /*   140 */  2127, 2127, 2127, 2127, 2127, 2127, 2191, 2127, 2127, 2127,
 /*   150 */  2127, 2170, 2127, 2127, 2127, 2166, 2162, 2161, 2152, 2138,
 /*   160 */  2127, 2113, 2110, 1828,  861,  823, 2078, 2064, 2030, 1192,
 /*   170 */  1126, 2007, 2004, 1964, 1962, 1147, 1934, 1883, 1873, 1807,
 /*   180 */  1717, 1091,  950, 1135,  972, 1411,  773, 1322, 1190,  859,
 /*   190 */  1142, 1100, 1090,  647,   -5, 2010, 2010, 2010, 2010, 2010,
 /*   200 */  2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
 /*   210 */  2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
 /*   220 */  2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
 /*   230 */  2010, 2010, 2010, 2010, 2010, 2493, 2512, 2511, 2010, 2427,
 /*   240 */  2427, 2507, 2503, 2498, 2463, 2420, 2469, 2484, 2439, 2434,
 /*   250 */  2430, 2505, 2502, 2500, 2499, 2464, 2514, 2458, 2460, 2451,
 /*   260 */  2450, 2483, 2473, 2475, 2474, 2437, 2438, 2448, 2446, 2472,
 /*   270 */  2407, 2403, 2444, 2443, 2419, 2010, 2393, 2314, 2418, 2413,
 /*   280 */  2389, 2388, 2411, 2377, 2314, 2433, 2314, 2415, 2314, 2412,
 /*   290 */  2314, 2406, 2371, 2432, 2379, 2370, 2426, 2386, 2372, 2342,
 /*   300 */  2338, 2314, 2364, 2314, 2368, 2355, 2314, 2307, 2305, 2324,
 /*   310 */  2387, 2314, 2362, 2384, 2314, 2356, 2361, 2358, 2354, 2352,
 /*   320 */  2344, 2348, 2350, 2341, 2347, 2331, 2328, 2326, 2222, 2272,
 /*   330 */  2287, 2267, 2220, 2188, 2257, 2255, 2254, 2235, 2270, 2199,
 /*   340 */  2258, 2213, 2175, 2193, 2192, 2176, 2130, 2128, 2010, 2183,
 /*   350 */  2197, 2182, 2180, 2179, 2177, 2168, 2151, 2136, 2042, 2036,
 /*   360 */  2026, 2105, 2102, 2032, 2010, 2010, 2010, 2087,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   854, 1180, 1287, 1168, 1287, 1168, 1168, 1168, 1168, 1168,
 /*    10 */  1168, 1287, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
 /*    20 */  1168, 1168, 1032, 1325, 1325, 1325, 1168, 1168, 1168, 1168,
 /*    30 */  1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
 /*    40 */  1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
 /*    50 */  1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
 /*    60 */  1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
 /*    70 */  1168, 1168, 1118, 1302, 1302, 1325, 1025, 1325, 1325, 1325,
 /*    80 */  1325, 1325, 1325, 1325, 1325, 1325,  901, 1021,  891, 1032,
 /*    90 */  1325, 1325, 1325, 1325, 1325, 1092, 1106, 1092, 1084, 1075,
 /*   100 */  1325, 1325, 1325, 1204, 1100, 1100, 1100, 1100,  972, 1100,
 /*   110 */  1325, 1325, 1325, 1325, 1139, 1138, 1325, 1060, 1060, 1170,
 /*   120 */  1325, 1257, 1262, 1116, 1325, 1325, 1325, 1325, 1325, 1093,
 /*   130 */  1325, 1325, 1325, 1325, 1033, 1021, 1302, 1116, 1325, 1325,
 /*   140 */  1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1107, 1085,
 /*   150 */  1076, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   160 */  1325, 1325, 1325, 1021, 1021, 1021, 1325, 1325, 1325, 1302,
 /*   170 */  1302, 1325, 1117, 1325, 1325,  888, 1325, 1325, 1325,  860,
 /*   180 */  1325, 1302, 1302, 1325,  854, 1287, 1054, 1287, 1287,  896,
 /*   190 */  1287, 1287, 1287, 1280, 1011, 1070, 1170, 1170, 1170, 1170,
 /*   200 */  1174, 1175, 1038, 1080, 1068, 1181, 1072, 1071, 1173, 1170,
 /*   210 */  1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
 /*   220 */  1170, 1170, 1170, 1170, 1170, 1141, 1153, 1140, 1148, 1149,
 /*   230 */  1152, 1143, 1157, 1142, 1144, 1325, 1325, 1325, 1145, 1325,
 /*   240 */  1325, 1325, 1325, 1325, 1024, 1325,  994, 1325, 1325, 1325,
 /*   250 */  1231, 1325, 1325,  903, 1325, 1009,  863, 1079, 1022, 1050,
 /*   260 */  1050,  939,  963,  925, 1060, 1050, 1040, 1054, 1054, 1060,
 /*   270 */  1325, 1325, 1022, 1009, 1176, 1146, 1271, 1041, 1041, 1041,
 /*   280 */  1256, 1256, 1041, 1204, 1041,  985, 1041,  985, 1041,  985,
 /*   290 */  1041,  985, 1041,  885, 1079, 1041,  885,  976, 1079, 1112,
 /*   300 */  1096, 1041, 1079, 1041,  976, 1079, 1041, 1238, 1236, 1041,
 /*   310 */   885, 1041, 1189,  885, 1041, 1189,  974,  974,  974,  974,
 /*   320 */   955, 1189,  974,  939,  974,  955,  974,  974, 1321, 1041,
 /*   330 */  1325, 1041, 1312, 1312, 1063, 1063, 1069, 1054, 1189, 1195,
 /*   340 */  1189, 1069, 1067, 1064, 1079, 1325, 1325, 1170, 1147,  882,
 /*   350 */   958,  885,  871,  871,  859,  859,  859,  859, 1284, 1284,
 /*   360 */  1280,  941,  941, 1027, 1156, 1155, 1154,  912, 1182, 1325,
 /*   370 */  1325, 1325, 1325, 1325, 1325, 1205, 1325, 1325, 1325, 1325,
 /*   380 */  1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   390 */  1325, 1325, 1325, 1325, 1325, 1325, 1325,  855, 1325, 1325,
 /*   400 */  1325, 1325, 1325, 1274, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   410 */  1235, 1234, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   420 */  1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1223, 1325,
 /*   430 */  1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   440 */  1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   450 */  1325, 1325, 1325, 1325, 1325, 1120, 1169, 1325,  997, 1003,
 /*   460 */  1325, 1325, 1325,  998, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   470 */  1179, 1325, 1325, 1325, 1325, 1065, 1325, 1325, 1325, 1325,
 /*   480 */  1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   490 */  1318, 1055, 1325, 1325, 1325, 1325, 1289, 1325, 1325, 1325,
 /*   500 */  1288, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
 /*   510 */  1325, 1119, 1171, 1133, 1325, 1132, 1131,  894, 1325,  869,
 /*   520 */  1325,  851,  856, 1273, 1270, 1272, 1267, 1268, 1266, 1269,
 /*   530 */  1265, 1263, 1264, 1261, 1259, 1258, 1260, 1255, 1251, 1211,
 /*   540 */  1209, 1207, 1216, 1215, 1214, 1213, 1212, 1208, 1206, 1210,
 /*   550 */  1202, 1201, 1103, 1082, 1073,  992, 1250, 1248, 1249, 1200,
 /*   560 */  1198, 1199,  991,  990,  989,  984,  983,  982,  981, 1277,
 /*   570 */  1286, 1285, 1283, 1282, 1281, 1275, 1276, 1187, 1186, 1184,
 /*   580 */  1183, 1185,  887, 1227, 1230, 1229, 1228, 1233, 1232, 1225,
 /*   590 */  1237, 1242, 1241, 1246, 1245, 1244, 1243, 1240, 1222, 1111,
 /*   600 */  1110, 1108, 1105, 1115, 1114, 1113, 1104, 1097, 1109, 1087,
 /*   610 */  1095, 1094, 1083, 1086,  977, 1078, 1074, 1077,  993, 1226,
 /*   620 */   988,  987,  986,  886,  881, 1043,  880,  879,  890,  961,
 /*   630 */   962,  970,  973,  968,  971,  967,  966,  965,  969,  964,
 /*   640 */   960,  893,  892,  902,  954,  937,  928,  895,  930,  927,
 /*   650 */   926,  931,  946,  945,  952,  951,  950,  949,  948,  944,
 /*   660 */   947,  943,  942,  932,  924,  923,  940,  922,  957,  956,
 /*   670 */   953,  921,  980,  979,  978,  975,  920,  919,  918,  917,
 /*   680 */   916,  915, 1167, 1324, 1320, 1323, 1322, 1319, 1166, 1172,
 /*   690 */  1161, 1122, 1121, 1160, 1158, 1171, 1159, 1130,  995, 1006,
 /*   700 */  1005, 1004, 1001, 1002, 1016, 1014, 1013, 1012, 1049, 1048,
 /*   710 */  1047, 1046, 1045, 1044, 1037, 1035, 1030, 1029, 1042, 1036,
 /*   720 */  1034, 1031, 1052, 1053, 1051, 1028, 1020, 1018, 1019, 1017,
 /*   730 */  1102, 1099, 1101, 1098, 1039, 1026, 1023, 1010, 1300, 1298,
 /*   740 */  1301, 1299, 1297, 1305, 1307, 1306, 1311, 1309, 1308, 1304,
 /*   750 */  1317, 1316, 1315, 1314, 1313, 1303, 1310, 1296, 1295, 1294,
 /*   760 */  1293, 1057, 1062, 1061, 1056, 1000, 1169, 1292, 1290, 1291,
 /*   770 */  1192, 1194, 1197, 1196, 1193, 1059, 1058, 1191, 1190, 1162,
 /*   780 */  1137,  908,  906,  907, 1219, 1218, 1221, 1220, 1217,  910,
 /*   790 */   909,  905,  904, 1135,  999,  996, 1129, 1128, 1247, 1164,
 /*   800 */  1165, 1127, 1123, 1163, 1151, 1150, 1136, 1126,  897, 1124,
 /*   810 */  1134, 1125,  936,  935,  934,  933, 1008, 1007,  914,  929,
 /*   820 */   913,  911,  889,  884,  883,  878,  876,  873,  875,  872,
 /*   830 */   877,  874,  870,  868,  867,  866,  865,  864,  900,  899,
 /*   840 */   898,  894,  862,  861,  858,  857,  853,  852,  850,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "NO",            "NULLS",         "OTHERS",        "PLAN",        
  "QUERY",         "KEY",           "OF",            "OFFSET",      
  "PARTITION",     "PRAGMA",        "PRECEDING",     "RAISE",       
  "RANGE",         "RECURSIVE",     "RELEASE",       "REPLACE",     
  "RESTRICT",      "ROW",           "ROWS",          "ROLLBACK",    
  "SAVEPOINT",     "TEMP",          "TIES",          "TRIGGER",     
  "UNBOUNDED",     "VACUUM",        "VIEW",          "VIRTUAL",     
  "WITH",          "WITHOUT",       "REINDEX",       "RENAME",      
  "CTIME_KW",      "IF",            "ANY",           "OR",          
  "AND",           "NOT",           "IS",            "BETWEEN",     
  "IN",            "ISNULL",        "NOTNULL",       "NE",          
  "EQ",            "GT",            "LE",            "LT",          
  "GE",            "ESCAPE",        "BITAND",        "BITOR",       
  "LSHIFT",        "RSHIFT",        "PLUS",          "MINUS",       
  "STAR",          "SLASH",         "REM",           "CONCAT",      
  "COLLATE",       "BITNOT",        "SEMI",          "TRANSACTION", 
  "ID_TRANS",      "COMMIT",        "TO",            "CREATE",      
  "TABLE",         "LP",            "RP",            "AS",          
  "DOT",           "ID_TAB_NEW",    "ID_DB",         "CTX_ROWID_KW",
  "EXISTS",        "COMMA",         "ID_COL_NEW",    "STRING",      
  "JOIN_KW",       "ID_COL_TYPE",   "RIGHT_ASSOC",   "CONSTRAINT",  
  "DEFAULT",       "NULL",          "PRIMARY",       "UNIQUE",      
  "CHECK",         "REFERENCES",    "ID_CONSTR",     "ID_COLLATE",  
  "ID_TAB",        "INTEGER",       "FLOAT",         "BLOB",        
  "AUTOINCR",      "ON",            "INSERT",        "DELETE",      
  "UPDATE",        "ID_FK_MATCH",   "SET",           "DEFERRABLE",  
  "FOREIGN",       "DROP",          "ID_VIEW_NEW",   "ID_VIEW",     
  "SELECT",        "VALUES",        "UNION",         "ALL",         
  "EXCEPT",        "INTERSECT",     "DISTINCT",      "ID_ALIAS",    
  "FROM",          "USING",         "JOIN",          "ID_JOIN_OPTS",
  "ID_IDX",        "ORDER",         "GROUP",         "HAVING",      
  "LIMIT",         "WHERE",         "ID_COL",        "INTO",        
  "NOTHING",       "CASE",          "ID_FN",         "ID_ERR_MSG",  
  "VARIABLE",      "WHEN",          "THEN",          "ELSE",        
  "INDEX",         "ID_IDX_NEW",    "ID_PRAGMA",     "ID_TRIG_NEW", 
  "ID_TRIG",       "ALTER",         "ADD",           "WINDOW",      
  "OVER",          "FILTER",        "error",         "cmd",         
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "transtype",     "trans_opt",     "nm",          
  "savepoint_opt",  "temp",          "ifnotexists",   "fullname",    
  "columnlist",    "conslist_opt",  "table_options",  "select",      
  "column",        "columnid",      "type",          "carglist",    
  "id",            "id_opt",        "ids",           "typetoken",   
  "typename",      "signed",        "plus_num",      "minus_num",   
  "ccons",         "term",          "expr",          "onconf",      
  "sortorder",     "autoinc",       "idxlist_opt",   "refargs",     
  "defer_subclause",  "gen_always",    "refarg",        "refact",      
  "init_deferred_pred_opt",  "conslist",      "tconscomma",    "tcons",       
  "idxlist",       "defer_subclause_opt",  "resolvetype",   "orconf",      
  "raisetype",     "ifexists",      "select_stmt",   "with",        
  "selectnowith",  "oneselect",     "multiselect_op",  "values",      
  "distinct",      "selcollist",    "from",          "where_opt",   
  "groupby_opt",   "having_opt",    "orderby_opt",   "limit_opt",   
  "window_clause",  "nexprlist",     "exprlist",      "sclp",        
  "as",            "joinsrc",       "singlesrc",     "seltablist",  
  "joinop",        "joinconstr_opt",  "dbnm",          "indexed_opt", 
  "idlist",        "sortlist",      "nulls",         "delete_stmt", 
  "update_stmt",   "setlist",       "idlist_opt",    "insert_stmt", 
  "insert_cmd",    "upsert",        "exprx",         "not_opt",     
  "case_operand",  "case_exprlist",  "case_else",     "likeop",      
  "filter_over",   "uniqueflag",    "idxlist_single",  "collate",     
  "vinto",         "nmnum",         "number",        "trigger_time",
  "trigger_event",  "foreach_clause",  "when_clause",   "trigger_cmd_list",
  "trigger_cmd",   "database_kw_opt",  "key_opt",       "kwcolumn_opt",
  "create_vtab",   "vtabarglist",   "vtabarg",       "vtabargtoken",
  "anylist",       "wqlist",        "windowdefn_list",  "windowdefn",  
  "window",        "frame_opt",     "range_or_rows",  "frame_bound_s",
  "frame_exclude_opt",  "frame_bound_e",  "frame_bound",   "frame_exclude",
  "filter_clause",  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= WITHOUT nm",
 /*  35 */ "table_options ::= WITHOUT CTX_ROWID_KW",
 /*  36 */ "ifnotexists ::=",
 /*  37 */ "ifnotexists ::= IF NOT EXISTS",
 /*  38 */ "temp ::= TEMP",
 /*  39 */ "temp ::=",
 /*  40 */ "columnlist ::= columnlist COMMA column",
 /*  41 */ "columnlist ::= column",
 /*  42 */ "column ::= columnid type carglist",
 /*  43 */ "columnid ::= nm",
 /*  44 */ "columnid ::= ID_COL_NEW",
 /*  45 */ "id ::= ID",
 /*  46 */ "id_opt ::= id",
 /*  47 */ "id_opt ::=",
 /*  48 */ "ids ::= ID|STRING",
 /*  49 */ "nm ::= id",
 /*  50 */ "nm ::= STRING",
 /*  51 */ "nm ::= JOIN_KW",
 /*  52 */ "type ::=",
 /*  53 */ "type ::= typetoken",
 /*  54 */ "typetoken ::= typename",
 /*  55 */ "typetoken ::= typename LP signed RP",
 /*  56 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  57 */ "typename ::= ids",
 /*  58 */ "typename ::= typename ids",
 /*  59 */ "typename ::= ID_COL_TYPE",
 /*  60 */ "signed ::= plus_num",
 /*  61 */ "signed ::= minus_num",
 /*  62 */ "carglist ::= carglist ccons",
 /*  63 */ "carglist ::=",
 /*  64 */ "ccons ::= CONSTRAINT nm",
 /*  65 */ "ccons ::= DEFAULT term",
 /*  66 */ "ccons ::= DEFAULT LP expr RP",
 /*  67 */ "ccons ::= DEFAULT PLUS term",
 /*  68 */ "ccons ::= DEFAULT MINUS term",
 /*  69 */ "ccons ::= DEFAULT id",
 /*  70 */ "ccons ::= DEFAULT CTIME_KW",
 /*  71 */ "ccons ::= NULL onconf",
 /*  72 */ "ccons ::= NOT NULL onconf",
 /*  73 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  74 */ "ccons ::= UNIQUE onconf",
 /*  75 */ "ccons ::= CHECK LP expr RP",
 /*  76 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  77 */ "ccons ::= defer_subclause",
 /*  78 */ "ccons ::= COLLATE ids",
 /*  79 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  80 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  81 */ "ccons ::= COLLATE ID_COLLATE",
 /*  82 */ "ccons ::= REFERENCES ID_TAB",
 /*  83 */ "ccons ::= CHECK LP RP",
 /*  84 */ "term ::= NULL",
 /*  85 */ "term ::= INTEGER",
 /*  86 */ "term ::= FLOAT",
 /*  87 */ "term ::= STRING|BLOB",
 /*  88 */ "gen_always ::= GENERATED ALWAYS",
 /*  89 */ "gen_always ::=",
 /*  90 */ "autoinc ::=",
 /*  91 */ "autoinc ::= AUTOINCR",
 /*  92 */ "refargs ::=",
 /*  93 */ "refargs ::= refargs refarg",
 /*  94 */ "refarg ::= MATCH nm",
 /*  95 */ "refarg ::= ON INSERT refact",
 /*  96 */ "refarg ::= ON DELETE refact",
 /*  97 */ "refarg ::= ON UPDATE refact",
 /*  98 */ "refarg ::= MATCH ID_FK_MATCH",
 /*  99 */ "refact ::= SET NULL",
 /* 100 */ "refact ::= SET DEFAULT",
 /* 101 */ "refact ::= CASCADE",
 /* 102 */ "refact ::= RESTRICT",
 /* 103 */ "refact ::= NO ACTION",
 /* 104 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 105 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 106 */ "init_deferred_pred_opt ::=",
 /* 107 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 108 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 109 */ "conslist_opt ::=",
 /* 110 */ "conslist_opt ::= COMMA conslist",
 /* 111 */ "conslist ::= conslist tconscomma tcons",
 /* 112 */ "conslist ::= tcons",
 /* 113 */ "tconscomma ::= COMMA",
 /* 114 */ "tconscomma ::=",
 /* 115 */ "tcons ::= CONSTRAINT nm",
 /* 116 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 117 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 118 */ "tcons ::= CHECK LP expr RP onconf",
 /* 119 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 120 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 121 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 122 */ "tcons ::= CHECK LP RP onconf",
 /* 123 */ "defer_subclause_opt ::=",
 /* 124 */ "defer_subclause_opt ::= defer_subclause",
 /* 125 */ "onconf ::=",
 /* 126 */ "onconf ::= ON CONFLICT resolvetype",
 /* 127 */ "orconf ::=",
 /* 128 */ "orconf ::= OR resolvetype",
 /* 129 */ "resolvetype ::= raisetype",
 /* 130 */ "resolvetype ::= IGNORE",
 /* 131 */ "resolvetype ::= REPLACE",
 /* 132 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 133 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 134 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 135 */ "ifexists ::= IF EXISTS",
 /* 136 */ "ifexists ::=",
 /* 137 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 138 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 139 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 140 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 141 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 142 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 143 */ "cmd ::= select_stmt",
 /* 144 */ "select_stmt ::= select",
 /* 145 */ "select ::= with selectnowith",
 /* 146 */ "selectnowith ::= oneselect",
 /* 147 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 148 */ "selectnowith ::= values",
 /* 149 */ "selectnowith ::= selectnowith COMMA values",
 /* 150 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 151 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 152 */ "values ::= VALUES LP nexprlist RP",
 /* 153 */ "values ::= values COMMA LP exprlist RP",
 /* 154 */ "multiselect_op ::= UNION",
 /* 155 */ "multiselect_op ::= UNION ALL",
 /* 156 */ "multiselect_op ::= EXCEPT",
 /* 157 */ "multiselect_op ::= INTERSECT",
 /* 158 */ "distinct ::= DISTINCT",
 /* 159 */ "distinct ::= ALL",
 /* 160 */ "distinct ::=",
 /* 161 */ "sclp ::= selcollist COMMA",
 /* 162 */ "sclp ::=",
 /* 163 */ "selcollist ::= sclp expr as",
 /* 164 */ "selcollist ::= sclp STAR",
 /* 165 */ "selcollist ::= sclp nm DOT STAR",
 /* 166 */ "selcollist ::= sclp",
 /* 167 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 168 */ "as ::= AS nm",
 /* 169 */ "as ::= ids",
 /* 170 */ "as ::= AS ID_ALIAS",
 /* 171 */ "as ::= ID_ALIAS",
 /* 172 */ "as ::=",
 /* 173 */ "from ::=",
 /* 174 */ "from ::= FROM joinsrc",
 /* 175 */ "joinsrc ::= singlesrc seltablist",
 /* 176 */ "joinsrc ::=",
 /* 177 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 178 */ "seltablist ::=",
 /* 179 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 180 */ "singlesrc ::= LP select RP as",
 /* 181 */ "singlesrc ::= LP joinsrc RP as",
 /* 182 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 183 */ "singlesrc ::=",
 /* 184 */ "singlesrc ::= nm DOT",
 /* 185 */ "singlesrc ::= nm DOT ID_TAB",
 /* 186 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 187 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 188 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 189 */ "joinconstr_opt ::= ON expr",
 /* 190 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 191 */ "joinconstr_opt ::=",
 /* 192 */ "dbnm ::=",
 /* 193 */ "dbnm ::= DOT nm",
 /* 194 */ "fullname ::= nm dbnm",
 /* 195 */ "joinop ::= COMMA",
 /* 196 */ "joinop ::= JOIN",
 /* 197 */ "joinop ::= JOIN_KW JOIN",
 /* 198 */ "joinop ::= JOIN_KW nm JOIN",
 /* 199 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 200 */ "joinop ::= ID_JOIN_OPTS",
 /* 201 */ "indexed_opt ::=",
 /* 202 */ "indexed_opt ::= INDEXED BY nm",
 /* 203 */ "indexed_opt ::= NOT INDEXED",
 /* 204 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 205 */ "orderby_opt ::=",
 /* 206 */ "orderby_opt ::= ORDER BY sortlist",
 /* 207 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 208 */ "sortlist ::= expr sortorder nulls",
 /* 209 */ "sortorder ::= ASC",
 /* 210 */ "sortorder ::= DESC",
 /* 211 */ "sortorder ::=",
 /* 212 */ "nulls ::= NULLS FIRST",
 /* 213 */ "nulls ::= NULLS LAST",
 /* 214 */ "nulls ::=",
 /* 215 */ "groupby_opt ::=",
 /* 216 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 217 */ "groupby_opt ::= GROUP BY",
 /* 218 */ "having_opt ::=",
 /* 219 */ "having_opt ::= HAVING expr",
 /* 220 */ "limit_opt ::=",
 /* 221 */ "limit_opt ::= LIMIT expr",
 /* 222 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 223 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 224 */ "cmd ::= delete_stmt",
 /* 225 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt",
 /* 226 */ "delete_stmt ::= with DELETE FROM",
 /* 227 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 228 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 229 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 230 */ "where_opt ::=",
 /* 231 */ "where_opt ::= WHERE expr",
 /* 232 */ "where_opt ::= WHERE",
 /* 233 */ "cmd ::= update_stmt",
 /* 234 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt",
 /* 235 */ "update_stmt ::= with UPDATE orconf",
 /* 236 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 237 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 238 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 239 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 240 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 241 */ "setlist ::= nm EQ expr",
 /* 242 */ "setlist ::= LP idlist RP EQ expr",
 /* 243 */ "setlist ::=",
 /* 244 */ "setlist ::= setlist COMMA",
 /* 245 */ "setlist ::= setlist COMMA ID_COL",
 /* 246 */ "setlist ::= ID_COL",
 /* 247 */ "idlist_opt ::=",
 /* 248 */ "idlist_opt ::= LP idlist RP",
 /* 249 */ "idlist ::= idlist COMMA nm",
 /* 250 */ "idlist ::= nm",
 /* 251 */ "idlist ::=",
 /* 252 */ "idlist ::= idlist COMMA ID_COL",
 /* 253 */ "idlist ::= ID_COL",
 /* 254 */ "cmd ::= insert_stmt",
 /* 255 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert",
 /* 256 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES",
 /* 257 */ "insert_stmt ::= with insert_cmd INTO",
 /* 258 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 259 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 260 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 261 */ "insert_cmd ::= INSERT orconf",
 /* 262 */ "insert_cmd ::= REPLACE",
 /* 263 */ "upsert ::=",
 /* 264 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 265 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 266 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 267 */ "exprx ::= nm DOT",
 /* 268 */ "exprx ::= nm DOT nm DOT",
 /* 269 */ "exprx ::= expr not_opt BETWEEN expr AND",
 /* 270 */ "exprx ::= CASE case_operand case_exprlist case_else",
 /* 271 */ "exprx ::= expr not_opt IN LP exprlist",
 /* 272 */ "exprx ::= expr not_opt IN ID_DB",
 /* 273 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 274 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 275 */ "exprx ::= nm DOT ID_TAB|ID_COL",
 /* 276 */ "exprx ::= nm DOT nm DOT ID_COL",
 /* 277 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 278 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 279 */ "exprx ::= term",
 /* 280 */ "exprx ::= CTIME_KW",
 /* 281 */ "exprx ::= LP nexprlist RP",
 /* 282 */ "exprx ::= id",
 /* 283 */ "exprx ::= JOIN_KW",
 /* 284 */ "exprx ::= nm DOT nm",
 /* 285 */ "exprx ::= nm DOT nm DOT nm",
 /* 286 */ "exprx ::= VARIABLE",
 /* 287 */ "exprx ::= expr COLLATE ids",
 /* 288 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 289 */ "exprx ::= ID LP distinct exprlist RP",
 /* 290 */ "exprx ::= ID LP STAR RP",
 /* 291 */ "exprx ::= expr AND expr",
 /* 292 */ "exprx ::= expr OR expr",
 /* 293 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 294 */ "exprx ::= expr EQ|NE expr",
 /* 295 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 296 */ "exprx ::= expr PLUS|MINUS expr",
 /* 297 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 298 */ "exprx ::= expr CONCAT expr",
 /* 299 */ "exprx ::= expr not_opt likeop expr",
 /* 300 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 301 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 302 */ "exprx ::= expr NOT NULL",
 /* 303 */ "exprx ::= expr IS not_opt expr",
 /* 304 */ "exprx ::= NOT expr",
 /* 305 */ "exprx ::= BITNOT expr",
 /* 306 */ "exprx ::= MINUS expr",
 /* 307 */ "exprx ::= PLUS expr",
 /* 308 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 309 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 310 */ "exprx ::= LP select RP",
 /* 311 */ "exprx ::= expr not_opt IN LP select RP",
 /* 312 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 313 */ "exprx ::= EXISTS LP select RP",
 /* 314 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 315 */ "exprx ::= RAISE LP IGNORE RP",
 /* 316 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 317 */ "exprx ::= ID LP distinct exprlist RP filter_over",
 /* 318 */ "exprx ::= ID LP STAR RP filter_over",
 /* 319 */ "expr ::=",
 /* 320 */ "expr ::= exprx",
 /* 321 */ "not_opt ::=",
 /* 322 */ "not_opt ::= NOT",
 /* 323 */ "likeop ::= LIKE_KW|MATCH",
 /* 324 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 325 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 326 */ "case_else ::= ELSE expr",
 /* 327 */ "case_else ::=",
 /* 328 */ "case_operand ::= exprx",
 /* 329 */ "case_operand ::=",
 /* 330 */ "exprlist ::= nexprlist",
 /* 331 */ "exprlist ::=",
 /* 332 */ "nexprlist ::= nexprlist COMMA expr",
 /* 333 */ "nexprlist ::= exprx",
 /* 334 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 335 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 336 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 337 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 338 */ "uniqueflag ::= UNIQUE",
 /* 339 */ "uniqueflag ::=",
 /* 340 */ "idxlist_opt ::=",
 /* 341 */ "idxlist_opt ::= LP idxlist RP",
 /* 342 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 343 */ "idxlist ::= idxlist_single",
 /* 344 */ "idxlist_single ::= nm collate sortorder",
 /* 345 */ "idxlist_single ::= ID_COL",
 /* 346 */ "collate ::=",
 /* 347 */ "collate ::= COLLATE ids",
 /* 348 */ "collate ::= COLLATE ID_COLLATE",
 /* 349 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 350 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 351 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 352 */ "cmd ::= VACUUM vinto",
 /* 353 */ "cmd ::= VACUUM nm vinto",
 /* 354 */ "vinto ::= INTO expr",
 /* 355 */ "vinto ::=",
 /* 356 */ "cmd ::= PRAGMA nm dbnm",
 /* 357 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 358 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 359 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 360 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 361 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 362 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 363 */ "nmnum ::= plus_num",
 /* 364 */ "nmnum ::= nm",
 /* 365 */ "nmnum ::= ON",
 /* 366 */ "nmnum ::= DELETE",
 /* 367 */ "nmnum ::= DEFAULT",
 /* 368 */ "plus_num ::= PLUS number",
 /* 369 */ "plus_num ::= number",
 /* 370 */ "minus_num ::= MINUS number",
 /* 371 */ "number ::= INTEGER",
 /* 372 */ "number ::= FLOAT",
 /* 373 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 374 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 375 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 376 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 377 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 378 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 379 */ "trigger_time ::= BEFORE",
 /* 380 */ "trigger_time ::= AFTER",
 /* 381 */ "trigger_time ::= INSTEAD OF",
 /* 382 */ "trigger_time ::=",
 /* 383 */ "trigger_event ::= DELETE",
 /* 384 */ "trigger_event ::= INSERT",
 /* 385 */ "trigger_event ::= UPDATE",
 /* 386 */ "trigger_event ::= UPDATE OF idlist",
 /* 387 */ "foreach_clause ::=",
 /* 388 */ "foreach_clause ::= FOR EACH ROW",
 /* 389 */ "when_clause ::=",
 /* 390 */ "when_clause ::= WHEN expr",
 /* 391 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 392 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 393 */ "trigger_cmd_list ::= SEMI",
 /* 394 */ "trigger_cmd ::= update_stmt",
 /* 395 */ "trigger_cmd ::= insert_stmt",
 /* 396 */ "trigger_cmd ::= delete_stmt",
 /* 397 */ "trigger_cmd ::= select_stmt",
 /* 398 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 399 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 400 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 401 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 402 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 403 */ "cmd ::= DETACH database_kw_opt expr",
 /* 404 */ "key_opt ::=",
 /* 405 */ "key_opt ::= KEY expr",
 /* 406 */ "database_kw_opt ::= DATABASE",
 /* 407 */ "database_kw_opt ::=",
 /* 408 */ "cmd ::= REINDEX",
 /* 409 */ "cmd ::= REINDEX nm dbnm",
 /* 410 */ "cmd ::= REINDEX ID_COLLATE",
 /* 411 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 412 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 413 */ "cmd ::= ANALYZE",
 /* 414 */ "cmd ::= ANALYZE nm dbnm",
 /* 415 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 416 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 417 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 418 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 419 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 420 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 421 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 422 */ "kwcolumn_opt ::=",
 /* 423 */ "kwcolumn_opt ::= COLUMNKW",
 /* 424 */ "cmd ::= create_vtab",
 /* 425 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 426 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 427 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 428 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 429 */ "vtabarglist ::= vtabarg",
 /* 430 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 431 */ "vtabarg ::=",
 /* 432 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 433 */ "vtabargtoken ::= ANY",
 /* 434 */ "vtabargtoken ::= LP anylist RP",
 /* 435 */ "anylist ::=",
 /* 436 */ "anylist ::= anylist LP anylist RP",
 /* 437 */ "anylist ::= anylist ANY",
 /* 438 */ "with ::=",
 /* 439 */ "with ::= WITH wqlist",
 /* 440 */ "with ::= WITH RECURSIVE wqlist",
 /* 441 */ "wqlist ::= nm idxlist_opt AS LP select RP",
 /* 442 */ "wqlist ::= wqlist COMMA nm idxlist_opt AS LP select RP",
 /* 443 */ "wqlist ::= ID_TAB_NEW",
 /* 444 */ "windowdefn_list ::= windowdefn",
 /* 445 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 446 */ "windowdefn ::= nm AS LP window RP",
 /* 447 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 448 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 449 */ "window ::= ORDER BY sortlist frame_opt",
 /* 450 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 451 */ "window ::= frame_opt",
 /* 452 */ "window ::= nm frame_opt",
 /* 453 */ "frame_opt ::=",
 /* 454 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 455 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 456 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 457 */ "frame_bound_s ::= frame_bound",
 /* 458 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 459 */ "frame_bound_e ::= frame_bound",
 /* 460 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 461 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 462 */ "frame_bound ::= CURRENT ROW",
 /* 463 */ "frame_exclude_opt ::=",
 /* 464 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 465 */ "frame_exclude ::= NO OTHERS",
 /* 466 */ "frame_exclude ::= CURRENT ROW",
 /* 467 */ "frame_exclude ::= GROUP",
 /* 468 */ "frame_exclude ::= TIES",
 /* 469 */ "window_clause ::= WINDOW windowdefn_list",
 /* 470 */ "filter_over ::= filter_clause over_clause",
 /* 471 */ "filter_over ::= over_clause",
 /* 472 */ "filter_over ::= filter_clause",
 /* 473 */ "over_clause ::= OVER LP window RP",
 /* 474 */ "over_clause ::= OVER nm",
 /* 475 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 191: /* cmd */
    case 194: /* ecmd */
    case 196: /* cmdx */
    case 242: /* select_stmt */
    case 271: /* delete_stmt */
    case 272: /* update_stmt */
    case 275: /* insert_stmt */
    case 296: /* trigger_cmd */
    case 300: /* create_vtab */
{
parser_safe_delete((yypminor->yy107));
}
      break;
    case 195: /* explain */
{
parser_safe_delete((yypminor->yy259));
}
      break;
    case 197: /* transtype */
    case 198: /* trans_opt */
{
parser_safe_delete((yypminor->yy392));
}
      break;
    case 199: /* nm */
    case 206: /* table_options */
    case 209: /* columnid */
    case 212: /* id */
    case 213: /* id_opt */
    case 214: /* ids */
    case 216: /* typename */
    case 266: /* dbnm */
    case 287: /* collate */
    case 302: /* vtabarg */
    case 303: /* vtabargtoken */
    case 304: /* anylist */
{
parser_safe_delete((yypminor->yy7));
}
      break;
    case 200: /* savepoint_opt */
    case 202: /* ifnotexists */
    case 225: /* autoinc */
    case 229: /* gen_always */
    case 234: /* tconscomma */
    case 241: /* ifexists */
    case 279: /* not_opt */
    case 285: /* uniqueflag */
    case 297: /* database_kw_opt */
    case 299: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy255));
}
      break;
    case 201: /* temp */
    case 248: /* distinct */
{
parser_safe_delete((yypminor->yy202));
}
      break;
    case 203: /* fullname */
{
parser_safe_delete((yypminor->yy84));
}
      break;
    case 204: /* columnlist */
{
parser_safe_delete((yypminor->yy474));
}
      break;
    case 205: /* conslist_opt */
    case 233: /* conslist */
{
parser_safe_delete((yypminor->yy109));
}
      break;
    case 207: /* select */
    case 244: /* selectnowith */
{
parser_safe_delete((yypminor->yy273));
}
      break;
    case 208: /* column */
{
parser_safe_delete((yypminor->yy459));
}
      break;
    case 210: /* type */
    case 215: /* typetoken */
{
parser_safe_delete((yypminor->yy177));
}
      break;
    case 211: /* carglist */
{
parser_safe_delete((yypminor->yy287));
}
      break;
    case 217: /* signed */
    case 218: /* plus_num */
    case 219: /* minus_num */
    case 221: /* term */
    case 289: /* nmnum */
    case 290: /* number */
{
parser_safe_delete((yypminor->yy513));
}
      break;
    case 220: /* ccons */
{
parser_safe_delete((yypminor->yy232));
}
      break;
    case 222: /* expr */
    case 251: /* where_opt */
    case 253: /* having_opt */
    case 278: /* exprx */
    case 280: /* case_operand */
    case 282: /* case_else */
    case 288: /* vinto */
    case 294: /* when_clause */
    case 298: /* key_opt */
{
parser_safe_delete((yypminor->yy444));
}
      break;
    case 223: /* onconf */
    case 238: /* resolvetype */
    case 239: /* orconf */
{
parser_safe_delete((yypminor->yy274));
}
      break;
    case 224: /* sortorder */
{
parser_safe_delete((yypminor->yy161));
}
      break;
    case 226: /* idxlist_opt */
    case 236: /* idxlist */
{
parser_safe_delete((yypminor->yy339));
}
      break;
    case 227: /* refargs */
{
parser_safe_delete((yypminor->yy576));
}
      break;
    case 228: /* defer_subclause */
    case 237: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy209));
}
      break;
    case 230: /* refarg */
{
parser_safe_delete((yypminor->yy439));
}
      break;
    case 231: /* refact */
{
parser_safe_delete((yypminor->yy304));
}
      break;
    case 232: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy372));
}
      break;
    case 235: /* tcons */
{
parser_safe_delete((yypminor->yy142));
}
      break;
    case 243: /* with */
    case 305: /* wqlist */
{
parser_safe_delete((yypminor->yy497));
}
      break;
    case 245: /* oneselect */
{
parser_safe_delete((yypminor->yy90));
}
      break;
    case 246: /* multiselect_op */
{
parser_safe_delete((yypminor->yy143));
}
      break;
    case 247: /* values */
{
parser_safe_delete((yypminor->yy114));
}
      break;
    case 249: /* selcollist */
    case 259: /* sclp */
{
parser_safe_delete((yypminor->yy57));
}
      break;
    case 250: /* from */
    case 261: /* joinsrc */
{
parser_safe_delete((yypminor->yy79));
}
      break;
    case 252: /* groupby_opt */
    case 257: /* nexprlist */
    case 258: /* exprlist */
    case 281: /* case_exprlist */
{
parser_safe_delete((yypminor->yy39));
}
      break;
    case 254: /* orderby_opt */
    case 269: /* sortlist */
{
parser_safe_delete((yypminor->yy435));
}
      break;
    case 255: /* limit_opt */
{
parser_safe_delete((yypminor->yy552));
}
      break;
    case 256: /* window_clause */
    case 306: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy519));
}
      break;
    case 260: /* as */
{
parser_safe_delete((yypminor->yy233));
}
      break;
    case 262: /* singlesrc */
{
parser_safe_delete((yypminor->yy169));
}
      break;
    case 263: /* seltablist */
{
parser_safe_delete((yypminor->yy179));
}
      break;
    case 264: /* joinop */
{
parser_safe_delete((yypminor->yy173));
}
      break;
    case 265: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy83));
}
      break;
    case 267: /* indexed_opt */
{
parser_safe_delete((yypminor->yy348));
}
      break;
    case 268: /* idlist */
    case 274: /* idlist_opt */
    case 301: /* vtabarglist */
{
parser_safe_delete((yypminor->yy275));
}
      break;
    case 270: /* nulls */
{
parser_safe_delete((yypminor->yy75));
}
      break;
    case 273: /* setlist */
{
parser_safe_delete((yypminor->yy165));
}
      break;
    case 276: /* insert_cmd */
{
parser_safe_delete((yypminor->yy512));
}
      break;
    case 277: /* upsert */
{
parser_safe_delete((yypminor->yy500));
}
      break;
    case 283: /* likeop */
{
parser_safe_delete((yypminor->yy244));
}
      break;
    case 284: /* filter_over */
{
parser_safe_delete((yypminor->yy379));
}
      break;
    case 286: /* idxlist_single */
{
parser_safe_delete((yypminor->yy464));
}
      break;
    case 291: /* trigger_time */
{
parser_safe_delete((yypminor->yy252));
}
      break;
    case 292: /* trigger_event */
{
parser_safe_delete((yypminor->yy631));
}
      break;
    case 293: /* foreach_clause */
{
parser_safe_delete((yypminor->yy515));
}
      break;
    case 295: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy66));
}
      break;
    case 307: /* windowdefn */
{
parser_safe_delete((yypminor->yy322));
}
      break;
    case 308: /* window */
{
parser_safe_delete((yypminor->yy258));
}
      break;
    case 309: /* frame_opt */
{
parser_safe_delete((yypminor->yy197));
}
      break;
    case 310: /* range_or_rows */
{
parser_safe_delete((yypminor->yy10));
}
      break;
    case 311: /* frame_bound_s */
    case 313: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy477));
}
      break;
    case 314: /* frame_bound */
{
parser_safe_delete((yypminor->yy477));parser_safe_delete((yypminor->yy477));parser_safe_delete((yypminor->yy477));
}
      break;
    case 316: /* filter_clause */
{
parser_safe_delete((yypminor->yy333));
}
      break;
    case 317: /* over_clause */
{
parser_safe_delete((yypminor->yy59));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 192, 1 },
  { 193, 2 },
  { 193, 1 },
  { 194, 1 },
  { 194, 3 },
  { 195, 0 },
  { 195, 1 },
  { 195, 3 },
  { 196, 1 },
  { 191, 3 },
  { 198, 0 },
  { 198, 1 },
  { 198, 2 },
  { 198, 2 },
  { 197, 0 },
  { 197, 1 },
  { 197, 1 },
  { 197, 1 },
  { 191, 2 },
  { 191, 2 },
  { 191, 2 },
  { 200, 1 },
  { 200, 0 },
  { 191, 2 },
  { 191, 3 },
  { 191, 5 },
  { 191, 2 },
  { 191, 3 },
  { 191, 5 },
  { 191, 10 },
  { 191, 7 },
  { 191, 7 },
  { 191, 5 },
  { 206, 0 },
  { 206, 2 },
  { 206, 2 },
  { 202, 0 },
  { 202, 3 },
  { 201, 1 },
  { 201, 0 },
  { 204, 3 },
  { 204, 1 },
  { 208, 3 },
  { 209, 1 },
  { 209, 1 },
  { 212, 1 },
  { 213, 1 },
  { 213, 0 },
  { 214, 1 },
  { 199, 1 },
  { 199, 1 },
  { 199, 1 },
  { 210, 0 },
  { 210, 1 },
  { 215, 1 },
  { 215, 4 },
  { 215, 6 },
  { 216, 1 },
  { 216, 2 },
  { 216, 1 },
  { 217, 1 },
  { 217, 1 },
  { 211, 2 },
  { 211, 0 },
  { 220, 2 },
  { 220, 2 },
  { 220, 4 },
  { 220, 3 },
  { 220, 3 },
  { 220, 2 },
  { 220, 2 },
  { 220, 2 },
  { 220, 3 },
  { 220, 5 },
  { 220, 2 },
  { 220, 4 },
  { 220, 4 },
  { 220, 1 },
  { 220, 2 },
  { 220, 6 },
  { 220, 2 },
  { 220, 2 },
  { 220, 2 },
  { 220, 3 },
  { 221, 1 },
  { 221, 1 },
  { 221, 1 },
  { 221, 1 },
  { 229, 2 },
  { 229, 0 },
  { 225, 0 },
  { 225, 1 },
  { 227, 0 },
  { 227, 2 },
  { 230, 2 },
  { 230, 3 },
  { 230, 3 },
  { 230, 3 },
  { 230, 2 },
  { 231, 2 },
  { 231, 2 },
  { 231, 1 },
  { 231, 1 },
  { 231, 2 },
  { 228, 3 },
  { 228, 2 },
  { 232, 0 },
  { 232, 2 },
  { 232, 2 },
  { 205, 0 },
  { 205, 2 },
  { 233, 3 },
  { 233, 1 },
  { 234, 1 },
  { 234, 0 },
  { 235, 2 },
  { 235, 7 },
  { 235, 5 },
  { 235, 5 },
  { 235, 10 },
  { 235, 2 },
  { 235, 7 },
  { 235, 4 },
  { 237, 0 },
  { 237, 1 },
  { 223, 0 },
  { 223, 3 },
  { 239, 0 },
  { 239, 2 },
  { 238, 1 },
  { 238, 1 },
  { 238, 1 },
  { 191, 4 },
  { 191, 6 },
  { 191, 4 },
  { 241, 2 },
  { 241, 0 },
  { 191, 8 },
  { 191, 7 },
  { 191, 5 },
  { 191, 4 },
  { 191, 6 },
  { 191, 4 },
  { 191, 1 },
  { 242, 1 },
  { 207, 2 },
  { 244, 1 },
  { 244, 3 },
  { 244, 1 },
  { 244, 3 },
  { 245, 9 },
  { 245, 10 },
  { 247, 4 },
  { 247, 5 },
  { 246, 1 },
  { 246, 2 },
  { 246, 1 },
  { 246, 1 },
  { 248, 1 },
  { 248, 1 },
  { 248, 0 },
  { 259, 2 },
  { 259, 0 },
  { 249, 3 },
  { 249, 2 },
  { 249, 4 },
  { 249, 1 },
  { 249, 4 },
  { 260, 2 },
  { 260, 1 },
  { 260, 2 },
  { 260, 1 },
  { 260, 0 },
  { 250, 0 },
  { 250, 2 },
  { 261, 2 },
  { 261, 0 },
  { 263, 4 },
  { 263, 0 },
  { 262, 4 },
  { 262, 4 },
  { 262, 4 },
  { 262, 6 },
  { 262, 0 },
  { 262, 2 },
  { 262, 3 },
  { 262, 1 },
  { 262, 3 },
  { 262, 1 },
  { 265, 2 },
  { 265, 4 },
  { 265, 0 },
  { 266, 0 },
  { 266, 2 },
  { 203, 2 },
  { 264, 1 },
  { 264, 1 },
  { 264, 2 },
  { 264, 3 },
  { 264, 4 },
  { 264, 1 },
  { 267, 0 },
  { 267, 3 },
  { 267, 2 },
  { 267, 3 },
  { 254, 0 },
  { 254, 3 },
  { 269, 5 },
  { 269, 3 },
  { 224, 1 },
  { 224, 1 },
  { 224, 0 },
  { 270, 2 },
  { 270, 2 },
  { 270, 0 },
  { 252, 0 },
  { 252, 3 },
  { 252, 2 },
  { 253, 0 },
  { 253, 2 },
  { 255, 0 },
  { 255, 2 },
  { 255, 4 },
  { 255, 4 },
  { 191, 1 },
  { 271, 6 },
  { 271, 3 },
  { 271, 5 },
  { 271, 6 },
  { 271, 4 },
  { 251, 0 },
  { 251, 2 },
  { 251, 1 },
  { 191, 1 },
  { 272, 9 },
  { 272, 3 },
  { 272, 5 },
  { 272, 6 },
  { 272, 4 },
  { 273, 5 },
  { 273, 7 },
  { 273, 3 },
  { 273, 5 },
  { 273, 0 },
  { 273, 2 },
  { 273, 3 },
  { 273, 1 },
  { 274, 0 },
  { 274, 3 },
  { 268, 3 },
  { 268, 1 },
  { 268, 0 },
  { 268, 3 },
  { 268, 1 },
  { 191, 1 },
  { 275, 7 },
  { 275, 7 },
  { 275, 3 },
  { 275, 5 },
  { 275, 4 },
  { 275, 6 },
  { 276, 2 },
  { 276, 1 },
  { 277, 0 },
  { 277, 11 },
  { 277, 8 },
  { 277, 4 },
  { 278, 2 },
  { 278, 4 },
  { 278, 5 },
  { 278, 4 },
  { 278, 5 },
  { 278, 4 },
  { 278, 6 },
  { 278, 1 },
  { 278, 3 },
  { 278, 5 },
  { 278, 3 },
  { 278, 6 },
  { 278, 1 },
  { 278, 1 },
  { 278, 3 },
  { 278, 1 },
  { 278, 1 },
  { 278, 3 },
  { 278, 5 },
  { 278, 1 },
  { 278, 3 },
  { 278, 6 },
  { 278, 5 },
  { 278, 4 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 3 },
  { 278, 4 },
  { 278, 6 },
  { 278, 2 },
  { 278, 3 },
  { 278, 4 },
  { 278, 2 },
  { 278, 2 },
  { 278, 2 },
  { 278, 2 },
  { 278, 6 },
  { 278, 6 },
  { 278, 3 },
  { 278, 6 },
  { 278, 5 },
  { 278, 4 },
  { 278, 5 },
  { 278, 4 },
  { 278, 6 },
  { 278, 6 },
  { 278, 5 },
  { 222, 0 },
  { 222, 1 },
  { 279, 0 },
  { 279, 1 },
  { 283, 1 },
  { 281, 5 },
  { 281, 4 },
  { 282, 2 },
  { 282, 0 },
  { 280, 1 },
  { 280, 0 },
  { 258, 1 },
  { 258, 0 },
  { 257, 3 },
  { 257, 1 },
  { 191, 12 },
  { 191, 8 },
  { 191, 7 },
  { 191, 5 },
  { 285, 1 },
  { 285, 0 },
  { 226, 0 },
  { 226, 3 },
  { 236, 3 },
  { 236, 1 },
  { 286, 3 },
  { 286, 1 },
  { 287, 0 },
  { 287, 2 },
  { 287, 2 },
  { 191, 4 },
  { 191, 6 },
  { 191, 4 },
  { 191, 2 },
  { 191, 3 },
  { 288, 2 },
  { 288, 0 },
  { 191, 3 },
  { 191, 5 },
  { 191, 6 },
  { 191, 5 },
  { 191, 6 },
  { 191, 4 },
  { 191, 2 },
  { 289, 1 },
  { 289, 1 },
  { 289, 1 },
  { 289, 1 },
  { 289, 1 },
  { 218, 2 },
  { 218, 1 },
  { 219, 2 },
  { 290, 1 },
  { 290, 1 },
  { 191, 15 },
  { 191, 12 },
  { 191, 14 },
  { 191, 10 },
  { 191, 7 },
  { 191, 5 },
  { 291, 1 },
  { 291, 1 },
  { 291, 2 },
  { 291, 0 },
  { 292, 1 },
  { 292, 1 },
  { 292, 1 },
  { 292, 3 },
  { 293, 0 },
  { 293, 3 },
  { 294, 0 },
  { 294, 2 },
  { 295, 3 },
  { 295, 2 },
  { 295, 1 },
  { 296, 1 },
  { 296, 1 },
  { 296, 1 },
  { 296, 1 },
  { 240, 1 },
  { 191, 4 },
  { 191, 6 },
  { 191, 4 },
  { 191, 6 },
  { 191, 3 },
  { 298, 0 },
  { 298, 2 },
  { 297, 1 },
  { 297, 0 },
  { 191, 1 },
  { 191, 3 },
  { 191, 2 },
  { 191, 4 },
  { 191, 2 },
  { 191, 1 },
  { 191, 3 },
  { 191, 4 },
  { 191, 2 },
  { 191, 6 },
  { 191, 6 },
  { 191, 6 },
  { 191, 5 },
  { 191, 3 },
  { 299, 0 },
  { 299, 1 },
  { 191, 1 },
  { 300, 8 },
  { 300, 11 },
  { 300, 7 },
  { 300, 5 },
  { 301, 1 },
  { 301, 3 },
  { 302, 0 },
  { 302, 2 },
  { 303, 1 },
  { 303, 3 },
  { 304, 0 },
  { 304, 4 },
  { 304, 2 },
  { 243, 0 },
  { 243, 2 },
  { 243, 3 },
  { 305, 6 },
  { 305, 8 },
  { 305, 1 },
  { 306, 1 },
  { 306, 3 },
  { 307, 5 },
  { 308, 5 },
  { 308, 6 },
  { 308, 4 },
  { 308, 5 },
  { 308, 1 },
  { 308, 2 },
  { 309, 0 },
  { 309, 3 },
  { 309, 6 },
  { 310, 1 },
  { 311, 1 },
  { 311, 2 },
  { 313, 1 },
  { 313, 2 },
  { 314, 2 },
  { 314, 2 },
  { 312, 0 },
  { 312, 2 },
  { 315, 2 },
  { 315, 2 },
  { 315, 1 },
  { 315, 1 },
  { 256, 2 },
  { 284, 2 },
  { 284, 1 },
  { 284, 1 },
  { 317, 4 },
  { 317, 2 },
  { 316, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy107); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy107);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy107 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy107 = yymsp[-1].minor.yy107;
                                                yygotominor.yy107->explain = yymsp[-2].minor.yy259->explain;
                                                yygotominor.yy107->queryPlan = yymsp[-2].minor.yy259->queryPlan;
                                                delete yymsp[-2].minor.yy259;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy259 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy259 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy259 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 394: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==394);
      case 395: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==395);
      case 396: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==396);
      case 397: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==397);
      case 424: /* cmd ::= create_vtab */ yytestcase(yyruleno==424);
{yygotominor.yy107 = yymsp[0].minor.yy107;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy107 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy392->type,
                                                        yymsp[0].minor.yy392->transactionKw,
                                                        yymsp[0].minor.yy392->name
                                                    );
                                                delete yymsp[0].minor.yy392;
                                                delete yymsp[-1].minor.yy392;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy392 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy392 = new ParserStubTransDetails();
                                                yygotominor.yy392->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy392 = new ParserStubTransDetails();
                                                yygotominor.yy392->transactionKw = true;
                                                yygotominor.yy392->name = *(yymsp[0].minor.yy7);
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy392 = new ParserStubTransDetails();
                                                yygotominor.yy392->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy392 = new ParserStubTransDetails();
                                                yygotominor.yy392->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy392 = new ParserStubTransDetails();
                                                yygotominor.yy392->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy107 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy392->transactionKw,
                                                        yymsp[0].minor.yy392->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy392;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy107 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy392->transactionKw,
                                                        yymsp[0].minor.yy392->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy392;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy107 = new SqliteRollback(
                                                        yymsp[0].minor.yy392->transactionKw,
                                                        yymsp[0].minor.yy392->name
                                                    );
                                                delete yymsp[0].minor.yy392;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 37: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==37);
      case 88: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==88);
      case 91: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==91);
      case 113: /* tconscomma ::= COMMA */ yytestcase(yyruleno==113);
      case 135: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==135);
      case 322: /* not_opt ::= NOT */ yytestcase(yyruleno==322);
      case 338: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==338);
      case 406: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==406);
      case 422: /* kwcolumn_opt ::= */ yytestcase(yyruleno==422);
{yygotominor.yy255 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 36: /* ifnotexists ::= */ yytestcase(yyruleno==36);
      case 89: /* gen_always ::= */ yytestcase(yyruleno==89);
      case 90: /* autoinc ::= */ yytestcase(yyruleno==90);
      case 114: /* tconscomma ::= */ yytestcase(yyruleno==114);
      case 136: /* ifexists ::= */ yytestcase(yyruleno==136);
      case 321: /* not_opt ::= */ yytestcase(yyruleno==321);
      case 339: /* uniqueflag ::= */ yytestcase(yyruleno==339);
      case 407: /* database_kw_opt ::= */ yytestcase(yyruleno==407);
      case 423: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==423);
{yygotominor.yy255 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy107 = new SqliteSavepoint(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy107 = new SqliteRelease(*(yymsp[-1].minor.yy255), *(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy107 = new SqliteRollback(
                                                        yymsp[-3].minor.yy392->transactionKw,
                                                        *(yymsp[-1].minor.yy255),
                                                        *(yymsp[0].minor.yy7)
                                                    );
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[-3].minor.yy392;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,200,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy107 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy255),
                                                        *(yymsp[-8].minor.yy202),
                                                        yymsp[-5].minor.yy84->name1,
                                                        yymsp[-5].minor.yy84->name2,
                                                        *(yymsp[-3].minor.yy474),
                                                        *(yymsp[-2].minor.yy109),
                                                        *(yymsp[0].minor.yy7)
                                                    );
                                                delete yymsp[-6].minor.yy255;
                                                delete yymsp[-8].minor.yy202;
                                                delete yymsp[-3].minor.yy474;
                                                delete yymsp[-2].minor.yy109;
                                                delete yymsp[-5].minor.yy84;
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy107 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy255),
                                                        *(yymsp[-5].minor.yy202),
                                                        yymsp[-2].minor.yy84->name1,
                                                        yymsp[-2].minor.yy84->name2,
                                                        yymsp[0].minor.yy273
                                                    );
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-5].minor.yy202;
                                                delete yymsp[-2].minor.yy84;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 138: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==138);
      case 377: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==377);
{  yy_destructor(yypParser,201,&yymsp[-5].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 139: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==139);
      case 378: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==378);
{  yy_destructor(yypParser,201,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
      case 192: /* dbnm ::= */ yytestcase(yyruleno==192);
      case 346: /* collate ::= */ yytestcase(yyruleno==346);
      case 431: /* vtabarg ::= */ yytestcase(yyruleno==431);
      case 435: /* anylist ::= */ yytestcase(yyruleno==435);
{yygotominor.yy7 = new QString();}
        break;
      case 34: /* table_options ::= WITHOUT nm */
      case 35: /* table_options ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==35);
{
                                                if (yymsp[0].minor.yy7->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy7)));

                                                yygotominor.yy7 = yymsp[0].minor.yy7;
                                            }
        break;
      case 38: /* temp ::= TEMP */
{yygotominor.yy202 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 39: /* temp ::= */
      case 160: /* distinct ::= */ yytestcase(yyruleno==160);
{yygotominor.yy202 = new int(0);}
        break;
      case 40: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy474->append(yymsp[0].minor.yy459);
                                                yygotominor.yy474 = yymsp[-2].minor.yy474;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 41: /* columnlist ::= column */
{
                                                yygotominor.yy474 = new ParserCreateTableColumnList();
                                                yygotominor.yy474->append(yymsp[0].minor.yy459);
                                            }
        break;
      case 42: /* column ::= columnid type carglist */
{
                                                yygotominor.yy459 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy7), yymsp[-1].minor.yy177, *(yymsp[0].minor.yy287));
												yygotominor.yy459->fixTypeVsGeneratedAs();
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy459;
                                            }
        break;
      case 43: /* columnid ::= nm */
      case 44: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==44);
      case 49: /* nm ::= id */ yytestcase(yyruleno==49);
      case 57: /* typename ::= ids */ yytestcase(yyruleno==57);
      case 193: /* dbnm ::= DOT nm */ yytestcase(yyruleno==193);
      case 347: /* collate ::= COLLATE ids */ yytestcase(yyruleno==347);
      case 348: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==348);
{yygotominor.yy7 = yymsp[0].minor.yy7;}
        break;
      case 45: /* id ::= ID */
{
                                                yygotominor.yy7 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 46: /* id_opt ::= id */
{
                                                yygotominor.yy7 = yymsp[0].minor.yy7;
                                            }
        break;
      case 47: /* id_opt ::= */
{
                                                yygotominor.yy7 = new QString();
                                            }
        break;
      case 48: /* ids ::= ID|STRING */
      case 51: /* nm ::= JOIN_KW */ yytestcase(yyruleno==51);
{yygotominor.yy7 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 50: /* nm ::= STRING */
{yygotominor.yy7 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 52: /* type ::= */
{yygotominor.yy177 = nullptr;}
        break;
      case 53: /* type ::= typetoken */
{yygotominor.yy177 = yymsp[0].minor.yy177;}
        break;
      case 54: /* typetoken ::= typename */
{
                                                yygotominor.yy177 = new SqliteColumnType(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy177;
                                            }
        break;
      case 55: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy177 = new SqliteColumnType(*(yymsp[-3].minor.yy7), *(yymsp[-1].minor.yy513));
                                                delete yymsp[-3].minor.yy7;
                                                delete yymsp[-1].minor.yy513;
                                                objectForTokens = yygotominor.yy177;
                                            }
        break;
      case 56: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy177 = new SqliteColumnType(*(yymsp[-5].minor.yy7), *(yymsp[-3].minor.yy513), *(yymsp[-1].minor.yy513));
                                                delete yymsp[-5].minor.yy7;
                                                delete yymsp[-3].minor.yy513;
                                                delete yymsp[-1].minor.yy513;
                                                objectForTokens = yygotominor.yy177;
                                            }
        break;
      case 58: /* typename ::= typename ids */
      case 59: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==59);
{
                                                yymsp[-1].minor.yy7->append(" " + *(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                yygotominor.yy7 = yymsp[-1].minor.yy7;
                                            }
        break;
      case 60: /* signed ::= plus_num */
      case 61: /* signed ::= minus_num */ yytestcase(yyruleno==61);
      case 363: /* nmnum ::= plus_num */ yytestcase(yyruleno==363);
      case 368: /* plus_num ::= PLUS number */ yytestcase(yyruleno==368);
      case 369: /* plus_num ::= number */ yytestcase(yyruleno==369);
{yygotominor.yy513 = yymsp[0].minor.yy513;}
        break;
      case 62: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy287->append(yymsp[0].minor.yy232);
                                                yygotominor.yy287 = yymsp[-1].minor.yy287;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 63: /* carglist ::= */
{yygotominor.yy287 = new ParserCreateTableColumnConstraintList();}
        break;
      case 64: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initDefNameOnly(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 65: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initDefTerm(*(yymsp[0].minor.yy513));
                                                delete yymsp[0].minor.yy513;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 66: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initDefExpr(yymsp[-1].minor.yy444);
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 67: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initDefTerm(*(yymsp[0].minor.yy513), false);
                                                delete yymsp[0].minor.yy513;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 68: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initDefTerm(*(yymsp[0].minor.yy513), true);
                                                delete yymsp[0].minor.yy513;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initDefId(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 71: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initNull(*(yymsp[0].minor.yy274));
                                                delete yymsp[0].minor.yy274;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 72: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initNotNull(*(yymsp[0].minor.yy274));
                                                delete yymsp[0].minor.yy274;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 73: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initPk(*(yymsp[-2].minor.yy161), *(yymsp[-1].minor.yy274), *(yymsp[0].minor.yy255));
                                                delete yymsp[-2].minor.yy161;
                                                delete yymsp[0].minor.yy255;
                                                delete yymsp[-1].minor.yy274;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 74: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initUnique(*(yymsp[0].minor.yy274));
                                                delete yymsp[0].minor.yy274;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 75: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initCheck(yymsp[-1].minor.yy444);
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 76: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initFk(*(yymsp[-2].minor.yy7), *(yymsp[-1].minor.yy339), *(yymsp[0].minor.yy576));
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[0].minor.yy576;
                                                delete yymsp[-1].minor.yy339;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 77: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initDefer(yymsp[0].minor.yy209->initially, yymsp[0].minor.yy209->deferrable);
                                                delete yymsp[0].minor.yy209;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 78: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initColl(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy232;
                                            }
        break;
      case 79: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 80: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==80);
      case 81: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==81);
      case 82: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==82);
{
                                                if (!yymsp[0].minor.yy7->isNull() && yymsp[0].minor.yy7->toLower() != "stored" && yymsp[0].minor.yy7->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy7)));

                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy232->initGeneratedAs(yymsp[-2].minor.yy444, *(yymsp[-5].minor.yy255), *(yymsp[0].minor.yy7));
												delete yymsp[-5].minor.yy255;
												delete yymsp[0].minor.yy7;
												objectForTokens = yygotominor.yy232;
											}
        break;
      case 83: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy232 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy232->initCheck();
                                                objectForTokens = yygotominor.yy232;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 84: /* term ::= NULL */
{yygotominor.yy513 = new QVariant();}
        break;
      case 85: /* term ::= INTEGER */
      case 371: /* number ::= INTEGER */ yytestcase(yyruleno==371);
{yygotominor.yy513 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 86: /* term ::= FLOAT */
      case 372: /* number ::= FLOAT */ yytestcase(yyruleno==372);
{yygotominor.yy513 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 87: /* term ::= STRING|BLOB */
      case 365: /* nmnum ::= ON */ yytestcase(yyruleno==365);
      case 366: /* nmnum ::= DELETE */ yytestcase(yyruleno==366);
      case 367: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==367);
{yygotominor.yy513 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 92: /* refargs ::= */
{yygotominor.yy576 = new ParserFkConditionList();}
        break;
      case 93: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy576->append(yymsp[0].minor.yy439);
                                                yygotominor.yy576 = yymsp[-1].minor.yy576;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 94: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy439 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 95: /* refarg ::= ON INSERT refact */
{yygotominor.yy439 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy304)); delete yymsp[0].minor.yy304;}
        break;
      case 96: /* refarg ::= ON DELETE refact */
{yygotominor.yy439 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy304)); delete yymsp[0].minor.yy304;}
        break;
      case 97: /* refarg ::= ON UPDATE refact */
      case 98: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==98);
{yygotominor.yy439 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy304)); delete yymsp[0].minor.yy304;}
        break;
      case 99: /* refact ::= SET NULL */
{yygotominor.yy304 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 100: /* refact ::= SET DEFAULT */
{yygotominor.yy304 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 101: /* refact ::= CASCADE */
{yygotominor.yy304 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 102: /* refact ::= RESTRICT */
{yygotominor.yy304 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 103: /* refact ::= NO ACTION */
{yygotominor.yy304 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 104: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy209 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy372));
                                                delete yymsp[0].minor.yy372;
                                            }
        break;
      case 105: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy209 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy372));
                                                delete yymsp[0].minor.yy372;
                                            }
        break;
      case 106: /* init_deferred_pred_opt ::= */
{yygotominor.yy372 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 107: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy372 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 108: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy372 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 109: /* conslist_opt ::= */
{yygotominor.yy109 = new ParserCreateTableConstraintList();}
        break;
      case 110: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy109 = yymsp[0].minor.yy109;}
        break;
      case 111: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy142->afterComma = *(yymsp[-1].minor.yy255);
                                                yymsp[-2].minor.yy109->append(yymsp[0].minor.yy142);
                                                yygotominor.yy109 = yymsp[-2].minor.yy109;
                                                delete yymsp[-1].minor.yy255;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 112: /* conslist ::= tcons */
{
                                                yygotominor.yy109 = new ParserCreateTableConstraintList();
                                                yygotominor.yy109->append(yymsp[0].minor.yy142);
                                            }
        break;
      case 115: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy142 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy142->initNameOnly(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 116: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy142 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy142->initPk(*(yymsp[-3].minor.yy339), *(yymsp[-2].minor.yy255), *(yymsp[0].minor.yy274));
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[0].minor.yy274;
                                                delete yymsp[-3].minor.yy339;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 117: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy142 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy142->initUnique(*(yymsp[-2].minor.yy339), *(yymsp[0].minor.yy274));
                                                delete yymsp[0].minor.yy274;
                                                delete yymsp[-2].minor.yy339;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 118: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy142 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy142->initCheck(yymsp[-2].minor.yy444, *(yymsp[0].minor.yy274));
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 119: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 120: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==120);
      case 121: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==121);
{
                                                yygotominor.yy142 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy142->initFk(
                                                    *(yymsp[-6].minor.yy339),
                                                    *(yymsp[-3].minor.yy7),
                                                    *(yymsp[-2].minor.yy339),
                                                    *(yymsp[-1].minor.yy576),
                                                    yymsp[0].minor.yy209->initially,
                                                    yymsp[0].minor.yy209->deferrable
                                                );
                                                delete yymsp[-3].minor.yy7;
                                                delete yymsp[-1].minor.yy576;
                                                delete yymsp[0].minor.yy209;
                                                delete yymsp[-2].minor.yy339;
                                                delete yymsp[-6].minor.yy339;
                                                objectForTokens = yygotominor.yy142;
                                            }
        break;
      case 122: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy142 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy142->initCheck();
                                                objectForTokens = yygotominor.yy142;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,223,&yymsp[0].minor);
}
        break;
      case 123: /* defer_subclause_opt ::= */
{yygotominor.yy209 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 124: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy209 = yymsp[0].minor.yy209;}
        break;
      case 125: /* onconf ::= */
      case 127: /* orconf ::= */ yytestcase(yyruleno==127);
{yygotominor.yy274 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 126: /* onconf ::= ON CONFLICT resolvetype */
      case 128: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==128);
{yygotominor.yy274 = yymsp[0].minor.yy274;}
        break;
      case 129: /* resolvetype ::= raisetype */
      case 130: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==130);
      case 131: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==131);
{yygotominor.yy274 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 132: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy107 = new SqliteDropTable(*(yymsp[-1].minor.yy255), yymsp[0].minor.yy84->name1, yymsp[0].minor.yy84->name2);
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy84;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 133: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 134: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==134);
      case 141: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==141);
      case 142: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==142);
      case 185: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==185);
      case 186: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==186);
      case 187: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==187);
      case 188: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==188);
      case 275: /* exprx ::= nm DOT ID_TAB|ID_COL */ yytestcase(yyruleno==275);
      case 336: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==336);
      case 337: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==337);
      case 350: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==350);
      case 351: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==351);
      case 361: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==361);
      case 362: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==362);
      case 400: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==400);
      case 401: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==401);
      case 411: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==411);
      case 412: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==412);
      case 415: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==415);
      case 416: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==416);
      case 420: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==420);
      case 421: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==421);
      case 427: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==427);
      case 428: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==428);
{  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 137: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy107 = new SqliteCreateView(*(yymsp[-6].minor.yy202), *(yymsp[-4].minor.yy255), yymsp[-3].minor.yy84->name1, yymsp[-3].minor.yy84->name2, yymsp[0].minor.yy273, *(yymsp[-2].minor.yy339));
                                                delete yymsp[-6].minor.yy202;
                                                delete yymsp[-4].minor.yy255;
                                                delete yymsp[-3].minor.yy84;
                                                delete yymsp[-2].minor.yy339;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 140: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy107 = new SqliteDropView(*(yymsp[-1].minor.yy255), yymsp[0].minor.yy84->name1, yymsp[0].minor.yy84->name2);
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy84;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 143: /* cmd ::= select_stmt */
      case 224: /* cmd ::= delete_stmt */ yytestcase(yyruleno==224);
      case 233: /* cmd ::= update_stmt */ yytestcase(yyruleno==233);
      case 254: /* cmd ::= insert_stmt */ yytestcase(yyruleno==254);
{
                                                yygotominor.yy107 = yymsp[0].minor.yy107;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 144: /* select_stmt ::= select */
{
                                                yygotominor.yy107 = yymsp[0].minor.yy273;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 145: /* select ::= with selectnowith */
{
                                                yygotominor.yy273 = yymsp[0].minor.yy273;
                                                yymsp[0].minor.yy273->setWith(yymsp[-1].minor.yy497);
                                                objectForTokens = yygotominor.yy273;
                                            }
        break;
      case 146: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy273 = SqliteSelect::append(yymsp[0].minor.yy90);
                                                objectForTokens = yygotominor.yy273;
                                            }
        break;
      case 147: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy273 = SqliteSelect::append(yymsp[-2].minor.yy273, *(yymsp[-1].minor.yy143), yymsp[0].minor.yy90);
                                                delete yymsp[-1].minor.yy143;
                                                objectForTokens = yygotominor.yy273;
                                            }
        break;
      case 148: /* selectnowith ::= values */
{
                                                yygotominor.yy273 = SqliteSelect::append(*(yymsp[0].minor.yy114));
                                                delete yymsp[0].minor.yy114;
                                                objectForTokens = yygotominor.yy273;
                                            }
        break;
      case 149: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy273 = SqliteSelect::append(yymsp[-2].minor.yy273, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy114));
                                                delete yymsp[0].minor.yy114;
                                                objectForTokens = yygotominor.yy273;
                                            }
        break;
      case 150: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy90 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy202),
                                                        *(yymsp[-6].minor.yy57),
                                                        yymsp[-5].minor.yy79,
                                                        yymsp[-4].minor.yy444,
                                                        *(yymsp[-3].minor.yy39),
                                                        yymsp[-2].minor.yy444,
                                                        *(yymsp[-1].minor.yy435),
                                                        yymsp[0].minor.yy552
                                                    );
                                                delete yymsp[-6].minor.yy57;
                                                delete yymsp[-7].minor.yy202;
                                                delete yymsp[-3].minor.yy39;
                                                delete yymsp[-1].minor.yy435;
                                                objectForTokens = yygotominor.yy90;
                                            }
        break;
      case 151: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy90 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy202),
                                                        *(yymsp[-7].minor.yy57),
                                                        yymsp[-6].minor.yy79,
                                                        yymsp[-5].minor.yy444,
                                                        *(yymsp[-4].minor.yy39),
                                                        yymsp[-3].minor.yy444,
														*(yymsp[-2].minor.yy519),
                                                        *(yymsp[-1].minor.yy435),
                                                        yymsp[0].minor.yy552
                                                    );
                                                delete yymsp[-7].minor.yy57;
                                                delete yymsp[-8].minor.yy202;
                                                delete yymsp[-4].minor.yy39;
                                                delete yymsp[-1].minor.yy435;
												delete yymsp[-2].minor.yy519;
                                                objectForTokens = yygotominor.yy90;
											}
        break;
      case 152: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy114 = new ParserExprNestedList();
                                                yygotominor.yy114->append(*(yymsp[-1].minor.yy39));
                                                delete yymsp[-1].minor.yy39;
                                            }
        break;
      case 153: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy114->append(*(yymsp[-1].minor.yy39));
                                                yygotominor.yy114 = yymsp[-4].minor.yy114;
                                                delete yymsp[-1].minor.yy39;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 154: /* multiselect_op ::= UNION */
{yygotominor.yy143 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 155: /* multiselect_op ::= UNION ALL */
{yygotominor.yy143 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 156: /* multiselect_op ::= EXCEPT */
{yygotominor.yy143 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 157: /* multiselect_op ::= INTERSECT */
{yygotominor.yy143 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 158: /* distinct ::= DISTINCT */
{yygotominor.yy202 = new int(1);}
        break;
      case 159: /* distinct ::= ALL */
{yygotominor.yy202 = new int(2);}
        break;
      case 161: /* sclp ::= selcollist COMMA */
{yygotominor.yy57 = yymsp[-1].minor.yy57;}
        break;
      case 162: /* sclp ::= */
{yygotominor.yy57 = new ParserResultColumnList();}
        break;
      case 163: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy444,
                                                        yymsp[0].minor.yy233 ? yymsp[0].minor.yy233->asKw : false,
                                                        yymsp[0].minor.yy233 ? yymsp[0].minor.yy233->name : QString()
                                                    );

                                                yymsp[-2].minor.yy57->append(obj);
                                                yygotominor.yy57 = yymsp[-2].minor.yy57;
                                                delete yymsp[0].minor.yy233;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 164: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy57->append(obj);
                                                yygotominor.yy57 = yymsp[-1].minor.yy57;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 165: /* selcollist ::= sclp nm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        *(yymsp[-2].minor.yy7)
                                                    );
                                                yymsp[-3].minor.yy57->append(obj);
                                                yygotominor.yy57 = yymsp[-3].minor.yy57;
                                                delete yymsp[-2].minor.yy7;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 166: /* selcollist ::= sclp */
      case 167: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==167);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy57 = yymsp[0].minor.yy57;
                                            }
        break;
      case 168: /* as ::= AS nm */
{
                                                yygotominor.yy233 = new ParserStubAlias(*(yymsp[0].minor.yy7), true);
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 169: /* as ::= ids */
      case 170: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==170);
      case 171: /* as ::= ID_ALIAS */ yytestcase(yyruleno==171);
{
                                                yygotominor.yy233 = new ParserStubAlias(*(yymsp[0].minor.yy7), false);
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 172: /* as ::= */
{yygotominor.yy233 = nullptr;}
        break;
      case 173: /* from ::= */
{yygotominor.yy79 = nullptr;}
        break;
      case 174: /* from ::= FROM joinsrc */
{yygotominor.yy79 = yymsp[0].minor.yy79;}
        break;
      case 175: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy79 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy169,
                                                        *(yymsp[0].minor.yy179)
                                                    );
                                                delete yymsp[0].minor.yy179;
                                                objectForTokens = yygotominor.yy79;
                                            }
        break;
      case 176: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy79 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy79;
                                            }
        break;
      case 177: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy173, yymsp[-1].minor.yy169, yymsp[0].minor.yy83);

                                                yymsp[-3].minor.yy179->append(src);
                                                yygotominor.yy179 = yymsp[-3].minor.yy179;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 178: /* seltablist ::= */
{
                                                yygotominor.yy179 = new ParserOtherSourceList();
                                            }
        break;
      case 179: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy169 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy7),
                                                        *(yymsp[-2].minor.yy7),
                                                        yymsp[-1].minor.yy233 ? yymsp[-1].minor.yy233->asKw : false,
                                                        yymsp[-1].minor.yy233 ? yymsp[-1].minor.yy233->name : QString(),
                                                        yymsp[0].minor.yy348 ? yymsp[0].minor.yy348->notIndexedKw : false,
                                                        yymsp[0].minor.yy348 ? yymsp[0].minor.yy348->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy7;
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[-1].minor.yy233;
                                                if (yymsp[0].minor.yy348)
                                                    delete yymsp[0].minor.yy348;
                                                objectForTokens = yygotominor.yy169;
                                            }
        break;
      case 180: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy169 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy273,
                                                        yymsp[0].minor.yy233 ? yymsp[0].minor.yy233->asKw : false,
                                                        yymsp[0].minor.yy233 ? yymsp[0].minor.yy233->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy233;
                                                objectForTokens = yygotominor.yy169;
                                            }
        break;
      case 181: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy169 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy79,
                                                        yymsp[0].minor.yy233 ? yymsp[0].minor.yy233->asKw : false,
                                                        yymsp[0].minor.yy233 ? yymsp[0].minor.yy233->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy233;
                                                objectForTokens = yygotominor.yy169;
                                            }
        break;
      case 182: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy169 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy7),
                                                        *(yymsp[-4].minor.yy7),
                                                        yymsp[0].minor.yy233 ? yymsp[0].minor.yy233->asKw : false,
                                                        yymsp[0].minor.yy233 ? yymsp[0].minor.yy233->name : QString(),
                                                        *(yymsp[-2].minor.yy39)
                                                    );
                                                delete yymsp[-5].minor.yy7;
                                                delete yymsp[-4].minor.yy7;
                                                delete yymsp[0].minor.yy233;
                                                if (yymsp[-2].minor.yy39)
                                                    delete yymsp[-2].minor.yy39;

                                                objectForTokens = yygotominor.yy169;
                                            }
        break;
      case 183: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy169 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy169;
                                            }
        break;
      case 184: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy169 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy169->database = *(yymsp[-1].minor.yy7);
                                                delete yymsp[-1].minor.yy7;
                                                objectForTokens = yygotominor.yy169;
                                            }
        break;
      case 189: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy83 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy444);
                                                objectForTokens = yygotominor.yy83;
                                            }
        break;
      case 190: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy83 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy275));
                                                delete yymsp[-1].minor.yy275;
                                                objectForTokens = yygotominor.yy83;
                                            }
        break;
      case 191: /* joinconstr_opt ::= */
{yygotominor.yy83 = nullptr;}
        break;
      case 194: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy84 = new ParserFullName();
                                                yygotominor.yy84->name1 = *(yymsp[-1].minor.yy7);
                                                yygotominor.yy84->name2 = *(yymsp[0].minor.yy7);
                                                delete yymsp[-1].minor.yy7;
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 195: /* joinop ::= COMMA */
{
                                                yygotominor.yy173 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy173;
                                            }
        break;
      case 196: /* joinop ::= JOIN */
{
                                                yygotominor.yy173 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy173;
                                            }
        break;
      case 197: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy173 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy173;
                                            }
        break;
      case 198: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy173 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy7));
                                                delete yymsp[-1].minor.yy7;
                                                objectForTokens = yygotominor.yy173;
                                            }
        break;
      case 199: /* joinop ::= JOIN_KW nm nm JOIN */
      case 200: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==200);
{
                                                yygotominor.yy173 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy7), *(yymsp[-1].minor.yy7));
                                                delete yymsp[-2].minor.yy7;
                                                objectForTokens = yygotominor.yy173;
                                            }
        break;
      case 201: /* indexed_opt ::= */
{yygotominor.yy348 = nullptr;}
        break;
      case 202: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy348 = new ParserIndexedBy(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 203: /* indexed_opt ::= NOT INDEXED */
      case 204: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==204);
{yygotominor.yy348 = new ParserIndexedBy(true);}
        break;
      case 205: /* orderby_opt ::= */
{yygotominor.yy435 = new ParserOrderByList();}
        break;
      case 206: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy435 = yymsp[0].minor.yy435;}
        break;
      case 207: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy444, *(yymsp[-1].minor.yy161), *(yymsp[0].minor.yy75));
                                                yymsp[-4].minor.yy435->append(obj);
                                                yygotominor.yy435 = yymsp[-4].minor.yy435;
                                                delete yymsp[-1].minor.yy161;
												delete yymsp[0].minor.yy75;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 208: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy444, *(yymsp[-1].minor.yy161), *(yymsp[0].minor.yy75));
                                                yygotominor.yy435 = new ParserOrderByList();
                                                yygotominor.yy435->append(obj);
                                                delete yymsp[-1].minor.yy161;
												delete yymsp[0].minor.yy75;
                                                objectForTokens = obj;
                                            }
        break;
      case 209: /* sortorder ::= ASC */
{yygotominor.yy161 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 210: /* sortorder ::= DESC */
{yygotominor.yy161 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 211: /* sortorder ::= */
{yygotominor.yy161 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 212: /* nulls ::= NULLS FIRST */
{yygotominor.yy75 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 213: /* nulls ::= NULLS LAST */
{yygotominor.yy75 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 214: /* nulls ::= */
{yygotominor.yy75 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 215: /* groupby_opt ::= */
      case 331: /* exprlist ::= */ yytestcase(yyruleno==331);
{yygotominor.yy39 = new ParserExprList();}
        break;
      case 216: /* groupby_opt ::= GROUP BY nexprlist */
      case 330: /* exprlist ::= nexprlist */ yytestcase(yyruleno==330);
{yygotominor.yy39 = yymsp[0].minor.yy39;}
        break;
      case 217: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy39 = new ParserExprList();
                                            }
        break;
      case 218: /* having_opt ::= */
      case 230: /* where_opt ::= */ yytestcase(yyruleno==230);
      case 327: /* case_else ::= */ yytestcase(yyruleno==327);
      case 329: /* case_operand ::= */ yytestcase(yyruleno==329);
      case 355: /* vinto ::= */ yytestcase(yyruleno==355);
      case 389: /* when_clause ::= */ yytestcase(yyruleno==389);
      case 404: /* key_opt ::= */ yytestcase(yyruleno==404);
{yygotominor.yy444 = nullptr;}
        break;
      case 219: /* having_opt ::= HAVING expr */
      case 231: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==231);
      case 320: /* expr ::= exprx */ yytestcase(yyruleno==320);
      case 326: /* case_else ::= ELSE expr */ yytestcase(yyruleno==326);
      case 328: /* case_operand ::= exprx */ yytestcase(yyruleno==328);
      case 354: /* vinto ::= INTO expr */ yytestcase(yyruleno==354);
      case 390: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==390);
      case 405: /* key_opt ::= KEY expr */ yytestcase(yyruleno==405);
{yygotominor.yy444 = yymsp[0].minor.yy444;}
        break;
      case 220: /* limit_opt ::= */
{yygotominor.yy552 = nullptr;}
        break;
      case 221: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy552 = new SqliteLimit(yymsp[0].minor.yy444);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 222: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy552 = new SqliteLimit(yymsp[-2].minor.yy444, yymsp[0].minor.yy444, true);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 223: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy552 = new SqliteLimit(yymsp[-2].minor.yy444, yymsp[0].minor.yy444, false);
                                                objectForTokens = yygotominor.yy552;
                                            }
        break;
      case 225: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt */
{
                                                if (yymsp[-1].minor.yy348)
                                                {
                                                    if (!yymsp[-1].minor.yy348->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy107 = new SqliteDelete(
                                                                yymsp[-2].minor.yy84->name1,
                                                                yymsp[-2].minor.yy84->name2,
                                                                yymsp[-1].minor.yy348->indexedBy,
                                                                yymsp[0].minor.yy444,
                                                                yymsp[-5].minor.yy497
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy107 = new SqliteDelete(
                                                                yymsp[-2].minor.yy84->name1,
                                                                yymsp[-2].minor.yy84->name2,
                                                                yymsp[-1].minor.yy348->notIndexedKw,
                                                                yymsp[0].minor.yy444,
                                                                yymsp[-5].minor.yy497
                                                            );
                                                    }
                                                    delete yymsp[-1].minor.yy348;
                                                }
                                                else
                                                {
                                                    yygotominor.yy107 = new SqliteDelete(
                                                            yymsp[-2].minor.yy84->name1,
                                                            yymsp[-2].minor.yy84->name2,
                                                            false,
                                                            yymsp[0].minor.yy444,
                                                            yymsp[-5].minor.yy497
                                                        );
                                                }
                                                delete yymsp[-2].minor.yy84;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 226: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy497;
                                                yygotominor.yy107 = q;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 227: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy497;
                                                q->database = *(yymsp[-1].minor.yy7);
                                                yygotominor.yy107 = q;
                                                objectForTokens = yygotominor.yy107;
                                                delete yymsp[-1].minor.yy7;
                                            }
        break;
      case 228: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 237: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==237);
{  yy_destructor(yypParser,243,&yymsp[-5].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 229: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 238: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==238);
{  yy_destructor(yypParser,243,&yymsp[-3].minor);
}
        break;
      case 232: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy444 = new SqliteExpr();
                                            }
        break;
      case 234: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt */
{
                                                yygotominor.yy107 = new SqliteUpdate(
                                                        *(yymsp[-6].minor.yy274),
                                                        yymsp[-5].minor.yy84->name1,
                                                        yymsp[-5].minor.yy84->name2,
                                                        yymsp[-4].minor.yy348 ? yymsp[-4].minor.yy348->notIndexedKw : false,
                                                        yymsp[-4].minor.yy348 ? yymsp[-4].minor.yy348->indexedBy : QString(),
                                                        *(yymsp[-2].minor.yy165),
														yymsp[-1].minor.yy79,
                                                        yymsp[0].minor.yy444,
                                                        yymsp[-8].minor.yy497
                                                    );
                                                delete yymsp[-6].minor.yy274;
                                                delete yymsp[-5].minor.yy84;
                                                delete yymsp[-2].minor.yy165;
                                                if (yymsp[-4].minor.yy348)
                                                    delete yymsp[-4].minor.yy348;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 235: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy497;
                                                yygotominor.yy107 = q;
                                                objectForTokens = yygotominor.yy107;
                                                delete yymsp[0].minor.yy274;
                                            }
        break;
      case 236: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy497;
                                                q->database = *(yymsp[-1].minor.yy7);
                                                yygotominor.yy107 = q;
                                                objectForTokens = yygotominor.yy107;
                                                delete yymsp[-2].minor.yy274;
                                                delete yymsp[-1].minor.yy7;
                                            }
        break;
      case 239: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy165->append(ParserSetValue(*(yymsp[-2].minor.yy7), yymsp[0].minor.yy444));
                                                yygotominor.yy165 = yymsp[-4].minor.yy165;
                                                delete yymsp[-2].minor.yy7;
                                            }
        break;
      case 240: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy165->append(ParserSetValue(*(yymsp[-3].minor.yy275), yymsp[0].minor.yy444));
                                                yygotominor.yy165 = yymsp[-6].minor.yy165;
                                                delete yymsp[-3].minor.yy275;
                                            }
        break;
      case 241: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy165 = new ParserSetValueList();
                                                yygotominor.yy165->append(ParserSetValue(*(yymsp[-2].minor.yy7), yymsp[0].minor.yy444));
                                                delete yymsp[-2].minor.yy7;
                                            }
        break;
      case 242: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy165 = new ParserSetValueList();
                                                yygotominor.yy165->append(ParserSetValue(*(yymsp[-3].minor.yy275), yymsp[0].minor.yy444));
                                                delete yymsp[-3].minor.yy275;
                                            }
        break;
      case 243: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy165 = new ParserSetValueList();
                                            }
        break;
      case 244: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy165 = yymsp[-1].minor.yy165;
                                            }
        break;
      case 245: /* setlist ::= setlist COMMA ID_COL */
      case 246: /* setlist ::= ID_COL */ yytestcase(yyruleno==246);
{  yy_destructor(yypParser,273,&yymsp[-2].minor);
}
        break;
      case 247: /* idlist_opt ::= */
{yygotominor.yy275 = new QStringList();}
        break;
      case 248: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy275 = yymsp[-1].minor.yy275;}
        break;
      case 249: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy275 = yymsp[-2].minor.yy275;
                                                *(yygotominor.yy275) << *(yymsp[0].minor.yy7);
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 250: /* idlist ::= nm */
{
                                                yygotominor.yy275 = new QStringList();
                                                *(yygotominor.yy275) << *(yymsp[0].minor.yy7);
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 251: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy275 = new QStringList();
                                            }
        break;
      case 252: /* idlist ::= idlist COMMA ID_COL */
      case 253: /* idlist ::= ID_COL */ yytestcase(yyruleno==253);
{  yy_destructor(yypParser,268,&yymsp[-2].minor);
}
        break;
      case 255: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert */
{
                                                yygotominor.yy107 = new SqliteInsert(
                                                        yymsp[-5].minor.yy512->replace,
                                                        yymsp[-5].minor.yy512->orConflict,
                                                        yymsp[-3].minor.yy84->name1,
                                                        yymsp[-3].minor.yy84->name2,
                                                        *(yymsp[-2].minor.yy275),
                                                        yymsp[-1].minor.yy273,
                                                        yymsp[-6].minor.yy497,
                                                        yymsp[0].minor.yy500
                                                    );
                                                delete yymsp[-3].minor.yy84;
                                                delete yymsp[-5].minor.yy512;
                                                delete yymsp[-2].minor.yy275;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 256: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES */
{
                                                yygotominor.yy107 = new SqliteInsert(
                                                        yymsp[-5].minor.yy512->replace,
                                                        yymsp[-5].minor.yy512->orConflict,
                                                        yymsp[-3].minor.yy84->name1,
                                                        yymsp[-3].minor.yy84->name2,
                                                        *(yymsp[-2].minor.yy275),
                                                        yymsp[-6].minor.yy497
                                                    );
                                                delete yymsp[-3].minor.yy84;
                                                delete yymsp[-5].minor.yy512;
                                                delete yymsp[-2].minor.yy275;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 257: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy512->replace;
                                                q->onConflict = yymsp[-1].minor.yy512->orConflict;
                                                q->with = yymsp[-2].minor.yy497;
                                                yygotominor.yy107 = q;
                                                objectForTokens = yygotominor.yy107;
                                                delete yymsp[-1].minor.yy512;
                                            }
        break;
      case 258: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy512->replace;
                                                q->onConflict = yymsp[-3].minor.yy512->orConflict;
                                                q->with = yymsp[-4].minor.yy497;
                                                q->database = *(yymsp[-1].minor.yy7);
                                                yygotominor.yy107 = q;
                                                objectForTokens = yygotominor.yy107;
                                                delete yymsp[-3].minor.yy512;
                                                delete yymsp[-1].minor.yy7;
                                            }
        break;
      case 259: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,243,&yymsp[-3].minor);
  yy_destructor(yypParser,276,&yymsp[-2].minor);
}
        break;
      case 260: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,243,&yymsp[-5].minor);
  yy_destructor(yypParser,276,&yymsp[-4].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 261: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy512 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy274));
                                                delete yymsp[0].minor.yy274;
                                            }
        break;
      case 262: /* insert_cmd ::= REPLACE */
{yygotominor.yy512 = new ParserStubInsertOrReplace(true);}
        break;
      case 263: /* upsert ::= */
{
                                                yygotominor.yy500 = nullptr;
                                            }
        break;
      case 264: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy500 = new SqliteUpsert(*(yymsp[-7].minor.yy435), yymsp[-5].minor.yy444, *(yymsp[-1].minor.yy165), yymsp[0].minor.yy444);
                                                delete yymsp[-7].minor.yy435;
                                                delete yymsp[-1].minor.yy165;
                                                objectForTokens = yygotominor.yy500;
                                            }
        break;
      case 265: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy500 = new SqliteUpsert(*(yymsp[-4].minor.yy435), yymsp[-2].minor.yy444);
                                                delete yymsp[-4].minor.yy435;
                                                objectForTokens = yygotominor.yy500;
                                            }
        break;
      case 266: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy500 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy500;
                                            }
        break;
      case 267: /* exprx ::= nm DOT */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initId(*(yymsp[-1].minor.yy7), QString(), QString());
                                                delete yymsp[-1].minor.yy7;
                                                objectForTokens = yygotominor.yy444;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: nm.>");
                                            }
        break;
      case 268: /* exprx ::= nm DOT nm DOT */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initId(*(yymsp[-3].minor.yy7), *(yymsp[-1].minor.yy7), QString());
                                                delete yymsp[-3].minor.yy7;
                                                delete yymsp[-1].minor.yy7;
                                                objectForTokens = yygotominor.yy444;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: nm.nm.>");
                                            }
        break;
      case 269: /* exprx ::= expr not_opt BETWEEN expr AND */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-4].minor.yy444;
                                                delete yymsp[-1].minor.yy444;
                                                objectForTokens = yygotominor.yy444;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: expr not_opt BETWEEN expr AND>");
                                            }
        break;
      case 270: /* exprx ::= CASE case_operand case_exprlist case_else */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                delete yymsp[-1].minor.yy39;
                                                delete yymsp[-2].minor.yy444;
                                                delete yymsp[0].minor.yy444;
                                                objectForTokens = yygotominor.yy444;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: CASE operand exprlist else>");
                                            }
        break;
      case 271: /* exprx ::= expr not_opt IN LP exprlist */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[0].minor.yy39;
                                                delete yymsp[-4].minor.yy444;
                                                objectForTokens = yygotominor.yy444;
                                                parserContext->minorErrorBeforeNextToken("Syntax error <exprx: expr not_opt IN LP exprlist>");
                                            }
        break;
      case 272: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,222,&yymsp[-3].minor);
}
        break;
      case 273: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 274: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==274);
{  yy_destructor(yypParser,222,&yymsp[-5].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 276: /* exprx ::= nm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,199,&yymsp[-4].minor);
  yy_destructor(yypParser,199,&yymsp[-2].minor);
}
        break;
      case 277: /* exprx ::= expr COLLATE ID_COLLATE */
      case 278: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==278);
{  yy_destructor(yypParser,222,&yymsp[-2].minor);
}
        break;
      case 279: /* exprx ::= term */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initLiteral(*(yymsp[0].minor.yy513));
                                                delete yymsp[0].minor.yy513;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 280: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 281: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initRowValue(*(yymsp[-1].minor.yy39));
                                                delete yymsp[-1].minor.yy39;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 282: /* exprx ::= id */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initId(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 283: /* exprx ::= JOIN_KW */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initId(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 284: /* exprx ::= nm DOT nm */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initId(*(yymsp[-2].minor.yy7), *(yymsp[0].minor.yy7));
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 285: /* exprx ::= nm DOT nm DOT nm */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initId(*(yymsp[-4].minor.yy7), *(yymsp[-2].minor.yy7), *(yymsp[0].minor.yy7));
                                                delete yymsp[-4].minor.yy7;
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 286: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 287: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initCollate(yymsp[-2].minor.yy444, *(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 288: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initCast(yymsp[-3].minor.yy444, yymsp[-1].minor.yy177);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 289: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy202), *(yymsp[-1].minor.yy39));
                                                delete yymsp[-2].minor.yy202;
                                                delete yymsp[-1].minor.yy39;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 290: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 291: /* exprx ::= expr AND expr */
      case 292: /* exprx ::= expr OR expr */ yytestcase(yyruleno==292);
      case 293: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==293);
      case 294: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==294);
      case 295: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==295);
      case 296: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==296);
      case 297: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==297);
      case 298: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==298);
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initBinOp(yymsp[-2].minor.yy444, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy444);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 299: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initLike(yymsp[-3].minor.yy444, *(yymsp[-2].minor.yy255), *(yymsp[-1].minor.yy244), yymsp[0].minor.yy444);
                                                delete yymsp[-2].minor.yy255;
                                                delete yymsp[-1].minor.yy244;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 300: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initLike(yymsp[-5].minor.yy444, *(yymsp[-4].minor.yy255), *(yymsp[-3].minor.yy244), yymsp[-2].minor.yy444, yymsp[0].minor.yy444);
                                                delete yymsp[-4].minor.yy255;
                                                delete yymsp[-3].minor.yy244;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 301: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initNull(yymsp[-1].minor.yy444, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 302: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initNull(yymsp[-2].minor.yy444, "NOT NULL");
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 303: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initIs(yymsp[-3].minor.yy444, *(yymsp[-1].minor.yy255), yymsp[0].minor.yy444);
                                                delete yymsp[-1].minor.yy255;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 304: /* exprx ::= NOT expr */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initUnaryOp(yymsp[0].minor.yy444, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 305: /* exprx ::= BITNOT expr */
      case 307: /* exprx ::= PLUS expr */ yytestcase(yyruleno==307);
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initUnaryOp(yymsp[0].minor.yy444, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 306: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                if (yymsp[0].minor.yy444->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy444->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy444->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy444;
                                                }
                                                else
                                                {
                                                    yygotominor.yy444->initUnaryOp(yymsp[0].minor.yy444, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 308: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initBetween(yymsp[-5].minor.yy444, *(yymsp[-4].minor.yy255), yymsp[-2].minor.yy444, yymsp[0].minor.yy444);
                                                delete yymsp[-4].minor.yy255;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 309: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initIn(yymsp[-5].minor.yy444, *(yymsp[-4].minor.yy255), *(yymsp[-1].minor.yy39));
                                                delete yymsp[-4].minor.yy255;
                                                delete yymsp[-1].minor.yy39;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 310: /* exprx ::= LP select RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initSubSelect(yymsp[-1].minor.yy273);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 311: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initIn(yymsp[-5].minor.yy444, *(yymsp[-4].minor.yy255), yymsp[-1].minor.yy273);
                                                delete yymsp[-4].minor.yy255;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 312: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initIn(yymsp[-4].minor.yy444, *(yymsp[-3].minor.yy255), *(yymsp[-1].minor.yy7), *(yymsp[0].minor.yy7));
                                                delete yymsp[-3].minor.yy255;
                                                delete yymsp[-1].minor.yy7;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 313: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initExists(yymsp[-1].minor.yy273);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 314: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initCase(yymsp[-3].minor.yy444, *(yymsp[-2].minor.yy39), yymsp[-1].minor.yy444);
                                                delete yymsp[-2].minor.yy39;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 315: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 316: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy7));
                                                delete yymsp[-1].minor.yy7;
                                                objectForTokens = yygotominor.yy444;
                                            }
        break;
      case 317: /* exprx ::= ID LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initWindowFunction(yymsp[-5].minor.yy0->value, *(yymsp[-3].minor.yy202), *(yymsp[-2].minor.yy39), yymsp[0].minor.yy379);
                                                delete yymsp[-3].minor.yy202;
                                                delete yymsp[-2].minor.yy39;
                                                objectForTokens = yygotominor.yy444;
											}
        break;
      case 318: /* exprx ::= ID LP STAR RP filter_over */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                yygotominor.yy444->initWindowFunction(yymsp[-4].minor.yy0->value, yymsp[0].minor.yy379);
                                                objectForTokens = yygotominor.yy444;
											}
        break;
      case 319: /* expr ::= */
{
                                                yygotominor.yy444 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy444;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 323: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy244 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 324: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy39->append(yymsp[-2].minor.yy444);
                                                yymsp[-4].minor.yy39->append(yymsp[0].minor.yy444);
                                                yygotominor.yy39 = yymsp[-4].minor.yy39;
                                            }
        break;
      case 325: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy39 = new ParserExprList();
                                                yygotominor.yy39->append(yymsp[-2].minor.yy444);
                                                yygotominor.yy39->append(yymsp[0].minor.yy444);
                                            }
        break;
      case 332: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy39->append(yymsp[0].minor.yy444);
                                                yygotominor.yy39 = yymsp[-2].minor.yy39;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 333: /* nexprlist ::= exprx */
{
                                                yygotominor.yy39 = new ParserExprList();
                                                yygotominor.yy39->append(yymsp[0].minor.yy444);
                                            }
        break;
      case 334: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy107 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy255),
                                                        *(yymsp[-8].minor.yy255),
                                                        *(yymsp[-7].minor.yy7),
                                                        *(yymsp[-6].minor.yy7),
                                                        *(yymsp[-4].minor.yy7),
                                                        *(yymsp[-2].minor.yy435),
                                                        yymsp[0].minor.yy444
                                                    );
                                                delete yymsp[-8].minor.yy255;
                                                delete yymsp[-10].minor.yy255;
                                                delete yymsp[-7].minor.yy7;
                                                delete yymsp[-6].minor.yy7;
                                                delete yymsp[-4].minor.yy7;
                                                delete yymsp[-2].minor.yy435;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 335: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,199,&yymsp[-3].minor);
}
        break;
      case 340: /* idxlist_opt ::= */
{yygotominor.yy339 = new ParserIndexedColumnList();}
        break;
      case 341: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy339 = yymsp[-1].minor.yy339;}
        break;
      case 342: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy339->append(yymsp[0].minor.yy464);
                                                yygotominor.yy339 = yymsp[-2].minor.yy339;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 343: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy339 = new ParserIndexedColumnList();
                                                yygotominor.yy339->append(yymsp[0].minor.yy464);
                                            }
        break;
      case 344: /* idxlist_single ::= nm collate sortorder */
      case 345: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==345);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy7),
                                                        *(yymsp[-1].minor.yy7),
                                                        *(yymsp[0].minor.yy161)
                                                    );
                                                yygotominor.yy464 = obj;
                                                delete yymsp[0].minor.yy161;
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[-1].minor.yy7;
                                                objectForTokens = yygotominor.yy464;
                                            }
        break;
      case 349: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy107 = new SqliteDropIndex(*(yymsp[-1].minor.yy255), yymsp[0].minor.yy84->name1, yymsp[0].minor.yy84->name2);
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy84;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 352: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy107 = new SqliteVacuum(yymsp[0].minor.yy444);
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 353: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy107 = new SqliteVacuum(*(yymsp[-1].minor.yy7), yymsp[0].minor.yy444);
                                                delete yymsp[-1].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 356: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy107 = new SqlitePragma(*(yymsp[-1].minor.yy7), *(yymsp[0].minor.yy7));
                                                delete yymsp[-1].minor.yy7;
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 357: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 359: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==359);
{
                                                yygotominor.yy107 = new SqlitePragma(*(yymsp[-3].minor.yy7), *(yymsp[-2].minor.yy7), *(yymsp[0].minor.yy513), true);
                                                delete yymsp[-3].minor.yy7;
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[0].minor.yy513;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 358: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 360: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==360);
{
                                                yygotominor.yy107 = new SqlitePragma(*(yymsp[-4].minor.yy7), *(yymsp[-3].minor.yy7), *(yymsp[-1].minor.yy513), false);
                                                delete yymsp[-4].minor.yy7;
                                                delete yymsp[-3].minor.yy7;
                                                delete yymsp[-1].minor.yy513;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 364: /* nmnum ::= nm */
{
                                                yygotominor.yy513 = new QVariant(*(yymsp[0].minor.yy7));
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 370: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy513->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy513) = -(yymsp[0].minor.yy513->toDouble());
                                                else if (yymsp[0].minor.yy513->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy513) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy513) = -(yymsp[0].minor.yy513->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy513 = yymsp[0].minor.yy513;
                                            }
        break;
      case 373: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy107 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy202),
                                                        *(yymsp[-11].minor.yy255),
                                                        *(yymsp[-10].minor.yy7),
                                                        *(yymsp[-9].minor.yy7),
                                                        *(yymsp[-5].minor.yy7),
                                                        *(yymsp[-8].minor.yy252),
                                                        yymsp[-7].minor.yy631,
                                                        *(yymsp[-4].minor.yy515),
                                                        yymsp[-3].minor.yy444,
                                                        *(yymsp[-1].minor.yy66),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy255;
                                                delete yymsp[-13].minor.yy202;
                                                delete yymsp[-8].minor.yy252;
                                                delete yymsp[-4].minor.yy515;
                                                delete yymsp[-10].minor.yy7;
                                                delete yymsp[-5].minor.yy7;
                                                delete yymsp[-9].minor.yy7;
                                                delete yymsp[-1].minor.yy66;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 374: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy107 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy202),
                                                        *(yymsp[-8].minor.yy255),
                                                        *(yymsp[-7].minor.yy7),
                                                        *(yymsp[-6].minor.yy7),
                                                        *(yymsp[-2].minor.yy7),
                                                        *(yymsp[-5].minor.yy252),
                                                        yymsp[-4].minor.yy631,
                                                        *(yymsp[-1].minor.yy515),
                                                        yymsp[0].minor.yy444,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy255;
                                                delete yymsp[-10].minor.yy202;
                                                delete yymsp[-5].minor.yy252;
                                                delete yymsp[-1].minor.yy515;
                                                delete yymsp[-7].minor.yy7;
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[-6].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 375: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy107 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy202),
													*(yymsp[-10].minor.yy255),
													*(yymsp[-9].minor.yy7),
													*(yymsp[-8].minor.yy7),
													*(yymsp[-4].minor.yy7),
													*(yymsp[-7].minor.yy252),
													yymsp[-6].minor.yy631,
													*(yymsp[-3].minor.yy515),
													yymsp[-2].minor.yy444,
													*(yymsp[0].minor.yy66),
													3
                                                );
                                                delete yymsp[-10].minor.yy255;
                                                delete yymsp[-12].minor.yy202;
                                                delete yymsp[-7].minor.yy252;
                                                delete yymsp[-3].minor.yy515;
                                                delete yymsp[-9].minor.yy7;
                                                delete yymsp[-4].minor.yy7;
                                                delete yymsp[-8].minor.yy7;
                                                delete yymsp[0].minor.yy66;
                                                objectForTokens = yygotominor.yy107;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 376: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,201,&yymsp[-8].minor);
  yy_destructor(yypParser,199,&yymsp[-5].minor);
  yy_destructor(yypParser,291,&yymsp[-3].minor);
  yy_destructor(yypParser,292,&yymsp[-2].minor);
}
        break;
      case 379: /* trigger_time ::= BEFORE */
{yygotominor.yy252 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 380: /* trigger_time ::= AFTER */
{yygotominor.yy252 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 381: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy252 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 382: /* trigger_time ::= */
{yygotominor.yy252 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 383: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy631 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy631;
                                            }
        break;
      case 384: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy631 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy631;
                                            }
        break;
      case 385: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy631 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy631;
                                            }
        break;
      case 386: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy631 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy275));
                                                delete yymsp[0].minor.yy275;
                                                objectForTokens = yygotominor.yy631;
                                            }
        break;
      case 387: /* foreach_clause ::= */
{yygotominor.yy515 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 388: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy515 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 391: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy66->append(yymsp[-1].minor.yy107);
                                                yygotominor.yy66 = yymsp[-2].minor.yy66;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 392: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy66 = new ParserQueryList();
                                                yygotominor.yy66->append(yymsp[-1].minor.yy107);
                                            }
        break;
      case 393: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy66 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 398: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 399: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy107 = new SqliteDropTrigger(*(yymsp[-1].minor.yy255), yymsp[0].minor.yy84->name1, yymsp[0].minor.yy84->name2);
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[0].minor.yy84;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 402: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy107 = new SqliteAttach(*(yymsp[-4].minor.yy255), yymsp[-3].minor.yy444, yymsp[-1].minor.yy444, yymsp[0].minor.yy444);
                                                delete yymsp[-4].minor.yy255;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 403: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy107 = new SqliteDetach(*(yymsp[-1].minor.yy255), yymsp[0].minor.yy444);
                                                delete yymsp[-1].minor.yy255;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 408: /* cmd ::= REINDEX */
{yygotominor.yy107 = new SqliteReindex();}
        break;
      case 409: /* cmd ::= REINDEX nm dbnm */
      case 410: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==410);
{
                                                yygotominor.yy107 = new SqliteReindex(*(yymsp[-1].minor.yy7), *(yymsp[0].minor.yy7));
                                                delete yymsp[-1].minor.yy7;
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 413: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy107 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 414: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy107 = new SqliteAnalyze(*(yymsp[-1].minor.yy7), *(yymsp[0].minor.yy7));
                                                delete yymsp[-1].minor.yy7;
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 417: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy107 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy84->name1,
                                                        yymsp[-3].minor.yy84->name2,
                                                        *(yymsp[0].minor.yy7)
                                                    );
                                                delete yymsp[0].minor.yy7;
                                                delete yymsp[-3].minor.yy84;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 418: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy107 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy84->name1,
                                                        yymsp[-3].minor.yy84->name2,
                                                        *(yymsp[-1].minor.yy255),
                                                        yymsp[0].minor.yy459
                                                    );
                                                delete yymsp[-1].minor.yy255;
                                                delete yymsp[-3].minor.yy84;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 419: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,203,&yymsp[-3].minor);
}
        break;
      case 425: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy107 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy255),
                                                        *(yymsp[-3].minor.yy7),
                                                        *(yymsp[-2].minor.yy7),
                                                        *(yymsp[0].minor.yy7)
                                                    );
                                                delete yymsp[-4].minor.yy255;
                                                delete yymsp[-3].minor.yy7;
                                                delete yymsp[-2].minor.yy7;
                                                delete yymsp[0].minor.yy7;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 426: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy107 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy255),
                                                        *(yymsp[-6].minor.yy7),
                                                        *(yymsp[-5].minor.yy7),
                                                        *(yymsp[-3].minor.yy7),
                                                        *(yymsp[-1].minor.yy275)
                                                    );
                                                delete yymsp[-6].minor.yy7;
                                                delete yymsp[-5].minor.yy7;
                                                delete yymsp[-3].minor.yy7;
                                                delete yymsp[-7].minor.yy255;
                                                delete yymsp[-1].minor.yy275;
                                                objectForTokens = yygotominor.yy107;
                                            }
        break;
      case 429: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy275 = new QStringList();
                                                yygotominor.yy275->append((yymsp[0].minor.yy7)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 430: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy275->append((yymsp[0].minor.yy7)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy275 = yymsp[-2].minor.yy275;
                                                delete yymsp[0].minor.yy7;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 432: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy7->append(" "+ *(yymsp[0].minor.yy7));
                                                yygotominor.yy7 = yymsp[-1].minor.yy7;
                                                delete yymsp[0].minor.yy7;
                                            }
        break;
      case 433: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy7 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 434: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy7 = new QString("(");
                                                yygotominor.yy7->append(*(yymsp[-1].minor.yy7));
                                                yygotominor.yy7->append(")");
                                                delete yymsp[-1].minor.yy7;
                                            }
        break;
      case 436: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy7 = yymsp[-3].minor.yy7;
                                                yygotominor.yy7->append("(");
                                                yygotominor.yy7->append(*(yymsp[-1].minor.yy7));
                                                yygotominor.yy7->append(")");
                                                delete yymsp[-1].minor.yy7;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 437: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy7 = yymsp[-1].minor.yy7;
                                                yygotominor.yy7->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 438: /* with ::= */
{yygotominor.yy497 = nullptr;}
        break;
      case 439: /* with ::= WITH wqlist */
{
                                                yygotominor.yy497 = yymsp[0].minor.yy497;
                                                objectForTokens = yygotominor.yy497;
                                            }
        break;
      case 440: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy497 = yymsp[0].minor.yy497;
                                                yygotominor.yy497->recursive = true;
                                                objectForTokens = yygotominor.yy497;
                                            }
        break;
      case 441: /* wqlist ::= nm idxlist_opt AS LP select RP */
{
                                                yygotominor.yy497 = SqliteWith::append(*(yymsp[-5].minor.yy7), *(yymsp[-4].minor.yy339), yymsp[-1].minor.yy273);
                                                delete yymsp[-5].minor.yy7;
                                                delete yymsp[-4].minor.yy339;
                                            }
        break;
      case 442: /* wqlist ::= wqlist COMMA nm idxlist_opt AS LP select RP */
{
                                                yygotominor.yy497 = SqliteWith::append(yymsp[-7].minor.yy497, *(yymsp[-5].minor.yy7), *(yymsp[-4].minor.yy339), yymsp[-1].minor.yy273);
                                                delete yymsp[-5].minor.yy7;
                                                delete yymsp[-4].minor.yy339;
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 443: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy497 = new SqliteWith();
                                            }
        break;
      case 444: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy519 = new ParserWindowDefList();
												yygotominor.yy519->append(yymsp[0].minor.yy322);
											}
        break;
      case 445: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy519->append(yymsp[0].minor.yy322);
												yygotominor.yy519 = yymsp[-2].minor.yy519;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 446: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy322 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy7), yymsp[-1].minor.yy258);
												delete yymsp[-4].minor.yy7;
												objectForTokens = yygotominor.yy322;
											}
        break;
      case 447: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy258 = new SqliteWindowDefinition::Window();
												yygotominor.yy258->initPartitionBy(QString(), *(yymsp[-2].minor.yy39), *(yymsp[-1].minor.yy435), yymsp[0].minor.yy197);
												delete yymsp[-2].minor.yy39;
												delete yymsp[-1].minor.yy435;
												objectForTokens = yygotominor.yy258;
											}
        break;
      case 448: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy258 = new SqliteWindowDefinition::Window();
												yygotominor.yy258->initPartitionBy(*(yymsp[-5].minor.yy7), *(yymsp[-2].minor.yy39), *(yymsp[-1].minor.yy435), yymsp[0].minor.yy197);
												delete yymsp[-2].minor.yy39;
												delete yymsp[-5].minor.yy7;
												delete yymsp[-1].minor.yy435;
												objectForTokens = yygotominor.yy258;
											}
        break;
      case 449: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy258 = new SqliteWindowDefinition::Window();
												yygotominor.yy258->initOrderBy(QString(), *(yymsp[-1].minor.yy435), yymsp[0].minor.yy197);
												delete yymsp[-1].minor.yy435;
												objectForTokens = yygotominor.yy258;
											}
        break;
      case 450: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy258 = new SqliteWindowDefinition::Window();
												yygotominor.yy258->initOrderBy(*(yymsp[-4].minor.yy7), *(yymsp[-1].minor.yy435), yymsp[0].minor.yy197);
												delete yymsp[-1].minor.yy435;
												delete yymsp[-4].minor.yy7;
												objectForTokens = yygotominor.yy258;
											}
        break;
      case 451: /* window ::= frame_opt */
{
												yygotominor.yy258 = new SqliteWindowDefinition::Window();
												yygotominor.yy258->init(QString(), yymsp[0].minor.yy197);
												objectForTokens = yygotominor.yy258;
											}
        break;
      case 452: /* window ::= nm frame_opt */
{
												yygotominor.yy258 = new SqliteWindowDefinition::Window();
												yygotominor.yy258->init(QString(), yymsp[0].minor.yy197);
												delete yymsp[-1].minor.yy7;
												objectForTokens = yygotominor.yy258;
											}
        break;
      case 453: /* frame_opt ::= */
{yygotominor.yy197 = nullptr;}
        break;
      case 454: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy197 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy10), yymsp[-1].minor.yy477, nullptr, *(yymsp[0].minor.yy267));
												delete yymsp[-2].minor.yy10;
												delete yymsp[0].minor.yy267;
												objectForTokens = yygotominor.yy197;
											}
        break;
      case 455: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy197 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy10), yymsp[-3].minor.yy477, yymsp[-1].minor.yy477, *(yymsp[0].minor.yy267));
												delete yymsp[-5].minor.yy10;
												delete yymsp[0].minor.yy267;
												objectForTokens = yygotominor.yy197;
											}
        break;
      case 456: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy10 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 457: /* frame_bound_s ::= frame_bound */
      case 459: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==459);
{
												yygotominor.yy477 = yymsp[0].minor.yy477;
												objectForTokens = yygotominor.yy477;
											}
        break;
      case 458: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 460: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==460);
      case 462: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==462);
{
												yygotominor.yy477 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy477;
											}
        break;
      case 461: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy477 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy444, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy477;
											}
        break;
      case 463: /* frame_exclude_opt ::= */
{
												yygotominor.yy267 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 464: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy267 = yymsp[0].minor.yy267;
											}
        break;
      case 465: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy267 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 466: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy267 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 467: /* frame_exclude ::= GROUP */
{
												yygotominor.yy267 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 468: /* frame_exclude ::= TIES */
{
												yygotominor.yy267 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 469: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy519 = yymsp[0].minor.yy519;
											}
        break;
      case 470: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy379 = new SqliteFilterOver(yymsp[-1].minor.yy333, yymsp[0].minor.yy59);
												objectForTokens = yygotominor.yy379;
											}
        break;
      case 471: /* filter_over ::= over_clause */
{
												yygotominor.yy379 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy59);
												objectForTokens = yygotominor.yy379;
											}
        break;
      case 472: /* filter_over ::= filter_clause */
{
												yygotominor.yy379 = new SqliteFilterOver(yymsp[0].minor.yy333, nullptr);
												objectForTokens = yygotominor.yy379;
											}
        break;
      case 473: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy59 = new SqliteFilterOver::Over(yymsp[-1].minor.yy258);
												objectForTokens = yygotominor.yy59;
											}
        break;
      case 474: /* over_clause ::= OVER nm */
{
												yygotominor.yy59 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy7));
												delete yymsp[0].minor.yy7;
												objectForTokens = yygotominor.yy59;
											}
        break;
      case 475: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy333 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy444);
												objectForTokens = yygotominor.yy333;
											}
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
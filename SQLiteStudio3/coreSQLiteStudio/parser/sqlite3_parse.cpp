/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "common/unused.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 328
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 79
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  SqliteCreateTable::Column* yy3;
  SqliteFilterOver::Over* yy11;
  SqliteWith::CommonTableExpression::AsMode* yy21;
  ParserResultColumnList* yy27;
  SqliteSortOrder* yy35;
  SqliteFilterOver::Filter* yy39;
  SqliteQuery* yy41;
  ParserDeferSubClause* yy53;
  SqliteForeignKey::Condition::Reaction* yy106;
  ParserOtherSourceList* yy107;
  SqliteIndexedColumn* yy110;
  ParserCreateTableConstraintList* yy115;
  SqliteCreateTrigger::Time* yy120;
  int* yy130;
  SqliteConflictAlgo* yy136;
  SqliteSelect::CompoundOperator* yy142;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy143;
  SqliteWith::CommonTableExpression* yy146;
  SqliteWindowDefinition::Window::Frame* yy149;
  ParserFkConditionList* yy156;
  SqliteWith* yy161;
  SqliteWindowDefinition::Window* yy162;
  ParserCteList* yy164;
  QStringList* yy173;
  SqliteFilterOver* yy181;
  SqliteExpr* yy186;
  SqliteForeignKey::Condition* yy205;
  SqliteSelect::Core::JoinConstraint* yy215;
  bool* yy225;
  ParserOrderByList* yy226;
  SqliteWindowDefinition::Window::Frame::Exclude* yy237;
  ParserQueryList* yy240;
  SqliteCreateTrigger::Event* yy259;
  SqliteColumnType* yy267;
  SqliteExpr::LikeOp* yy274;
  SqliteWindowDefinition::Window::Frame::Bound* yy285;
  SqliteSelect* yy297;
  ParserIndexedBy* yy300;
  ParserStubInsertOrReplace* yy308;
  SqliteNulls* yy315;
  QString* yy319;
  ParserCreateTableColumnConstraintList* yy323;
  SqliteUpsert* yy332;
  SqliteLimit* yy360;
  SqliteSelect::Core* yy378;
  ParserTermOrLiteral* yy380;
  ParserCreateTableColumnList* yy390;
  QVariant* yy393;
  ParserFullName* yy396;
  SqliteCreateTable::Constraint* yy400;
  SqliteCreateTable::Column::Constraint* yy448;
  SqliteSelect::Core::JoinOp* yy449;
  ParserCreateTableOptionList* yy455;
  SqliteCreateTrigger::Scope* yy456;
  ParserStubExplain* yy499;
  ParserStubTransDetails* yy512;
  ParserExprNestedList* yy522;
  ParserWindowDefList* yy525;
  SqliteSelect::Core::JoinSource* yy553;
  SqliteWindowDefinition* yy562;
  SqliteSelect::Core::SingleSource* yy595;
  SqliteInitially* yy612;
  ParserExprList* yy615;
  ParserSetValueList* yy621;
  ParserIndexedColumnList* yy627;
  ParserStubAlias* yy628;
  ParserStubCreateTableOption* yy629;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 870
#define YYNRULE 487
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2872)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   530,  162,  867,  862,  456,  453,  452,  870,   27,   68,
 /*    10 */   529,  282,  521,  614,  818,  818,   65,   65,   66,   66,
 /*    20 */    66,   66,  451,   64,   64,   64,   64,   63,   63,   62,
 /*    30 */    62,   62,   61,   59,  263,  862,  411,  807,   67,   68,
 /*    40 */   529,  282,   58,  116,  818,  818,   65,   65,   66,   66,
 /*    50 */    66,   66,  526,   64,   64,   64,   64,   63,   63,   62,
 /*    60 */    62,   62,   61,   59,  263,  681, 1280,   62,   62,   62,
 /*    70 */    61,   59,  263,  808,   66,   66,   66,   66,   56,   64,
 /*    80 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*    90 */   263,  751,  251,  250,  249,   53,   54,  715,  307,  442,
 /*   100 */   317,  693,  862,   55, 1042,  180,  704,  704,  284,  473,
 /*   110 */   836,    2, 1042,  751,  858,  868,  816, 1042,  862,  751,
 /*   120 */   518,  856,  830,  859,  656,  860,  859,  530,  833,  162,
 /*   130 */   857,  771,  456,  453,  452,  816,  832,  831,  830,  521,
 /*   140 */  1042,  770,  343,   61,   59,  263,  830, 1108,   39,  143,
 /*   150 */   451,   82,  833, 1042,  842, 1042, 1042,  860,  859, 1042,
 /*   160 */   832,  831,  830,  839, 1042, 1042, 1042, 1042, 1042, 1042,
 /*   170 */   816,  665,  459,  816,  828,  806,   12,   44,  472,  526,
 /*   180 */   709,  708,  469,  407,  803,  802,  684, 1042,  861,   63,
 /*   190 */    63,   62,   62,   62,   61,   59,  263,  829,  230,  714,
 /*   200 */   808,  862,  683,  366, 1209,   56,  528,   64,   64,   64,
 /*   210 */    64,   63,   63,   62,   62,   62,   61,   59,  263,  283,
 /*   220 */   122,  862,   53,   54,  860,  859, 1209,  431,  828,   22,
 /*   230 */    55, 1108, 1209,  862,  483,  470,  509,  815,    2, 1108,
 /*   240 */   860,  859,  861,  816, 1108,  255,  707,  518,  471,  830,
 /*   250 */   859,  829,  230,  107,  530,  833,  381,  344,  798,  671,
 /*   260 */   528,  340,  816,  832,  831,  830,  521, 1108,  600,  264,
 /*   270 */   633,  861,  815,  601,  122,  817,  736, 1209,  435,  339,
 /*   280 */  1108,  141, 1108, 1108,  141, 1209,  672,  673,  408,  460,
 /*   290 */  1209, 1108, 1108, 1108, 1108,  861, 1108,  816,  861,  866,
 /*   300 */   816,  423,  806,   12,  534,  670,  526,  608,   80,   81,
 /*   310 */   381,  862,    1, 1209, 1108,  633,  862,  827,   14,  722,
 /*   320 */   862,  744,  376,  860,  859,  167, 1209,  808, 1209, 1209,
 /*   330 */   800,  799,   56,  602,  603,  425,  609, 1209,  611, 1209,
 /*   340 */  1209,  610, 1209,  860,  859,  255,  707,  809,  471,   53,
 /*   350 */    54,  751,  570,   80,  837,  860,  859,   55, 1093,  464,
 /*   360 */  1209,   21,  428,  721,  717,    2, 1093,  430,  815,  499,
 /*   370 */   816, 1093,  809,  751,  518,  821,  830,  859,  688,  751,
 /*   380 */   862,  569,  833,  568,  142,  834,  567,  502,  835,  816,
 /*   390 */   832,  831,  830,  399, 1093,  500,  746,    4,  467,  746,
 /*   400 */     4,  861,  687,  815,  281,  280,  809, 1093,  828, 1093,
 /*   410 */  1093,  537,  828, 1197, 1197,  177,  834,  863, 1093,  835,
 /*   420 */  1093, 1093,  861, 1093,  816,  788,  861,  816,   42,  806,
 /*   430 */    12,  829,  123,  860,  859,  829,  215,  787,  860,  859,
 /*   440 */   528, 1093,  860,  859,  528,  800,  799,  254,  487,  588,
 /*   450 */  1200,   67,   68,  529,  282, 1197, 1197,  818,  818,   65,
 /*   460 */    65,   66,   66,   66,   66,  751,   64,   64,   64,   64,
 /*   470 */    63,   63,   62,   62,   62,   61,   59,  263,  862,  731,
 /*   480 */   504,  862,  256,  492,  490,  372, 1307,  751,  172,  324,
 /*   490 */   775, 1307,  327,  751,  775,  584,  584,  821, 1197, 1197,
 /*   500 */   767,  553,  860,  859,   67,   68,  529,  282,   69,  176,
 /*   510 */   818,  818,   65,   65,   66,   66,   66,   66,  812,   64,
 /*   520 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*   530 */   263,  345,  756,  734,  486,  364,   67,   68,  529,  282,
 /*   540 */  1197, 1197,  818,  818,   65,   65,   66,   66,   66,   66,
 /*   550 */   862,   64,   64,   64,   64,   63,   63,   62,   62,   62,
 /*   560 */    61,   59,  263,  788,  781,  828,  163,  380,  809,  502,
 /*   570 */   560,  795,  658,  261,   78,  787,  194,   45,  485,  861,
 /*   580 */   795,  519,  261,  861,  861,  389,  247,  851,  829,  230,
 /*   590 */   561,  562,  585,  809,  598, 1197, 1197,  528,  491,  522,
 /*   600 */   860,  859,  515,  860,  859, 1200,  811, 1200,   66,   66,
 /*   610 */    66,   66,   40,   64,   64,   64,   64,   63,   63,   62,
 /*   620 */    62,   62,   61,   59,  263,  483,  468,  809,  371,  587,
 /*   630 */   810,  862, 1201,   67,   68,  529,  282, 1197, 1197,  818,
 /*   640 */   818,   65,   65,   66,   66,   66,   66,  381,   64,   64,
 /*   650 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  263,
 /*   660 */   862,  598,  432,  563,  798,  647,  548,  386,  677,  657,
 /*   670 */   412,  804,  860,  859,  363,  648, 1197, 1197,  793,  643,
 /*   680 */    92,  503,  768,  861,  549,  548,   67,   68,  529,  282,
 /*   690 */   441,  619,  818,  818,   65,   65,   66,   66,   66,   66,
 /*   700 */    22,   64,   64,   64,   64,   63,   63,   62,   62,   62,
 /*   710 */    61,   59,  263,  548,   67,   68,  529,  282, 1197, 1197,
 /*   720 */   818,  818,   65,   65,   66,   66,   66,   66,  862,   64,
 /*   730 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*   740 */   263,  657,  764,  508,  862,   57,  285,  545,  354,  792,
 /*   750 */  1266,  840,   92,  860,  859,  861,  520,  803,  802,  657,
 /*   760 */   560,   52,  861,   50,  328,  764,  545,  197,  409,  541,
 /*   770 */    92,  118,  353,  861,  861,  639,  639,  271,  861,  644,
 /*   780 */   561,  414,  860,  859,  286,  862,  861, 1201,  862, 1201,
 /*   790 */    67,   68,  529,  282,  545,  196,  818,  818,   65,   65,
 /*   800 */    66,   66,   66,   66,  862,   64,   64,   64,   64,   63,
 /*   810 */    63,   62,   62,   62,   61,   59,  263,   67,   68,  529,
 /*   820 */   282,  588,  506,  818,  818,   65,   65,   66,   66,   66,
 /*   830 */    66,  798,   64,   64,   64,   64,   63,   63,   62,   62,
 /*   840 */    62,   61,   59,  263,  530, 1266,  844,  862,  821,  821,
 /*   850 */   860,  859,  457,  415,  798,  113,  521,  372, 1306,  791,
 /*   860 */   662,  661,  789, 1306,  348,  633,  860,  859,   67,   68,
 /*   870 */   529,  282,   58,  780,  818,  818,   65,   65,   66,   66,
 /*   880 */    66,   66,  862,   64,   64,   64,   64,   63,   63,   62,
 /*   890 */    62,   62,   61,   59,  263,  703,  526,  776,  344,   74,
 /*   900 */   401,  635,  608,   80,  630,  119,  482,  860,  859,  585,
 /*   910 */   860,  859,  861,   81,  626,  112, 1204,  808,  779,  505,
 /*   920 */   692,  256,   56,  630,  259,   73,  860,  859,  774,  342,
 /*   930 */   699,  609,  805,  611,  635,  965,  610,   89,  517,   53,
 /*   940 */    54,  507,  246,  245,  122,  371,  586,   55,  179,  126,
 /*   950 */   341,  462,  336,  461,  164,    2, 1207,  429,   71,    8,
 /*   960 */   816,  172,  481,  376,  518,  697,  830,  859,  334,  830,
 /*   970 */   821,  821,  833,  794,  625,  833,  122,  843,   81,  816,
 /*   980 */   832,  831,  830,  832,  831,  830,  846,  513,  849,  295,
 /*   990 */   751,  861,  299,  354, 1202, 1315, 1315,  354,  790,  342,
 /*  1000 */   699,  843,  437,  116,  860,  859,  734,  861,  531,   47,
 /*  1010 */   841,  861,  751,  606,  816,  861,  861,  816,  751,  806,
 /*  1020 */    12,   67,   68,  529,  282,  122,   46,  818,  818,   65,
 /*  1030 */    65,   66,   66,   66,   66,  301,   64,   64,   64,   64,
 /*  1040 */    63,   63,   62,   62,   62,   61,   59,  263,   67,   68,
 /*  1050 */   529,  282,  135,   20,  818,  818,   65,   65,   66,   66,
 /*  1060 */    66,   66,  501,   64,   64,   64,   64,   63,   63,   62,
 /*  1070 */    62,   62,   61,   59,  263,   67,   68,  529,  282,  267,
 /*  1080 */   387,  818,  818,   65,   65,   66,   66,   66,   66,   77,
 /*  1090 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1100 */    59,  263,  512,   23,  778,  297,  516,   44,  778,   67,
 /*  1110 */    68,  529,  282,  869,    3,  818,  818,   65,   65,   66,
 /*  1120 */    66,   66,   66,   51,   64,   64,   64,   64,   63,   63,
 /*  1130 */    62,   62,   62,   61,   59,  263, 1358,  190,  535,    3,
 /*  1140 */    67,   68,  529,  282,  745,  698,  818,  818,   65,   65,
 /*  1150 */    66,   66,   66,   66,  437,   64,   64,   64,   64,   63,
 /*  1160 */    63,   62,   62,   62,   61,   59,  263,  422,  861,  642,
 /*  1170 */   765,    4,   67,   68,  529,  282,  696,   48,  818,  818,
 /*  1180 */    65,   65,   66,   66,   66,   66,   79,   64,   64,   64,
 /*  1190 */    64,   63,   63,   62,   62,   62,   61,   59,  263,  862,
 /*  1200 */   165,  466,  862,   67,   68,  529,  282,  122,  679,  818,
 /*  1210 */   818,   65,   65,   66,   66,   66,   66,  117,   64,   64,
 /*  1220 */    64,   64,   63,   63,   62,   62,   62,   61,   59,  263,
 /*  1230 */   766,  266,  735,  742,   67,   68,  529,  282,  173,  195,
 /*  1240 */   818,  818,   65,   65,   66,   66,   66,   66,  293,   64,
 /*  1250 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*  1260 */   263,   19,  861,  862,  711,   67,   68,  529,  282,   58,
 /*  1270 */   331,  818,  818,   65,   65,   66,   66,   66,   66,  716,
 /*  1280 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1290 */    59,  263,  761, 1230,   67,   68,  529,  282,  760,  256,
 /*  1300 */   818,  818,   65,   65,   66,   66,   66,   66,  847,   64,
 /*  1310 */    64,   64,   64,   63,   63,   62,   62,   62,   61,   59,
 /*  1320 */   263,  860,  859,  862,  860,  859,   67,   68,  529,  282,
 /*  1330 */   862,   28,  818,  818,   65,   65,   66,   66,   66,   66,
 /*  1340 */   566,   64,   64,   64,   64,   63,   63,   62,   62,   62,
 /*  1350 */    61,   59,  263,  411, 1281,   67,   68,  529,  282,  750,
 /*  1360 */     4,  818,  818,   65,   65,   66,   66,   66,   66,  814,
 /*  1370 */    64,   64,   64,   64,   63,   63,   62,   62,   62,   61,
 /*  1380 */    59,  263,  530, 1279,  862,  860,  859,  332,    5,  325,
 /*  1390 */   449,  862,  116,  326,  521,  116,  163,  494,   67,   68,
 /*  1400 */   529,  282,  862,  861,  818,  818,   65,   65,   66,   66,
 /*  1410 */    66,   66,  754,   64,   64,   64,   64,   63,   63,   62,
 /*  1420 */    62,   62,   61,   59,  263,  862,  128,  862,  291,  752,
 /*  1430 */   265,  438,  868,  597,  526,  448,  173,  524,  497,  419,
 /*  1440 */   290,  284,  473,  368,  436,  860,  859,  493,  862,  173,
 /*  1450 */   862,  828,  860,  859,  622,  808,  828,   18,  728,  173,
 /*  1460 */    56,  309,    6,  304,  498,  861,   44,  590,   44,  862,
 /*  1470 */   861,  132,  373,  727,  829,  230,  365,   53,   54,  829,
 /*  1480 */   230,  367,  183,  528,  986,   55,  758,  109,  528,  645,
 /*  1490 */    81,  720,  127,    2,   81,  755,  862,  386,  816,  862,
 /*  1500 */   577,  592,  518,  334,  830,  859,  860,  859,  828,  530,
 /*  1510 */   833,  483,  484,  860,  859,   17,  277,  816,  832,  831,
 /*  1520 */   830,  521,  861,   16,  860,  859,  666,  862,  369,  821,
 /*  1530 */   181,  829,  230,  381,  577,   11,   72, 1052,  381,  505,
 /*  1540 */   528,  723,  828,  593,  749,    4,  637,  860,  859,  860,
 /*  1550 */   859, 1215,  816,  862,   58,  816,  861,  806,   12,   72,
 /*  1560 */   724,  526,   91,  719,  723,  829,  230,  739,  276,  382,
 /*  1570 */   860,  859,  860,  859,  528,  723, 1315, 1315,   81,  171,
 /*  1580 */    76,  861,  808,  724,  122,  551,  347,   56,  759,  115,
 /*  1590 */   381,  860,  859,  320,  281,  280,  862,  269,  723,  862,
 /*  1600 */   739,  862,  483,  474,   53,   54,  413,  861,  593, 1059,
 /*  1610 */  1059,  135,   55,  551,  861,  747,    4,  862,  860,  859,
 /*  1620 */     2,  860,  859,  730,  381,  816,  557,  862,  417,  518,
 /*  1630 */   170,  830,  859,  169,  828,  800,  799,  833,  403,  559,
 /*  1640 */   675,  558,  861,  256,  816,  832,  831,  830,  861,  860,
 /*  1650 */   859,  821,  862,   79,  739,  862,  168,  829,  215,  539,
 /*  1660 */  1315, 1315,  547,  820,  864,  530,  528,  821,  861,  554,
 /*  1670 */   357,  396,  350,  861,  862,  860,  859,  521,  861,  816,
 /*  1680 */   494,   87,  816,  718,  806,   12,   67,   38,  529,  282,
 /*  1690 */   547,  129,  818,  818,   65,   65,   66,   66,   66,   66,
 /*  1700 */   735,   64,   64,   64,   64,   63,   63,   62,   62,   62,
 /*  1710 */    61,   59,  263,  828,  862,  574,  775,  526,  860,  859,
 /*  1720 */   477,  860,  859,  860,  859,  395,  475,  861,   72,  653,
 /*  1730 */   493,  311,  852,  723,  828,  554,  829,  215,  808,  860,
 /*  1740 */   859,  828,  777,   56,  862,  528,  861,  729,  861,  860,
 /*  1750 */   859,  496,  724,  713,  753,  861,  862,  829,  123,    7,
 /*  1760 */    53,   54,  574,  862,  829,  123,  528,  723,   55,  122,
 /*  1770 */   821,  624,  821,  528,  860,  859,    2,  860,  859,   15,
 /*  1780 */   172,  816,  748,    4,  634,  518,  710,  830,  859,  821,
 /*  1790 */   624,  344,  530,  833,  828,  775,  860,  859,  613,  712,
 /*  1800 */   816,  832,  831,  830,  521,  861,  175,  494,  861,  825,
 /*  1810 */   850,  706,  465,  174,  821,   37,  775,  829,  230,  705,
 /*  1820 */   121,  862,  740,  775,  861,  734,  528,  862,  828,  353,
 /*  1830 */   346,  701,  848,  753,  862,  816,  860,  859,  816,  828,
 /*  1840 */   806,   12,  861,  861,  526,   81,  861,  120,  273,  646,
 /*  1850 */   828,  829,  123,  861,  402,  862,  275,  495,   25,  641,
 /*  1860 */   528,  138,  829,  123,  861,  808,  860,  859,  406,  862,
 /*  1870 */    56,  528,  616,  829,  230,  739,  381,  862,  860,  859,
 /*  1880 */  1251,   90,  528,  845,  669,  860,  859,   53,   54,  861,
 /*  1890 */   838,  616,  821,  530,  821,   55,   36,  861,  604,  828,
 /*  1900 */   392,  458,  828,    2,  861,  521,  784,  660,  816,  455,
 /*  1910 */   775,  390,  518,  861,  830,  859,  861,  862,   86,  782,
 /*  1920 */   833,  775,  829,  230,  450,  829,  223,  816,  832,  831,
 /*  1930 */   830,  528,  510,  826,  528,  351,  821,  828,  813,  523,
 /*  1940 */   828,  333,  862,  860,  859,  526,  394,  861,  663,  860,
 /*  1950 */   859,  861,  861,  861,  861,  656,  860,  859,  161,  488,
 /*  1960 */   829,  201,  816,  829,  211,  816,  808,  806,   12,  528,
 /*  1970 */   636,   56,  528,  741,  446,   85,  862,  860,  859,  316,
 /*  1980 */   638,  381,   24,  268,  775,  571,   84,  861,   53,   54,
 /*  1990 */   632,  860,  859,  861,  530,   10,   55,  862,  735,  860,
 /*  2000 */   859,  862,  735,  193,    2,  678,  521,  157,  596,  816,
 /*  2010 */   828,  737,  828,  518,  339,  830,  859,  105,  862,  775,
 /*  2020 */    35,  833,  775,  862,  861,  861,  861,  828,  816,  832,
 /*  2030 */   831,  830,  862,  829,  233,  829,  231,  745,  862,  860,
 /*  2040 */   859,  861,  528,  732,  528,  726,  526,  783,  166,  274,
 /*  2050 */   829,  241,  628,  571,  735,  862,  828,  861,  581,  528,
 /*  2060 */   480,  828,  861,  816,  860,  859,  816,  808,  806,   12,
 /*  2070 */   861,  690,   56,  689,  861,  861,  103,  581,   34,  829,
 /*  2080 */   240,  629,  862,  689,  829,  242,  700,  862,  528,   53,
 /*  2090 */    54,   33,  775,  528,  775,  530,   32,   55,  860,  859,
 /*  2100 */   861,  725,  393,  862,  828,    2,  330,  521,  102,  775,
 /*  2110 */   816,  623,  591,  391,  518,  101,  830,  859,  861,  860,
 /*  2120 */   859,  739,  833,  860,  859,  828,  618,  829,  243,  816,
 /*  2130 */   832,  831,  830,  862,  538,  861,  528,  308,  775,  861,
 /*  2140 */   860,  859,  426,  775,  612,  860,  859,  526,  829,  262,
 /*  2150 */   607,  578,  605,  538,  860,  859,  862,  528,  594,  173,
 /*  2160 */   860,  859,  862,  306,  816,  828,  862,  816,  808,  806,
 /*  2170 */    12,  828,  110,   56,  152,  599,   13,  860,  859,  861,
 /*  2180 */   303,  580,  187,  198,  144,  861,  775,  556,  829,  356,
 /*  2190 */    53,   54,  424,  555,  829,  239,  530,  528,   55,   96,
 /*  2200 */   410,  576,  536,  528,  860,  859,    2,  775,  521,  860,
 /*  2210 */   859,  816,   94,  828,  335,  518,  573,  830,  859,  272,
 /*  2220 */   828,  256,  544,  833,  252,  860,  859,  861,  861,  248,
 /*  2230 */   816,  832,  831,  830,  861,  828,  829,  355,  582,  385,
 /*  2240 */   676,  114,  865,  829,  210,  528,  313,  775,  526,  861,
 /*  2250 */   312,  384,  528,  775,  861,  860,  859,  185,  829,  228,
 /*  2260 */   861,  654,  353,  447,  564,  816,  329,  528,  816,  808,
 /*  2270 */   806,   12, 1205,  828,   56,  861,  861,  542,  860,  859,
 /*  2280 */   861,  777,  855,  854,  860,  859,  184,  861,  860,  859,
 /*  2290 */   322,   53,   54,  853,  533,  775,  829,  232,  182,   55,
 /*  2300 */    75,  270,  775,  738,  861,  528,  108,    2, 1207,  300,
 /*  2310 */   532,  420,  816,  583,  543,  353,  518,  775,  830,  859,
 /*  2320 */   824,  828,  353,  861,  833,  861,  828,   30,  861,  861,
 /*  2330 */   178,  816,  832,  831,  830,  861,  861,  298,  284,  823,
 /*  2340 */   861,  579,  296,  294,  829,  379,  575,  572,   23,  829,
 /*  2350 */   378,  861,  782,  528,  398,  775,  861,  861,  528,  287,
 /*  2360 */   359,  397,  362,  383,  489,  358,  816,   70,  192,  816,
 /*  2370 */    43,  806,   12,  861,  529,  282,  861,  822,  818,  818,
 /*  2380 */    65,   65,   66,   66,   66,   66,  263,   64,   64,   64,
 /*  2390 */    64,   63,   63,   62,   62,   62,   61,   59,  263,  530,
 /*  2400 */   828,  527,  828,  775,  352,  782,   88,  828,  775,  279,
 /*  2410 */   260,  521,  782,  323,  861,  861,  861,  514,  405,  439,
 /*  2420 */   278,  861,  828,  829,  377,  829,  227,  861,   49,  305,
 /*  2430 */   829,  213,  528,  861,  528,  828,  861,  349,  828,  528,
 /*  2440 */   505,  828,  302,  861,  772,  829,  226,  773,  404,  861,
 /*  2450 */   769,  526,  861,  763,  528,  861,  861,  292,  829,  225,
 /*  2460 */   253,  829,  212,  757,  829,  238,  288,  528,  139,  828,
 /*  2470 */   528,  861,  808,  528,  828,  140,  289,   56,  476,  473,
 /*  2480 */   861,  702,  775,  861,  775,  165,  691,  463,  861,  775,
 /*  2490 */   861,  685,  829,  237,   53,   54,  686,  829,  209,  400,
 /*  2500 */   530,  528,   55,  337,  775,  681,  528,  682,  659,  680,
 /*  2510 */     2,  652,  521,  375,  651,  816,  828,  775,  650,  518,
 /*  2520 */   775,  830,  859,  775,  649,  374,  160,  833,  640,  445,
 /*  2530 */   861,  106,  159,  137,  816,  832,  831,  830,  158,  829,
 /*  2540 */   124,  258,  321,  427,  828,  443,   31,  156,  528,  199,
 /*  2550 */   104,  775,  526,  136,  318,  155,  775,  828,  861,  314,
 /*  2560 */   191,  154,  631,  627,  111,  434,  621,  829,  208,  816,
 /*  2570 */   828,  861,  816,  808,  806,   12,  528,  433,   56,  310,
 /*  2580 */   829,  206,  615,  828,  861,  828,  617,  134,  421,  528,
 /*  2590 */   153,  595,  133,  829,  234,   53,   54,  861,  775,  861,
 /*  2600 */   418,  151,  528,   55,  100,  416,  829,  236,  829,  229,
 /*  2610 */   150,    2,  149,   99,  565,  528,  816,  528,  828,   98,
 /*  2620 */   518,  148,  860,  859,   97,  147,  775,   30,  833,  146,
 /*  2630 */   828,  388,  861,   29,  828,  816,  832,  831,  830,  775,
 /*  2640 */   552,  829,  235,   26,  861,  828,  550,  131,  861,  130,
 /*  2650 */   528,  546,  775,  829,  224,  145,  540,  829,  221,  861,
 /*  2660 */   200,   83,  528,  360,  186,  775,  528,  775,  829,  205,
 /*  2670 */   816,  828,  801,  816,  828,  806,   12,  528,  828,   60,
 /*  2680 */   797,  511,  786,  189,  188,  861,  733,  743,  861,  454,
 /*  2690 */   338,  677,  861,  620,  829,  204,  244,  829,  203,  319,
 /*  2700 */   775,  829,  202,  528,  315,  828,  528,  440,  828,  370,
 /*  2710 */   528,    9,  775,  525,  819,  257,  775,  796,  785,  861,
 /*  2720 */   828,  444,  861,  664,  762,  828,   41,  775,  829,  214,
 /*  2730 */   361,  829,  219,   95,  861,  589,   81,  528,  674,  861,
 /*  2740 */   528,  828,  695,  829,  218,  694,  668,  655,  829,  125,
 /*  2750 */   667,  862,  528,  775, 1359,  861,  775,  528, 1359, 1359,
 /*  2760 */   775,  828, 1359, 1359,  829,  217, 1359, 1359, 1359, 1359,
 /*  2770 */  1359, 1359,  828,  528,  828,  861, 1359,  828, 1359, 1359,
 /*  2780 */  1359, 1359, 1359, 1359,  829,  216,  861,  775,  861,  828,
 /*  2790 */   775,  861, 1359,  528, 1359,  829,  222,  829,  220, 1359,
 /*  2800 */   829,  207,  775,  861,  528, 1359,  528,  775, 1359,  528,
 /*  2810 */  1359, 1359,  829,   93, 1359, 1359, 1359, 1359, 1359, 1359,
 /*  2820 */  1359,  479, 1359,  775, 1359, 1359, 1359, 1359, 1359, 1359,
 /*  2830 */  1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
 /*  2840 */  1359, 1359, 1359,  775, 1359, 1359, 1359, 1359, 1359, 1359,
 /*  2850 */  1359, 1359, 1359, 1359,  775, 1359,  775, 1359, 1359,  775,
 /*  2860 */  1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
 /*  2870 */  1359,  775,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,  130,  108,    4,  133,  134,  135,    0,   50,   81,
 /*    10 */    82,   83,   16,   60,   86,   87,   88,   89,   90,   91,
 /*    20 */    92,   93,  151,   95,   96,   97,   98,   99,  100,  101,
 /*    30 */   102,  103,  104,  105,  106,    4,   29,  116,   80,   81,
 /*    40 */    82,   83,  121,  121,   86,   87,   88,   89,   90,   91,
 /*    50 */    92,   93,   56,   95,   96,   97,   98,   99,  100,  101,
 /*    60 */   102,  103,  104,  105,  106,  143,  108,  101,  102,  103,
 /*    70 */   104,  105,  106,   77,   90,   91,   92,   93,   82,   95,
 /*    80 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*    90 */   106,   35,  145,  146,  147,   99,  100,  101,  145,  146,
 /*   100 */   147,  217,    4,  107,  108,   74,   42,   43,  155,  156,
 /*   110 */   226,  115,  116,   57,   21,  108,  120,  121,    4,   63,
 /*   120 */   124,   28,  126,  127,  125,  126,  127,    4,  132,  130,
 /*   130 */    37,   31,  133,  134,  135,  139,  140,  141,  142,   16,
 /*   140 */   144,   41,  121,  104,  105,  106,  126,   24,   84,   85,
 /*   150 */   151,  116,  132,  157,  123,  159,  160,  126,  127,  163,
 /*   160 */   140,  141,  142,  225,  168,  169,  170,  171,  172,  173,
 /*   170 */   174,  233,  234,  177,  203,  179,  180,  121,  157,   56,
 /*   180 */   159,  160,  211,  222,  223,  224,   21,  191,  217,   99,
 /*   190 */   100,  101,  102,  103,  104,  105,  106,  226,  227,  101,
 /*   200 */    77,    4,   37,  112,   35,   82,  235,   95,   96,   97,
 /*   210 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  255,
 /*   220 */   249,    4,   99,  100,  126,  127,   57,   24,  203,  265,
 /*   230 */   107,  108,   63,    4,  263,  264,  211,  139,  115,  116,
 /*   240 */   126,  127,  217,  120,  121,  250,  251,  124,  253,  126,
 /*   250 */   127,  226,  227,  121,    4,  132,  285,  203,  297,   15,
 /*   260 */   235,  132,  139,  140,  141,  142,   16,  144,    7,  115,
 /*   270 */   211,  217,  174,   12,  249,  132,  162,  108,  283,  150,
 /*   280 */   157,  203,  159,  160,  203,  116,  131,  132,  263,   45,
 /*   290 */   121,  168,  169,  170,  171,  217,  173,  174,  217,  195,
 /*   300 */   177,   40,  179,  180,  200,   61,   56,  248,  249,   73,
 /*   310 */   285,    4,  115,  144,  191,  211,    4,  120,  115,  121,
 /*   320 */     4,  267,  268,  126,  127,  127,  157,   77,  159,  160,
 /*   330 */   140,  141,   82,  145,  146,  147,  277,  168,  279,  170,
 /*   340 */   171,  282,  173,  126,  127,  250,  251,    5,  253,   99,
 /*   350 */   100,   35,  248,  249,  137,  126,  127,  107,  108,  101,
 /*   360 */   191,  302,  303,  165,  166,  115,  116,  131,  139,   53,
 /*   370 */   120,  121,   30,   57,  124,    4,  126,  127,   36,   63,
 /*   380 */     4,  277,  132,  279,  118,  158,  282,  203,  161,  139,
 /*   390 */   140,  141,  142,  149,  144,  317,  318,  319,  317,  318,
 /*   400 */   319,  217,   60,  174,   99,  100,   64,  157,  203,  159,
 /*   410 */   160,  307,  203,   42,   43,  118,  158,  110,  168,  161,
 /*   420 */   170,  171,  217,  173,  174,   10,  217,  177,  144,  179,
 /*   430 */   180,  226,  227,  126,  127,  226,  227,   22,  126,  127,
 /*   440 */   235,  191,  126,  127,  235,  140,  141,  115,  164,   79,
 /*   450 */    26,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   460 */    89,   90,   91,   92,   93,   35,   95,   96,   97,   98,
 /*   470 */    99,  100,  101,  102,  103,  104,  105,  106,    4,  167,
 /*   480 */   275,    4,  286,   53,  168,  115,  116,   57,  117,   68,
 /*   490 */   285,  121,   71,   63,  285,  119,  120,  126,   42,   43,
 /*   500 */   316,  305,  126,  127,   80,   81,   82,   83,   52,  121,
 /*   510 */    86,   87,   88,   89,   90,   91,   92,   93,  116,   95,
 /*   520 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   530 */   106,  322,  323,  162,   38,  114,   80,   81,   82,   83,
 /*   540 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*   550 */     4,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   560 */   104,  105,  106,   10,   44,  203,   43,  215,    5,  203,
 /*   570 */   203,  219,  220,  221,  115,   22,  117,  121,   82,  217,
 /*   580 */   219,  220,  221,  217,  217,  308,  309,  110,  226,  227,
 /*   590 */   223,  224,   79,   30,  120,   42,   43,  235,  168,   36,
 /*   600 */   126,  127,   82,  126,  127,  181,  116,  183,   90,   91,
 /*   610 */    92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   620 */   102,  103,  104,  105,  106,  263,  264,   64,  115,  116,
 /*   630 */   116,    4,   26,   80,   81,   82,   83,   84,   85,   86,
 /*   640 */    87,   88,   89,   90,   91,   92,   93,  285,   95,   96,
 /*   650 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   660 */     4,  187,  147,  296,  297,  233,  120,  144,  236,  203,
 /*   670 */    76,  116,  126,  127,  208,  243,   42,   43,  116,  213,
 /*   680 */   214,  315,  316,  217,  138,  139,   80,   81,   82,   83,
 /*   690 */   255,  176,   86,   87,   88,   89,   90,   91,   92,   93,
 /*   700 */   265,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   710 */   104,  105,  106,  167,   80,   81,   82,   83,   84,   85,
 /*   720 */    86,   87,   88,   89,   90,   91,   92,   93,    4,   95,
 /*   730 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   740 */   106,  203,   32,   82,    4,  115,  152,  120,  203,  116,
 /*   750 */    13,  213,  214,  126,  127,  217,  222,  223,  224,  203,
 /*   760 */   203,  181,  217,  183,  203,   55,  139,  115,  207,  213,
 /*   770 */   214,  121,  203,  217,  217,  119,  120,  239,  217,  241,
 /*   780 */   223,  224,  126,  127,  190,    4,  217,  181,    4,  183,
 /*   790 */    80,   81,   82,   83,  167,  115,   86,   87,   88,   89,
 /*   800 */    90,   91,   92,   93,    4,   95,   96,   97,   98,   99,
 /*   810 */   100,  101,  102,  103,  104,  105,  106,   80,   81,   82,
 /*   820 */    83,   79,  161,   86,   87,   88,   89,   90,   91,   92,
 /*   830 */    93,  297,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   840 */   103,  104,  105,  106,    4,  108,  122,    4,    4,    4,
 /*   850 */   126,  127,   34,  296,  297,  115,   16,  115,  116,  314,
 /*   860 */   217,  218,  293,  121,  229,  211,  126,  127,   80,   81,
 /*   870 */    82,   83,  121,   44,   86,   87,   88,   89,   90,   91,
 /*   880 */    92,   93,    4,   95,   96,   97,   98,   99,  100,  101,
 /*   890 */   102,  103,  104,  105,  106,  291,   56,   26,  203,   89,
 /*   900 */    82,  120,  248,  249,  120,  117,  211,  126,  127,   79,
 /*   910 */   126,  127,  217,   73,  174,  115,  181,   77,  116,  168,
 /*   920 */    77,  286,   82,  139,  106,  115,  126,  127,  116,  325,
 /*   930 */   326,  277,  116,  279,  153,  117,  282,  121,  211,   99,
 /*   940 */   100,  161,   99,  100,  249,  115,  116,  107,  130,  131,
 /*   950 */   132,  133,  134,  135,  136,  115,  116,  303,  115,  115,
 /*   960 */   120,  117,  267,  268,  124,  291,  126,  127,  150,  126,
 /*   970 */   126,  126,  132,  128,  174,  132,  249,  203,   73,  139,
 /*   980 */   140,  141,  142,  140,  141,  142,  212,  211,  110,   68,
 /*   990 */    35,  217,   71,  203,   26,  155,  156,  203,  116,  325,
 /*  1000 */   326,  203,  203,  121,  126,  127,  162,  217,  210,  163,
 /*  1010 */   212,  217,   57,  108,  174,  217,  217,  177,   63,  179,
 /*  1020 */   180,   80,   81,   82,   83,  249,  163,   86,   87,   88,
 /*  1030 */    89,   90,   91,   92,   93,  114,   95,   96,   97,   98,
 /*  1040 */    99,  100,  101,  102,  103,  104,  105,  106,   80,   81,
 /*  1050 */    82,   83,  121,   14,   86,   87,   88,   89,   90,   91,
 /*  1060 */    92,   93,  117,   95,   96,   97,   98,   99,  100,  101,
 /*  1070 */   102,  103,  104,  105,  106,   80,   81,   82,   83,  280,
 /*  1080 */   205,   86,   87,   88,   89,   90,   91,   92,   93,  115,
 /*  1090 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1100 */   105,  106,  312,  172,  314,  184,  312,  121,  314,   80,
 /*  1110 */    81,   82,   83,  198,  199,   86,   87,   88,   89,   90,
 /*  1120 */    91,   92,   93,  182,   95,   96,   97,   98,   99,  100,
 /*  1130 */   101,  102,  103,  104,  105,  106,  196,  197,  198,  199,
 /*  1140 */    80,   81,   82,   83,  121,  116,   86,   87,   88,   89,
 /*  1150 */    90,   91,   92,   93,  203,   95,   96,   97,   98,   99,
 /*  1160 */   100,  101,  102,  103,  104,  105,  106,  292,  217,  211,
 /*  1170 */   318,  319,   80,   81,   82,   83,  116,  182,   86,   87,
 /*  1180 */    88,   89,   90,   91,   92,   93,  163,   95,   96,   97,
 /*  1190 */    98,   99,  100,  101,  102,  103,  104,  105,  106,    4,
 /*  1200 */   192,  193,    4,   80,   81,   82,   83,  249,  116,   86,
 /*  1210 */    87,   88,   89,   90,   91,   92,   93,  121,   95,   96,
 /*  1220 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1230 */   116,  280,  219,  116,   80,   81,   82,   83,  121,  116,
 /*  1240 */    86,   87,   88,   89,   90,   91,   92,   93,  203,   95,
 /*  1250 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1260 */   106,   14,  217,    4,  116,   80,   81,   82,   83,  121,
 /*  1270 */   116,   86,   87,   88,   89,   90,   91,   92,   93,  266,
 /*  1280 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1290 */   105,  106,   47,  108,   80,   81,   82,   83,   62,  286,
 /*  1300 */    86,   87,   88,   89,   90,   91,   92,   93,  110,   95,
 /*  1310 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  1320 */   106,  126,  127,    4,  126,  127,   80,   81,   82,   83,
 /*  1330 */     4,  117,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1340 */   295,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1350 */   104,  105,  106,   29,  108,   80,   81,   82,   83,  318,
 /*  1360 */   319,   86,   87,   88,   89,   90,   91,   92,   93,  174,
 /*  1370 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1380 */   105,  106,    4,  108,    4,  126,  127,  116,   81,  203,
 /*  1390 */   116,    4,  121,  207,   16,  121,   43,   19,   80,   81,
 /*  1400 */    82,   83,    4,  217,   86,   87,   88,   89,   90,   91,
 /*  1410 */    92,   93,   62,   95,   96,   97,   98,   99,  100,  101,
 /*  1420 */   102,  103,  104,  105,  106,    4,    9,    4,   11,   55,
 /*  1430 */    13,  116,  108,   66,   56,   82,  121,  178,   19,   72,
 /*  1440 */    23,  155,  156,   26,  116,  126,  127,   69,    4,  121,
 /*  1450 */     4,  203,  126,  127,  116,   77,  203,   14,  139,  121,
 /*  1460 */    82,  116,   84,  116,   45,  217,  121,  116,  121,    4,
 /*  1470 */   217,   54,  121,  154,  226,  227,   59,   99,  100,  226,
 /*  1480 */   227,   64,   65,  235,  116,  107,   67,   70,  235,  121,
 /*  1490 */    73,  165,   75,  115,   73,   32,    4,  144,  120,    4,
 /*  1500 */   120,  134,  124,  150,  126,  127,  126,  127,  203,    4,
 /*  1510 */   132,  263,  264,  126,  127,   14,  263,  139,  140,  141,
 /*  1520 */   142,   16,  217,   14,  126,  127,  139,    4,  111,    4,
 /*  1530 */   113,  226,  227,  285,  154,   14,  115,  116,  285,  168,
 /*  1540 */   235,  120,  203,  120,  318,  319,  211,  126,  127,  126,
 /*  1550 */   127,  184,  174,    4,  121,  177,  217,  179,  180,  115,
 /*  1560 */   139,   56,  191,  165,  120,  226,  227,  203,  263,  152,
 /*  1570 */   126,  127,  126,  127,  235,  154,  155,  156,   73,   14,
 /*  1580 */   115,  217,   77,  139,  249,  139,  229,   82,  169,  115,
 /*  1590 */   285,  126,  127,  203,   99,  100,    4,  207,  154,    4,
 /*  1600 */   203,    4,  263,  264,   99,  100,  189,  217,  185,  165,
 /*  1610 */   166,  121,  107,  167,  217,  318,  319,    4,  126,  127,
 /*  1620 */   115,  126,  127,   38,  285,  120,  131,    4,  203,  124,
 /*  1630 */   116,  126,  127,  116,  203,  140,  141,  132,  274,  144,
 /*  1640 */   148,  146,  217,  286,  139,  140,  141,  142,  217,  126,
 /*  1650 */   127,  126,    4,  163,  203,    4,  116,  226,  227,  203,
 /*  1660 */   155,  156,  139,  138,  203,    4,  235,    4,  217,  120,
 /*  1670 */   260,  274,  262,  217,    4,  126,  127,   16,  217,  174,
 /*  1680 */    19,   58,  177,  165,  179,  180,   80,   81,   82,   83,
 /*  1690 */   167,  118,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1700 */   219,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1710 */   104,  105,  106,  203,    4,  120,  285,   56,  126,  127,
 /*  1720 */   118,  126,  127,  126,  127,  274,  121,  217,  115,  137,
 /*  1730 */    69,  211,  203,  120,  203,  186,  226,  227,   77,  126,
 /*  1740 */   127,  203,  119,   82,    4,  235,  217,  266,  217,  126,
 /*  1750 */   127,  320,  139,  101,  323,  217,    4,  226,  227,  115,
 /*  1760 */    99,  100,  167,    4,  226,  227,  235,  154,  107,  249,
 /*  1770 */     4,  120,    4,  235,  126,  127,  115,  126,  127,  115,
 /*  1780 */   117,  120,  318,  319,  187,  124,  158,  126,  127,  126,
 /*  1790 */   139,  203,    4,  132,  203,  285,  126,  127,   26,  116,
 /*  1800 */   139,  140,  141,  142,   16,  217,  275,   19,  217,  139,
 /*  1810 */   203,  116,  115,  275,    4,  172,  285,  226,  227,  116,
 /*  1820 */   116,    4,  174,  285,  217,  162,  235,    4,  203,  203,
 /*  1830 */   320,  116,  203,  323,    4,  174,  126,  127,  177,  203,
 /*  1840 */   179,  180,  217,  217,   56,   73,  217,  116,   50,  139,
 /*  1850 */   203,  226,  227,  217,  263,    4,  268,   69,  115,  119,
 /*  1860 */   235,   18,  226,  227,  217,   77,  126,  127,  242,    4,
 /*  1870 */    82,  235,  120,  226,  227,  203,  285,    4,  126,  127,
 /*  1880 */   108,  115,  235,  203,    6,  126,  127,   99,  100,  217,
 /*  1890 */   203,  139,  126,    4,  126,  107,  115,  217,  139,  203,
 /*  1900 */   275,  117,  203,  115,  217,   16,  138,    8,  120,   50,
 /*  1910 */   285,  275,  124,  217,  126,  127,  217,    4,  115,  293,
 /*  1920 */   132,  285,  226,  227,   50,  226,  227,  139,  140,  141,
 /*  1930 */   142,  235,  285,  203,  235,  288,  126,  203,  203,  203,
 /*  1940 */   203,  116,    4,  126,  127,   56,  274,  217,  138,  126,
 /*  1950 */   127,  217,  217,  217,  217,  125,  126,  127,  136,  263,
 /*  1960 */   226,  227,  174,  226,  227,  177,   77,  179,  180,  235,
 /*  1970 */   153,   82,  235,  203,   82,  115,    4,  126,  127,  203,
 /*  1980 */   124,  285,  115,  207,  285,  120,  115,  217,   99,  100,
 /*  1990 */   139,  126,  127,  217,    4,   13,  107,    4,  219,  126,
 /*  2000 */   127,    4,  219,  117,  115,  116,   16,  144,  185,  120,
 /*  2010 */   203,  203,  203,  124,  150,  126,  127,  163,    4,  285,
 /*  2020 */    89,  132,  285,    4,  217,  217,  217,  203,  139,  140,
 /*  2030 */   141,  142,    4,  226,  227,  226,  227,  121,    4,  126,
 /*  2040 */   127,  217,  235,  203,  235,  266,   56,  174,  203,  266,
 /*  2050 */   226,  227,  139,  188,  219,    4,  203,  217,  120,  235,
 /*  2060 */   203,  203,  217,  174,  126,  127,  177,   77,  179,  180,
 /*  2070 */   217,  244,   82,  246,  217,  217,  149,  139,   89,  226,
 /*  2080 */   227,  244,    4,  246,  226,  227,  203,    4,  235,   99,
 /*  2090 */   100,   89,  285,  235,  285,    4,   89,  107,  126,  127,
 /*  2100 */   217,  266,   18,    4,  203,  115,  116,   16,  175,  285,
 /*  2110 */   120,  139,  119,   24,  124,  149,  126,  127,  217,  126,
 /*  2120 */   127,  203,  132,  126,  127,  203,  176,  226,  227,  139,
 /*  2130 */   140,  141,  142,    4,  120,  217,  235,  156,  285,  217,
 /*  2140 */   126,  127,   25,  285,  108,  126,  127,   56,  226,  227,
 /*  2150 */   108,  154,   62,  139,  126,  127,    4,  235,  139,  121,
 /*  2160 */   126,  127,    4,  184,  174,  203,    4,  177,   77,  179,
 /*  2170 */   180,  203,   51,   82,  144,   51,  115,  126,  127,  217,
 /*  2180 */   114,  124,  164,  115,  112,  217,  285,  116,  226,  227,
 /*  2190 */    99,  100,  274,  116,  226,  227,    4,  235,  107,  114,
 /*  2200 */    49,  167,   48,  235,  126,  127,  115,  285,   16,  126,
 /*  2210 */   127,  120,  216,  203,  203,  124,  188,  126,  127,  232,
 /*  2220 */   203,  286,  139,  132,  269,  126,  127,  217,  217,  309,
 /*  2230 */   139,  140,  141,  142,  217,  203,  226,  227,  139,  311,
 /*  2240 */   203,  232,  202,  226,  227,  235,  203,  285,   56,  217,
 /*  2250 */   207,  311,  235,  285,  217,  126,  127,  109,  226,  227,
 /*  2260 */   217,  203,  203,   78,  186,  174,  203,  235,  177,   77,
 /*  2270 */   179,  180,  181,  203,   82,  217,  217,  119,  126,  127,
 /*  2280 */   217,  119,  202,  202,  126,  127,  204,  217,  126,  127,
 /*  2290 */   203,   99,  100,   65,  202,  285,  226,  227,  204,  107,
 /*  2300 */   121,  242,  285,  174,  217,  235,  206,  115,  116,  203,
 /*  2310 */   209,  203,  120,  207,  203,  203,  124,  285,  126,  127,
 /*  2320 */   272,  203,  203,  217,  132,  217,  203,  175,  217,  217,
 /*  2330 */   118,  139,  140,  141,  142,  217,  217,  203,  155,  251,
 /*  2340 */   217,  207,  203,  203,  226,  227,  207,  207,  172,  226,
 /*  2350 */   227,  217,  293,  235,  242,  285,  217,  217,  235,  203,
 /*  2360 */   257,  242,  203,  207,  169,  258,  174,  171,  259,  177,
 /*  2370 */   170,  179,  180,  217,   82,   83,  217,  261,   86,   87,
 /*  2380 */    88,   89,   90,   91,   92,   93,  106,   95,   96,   97,
 /*  2390 */    98,   99,  100,  101,  102,  103,  104,  105,  106,    4,
 /*  2400 */   203,  203,  203,  285,  231,  293,  115,  203,  285,  294,
 /*  2410 */   106,   16,  293,  203,  217,  217,  217,  313,  117,  203,
 /*  2420 */   289,  217,  203,  226,  227,  226,  227,  217,  181,  203,
 /*  2430 */   226,  227,  235,  217,  235,  203,  217,  260,  203,  235,
 /*  2440 */   168,  203,  203,  217,  276,  226,  227,  261,   46,  217,
 /*  2450 */   276,   56,  217,  321,  235,  217,  217,  203,  226,  227,
 /*  2460 */    27,  226,  227,  321,  226,  227,  203,  235,  118,  203,
 /*  2470 */   235,  217,   77,  235,  203,  272,  203,   82,  253,  156,
 /*  2480 */   217,  326,  285,  217,  285,  192,  228,  144,  217,  285,
 /*  2490 */   217,  238,  226,  227,   99,  100,  228,  226,  227,   39,
 /*  2500 */     4,  235,  107,  228,  285,  143,  235,  230,  238,  228,
 /*  2510 */   115,  228,   16,  231,  228,  120,  203,  285,  228,  124,
 /*  2520 */   285,  126,  127,  285,  228,  231,  118,  132,  272,  231,
 /*  2530 */   217,  206,  118,  206,  139,  140,  141,  142,  118,  226,
 /*  2540 */   227,  272,  300,   33,  203,  301,  181,  118,  235,  173,
 /*  2550 */   245,  285,   56,   80,  257,  118,  285,  203,  217,  257,
 /*  2560 */   281,  118,  278,  278,  115,  144,  278,  226,  227,  174,
 /*  2570 */   203,  217,  177,   77,  179,  180,  235,  257,   82,  284,
 /*  2580 */   226,  227,  245,  203,  217,  203,  278,  206,  272,  235,
 /*  2590 */   118,  257,  206,  226,  227,   99,  100,  217,  285,  217,
 /*  2600 */   272,  118,  235,  107,  247,   78,  226,  227,  226,  227,
 /*  2610 */   118,  115,  118,  247,  295,  235,  120,  235,  203,  247,
 /*  2620 */   124,  118,  126,  127,  247,  118,  285,  175,  132,  118,
 /*  2630 */   203,  272,  217,  304,  203,  139,  140,  141,  142,  285,
 /*  2640 */    20,  226,  227,  304,  217,  203,  272,  118,  217,  118,
 /*  2650 */   235,  272,  285,  226,  227,  118,   17,  226,  227,  217,
 /*  2660 */   254,  306,  235,  256,  306,  285,  235,  285,  226,  227,
 /*  2670 */   174,  203,  297,  177,  203,  179,  180,  235,  203,  286,
 /*  2680 */   297,  290,  229,  260,  260,  217,  273,  271,  217,  230,
 /*  2690 */   229,  236,  217,  257,  226,  227,  240,  226,  227,  273,
 /*  2700 */   285,  226,  227,  235,  256,  203,  235,  273,  203,  201,
 /*  2710 */   235,  254,  285,  246,  219,  298,  285,  219,  219,  217,
 /*  2720 */   203,  299,  217,  219,  324,  203,  287,  285,  226,  227,
 /*  2730 */   252,  226,  227,  270,  217,  310,   73,  235,  237,  217,
 /*  2740 */   235,  203,  226,  226,  227,  226,  237,  241,  226,  227,
 /*  2750 */   237,    4,  235,  285,  327,  217,  285,  235,  327,  327,
 /*  2760 */   285,  203,  327,  327,  226,  227,  327,  327,  327,  327,
 /*  2770 */   327,  327,  203,  235,  203,  217,  327,  203,  327,  327,
 /*  2780 */   327,  327,  327,  327,  226,  227,  217,  285,  217,  203,
 /*  2790 */   285,  217,  327,  235,  327,  226,  227,  226,  227,  327,
 /*  2800 */   226,  227,  285,  217,  235,  327,  235,  285,  327,  235,
 /*  2810 */   327,  327,  226,  227,  327,  327,  327,  327,  327,  327,
 /*  2820 */   327,  235,  327,  285,  327,  327,  327,  327,  327,  327,
 /*  2830 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2840 */   327,  327,  327,  285,  327,  327,  327,  327,  327,  327,
 /*  2850 */   327,  327,  327,  327,  285,  327,  285,  327,  327,  285,
 /*  2860 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2870 */   327,  285,
};
#define YY_SHIFT_USE_DFLT (-130)
#define YY_SHIFT_COUNT (534)
#define YY_SHIFT_MIN   (-129)
#define YY_SHIFT_MAX   (2747)
static const short yy_shift_ofst[] = {
 /*     0 */  1324,  840, 1505, 1417, 1378, 1788, 1661, 2192, 2192, 2192,
 /*    10 */   905,  250, 2091, 2395, 2496, 2395, 2395, 2395, 2395, 2395,
 /*    20 */  2395, 1772,   -4,  123, 1990, 1889, 2395, 2395, 2395, 2395,
 /*    30 */  2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
 /*    40 */  2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
 /*    50 */  2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
 /*    60 */  2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
 /*    70 */  2395, 2395, 1421, 1495, 1495,   -1,  316,  316, 1830, 1444,
 /*    80 */   -47, 1623,   31, 1830, 1873, 1873, 1873, 2162, 1873,  305,
 /*    90 */   305, 2051,  845,  371,  818, 1613, 2014, 1865, 1595, 1380,
 /*   100 */  1938,  800, 1752,  800, 1651,  784,  781,   31,  656, 2152,
 /*   110 */  2129, 2129, 2129, 2129, 1353, 2129, 1873, 2051, 2051,  845,
 /*   120 */  1008, 1008, 1286,  553,  553,  -42,  843,  546,  627,   98,
 /*   130 */  1523, 1446, 1549,  376, 1423,  740,  342,  474,  342, 1319,
 /*   140 */   844,  430,  229,  197, 2158, 2083, 2078, 2028, 2034, 1997,
 /*   150 */  2099, 1993, 2019, 1823, 1972, 1913, 1851, 1759, 1597, 1817,
 /*   160 */  1740, 1710, 1592, 1492, 1387, 1465, 1398, 1326, 1663, 1663,
 /*   170 */  1663,  312,  114, 1648,   56,   56, 1259, 1195, 1670,  217,
 /*   180 */   724, 1367, 1198,  878,  477,  307, 2051, 2051,  955,  955,
 /*   190 */     7,  236, 1371, 2663, 2663, 2747, 2663, 2663, -130, -130,
 /*   200 */  -130,  456,  634,  634,  634,  634,  634,  634,  634,  634,
 /*   210 */   634,  634,  606,  424,  737,  710, 1275, 1246, 1214, 1185,
 /*   220 */  1154, 1123, 1092, 1060, 1029,  995,  968,  941,  788, 1606,
 /*   230 */  1318,  -72, 2292, 2292,  518,  -16,  -16,  -16,  -16,  -16,
 /*   240 */   -16,  112,   90,  -34, -129,   20,   20,  742,  370,  244,
 /*   250 */   244,  244,  198, 1419,  563,   21,   64,  188,  261, 1810,
 /*   260 */  1768, 1766,   39, 1525,  258,   93,  931, 1490,  496,  496,
 /*   270 */   -78, 1368,  523,  415,  496,  284,  751,  751,  580,  415,
 /*   280 */   190,  190,  661, 1023,  227, 2639, 2639, 2537, 2531, 2529,
 /*   290 */  2620, 2620, 2511, 2452, 2507, 2527, 2503, 2527, 2494, 2527,
 /*   300 */  2492, 2527, 2483, 2185, 2176, 2472, 2185, 2473, 2376, 2176,
 /*   310 */  2376, 2421, 2449, 2443, 2376, 2176, 2437, 2473, 2376, 2176,
 /*   320 */  2429, 2365, 2510, 2420, 2185, 2414, 2291, 2185, 2408, 2291,
 /*   330 */  2343, 2343, 2343, 2343, 2460, 2291, 2343, 2362, 2343, 2460,
 /*   340 */  2343, 2343, 2293, 2323, 2350, 2433, 2433, 2402, 2402, 2196,
 /*   350 */  2272, 2247, 2301, 2304, 2291, 2280, 2280, 2196, 2200, 2195,
 /*   360 */  2176, 2183, 2212, 2179, 2185, 2228, 2228, 2148, 2148, 2148,
 /*   370 */  2148, -130, -130, -130, -130, -130, -130, -130, -130, -130,
 /*   380 */  -130,  169,  921,  594,  830,  513,  -53,  421,  810, 1351,
 /*   390 */  1347,  515, 1345,  203, 1338, 1328, 1315, 1274, 1271,  155,
 /*   400 */   165,  129, 1148, 1117,  100,  520,  882,  816,  -79,  459,
 /*   410 */  2154, 2151, 2072, 2085, 2077, 2071, 2057, 2068, 2018, 2066,
 /*   420 */  2061, 2030, 1979, 2124, 2038, 2121, 2090, 2117, 2042, 2036,
 /*   430 */  1981, 1950, 1966, 2089, 2084, 1933, 2007, 2002, 1989, 1931,
 /*   440 */  1927, 1916, 1854, 1982, 1863, 1886, 1856, 1892, 1864, 1822,
 /*   450 */  1871, 1874, 1867, 1860, 1825, 1803, 1859, 1899, 1781, 1784,
 /*   460 */  1878, 1743, 1798, 1843, 1731, 1643, 1697, 1715, 1704, 1703,
 /*   470 */  1695, 1605, 1628, 1664, 1683, 1644, 1605, 1652, 1602, 1573,
 /*   480 */  1518, 1540, 1517, 1433, 1514, 1585, 1565, 1474, 1433, 1521,
 /*   490 */  1509, 1501, 1443, 1374, 1350, 1463, 1307, 1236, 1245, 1247,
 /*   500 */  1114,  974,  945, 1096,  986, 1039,  863,  846,  780,  812,
 /*   510 */   735,  871,  650,  802,  680,  829,  650,  633,  652,  562,
 /*   520 */   555,  630,  514,  490,  402,  388,  332,  297,  266,  143,
 /*   530 */   154,  132,   35,   91, -106,
};
#define YY_REDUCE_USE_DFLT (-117)
#define YY_REDUCE_COUNT (380)
#define YY_REDUCE_MIN   (-116)
#define YY_REDUCE_MAX   (2586)
static const short yy_reduce_ofst[] = {
 /*     0 */   940,  -29,   25,  104, 1510,  209, 1431, 1339, 1248,  362,
 /*    10 */    59, 1696, 1647, 1636, 1625, 1591, 1538, 1531, 1305, 1253,
 /*    20 */   205,  654, 2586, 2574, 2571, 2569, 2558, 2538, 2522, 2517,
 /*    30 */  2505, 2502, 2475, 2471, 2468, 2442, 2431, 2427, 2415, 2382,
 /*    40 */  2380, 2367, 2354, 2341, 2313, 2271, 2266, 2238, 2235, 2232,
 /*    50 */  2219, 2204, 2199, 2197, 2123, 2118, 2070, 2032, 2017, 2010,
 /*    60 */  1968, 1962, 1922, 1901, 1858, 1853, 1824, 1809, 1807, 1737,
 /*    70 */  1734, 1699,  695,  557,  367,  538,   81,   78,  466,   54,
 /*    80 */    -5,  794,  798,  556, 2119, 2112, 2059,  790, 1626,  534,
 /*    90 */   -39,  366,  352, 1013,  -62, 1588, 2156, 2140, 2139, 2134,
 /*   100 */  2106,  951, 2043,  799, 1776, 1390, 1186,  774,  561, 1045,
 /*   110 */  1918, 1672, 1451, 1397,  432, 1364,  569,  184,  545,  361,
 /*   120 */   674,  604,   95, 1357,  635,  196, -116, 2273, 2263, 2198,
 /*   130 */  1730, 1730, 2254, 2239, 2226, 2216, 1837, 2210, 1827, 1730,
 /*   140 */  1783, 1464, 2198, 2159, 2111, 1730, 1730, 1730, 1730, 1730,
 /*   150 */  1730, 1730, 2108, 1730, 1730, 1730, 1730, 2087, 1730, 1730,
 /*   160 */  1730, 2063, 2058, 2037, 2011, 1883, 1857, 1845, 1835, 1779,
 /*   170 */  1481, 1840, 1808, 1770, 1297, 1226, 1736, 1735, 1730, 1687,
 /*   180 */  1680,  875, 1629, 1607, 1529, 1461, 1456, 1425, 1041,  852,
 /*   190 */   915, 1520, 1410, 1335,  958,  643,  776,  727,  277,  435,
 /*   200 */   -36, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,
 /*   210 */  1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,
 /*   220 */  1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,
 /*   230 */  1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935, 1935,
 /*   240 */  1935, 1935, 1935, 1935, 2506, 2519, 2516, 2425, 2425, 2513,
 /*   250 */  2509, 2501, 2463, 2400, 2467, 2478, 2439, 2422, 2417, 2504,
 /*   260 */  2499, 2498, 1935, 2495, 2457, 2508, 2436, 2448, 2434, 2426,
 /*   270 */  2459, 2456, 2455, 2461, 2413, 2416, 2424, 2423, 2391, 2453,
 /*   280 */  2383, 2375, 2393, 2407, 2406, 2358, 2355, 2256, 2379, 2374,
 /*   290 */  2339, 2329, 2359, 2319, 2256, 2377, 2256, 2372, 2256, 2366,
 /*   300 */  2256, 2357, 2328, 2386, 2334, 2316, 2381, 2337, 2308, 2320,
 /*   310 */  2288, 2295, 2279, 2256, 2285, 2302, 2256, 2305, 2284, 2297,
 /*   320 */  2256, 2244, 2242, 2269, 2327, 2256, 2298, 2325, 2256, 2294,
 /*   330 */  2296, 2290, 2286, 2283, 2270, 2282, 2281, 2277, 2275, 2253,
 /*   340 */  2268, 2258, 2155, 2225, 2203, 2142, 2132, 2174, 2168, 2186,
 /*   350 */  2177, 2131, 2104, 2115, 2173, 1935, 1935, 2116, 2109, 2107,
 /*   360 */  2103, 2088, 2048, 2101, 2100, 2094, 2082, 2092, 2081, 2080,
 /*   370 */  2040, 1940, 1928, 1920, 2009, 1987, 1955, 1935, 1935, 1935,
 /*   380 */  1996,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   875, 1195, 1195, 1315, 1195, 1195, 1195, 1195, 1195, 1195,
 /*    10 */  1315, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
 /*    20 */  1195, 1315, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
 /*    30 */  1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
 /*    40 */  1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
 /*    50 */  1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
 /*    60 */  1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
 /*    70 */  1195, 1195, 1059, 1357, 1357, 1357, 1334, 1334, 1357, 1052,
 /*    80 */  1357, 1357,  903, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
 /*    90 */  1357, 1357,  926, 1048,  916, 1059, 1357, 1357, 1357, 1357,
 /*   100 */  1357, 1121, 1135, 1121, 1113, 1102, 1357, 1357, 1357, 1231,
 /*   110 */  1129, 1129, 1129, 1129,  999, 1129, 1357, 1357, 1357, 1357,
 /*   120 */  1163, 1162, 1357, 1087, 1087, 1197, 1357, 1284, 1289, 1156,
 /*   130 */  1357, 1357, 1357, 1357, 1357, 1122, 1357, 1357, 1357, 1060,
 /*   140 */  1048, 1334, 1156, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
 /*   150 */  1357, 1357, 1357, 1357, 1136, 1114, 1103, 1357, 1357, 1357,
 /*   160 */  1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1048, 1048,
 /*   170 */  1048, 1357, 1357, 1357, 1334, 1334, 1357, 1158, 1357, 1357,
 /*   180 */  1357,  913, 1357, 1357, 1357,  881, 1357, 1357, 1334, 1334,
 /*   190 */   875, 1315, 1081, 1315, 1315,  921, 1315, 1315, 1308, 1038,
 /*   200 */  1038, 1097, 1120, 1119, 1118, 1117, 1065, 1107, 1095, 1099,
 /*   210 */  1208, 1098, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
 /*   220 */  1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
 /*   230 */  1197, 1165, 1179, 1164, 1172, 1184, 1173, 1178, 1177, 1176,
 /*   240 */  1167, 1166, 1168, 1169, 1357, 1357, 1357, 1357, 1357, 1357,
 /*   250 */  1357, 1357, 1051, 1357, 1357, 1021, 1357, 1357, 1258, 1357,
 /*   260 */  1357,  928, 1170, 1357, 1036,  884, 1106, 1049, 1077, 1077,
 /*   270 */   966,  990,  950, 1087, 1077, 1067, 1081, 1081, 1203, 1087,
 /*   280 */  1357, 1357, 1197, 1049, 1036, 1299, 1299, 1068, 1068, 1068,
 /*   290 */  1283, 1283, 1068, 1231, 1068, 1012, 1068, 1012, 1068, 1012,
 /*   300 */  1068, 1012, 1068,  910, 1106, 1068,  910, 1003, 1109, 1106,
 /*   310 */  1109, 1141, 1125, 1068, 1109, 1106, 1068, 1003, 1109, 1106,
 /*   320 */  1068, 1265, 1263, 1068,  910, 1068, 1216,  910, 1068, 1216,
 /*   330 */  1001, 1001, 1001, 1001,  982, 1216, 1001,  966, 1001,  982,
 /*   340 */  1001, 1001, 1353, 1357, 1068, 1344, 1344, 1090, 1090, 1096,
 /*   350 */  1081, 1357, 1357, 1222, 1216, 1183, 1171, 1096, 1094, 1091,
 /*   360 */  1106, 1357, 1068,  985,  910,  892,  892,  880,  880,  880,
 /*   370 */   880, 1312, 1312, 1308,  968,  968, 1054, 1182, 1181, 1180,
 /*   380 */   937, 1196, 1357, 1357, 1357, 1357, 1357, 1357, 1232, 1357,
 /*   390 */  1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
 /*   400 */  1357, 1357, 1357, 1357, 1357, 1318, 1357, 1357, 1357, 1357,
 /*   410 */  1357,  876, 1357, 1357, 1357, 1357, 1357, 1302, 1357, 1357,
 /*   420 */  1357, 1357, 1357, 1357, 1262, 1261, 1357, 1357, 1357, 1357,
 /*   430 */  1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
 /*   440 */  1357, 1110, 1357, 1250, 1357, 1357, 1357, 1357, 1357, 1357,
 /*   450 */  1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
 /*   460 */  1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
 /*   470 */  1357, 1024, 1030, 1357, 1357, 1357, 1025, 1357, 1357, 1154,
 /*   480 */  1357, 1357, 1357, 1206, 1357, 1357, 1357, 1357, 1092, 1357,
 /*   490 */  1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
 /*   500 */  1357, 1357, 1357, 1350, 1082, 1357, 1357, 1357, 1198, 1357,
 /*   510 */  1196, 1357, 1317, 1357, 1357, 1357, 1316, 1357, 1357, 1357,
 /*   520 */  1357, 1357, 1357, 1357, 1357, 1357, 1357, 1155, 1154, 1198,
 /*   530 */   919,  899, 1357,  890, 1357,  872,  877, 1301, 1298, 1295,
 /*   540 */  1300, 1294, 1296, 1293, 1297, 1292, 1290, 1291, 1288, 1286,
 /*   550 */  1285, 1287, 1282, 1278, 1238, 1236, 1234, 1243, 1242, 1241,
 /*   560 */  1240, 1239, 1235, 1233, 1237, 1229, 1228, 1132, 1111, 1100,
 /*   570 */  1019, 1277, 1275, 1276, 1227, 1225, 1226, 1018, 1017, 1016,
 /*   580 */  1011, 1010, 1009, 1008, 1305, 1314, 1313, 1311, 1310, 1309,
 /*   590 */  1303, 1304, 1214, 1213, 1211, 1210, 1212,  912, 1254, 1257,
 /*   600 */  1256, 1255, 1260, 1259, 1252, 1264, 1269, 1268, 1273, 1272,
 /*   610 */  1271, 1270, 1267, 1249, 1140, 1139, 1137, 1134, 1144, 1143,
 /*   620 */  1142, 1133, 1126, 1138, 1116, 1124, 1123, 1112, 1115, 1004,
 /*   630 */  1105, 1101, 1104, 1020, 1253, 1015, 1014, 1013,  911,  902,
 /*   640 */  1070,  901,  900,  915,  988,  989,  997, 1000,  995,  998,
 /*   650 */   994,  993,  992,  996,  991,  987,  918,  917,  927,  981,
 /*   660 */   964,  953,  920,  955,  952,  951,  956,  973,  972,  979,
 /*   670 */   978,  977,  976,  975,  971,  974,  970,  969,  957,  949,
 /*   680 */   948,  967,  947,  984,  983,  980,  946, 1007, 1006, 1005,
 /*   690 */  1002,  945,  944,  943,  942,  941,  940, 1194, 1356, 1352,
 /*   700 */  1355, 1354, 1351, 1193, 1199, 1187, 1185, 1022, 1033, 1032,
 /*   710 */  1031, 1028, 1029, 1043, 1041, 1040, 1039, 1076, 1075, 1074,
 /*   720 */  1073, 1072, 1071, 1064, 1062, 1057, 1056, 1063, 1061, 1058,
 /*   730 */  1079, 1080, 1078, 1055, 1047, 1045, 1046, 1044, 1131, 1128,
 /*   740 */  1130, 1127, 1066, 1053, 1050, 1037, 1332, 1330, 1333, 1331,
 /*   750 */  1329, 1337, 1339, 1338, 1343, 1341, 1340, 1336, 1349, 1348,
 /*   760 */  1347, 1346, 1345, 1335, 1342, 1328, 1327, 1326, 1325, 1084,
 /*   770 */  1089, 1088, 1083, 1027, 1186, 1196, 1190, 1323, 1321, 1324,
 /*   780 */  1320, 1319, 1219, 1221, 1224, 1223, 1220, 1086, 1085, 1218,
 /*   790 */  1217, 1322, 1189, 1161,  933,  931,  932, 1246, 1245, 1248,
 /*   800 */  1247, 1244,  935,  934,  930,  929, 1159, 1153, 1152, 1274,
 /*   810 */  1191, 1192, 1151, 1157, 1149, 1148, 1147, 1175, 1174, 1160,
 /*   820 */  1150,  922, 1026, 1023, 1188, 1146, 1069, 1145,  963,  962,
 /*   830 */   961,  960,  959,  958, 1035, 1034,  939,  954,  938,  936,
 /*   840 */   914,  904,  909,  907,  908,  906,  905,  897,  894,  896,
 /*   850 */   893,  898,  895,  891,  889,  888,  887,  886,  885,  925,
 /*   860 */   924,  923,  919,  883,  882,  879,  878,  874,  873,  871,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /* MATERIALIZED => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "MATERIALIZED",  "NO",            "NULLS",         "OTHERS",      
  "PLAN",          "QUERY",         "KEY",           "OF",          
  "OFFSET",        "PARTITION",     "PRAGMA",        "PRECEDING",   
  "RAISE",         "RANGE",         "RECURSIVE",     "RELEASE",     
  "REPLACE",       "RESTRICT",      "ROW",           "ROWS",        
  "ROLLBACK",      "SAVEPOINT",     "TEMP",          "TIES",        
  "TRIGGER",       "UNBOUNDED",     "VACUUM",        "VIEW",        
  "VIRTUAL",       "WITH",          "WITHOUT",       "REINDEX",     
  "RENAME",        "CTIME_KW",      "IF",            "ANY",         
  "OR",            "AND",           "NOT",           "IS",          
  "BETWEEN",       "IN",            "ISNULL",        "NOTNULL",     
  "NE",            "EQ",            "GT",            "LE",          
  "LT",            "GE",            "ESCAPE",        "BITAND",      
  "BITOR",         "LSHIFT",        "RSHIFT",        "PLUS",        
  "MINUS",         "STAR",          "SLASH",         "REM",         
  "CONCAT",        "PTR",           "COLLATE",       "BITNOT",      
  "SEMI",          "TRANSACTION",   "ID_TRANS",      "COMMIT",      
  "TO",            "CREATE",        "TABLE",         "LP",          
  "RP",            "AS",            "DOT",           "ID_TAB_NEW",  
  "ID_DB",         "COMMA",         "CTX_ROWID_KW",  "CTX_STRICT_KW",
  "EXISTS",        "ID_COL_NEW",    "STRING",        "JOIN_KW",     
  "ID_COL_TYPE",   "RIGHT_ASSOC",   "CONSTRAINT",    "DEFAULT",     
  "NULL",          "PRIMARY",       "UNIQUE",        "CHECK",       
  "REFERENCES",    "ID_CONSTR",     "ID_COLLATE",    "ID_TAB",      
  "INTEGER",       "FLOAT",         "BLOB",          "AUTOINCR",    
  "ON",            "INSERT",        "DELETE",        "UPDATE",      
  "ID_FK_MATCH",   "SET",           "DEFERRABLE",    "FOREIGN",     
  "DROP",          "ID_VIEW_NEW",   "ID_VIEW",       "SELECT",      
  "VALUES",        "UNION",         "ALL",           "EXCEPT",      
  "INTERSECT",     "DISTINCT",      "ID_ALIAS",      "FROM",        
  "USING",         "JOIN",          "ID_JOIN_OPTS",  "ID_IDX",      
  "ORDER",         "GROUP",         "HAVING",        "LIMIT",       
  "WHERE",         "RETURNING",     "ID_COL",        "INTO",        
  "NOTHING",       "ID_FN",         "ID_ERR_MSG",    "VARIABLE",    
  "CASE",          "WHEN",          "THEN",          "ELSE",        
  "INDEX",         "ID_IDX_NEW",    "ID_PRAGMA",     "ID_TRIG_NEW", 
  "ID_TRIG",       "ALTER",         "ADD",           "WINDOW",      
  "OVER",          "FILTER",        "error",         "cmd",         
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "transtype",     "trans_opt",     "nm",          
  "savepoint_opt",  "temp",          "ifnotexists",   "fullname",    
  "columnlist",    "conslist_opt",  "table_options",  "select",      
  "table_option",  "column",        "columnid",      "type",        
  "carglist",      "id",            "id_opt",        "ids",         
  "typetoken",     "typename",      "signed",        "plus_num",    
  "minus_num",     "ccons",         "term",          "expr",        
  "onconf",        "sortorder",     "autoinc",       "idxlist_opt", 
  "refargs",       "defer_subclause",  "gen_always",    "tnm",         
  "refarg",        "refact",        "init_deferred_pred_opt",  "conslist",    
  "tconscomma",    "tcons",         "idxlist",       "defer_subclause_opt",
  "resolvetype",   "orconf",        "raisetype",     "ifexists",    
  "select_stmt",   "with",          "selectnowith",  "oneselect",   
  "multiselect_op",  "values",        "distinct",      "selcollist",  
  "from",          "where_opt",     "groupby_opt",   "having_opt",  
  "orderby_opt",   "limit_opt",     "window_clause",  "nexprlist",   
  "exprlist",      "sclp",          "as",            "joinsrc",     
  "singlesrc",     "seltablist",    "joinop",        "joinconstr_opt",
  "dbnm",          "indexed_opt",   "idlist",        "sortlist",    
  "nulls",         "delete_stmt",   "returning",     "update_stmt", 
  "setlist",       "idlist_opt",    "insert_stmt",   "insert_cmd",  
  "upsert",        "exprx",         "not_opt",       "likeop",      
  "case_operand",  "case_exprlist",  "case_else",     "filter_over", 
  "uniqueflag",    "idxlist_single",  "collate",       "vinto",       
  "nmnum",         "number",        "trigger_time",  "trigger_event",
  "foreach_clause",  "when_clause",   "trigger_cmd_list",  "trigger_cmd", 
  "database_kw_opt",  "key_opt",       "kwcolumn_opt",  "create_vtab", 
  "vtabarglist",   "vtabarg",       "vtabargtoken",  "anylist",     
  "wqlist",        "wqas",          "wqcte",         "windowdefn_list",
  "windowdefn",    "window",        "frame_opt",     "range_or_rows",
  "frame_bound_s",  "frame_exclude_opt",  "frame_bound_e",  "frame_bound", 
  "frame_exclude",  "filter_clause",  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= table_option",
 /*  35 */ "table_options ::= table_options COMMA table_option",
 /*  36 */ "table_option ::= WITHOUT nm",
 /*  37 */ "table_option ::= nm",
 /*  38 */ "table_option ::= WITHOUT CTX_ROWID_KW",
 /*  39 */ "table_option ::= CTX_STRICT_KW",
 /*  40 */ "ifnotexists ::=",
 /*  41 */ "ifnotexists ::= IF NOT EXISTS",
 /*  42 */ "temp ::= TEMP",
 /*  43 */ "temp ::=",
 /*  44 */ "columnlist ::= columnlist COMMA column",
 /*  45 */ "columnlist ::= column",
 /*  46 */ "column ::= columnid type carglist",
 /*  47 */ "columnid ::= nm",
 /*  48 */ "columnid ::= ID_COL_NEW",
 /*  49 */ "id ::= ID",
 /*  50 */ "id_opt ::= id",
 /*  51 */ "id_opt ::=",
 /*  52 */ "ids ::= ID|STRING",
 /*  53 */ "nm ::= id",
 /*  54 */ "nm ::= STRING",
 /*  55 */ "nm ::= JOIN_KW",
 /*  56 */ "type ::=",
 /*  57 */ "type ::= typetoken",
 /*  58 */ "typetoken ::= typename",
 /*  59 */ "typetoken ::= typename LP signed RP",
 /*  60 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  61 */ "typename ::= ids",
 /*  62 */ "typename ::= typename ids",
 /*  63 */ "typename ::= ID_COL_TYPE",
 /*  64 */ "signed ::= plus_num",
 /*  65 */ "signed ::= minus_num",
 /*  66 */ "carglist ::= carglist ccons",
 /*  67 */ "carglist ::=",
 /*  68 */ "ccons ::= CONSTRAINT nm",
 /*  69 */ "ccons ::= DEFAULT term",
 /*  70 */ "ccons ::= DEFAULT LP expr RP",
 /*  71 */ "ccons ::= DEFAULT PLUS term",
 /*  72 */ "ccons ::= DEFAULT MINUS term",
 /*  73 */ "ccons ::= DEFAULT id",
 /*  74 */ "ccons ::= DEFAULT CTIME_KW",
 /*  75 */ "ccons ::= NULL onconf",
 /*  76 */ "ccons ::= NOT NULL onconf",
 /*  77 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  78 */ "ccons ::= UNIQUE onconf",
 /*  79 */ "ccons ::= CHECK LP expr RP",
 /*  80 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  81 */ "ccons ::= defer_subclause",
 /*  82 */ "ccons ::= COLLATE ids",
 /*  83 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  84 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  85 */ "ccons ::= COLLATE ID_COLLATE",
 /*  86 */ "ccons ::= REFERENCES ID_TAB",
 /*  87 */ "ccons ::= CHECK LP RP",
 /*  88 */ "term ::= NULL",
 /*  89 */ "term ::= INTEGER",
 /*  90 */ "term ::= FLOAT",
 /*  91 */ "term ::= STRING|BLOB",
 /*  92 */ "tnm ::= term",
 /*  93 */ "tnm ::= nm",
 /*  94 */ "gen_always ::= GENERATED ALWAYS",
 /*  95 */ "gen_always ::=",
 /*  96 */ "autoinc ::=",
 /*  97 */ "autoinc ::= AUTOINCR",
 /*  98 */ "refargs ::=",
 /*  99 */ "refargs ::= refargs refarg",
 /* 100 */ "refarg ::= MATCH nm",
 /* 101 */ "refarg ::= ON INSERT refact",
 /* 102 */ "refarg ::= ON DELETE refact",
 /* 103 */ "refarg ::= ON UPDATE refact",
 /* 104 */ "refarg ::= MATCH ID_FK_MATCH",
 /* 105 */ "refact ::= SET NULL",
 /* 106 */ "refact ::= SET DEFAULT",
 /* 107 */ "refact ::= CASCADE",
 /* 108 */ "refact ::= RESTRICT",
 /* 109 */ "refact ::= NO ACTION",
 /* 110 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 111 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 112 */ "init_deferred_pred_opt ::=",
 /* 113 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 114 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 115 */ "conslist_opt ::=",
 /* 116 */ "conslist_opt ::= COMMA conslist",
 /* 117 */ "conslist ::= conslist tconscomma tcons",
 /* 118 */ "conslist ::= tcons",
 /* 119 */ "tconscomma ::= COMMA",
 /* 120 */ "tconscomma ::=",
 /* 121 */ "tcons ::= CONSTRAINT nm",
 /* 122 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 123 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 124 */ "tcons ::= CHECK LP expr RP onconf",
 /* 125 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 126 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 127 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 128 */ "tcons ::= CHECK LP RP onconf",
 /* 129 */ "defer_subclause_opt ::=",
 /* 130 */ "defer_subclause_opt ::= defer_subclause",
 /* 131 */ "onconf ::=",
 /* 132 */ "onconf ::= ON CONFLICT resolvetype",
 /* 133 */ "orconf ::=",
 /* 134 */ "orconf ::= OR resolvetype",
 /* 135 */ "resolvetype ::= raisetype",
 /* 136 */ "resolvetype ::= IGNORE",
 /* 137 */ "resolvetype ::= REPLACE",
 /* 138 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 139 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 140 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 141 */ "ifexists ::= IF EXISTS",
 /* 142 */ "ifexists ::=",
 /* 143 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 144 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 145 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 146 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 147 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 148 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 149 */ "cmd ::= select_stmt",
 /* 150 */ "select_stmt ::= select",
 /* 151 */ "select ::= with selectnowith",
 /* 152 */ "selectnowith ::= oneselect",
 /* 153 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 154 */ "selectnowith ::= values",
 /* 155 */ "selectnowith ::= selectnowith COMMA values",
 /* 156 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 157 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 158 */ "values ::= VALUES LP nexprlist RP",
 /* 159 */ "values ::= values COMMA LP exprlist RP",
 /* 160 */ "multiselect_op ::= UNION",
 /* 161 */ "multiselect_op ::= UNION ALL",
 /* 162 */ "multiselect_op ::= EXCEPT",
 /* 163 */ "multiselect_op ::= INTERSECT",
 /* 164 */ "distinct ::= DISTINCT",
 /* 165 */ "distinct ::= ALL",
 /* 166 */ "distinct ::=",
 /* 167 */ "sclp ::= selcollist COMMA",
 /* 168 */ "sclp ::=",
 /* 169 */ "selcollist ::= sclp expr as",
 /* 170 */ "selcollist ::= sclp STAR",
 /* 171 */ "selcollist ::= sclp tnm DOT STAR",
 /* 172 */ "selcollist ::= sclp",
 /* 173 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 174 */ "as ::= AS nm",
 /* 175 */ "as ::= ids",
 /* 176 */ "as ::= AS ID_ALIAS",
 /* 177 */ "as ::= ID_ALIAS",
 /* 178 */ "as ::=",
 /* 179 */ "from ::=",
 /* 180 */ "from ::= FROM joinsrc",
 /* 181 */ "joinsrc ::= singlesrc seltablist",
 /* 182 */ "joinsrc ::=",
 /* 183 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 184 */ "seltablist ::=",
 /* 185 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 186 */ "singlesrc ::= LP select RP as",
 /* 187 */ "singlesrc ::= LP joinsrc RP as",
 /* 188 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 189 */ "singlesrc ::=",
 /* 190 */ "singlesrc ::= nm DOT",
 /* 191 */ "singlesrc ::= nm DOT ID_TAB",
 /* 192 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 193 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 194 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 195 */ "joinconstr_opt ::= ON expr",
 /* 196 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 197 */ "joinconstr_opt ::=",
 /* 198 */ "dbnm ::=",
 /* 199 */ "dbnm ::= DOT nm",
 /* 200 */ "fullname ::= nm dbnm",
 /* 201 */ "joinop ::= COMMA",
 /* 202 */ "joinop ::= JOIN",
 /* 203 */ "joinop ::= JOIN_KW JOIN",
 /* 204 */ "joinop ::= JOIN_KW nm JOIN",
 /* 205 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 206 */ "joinop ::= ID_JOIN_OPTS",
 /* 207 */ "indexed_opt ::=",
 /* 208 */ "indexed_opt ::= INDEXED BY nm",
 /* 209 */ "indexed_opt ::= NOT INDEXED",
 /* 210 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 211 */ "orderby_opt ::=",
 /* 212 */ "orderby_opt ::= ORDER BY sortlist",
 /* 213 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 214 */ "sortlist ::= expr sortorder nulls",
 /* 215 */ "sortorder ::= ASC",
 /* 216 */ "sortorder ::= DESC",
 /* 217 */ "sortorder ::=",
 /* 218 */ "nulls ::= NULLS FIRST",
 /* 219 */ "nulls ::= NULLS LAST",
 /* 220 */ "nulls ::=",
 /* 221 */ "groupby_opt ::=",
 /* 222 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 223 */ "groupby_opt ::= GROUP BY",
 /* 224 */ "having_opt ::=",
 /* 225 */ "having_opt ::= HAVING expr",
 /* 226 */ "limit_opt ::=",
 /* 227 */ "limit_opt ::= LIMIT expr",
 /* 228 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 229 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 230 */ "cmd ::= delete_stmt",
 /* 231 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning",
 /* 232 */ "delete_stmt ::= with DELETE FROM",
 /* 233 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 234 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 235 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 236 */ "where_opt ::=",
 /* 237 */ "where_opt ::= WHERE expr",
 /* 238 */ "where_opt ::= WHERE",
 /* 239 */ "returning ::=",
 /* 240 */ "returning ::= RETURNING selcollist",
 /* 241 */ "cmd ::= update_stmt",
 /* 242 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning",
 /* 243 */ "update_stmt ::= with UPDATE orconf",
 /* 244 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 245 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 246 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 247 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 248 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 249 */ "setlist ::= nm EQ expr",
 /* 250 */ "setlist ::= LP idlist RP EQ expr",
 /* 251 */ "setlist ::=",
 /* 252 */ "setlist ::= setlist COMMA",
 /* 253 */ "setlist ::= setlist COMMA ID_COL",
 /* 254 */ "setlist ::= ID_COL",
 /* 255 */ "idlist_opt ::=",
 /* 256 */ "idlist_opt ::= LP idlist RP",
 /* 257 */ "idlist ::= idlist COMMA nm",
 /* 258 */ "idlist ::= nm",
 /* 259 */ "idlist ::=",
 /* 260 */ "idlist ::= idlist COMMA ID_COL",
 /* 261 */ "idlist ::= ID_COL",
 /* 262 */ "cmd ::= insert_stmt",
 /* 263 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning",
 /* 264 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning",
 /* 265 */ "insert_stmt ::= with insert_cmd INTO",
 /* 266 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 267 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 268 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 269 */ "insert_cmd ::= INSERT orconf",
 /* 270 */ "insert_cmd ::= REPLACE",
 /* 271 */ "upsert ::=",
 /* 272 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 273 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 274 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 275 */ "exprx ::= expr not_opt IN ID_DB",
 /* 276 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 277 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 278 */ "exprx ::= tnm DOT ID_TAB|ID_COL",
 /* 279 */ "exprx ::= tnm DOT nm DOT ID_COL",
 /* 280 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 281 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 282 */ "exprx ::= CTIME_KW",
 /* 283 */ "exprx ::= LP nexprlist RP",
 /* 284 */ "exprx ::= tnm",
 /* 285 */ "exprx ::= tnm DOT nm",
 /* 286 */ "exprx ::= tnm DOT",
 /* 287 */ "exprx ::= tnm DOT nm DOT nm",
 /* 288 */ "exprx ::= tnm DOT nm DOT",
 /* 289 */ "exprx ::= VARIABLE",
 /* 290 */ "exprx ::= expr COLLATE ids",
 /* 291 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 292 */ "exprx ::= ID LP distinct exprlist RP",
 /* 293 */ "exprx ::= ID LP STAR RP",
 /* 294 */ "exprx ::= expr AND expr",
 /* 295 */ "exprx ::= expr OR expr",
 /* 296 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 297 */ "exprx ::= expr EQ|NE expr",
 /* 298 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 299 */ "exprx ::= expr PLUS|MINUS expr",
 /* 300 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 301 */ "exprx ::= expr CONCAT expr",
 /* 302 */ "exprx ::= expr not_opt likeop expr",
 /* 303 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 304 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 305 */ "exprx ::= expr NOT NULL",
 /* 306 */ "exprx ::= expr IS not_opt expr",
 /* 307 */ "exprx ::= expr IS NOT DISTINCT FROM expr",
 /* 308 */ "exprx ::= expr IS DISTINCT FROM expr",
 /* 309 */ "exprx ::= NOT expr",
 /* 310 */ "exprx ::= BITNOT expr",
 /* 311 */ "exprx ::= MINUS expr",
 /* 312 */ "exprx ::= PLUS expr",
 /* 313 */ "exprx ::= expr PTR expr",
 /* 314 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 315 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 316 */ "exprx ::= LP select RP",
 /* 317 */ "exprx ::= expr not_opt IN LP select RP",
 /* 318 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 319 */ "exprx ::= EXISTS LP select RP",
 /* 320 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 321 */ "exprx ::= RAISE LP IGNORE RP",
 /* 322 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 323 */ "exprx ::= ID LP distinct exprlist RP filter_over",
 /* 324 */ "exprx ::= ID LP STAR RP filter_over",
 /* 325 */ "expr ::=",
 /* 326 */ "expr ::= exprx",
 /* 327 */ "not_opt ::=",
 /* 328 */ "not_opt ::= NOT",
 /* 329 */ "likeop ::= LIKE_KW|MATCH",
 /* 330 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 331 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 332 */ "case_else ::= ELSE expr",
 /* 333 */ "case_else ::=",
 /* 334 */ "case_operand ::= exprx",
 /* 335 */ "case_operand ::=",
 /* 336 */ "exprlist ::= nexprlist",
 /* 337 */ "exprlist ::=",
 /* 338 */ "nexprlist ::= nexprlist COMMA expr",
 /* 339 */ "nexprlist ::= exprx",
 /* 340 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 341 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 342 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 343 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 344 */ "uniqueflag ::= UNIQUE",
 /* 345 */ "uniqueflag ::=",
 /* 346 */ "idxlist_opt ::=",
 /* 347 */ "idxlist_opt ::= LP idxlist RP",
 /* 348 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 349 */ "idxlist ::= idxlist_single",
 /* 350 */ "idxlist_single ::= nm collate sortorder",
 /* 351 */ "idxlist_single ::= ID_COL",
 /* 352 */ "collate ::=",
 /* 353 */ "collate ::= COLLATE ids",
 /* 354 */ "collate ::= COLLATE ID_COLLATE",
 /* 355 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 356 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 357 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 358 */ "cmd ::= VACUUM vinto",
 /* 359 */ "cmd ::= VACUUM nm vinto",
 /* 360 */ "vinto ::= INTO expr",
 /* 361 */ "vinto ::=",
 /* 362 */ "cmd ::= PRAGMA nm dbnm",
 /* 363 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 364 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 365 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 366 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 367 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 368 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 369 */ "nmnum ::= plus_num",
 /* 370 */ "nmnum ::= nm",
 /* 371 */ "nmnum ::= ON",
 /* 372 */ "nmnum ::= DELETE",
 /* 373 */ "nmnum ::= DEFAULT",
 /* 374 */ "plus_num ::= PLUS number",
 /* 375 */ "plus_num ::= number",
 /* 376 */ "minus_num ::= MINUS number",
 /* 377 */ "number ::= INTEGER",
 /* 378 */ "number ::= FLOAT",
 /* 379 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 380 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 381 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 382 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 383 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 384 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 385 */ "trigger_time ::= BEFORE",
 /* 386 */ "trigger_time ::= AFTER",
 /* 387 */ "trigger_time ::= INSTEAD OF",
 /* 388 */ "trigger_time ::=",
 /* 389 */ "trigger_event ::= DELETE",
 /* 390 */ "trigger_event ::= INSERT",
 /* 391 */ "trigger_event ::= UPDATE",
 /* 392 */ "trigger_event ::= UPDATE OF idlist",
 /* 393 */ "foreach_clause ::=",
 /* 394 */ "foreach_clause ::= FOR EACH ROW",
 /* 395 */ "when_clause ::=",
 /* 396 */ "when_clause ::= WHEN expr",
 /* 397 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 398 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 399 */ "trigger_cmd_list ::= SEMI",
 /* 400 */ "trigger_cmd ::= update_stmt",
 /* 401 */ "trigger_cmd ::= insert_stmt",
 /* 402 */ "trigger_cmd ::= delete_stmt",
 /* 403 */ "trigger_cmd ::= select_stmt",
 /* 404 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 405 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 406 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 407 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 408 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 409 */ "cmd ::= DETACH database_kw_opt expr",
 /* 410 */ "key_opt ::=",
 /* 411 */ "key_opt ::= KEY expr",
 /* 412 */ "database_kw_opt ::= DATABASE",
 /* 413 */ "database_kw_opt ::=",
 /* 414 */ "cmd ::= REINDEX",
 /* 415 */ "cmd ::= REINDEX nm dbnm",
 /* 416 */ "cmd ::= REINDEX ID_COLLATE",
 /* 417 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 418 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 419 */ "cmd ::= ANALYZE",
 /* 420 */ "cmd ::= ANALYZE nm dbnm",
 /* 421 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 422 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 423 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 424 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 425 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
 /* 426 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 427 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 428 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 429 */ "kwcolumn_opt ::=",
 /* 430 */ "kwcolumn_opt ::= COLUMNKW",
 /* 431 */ "cmd ::= create_vtab",
 /* 432 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 433 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 434 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 435 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 436 */ "vtabarglist ::= vtabarg",
 /* 437 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 438 */ "vtabarg ::=",
 /* 439 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 440 */ "vtabargtoken ::= ANY",
 /* 441 */ "vtabargtoken ::= LP anylist RP",
 /* 442 */ "anylist ::=",
 /* 443 */ "anylist ::= anylist LP anylist RP",
 /* 444 */ "anylist ::= anylist ANY",
 /* 445 */ "with ::=",
 /* 446 */ "with ::= WITH wqlist",
 /* 447 */ "with ::= WITH RECURSIVE wqlist",
 /* 448 */ "wqas ::= AS",
 /* 449 */ "wqas ::= AS MATERIALIZED",
 /* 450 */ "wqas ::= AS NOT MATERIALIZED",
 /* 451 */ "wqlist ::= wqcte",
 /* 452 */ "wqlist ::= wqlist COMMA wqcte",
 /* 453 */ "wqlist ::= ID_TAB_NEW",
 /* 454 */ "wqcte ::= nm idxlist_opt wqas LP select RP",
 /* 455 */ "windowdefn_list ::= windowdefn",
 /* 456 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 457 */ "windowdefn ::= nm AS LP window RP",
 /* 458 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 459 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 460 */ "window ::= ORDER BY sortlist frame_opt",
 /* 461 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 462 */ "window ::= frame_opt",
 /* 463 */ "window ::= nm frame_opt",
 /* 464 */ "frame_opt ::=",
 /* 465 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 466 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 467 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 468 */ "frame_bound_s ::= frame_bound",
 /* 469 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 470 */ "frame_bound_e ::= frame_bound",
 /* 471 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 472 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 473 */ "frame_bound ::= CURRENT ROW",
 /* 474 */ "frame_exclude_opt ::=",
 /* 475 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 476 */ "frame_exclude ::= NO OTHERS",
 /* 477 */ "frame_exclude ::= CURRENT ROW",
 /* 478 */ "frame_exclude ::= GROUP",
 /* 479 */ "frame_exclude ::= TIES",
 /* 480 */ "window_clause ::= WINDOW windowdefn_list",
 /* 481 */ "filter_over ::= filter_clause over_clause",
 /* 482 */ "filter_over ::= over_clause",
 /* 483 */ "filter_over ::= filter_clause",
 /* 484 */ "over_clause ::= OVER LP window RP",
 /* 485 */ "over_clause ::= OVER nm",
 /* 486 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 195: /* cmd */
    case 198: /* ecmd */
    case 200: /* cmdx */
    case 248: /* select_stmt */
    case 277: /* delete_stmt */
    case 279: /* update_stmt */
    case 282: /* insert_stmt */
    case 303: /* trigger_cmd */
    case 307: /* create_vtab */
{
parser_safe_delete((yypminor->yy41));
}
      break;
    case 199: /* explain */
{
parser_safe_delete((yypminor->yy499));
}
      break;
    case 201: /* transtype */
    case 202: /* trans_opt */
{
parser_safe_delete((yypminor->yy512));
}
      break;
    case 203: /* nm */
    case 214: /* columnid */
    case 217: /* id */
    case 218: /* id_opt */
    case 219: /* ids */
    case 221: /* typename */
    case 272: /* dbnm */
    case 294: /* collate */
    case 309: /* vtabarg */
    case 310: /* vtabargtoken */
    case 311: /* anylist */
{
parser_safe_delete((yypminor->yy319));
}
      break;
    case 204: /* savepoint_opt */
    case 206: /* ifnotexists */
    case 230: /* autoinc */
    case 234: /* gen_always */
    case 240: /* tconscomma */
    case 247: /* ifexists */
    case 286: /* not_opt */
    case 292: /* uniqueflag */
    case 304: /* database_kw_opt */
    case 306: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy225));
}
      break;
    case 205: /* temp */
    case 254: /* distinct */
{
parser_safe_delete((yypminor->yy130));
}
      break;
    case 207: /* fullname */
{
parser_safe_delete((yypminor->yy396));
}
      break;
    case 208: /* columnlist */
{
parser_safe_delete((yypminor->yy390));
}
      break;
    case 209: /* conslist_opt */
    case 239: /* conslist */
{
parser_safe_delete((yypminor->yy115));
}
      break;
    case 210: /* table_options */
{
parser_safe_delete((yypminor->yy455));
}
      break;
    case 211: /* select */
    case 250: /* selectnowith */
{
parser_safe_delete((yypminor->yy297));
}
      break;
    case 212: /* table_option */
{
parser_safe_delete((yypminor->yy629));
}
      break;
    case 213: /* column */
{
parser_safe_delete((yypminor->yy3));
}
      break;
    case 215: /* type */
    case 220: /* typetoken */
{
parser_safe_delete((yypminor->yy267));
}
      break;
    case 216: /* carglist */
{
parser_safe_delete((yypminor->yy323));
}
      break;
    case 222: /* signed */
    case 223: /* plus_num */
    case 224: /* minus_num */
    case 226: /* term */
    case 296: /* nmnum */
    case 297: /* number */
{
parser_safe_delete((yypminor->yy393));
}
      break;
    case 225: /* ccons */
{
parser_safe_delete((yypminor->yy448));
}
      break;
    case 227: /* expr */
    case 257: /* where_opt */
    case 259: /* having_opt */
    case 285: /* exprx */
    case 288: /* case_operand */
    case 290: /* case_else */
    case 295: /* vinto */
    case 301: /* when_clause */
    case 305: /* key_opt */
{
parser_safe_delete((yypminor->yy186));
}
      break;
    case 228: /* onconf */
    case 244: /* resolvetype */
    case 245: /* orconf */
{
parser_safe_delete((yypminor->yy136));
}
      break;
    case 229: /* sortorder */
{
parser_safe_delete((yypminor->yy35));
}
      break;
    case 231: /* idxlist_opt */
    case 242: /* idxlist */
{
parser_safe_delete((yypminor->yy627));
}
      break;
    case 232: /* refargs */
{
parser_safe_delete((yypminor->yy156));
}
      break;
    case 233: /* defer_subclause */
    case 243: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy53));
}
      break;
    case 235: /* tnm */
{
parser_safe_delete((yypminor->yy380));
}
      break;
    case 236: /* refarg */
{
parser_safe_delete((yypminor->yy205));
}
      break;
    case 237: /* refact */
{
parser_safe_delete((yypminor->yy106));
}
      break;
    case 238: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy612));
}
      break;
    case 241: /* tcons */
{
parser_safe_delete((yypminor->yy400));
}
      break;
    case 249: /* with */
{
parser_safe_delete((yypminor->yy161));
}
      break;
    case 251: /* oneselect */
{
parser_safe_delete((yypminor->yy378));
}
      break;
    case 252: /* multiselect_op */
{
parser_safe_delete((yypminor->yy142));
}
      break;
    case 253: /* values */
{
parser_safe_delete((yypminor->yy522));
}
      break;
    case 255: /* selcollist */
    case 265: /* sclp */
    case 278: /* returning */
{
parser_safe_delete((yypminor->yy27));
}
      break;
    case 256: /* from */
    case 267: /* joinsrc */
{
parser_safe_delete((yypminor->yy553));
}
      break;
    case 258: /* groupby_opt */
    case 263: /* nexprlist */
    case 264: /* exprlist */
    case 289: /* case_exprlist */
{
parser_safe_delete((yypminor->yy615));
}
      break;
    case 260: /* orderby_opt */
    case 275: /* sortlist */
{
parser_safe_delete((yypminor->yy226));
}
      break;
    case 261: /* limit_opt */
{
parser_safe_delete((yypminor->yy360));
}
      break;
    case 262: /* window_clause */
    case 315: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy525));
}
      break;
    case 266: /* as */
{
parser_safe_delete((yypminor->yy628));
}
      break;
    case 268: /* singlesrc */
{
parser_safe_delete((yypminor->yy595));
}
      break;
    case 269: /* seltablist */
{
parser_safe_delete((yypminor->yy107));
}
      break;
    case 270: /* joinop */
{
parser_safe_delete((yypminor->yy449));
}
      break;
    case 271: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy215));
}
      break;
    case 273: /* indexed_opt */
{
parser_safe_delete((yypminor->yy300));
}
      break;
    case 274: /* idlist */
    case 281: /* idlist_opt */
    case 308: /* vtabarglist */
{
parser_safe_delete((yypminor->yy173));
}
      break;
    case 276: /* nulls */
{
parser_safe_delete((yypminor->yy315));
}
      break;
    case 280: /* setlist */
{
parser_safe_delete((yypminor->yy621));
}
      break;
    case 283: /* insert_cmd */
{
parser_safe_delete((yypminor->yy308));
}
      break;
    case 284: /* upsert */
{
parser_safe_delete((yypminor->yy332));
}
      break;
    case 287: /* likeop */
{
parser_safe_delete((yypminor->yy274));
}
      break;
    case 291: /* filter_over */
{
parser_safe_delete((yypminor->yy181));
}
      break;
    case 293: /* idxlist_single */
{
parser_safe_delete((yypminor->yy110));
}
      break;
    case 298: /* trigger_time */
{
parser_safe_delete((yypminor->yy120));
}
      break;
    case 299: /* trigger_event */
{
parser_safe_delete((yypminor->yy259));
}
      break;
    case 300: /* foreach_clause */
{
parser_safe_delete((yypminor->yy456));
}
      break;
    case 302: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy240));
}
      break;
    case 312: /* wqlist */
{
parser_safe_delete((yypminor->yy164));
}
      break;
    case 313: /* wqas */
{
parser_safe_delete((yypminor->yy21));
}
      break;
    case 314: /* wqcte */
{
parser_safe_delete((yypminor->yy146));
}
      break;
    case 316: /* windowdefn */
{
parser_safe_delete((yypminor->yy562));
}
      break;
    case 317: /* window */
{
parser_safe_delete((yypminor->yy162));
}
      break;
    case 318: /* frame_opt */
{
parser_safe_delete((yypminor->yy149));
}
      break;
    case 319: /* range_or_rows */
{
parser_safe_delete((yypminor->yy143));
}
      break;
    case 320: /* frame_bound_s */
    case 322: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy285));
}
      break;
    case 323: /* frame_bound */
{
parser_safe_delete((yypminor->yy285));parser_safe_delete((yypminor->yy285));parser_safe_delete((yypminor->yy285));
}
      break;
    case 325: /* filter_clause */
{
parser_safe_delete((yypminor->yy39));
}
      break;
    case 326: /* over_clause */
{
parser_safe_delete((yypminor->yy11));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   UNUSED(yypMinor);
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 196, 1 },
  { 197, 2 },
  { 197, 1 },
  { 198, 1 },
  { 198, 3 },
  { 199, 0 },
  { 199, 1 },
  { 199, 3 },
  { 200, 1 },
  { 195, 3 },
  { 202, 0 },
  { 202, 1 },
  { 202, 2 },
  { 202, 2 },
  { 201, 0 },
  { 201, 1 },
  { 201, 1 },
  { 201, 1 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 204, 1 },
  { 204, 0 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 10 },
  { 195, 7 },
  { 195, 7 },
  { 195, 5 },
  { 210, 0 },
  { 210, 1 },
  { 210, 3 },
  { 212, 2 },
  { 212, 1 },
  { 212, 2 },
  { 212, 1 },
  { 206, 0 },
  { 206, 3 },
  { 205, 1 },
  { 205, 0 },
  { 208, 3 },
  { 208, 1 },
  { 213, 3 },
  { 214, 1 },
  { 214, 1 },
  { 217, 1 },
  { 218, 1 },
  { 218, 0 },
  { 219, 1 },
  { 203, 1 },
  { 203, 1 },
  { 203, 1 },
  { 215, 0 },
  { 215, 1 },
  { 220, 1 },
  { 220, 4 },
  { 220, 6 },
  { 221, 1 },
  { 221, 2 },
  { 221, 1 },
  { 222, 1 },
  { 222, 1 },
  { 216, 2 },
  { 216, 0 },
  { 225, 2 },
  { 225, 2 },
  { 225, 4 },
  { 225, 3 },
  { 225, 3 },
  { 225, 2 },
  { 225, 2 },
  { 225, 2 },
  { 225, 3 },
  { 225, 5 },
  { 225, 2 },
  { 225, 4 },
  { 225, 4 },
  { 225, 1 },
  { 225, 2 },
  { 225, 6 },
  { 225, 2 },
  { 225, 2 },
  { 225, 2 },
  { 225, 3 },
  { 226, 1 },
  { 226, 1 },
  { 226, 1 },
  { 226, 1 },
  { 235, 1 },
  { 235, 1 },
  { 234, 2 },
  { 234, 0 },
  { 230, 0 },
  { 230, 1 },
  { 232, 0 },
  { 232, 2 },
  { 236, 2 },
  { 236, 3 },
  { 236, 3 },
  { 236, 3 },
  { 236, 2 },
  { 237, 2 },
  { 237, 2 },
  { 237, 1 },
  { 237, 1 },
  { 237, 2 },
  { 233, 3 },
  { 233, 2 },
  { 238, 0 },
  { 238, 2 },
  { 238, 2 },
  { 209, 0 },
  { 209, 2 },
  { 239, 3 },
  { 239, 1 },
  { 240, 1 },
  { 240, 0 },
  { 241, 2 },
  { 241, 7 },
  { 241, 5 },
  { 241, 5 },
  { 241, 10 },
  { 241, 2 },
  { 241, 7 },
  { 241, 4 },
  { 243, 0 },
  { 243, 1 },
  { 228, 0 },
  { 228, 3 },
  { 245, 0 },
  { 245, 2 },
  { 244, 1 },
  { 244, 1 },
  { 244, 1 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 247, 2 },
  { 247, 0 },
  { 195, 8 },
  { 195, 7 },
  { 195, 5 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 1 },
  { 248, 1 },
  { 211, 2 },
  { 250, 1 },
  { 250, 3 },
  { 250, 1 },
  { 250, 3 },
  { 251, 9 },
  { 251, 10 },
  { 253, 4 },
  { 253, 5 },
  { 252, 1 },
  { 252, 2 },
  { 252, 1 },
  { 252, 1 },
  { 254, 1 },
  { 254, 1 },
  { 254, 0 },
  { 265, 2 },
  { 265, 0 },
  { 255, 3 },
  { 255, 2 },
  { 255, 4 },
  { 255, 1 },
  { 255, 4 },
  { 266, 2 },
  { 266, 1 },
  { 266, 2 },
  { 266, 1 },
  { 266, 0 },
  { 256, 0 },
  { 256, 2 },
  { 267, 2 },
  { 267, 0 },
  { 269, 4 },
  { 269, 0 },
  { 268, 4 },
  { 268, 4 },
  { 268, 4 },
  { 268, 6 },
  { 268, 0 },
  { 268, 2 },
  { 268, 3 },
  { 268, 1 },
  { 268, 3 },
  { 268, 1 },
  { 271, 2 },
  { 271, 4 },
  { 271, 0 },
  { 272, 0 },
  { 272, 2 },
  { 207, 2 },
  { 270, 1 },
  { 270, 1 },
  { 270, 2 },
  { 270, 3 },
  { 270, 4 },
  { 270, 1 },
  { 273, 0 },
  { 273, 3 },
  { 273, 2 },
  { 273, 3 },
  { 260, 0 },
  { 260, 3 },
  { 275, 5 },
  { 275, 3 },
  { 229, 1 },
  { 229, 1 },
  { 229, 0 },
  { 276, 2 },
  { 276, 2 },
  { 276, 0 },
  { 258, 0 },
  { 258, 3 },
  { 258, 2 },
  { 259, 0 },
  { 259, 2 },
  { 261, 0 },
  { 261, 2 },
  { 261, 4 },
  { 261, 4 },
  { 195, 1 },
  { 277, 7 },
  { 277, 3 },
  { 277, 5 },
  { 277, 6 },
  { 277, 4 },
  { 257, 0 },
  { 257, 2 },
  { 257, 1 },
  { 278, 0 },
  { 278, 2 },
  { 195, 1 },
  { 279, 10 },
  { 279, 3 },
  { 279, 5 },
  { 279, 6 },
  { 279, 4 },
  { 280, 5 },
  { 280, 7 },
  { 280, 3 },
  { 280, 5 },
  { 280, 0 },
  { 280, 2 },
  { 280, 3 },
  { 280, 1 },
  { 281, 0 },
  { 281, 3 },
  { 274, 3 },
  { 274, 1 },
  { 274, 0 },
  { 274, 3 },
  { 274, 1 },
  { 195, 1 },
  { 282, 8 },
  { 282, 8 },
  { 282, 3 },
  { 282, 5 },
  { 282, 4 },
  { 282, 6 },
  { 283, 2 },
  { 283, 1 },
  { 284, 0 },
  { 284, 11 },
  { 284, 8 },
  { 284, 4 },
  { 285, 4 },
  { 285, 6 },
  { 285, 1 },
  { 285, 3 },
  { 285, 5 },
  { 285, 3 },
  { 285, 6 },
  { 285, 1 },
  { 285, 3 },
  { 285, 1 },
  { 285, 3 },
  { 285, 2 },
  { 285, 5 },
  { 285, 4 },
  { 285, 1 },
  { 285, 3 },
  { 285, 6 },
  { 285, 5 },
  { 285, 4 },
  { 285, 3 },
  { 285, 3 },
  { 285, 3 },
  { 285, 3 },
  { 285, 3 },
  { 285, 3 },
  { 285, 3 },
  { 285, 3 },
  { 285, 4 },
  { 285, 6 },
  { 285, 2 },
  { 285, 3 },
  { 285, 4 },
  { 285, 6 },
  { 285, 5 },
  { 285, 2 },
  { 285, 2 },
  { 285, 2 },
  { 285, 2 },
  { 285, 3 },
  { 285, 6 },
  { 285, 6 },
  { 285, 3 },
  { 285, 6 },
  { 285, 5 },
  { 285, 4 },
  { 285, 5 },
  { 285, 4 },
  { 285, 6 },
  { 285, 6 },
  { 285, 5 },
  { 227, 0 },
  { 227, 1 },
  { 286, 0 },
  { 286, 1 },
  { 287, 1 },
  { 289, 5 },
  { 289, 4 },
  { 290, 2 },
  { 290, 0 },
  { 288, 1 },
  { 288, 0 },
  { 264, 1 },
  { 264, 0 },
  { 263, 3 },
  { 263, 1 },
  { 195, 12 },
  { 195, 8 },
  { 195, 7 },
  { 195, 5 },
  { 292, 1 },
  { 292, 0 },
  { 231, 0 },
  { 231, 3 },
  { 242, 3 },
  { 242, 1 },
  { 293, 3 },
  { 293, 1 },
  { 294, 0 },
  { 294, 2 },
  { 294, 2 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 2 },
  { 195, 3 },
  { 295, 2 },
  { 295, 0 },
  { 195, 3 },
  { 195, 5 },
  { 195, 6 },
  { 195, 5 },
  { 195, 6 },
  { 195, 4 },
  { 195, 2 },
  { 296, 1 },
  { 296, 1 },
  { 296, 1 },
  { 296, 1 },
  { 296, 1 },
  { 223, 2 },
  { 223, 1 },
  { 224, 2 },
  { 297, 1 },
  { 297, 1 },
  { 195, 15 },
  { 195, 12 },
  { 195, 14 },
  { 195, 10 },
  { 195, 7 },
  { 195, 5 },
  { 298, 1 },
  { 298, 1 },
  { 298, 2 },
  { 298, 0 },
  { 299, 1 },
  { 299, 1 },
  { 299, 1 },
  { 299, 3 },
  { 300, 0 },
  { 300, 3 },
  { 301, 0 },
  { 301, 2 },
  { 302, 3 },
  { 302, 2 },
  { 302, 1 },
  { 303, 1 },
  { 303, 1 },
  { 303, 1 },
  { 303, 1 },
  { 246, 1 },
  { 195, 4 },
  { 195, 6 },
  { 195, 4 },
  { 195, 6 },
  { 195, 3 },
  { 305, 0 },
  { 305, 2 },
  { 304, 1 },
  { 304, 0 },
  { 195, 1 },
  { 195, 3 },
  { 195, 2 },
  { 195, 4 },
  { 195, 2 },
  { 195, 1 },
  { 195, 3 },
  { 195, 4 },
  { 195, 2 },
  { 195, 6 },
  { 195, 6 },
  { 195, 6 },
  { 195, 6 },
  { 195, 5 },
  { 195, 3 },
  { 306, 0 },
  { 306, 1 },
  { 195, 1 },
  { 307, 8 },
  { 307, 11 },
  { 307, 7 },
  { 307, 5 },
  { 308, 1 },
  { 308, 3 },
  { 309, 0 },
  { 309, 2 },
  { 310, 1 },
  { 310, 3 },
  { 311, 0 },
  { 311, 4 },
  { 311, 2 },
  { 249, 0 },
  { 249, 2 },
  { 249, 3 },
  { 313, 1 },
  { 313, 2 },
  { 313, 3 },
  { 312, 1 },
  { 312, 3 },
  { 312, 1 },
  { 314, 6 },
  { 315, 1 },
  { 315, 3 },
  { 316, 5 },
  { 317, 5 },
  { 317, 6 },
  { 317, 4 },
  { 317, 5 },
  { 317, 1 },
  { 317, 2 },
  { 318, 0 },
  { 318, 3 },
  { 318, 6 },
  { 319, 1 },
  { 320, 1 },
  { 320, 2 },
  { 322, 1 },
  { 322, 2 },
  { 323, 2 },
  { 323, 2 },
  { 321, 0 },
  { 321, 2 },
  { 324, 2 },
  { 324, 2 },
  { 324, 1 },
  { 324, 1 },
  { 262, 2 },
  { 291, 2 },
  { 291, 1 },
  { 291, 1 },
  { 326, 4 },
  { 326, 2 },
  { 325, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy41); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy41);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy41 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy41 = yymsp[-1].minor.yy41;
                                                yygotominor.yy41->explain = yymsp[-2].minor.yy499->explain;
                                                yygotominor.yy41->queryPlan = yymsp[-2].minor.yy499->queryPlan;
                                                delete yymsp[-2].minor.yy499;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy499 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy499 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy499 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 400: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==400);
      case 401: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==401);
      case 402: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==402);
      case 403: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==403);
      case 431: /* cmd ::= create_vtab */ yytestcase(yyruleno==431);
{yygotominor.yy41 = yymsp[0].minor.yy41;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy41 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy512->type,
                                                        yymsp[0].minor.yy512->transactionKw,
                                                        yymsp[0].minor.yy512->name
                                                    );
                                                delete yymsp[0].minor.yy512;
                                                delete yymsp[-1].minor.yy512;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy512 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy512 = new ParserStubTransDetails();
                                                yygotominor.yy512->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy512 = new ParserStubTransDetails();
                                                yygotominor.yy512->transactionKw = true;
                                                yygotominor.yy512->name = *(yymsp[0].minor.yy319);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy512 = new ParserStubTransDetails();
                                                yygotominor.yy512->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy512 = new ParserStubTransDetails();
                                                yygotominor.yy512->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy512 = new ParserStubTransDetails();
                                                yygotominor.yy512->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy41 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy512->transactionKw,
                                                        yymsp[0].minor.yy512->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy512;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy41 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy512->transactionKw,
                                                        yymsp[0].minor.yy512->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy512;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy41 = new SqliteRollback(
                                                        yymsp[0].minor.yy512->transactionKw,
                                                        yymsp[0].minor.yy512->name
                                                    );
                                                delete yymsp[0].minor.yy512;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 41: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==41);
      case 94: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==94);
      case 97: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==97);
      case 119: /* tconscomma ::= COMMA */ yytestcase(yyruleno==119);
      case 141: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==141);
      case 328: /* not_opt ::= NOT */ yytestcase(yyruleno==328);
      case 344: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==344);
      case 412: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==412);
      case 429: /* kwcolumn_opt ::= */ yytestcase(yyruleno==429);
{yygotominor.yy225 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 40: /* ifnotexists ::= */ yytestcase(yyruleno==40);
      case 95: /* gen_always ::= */ yytestcase(yyruleno==95);
      case 96: /* autoinc ::= */ yytestcase(yyruleno==96);
      case 120: /* tconscomma ::= */ yytestcase(yyruleno==120);
      case 142: /* ifexists ::= */ yytestcase(yyruleno==142);
      case 327: /* not_opt ::= */ yytestcase(yyruleno==327);
      case 345: /* uniqueflag ::= */ yytestcase(yyruleno==345);
      case 413: /* database_kw_opt ::= */ yytestcase(yyruleno==413);
      case 430: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==430);
{yygotominor.yy225 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy41 = new SqliteSavepoint(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy41 = new SqliteRelease(*(yymsp[-1].minor.yy225), *(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy41 = new SqliteRollback(
                                                        yymsp[-3].minor.yy512->transactionKw,
                                                        *(yymsp[-1].minor.yy225),
                                                        *(yymsp[0].minor.yy319)
                                                    );
                                                delete yymsp[-1].minor.yy225;
                                                delete yymsp[-3].minor.yy512;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,204,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy41 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy225),
                                                        *(yymsp[-8].minor.yy130),
                                                        yymsp[-5].minor.yy396->name1,
                                                        yymsp[-5].minor.yy396->name2,
                                                        *(yymsp[-3].minor.yy390),
                                                        *(yymsp[-2].minor.yy115),
                                                        *(yymsp[0].minor.yy455)
                                                    );
                                                delete yymsp[-6].minor.yy225;
                                                delete yymsp[-8].minor.yy130;
                                                delete yymsp[-3].minor.yy390;
                                                delete yymsp[-2].minor.yy115;
                                                delete yymsp[-5].minor.yy396;
                                                delete yymsp[0].minor.yy455;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy41 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy225),
                                                        *(yymsp[-5].minor.yy130),
                                                        yymsp[-2].minor.yy396->name1,
                                                        yymsp[-2].minor.yy396->name2,
                                                        yymsp[0].minor.yy297
                                                    );
                                                delete yymsp[-3].minor.yy225;
                                                delete yymsp[-5].minor.yy130;
                                                delete yymsp[-2].minor.yy396;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 144: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==144);
      case 383: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==383);
{  yy_destructor(yypParser,205,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 145: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==145);
      case 384: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==384);
{  yy_destructor(yypParser,205,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
{yygotominor.yy455 = new ParserCreateTableOptionList();}
        break;
      case 34: /* table_options ::= table_option */
{
                                                yygotominor.yy455 = new ParserCreateTableOptionList();
                                                yygotominor.yy455->append(yymsp[0].minor.yy629);
                                            }
        break;
      case 35: /* table_options ::= table_options COMMA table_option */
{
                                                yymsp[-2].minor.yy455->append(yymsp[0].minor.yy629);
                                                yygotominor.yy455 = yymsp[-2].minor.yy455;
                                                DONT_INHERIT_TOKENS("table_options");
                                            }
        break;
      case 36: /* table_option ::= WITHOUT nm */
{
                                                if (yymsp[0].minor.yy319->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy319)));

                                                yygotominor.yy629 = new ParserStubCreateTableOption(ParserStubCreateTableOption::WITHOUT_ROWID);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 37: /* table_option ::= nm */
      case 38: /* table_option ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==38);
      case 39: /* table_option ::= CTX_STRICT_KW */ yytestcase(yyruleno==39);
{
                                                if (yymsp[0].minor.yy319->toLower() != "strict")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy319)));

                                                yygotominor.yy629 = new ParserStubCreateTableOption(ParserStubCreateTableOption::STRICT);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 42: /* temp ::= TEMP */
{yygotominor.yy130 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 43: /* temp ::= */
      case 166: /* distinct ::= */ yytestcase(yyruleno==166);
{yygotominor.yy130 = new int(0);}
        break;
      case 44: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy390->append(yymsp[0].minor.yy3);
                                                yygotominor.yy390 = yymsp[-2].minor.yy390;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 45: /* columnlist ::= column */
{
                                                yygotominor.yy390 = new ParserCreateTableColumnList();
                                                yygotominor.yy390->append(yymsp[0].minor.yy3);
                                            }
        break;
      case 46: /* column ::= columnid type carglist */
{
                                                yygotominor.yy3 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy319), yymsp[-1].minor.yy267, *(yymsp[0].minor.yy323));
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy323;
                                                objectForTokens = yygotominor.yy3;
                                            }
        break;
      case 47: /* columnid ::= nm */
      case 48: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==48);
      case 53: /* nm ::= id */ yytestcase(yyruleno==53);
      case 61: /* typename ::= ids */ yytestcase(yyruleno==61);
      case 199: /* dbnm ::= DOT nm */ yytestcase(yyruleno==199);
      case 353: /* collate ::= COLLATE ids */ yytestcase(yyruleno==353);
      case 354: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==354);
{yygotominor.yy319 = yymsp[0].minor.yy319;}
        break;
      case 49: /* id ::= ID */
{
                                                yygotominor.yy319 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 50: /* id_opt ::= id */
{
                                                yygotominor.yy319 = yymsp[0].minor.yy319;
                                            }
        break;
      case 51: /* id_opt ::= */
{
                                                yygotominor.yy319 = new QString();
                                            }
        break;
      case 52: /* ids ::= ID|STRING */
      case 55: /* nm ::= JOIN_KW */ yytestcase(yyruleno==55);
{yygotominor.yy319 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 54: /* nm ::= STRING */
{yygotominor.yy319 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 56: /* type ::= */
{yygotominor.yy267 = nullptr;}
        break;
      case 57: /* type ::= typetoken */
{yygotominor.yy267 = yymsp[0].minor.yy267;}
        break;
      case 58: /* typetoken ::= typename */
{
                                                yygotominor.yy267 = new SqliteColumnType(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy267;
                                            }
        break;
      case 59: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy267 = new SqliteColumnType(*(yymsp[-3].minor.yy319), *(yymsp[-1].minor.yy393));
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-1].minor.yy393;
                                                objectForTokens = yygotominor.yy267;
                                            }
        break;
      case 60: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy267 = new SqliteColumnType(*(yymsp[-5].minor.yy319), *(yymsp[-3].minor.yy393), *(yymsp[-1].minor.yy393));
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-3].minor.yy393;
                                                delete yymsp[-1].minor.yy393;
                                                objectForTokens = yygotominor.yy267;
                                            }
        break;
      case 62: /* typename ::= typename ids */
      case 63: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==63);
{
                                                yymsp[-1].minor.yy319->append(" " + *(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                yygotominor.yy319 = yymsp[-1].minor.yy319;
                                            }
        break;
      case 64: /* signed ::= plus_num */
      case 65: /* signed ::= minus_num */ yytestcase(yyruleno==65);
      case 369: /* nmnum ::= plus_num */ yytestcase(yyruleno==369);
      case 374: /* plus_num ::= PLUS number */ yytestcase(yyruleno==374);
      case 375: /* plus_num ::= number */ yytestcase(yyruleno==375);
{yygotominor.yy393 = yymsp[0].minor.yy393;}
        break;
      case 66: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy323->append(yymsp[0].minor.yy448);
                                                yygotominor.yy323 = yymsp[-1].minor.yy323;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 67: /* carglist ::= */
{yygotominor.yy323 = new ParserCreateTableColumnConstraintList();}
        break;
      case 68: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initDefNameOnly(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initDefTerm(*(yymsp[0].minor.yy393));
                                                delete yymsp[0].minor.yy393;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initDefExpr(yymsp[-1].minor.yy186);
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 71: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initDefTerm(*(yymsp[0].minor.yy393), false);
                                                delete yymsp[0].minor.yy393;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 72: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initDefTerm(*(yymsp[0].minor.yy393), true);
                                                delete yymsp[0].minor.yy393;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 73: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initDefId(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 74: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 75: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initNull(*(yymsp[0].minor.yy136));
                                                delete yymsp[0].minor.yy136;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 76: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initNotNull(*(yymsp[0].minor.yy136));
                                                delete yymsp[0].minor.yy136;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 77: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initPk(*(yymsp[-2].minor.yy35), *(yymsp[-1].minor.yy136), *(yymsp[0].minor.yy225));
                                                delete yymsp[-2].minor.yy35;
                                                delete yymsp[0].minor.yy225;
                                                delete yymsp[-1].minor.yy136;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 78: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initUnique(*(yymsp[0].minor.yy136));
                                                delete yymsp[0].minor.yy136;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 79: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initCheck(yymsp[-1].minor.yy186);
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 80: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initFk(*(yymsp[-2].minor.yy319), *(yymsp[-1].minor.yy627), *(yymsp[0].minor.yy156));
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy156;
                                                delete yymsp[-1].minor.yy627;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 81: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initDefer(yymsp[0].minor.yy53->initially, yymsp[0].minor.yy53->deferrable);
                                                delete yymsp[0].minor.yy53;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 82: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initColl(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy448;
                                            }
        break;
      case 83: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 84: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==84);
      case 85: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==85);
      case 86: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==86);
{
                                                if (!yymsp[0].minor.yy319->isNull() && yymsp[0].minor.yy319->toLower() != "stored" && yymsp[0].minor.yy319->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy319)));

                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy448->initGeneratedAs(yymsp[-2].minor.yy186, *(yymsp[-5].minor.yy225), *(yymsp[0].minor.yy319));
												delete yymsp[-5].minor.yy225;
												delete yymsp[0].minor.yy319;
												objectForTokens = yygotominor.yy448;
											}
        break;
      case 87: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy448 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy448->initCheck();
                                                objectForTokens = yygotominor.yy448;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 88: /* term ::= NULL */
{yygotominor.yy393 = new QVariant();}
        break;
      case 89: /* term ::= INTEGER */
      case 377: /* number ::= INTEGER */ yytestcase(yyruleno==377);
{yygotominor.yy393 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 90: /* term ::= FLOAT */
      case 378: /* number ::= FLOAT */ yytestcase(yyruleno==378);
{yygotominor.yy393 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 91: /* term ::= STRING|BLOB */
{yygotominor.yy393 = new QVariant(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 92: /* tnm ::= term */
{
												yygotominor.yy380 = new ParserTermOrLiteral(*(yymsp[0].minor.yy393));
												delete yymsp[0].minor.yy393;
											}
        break;
      case 93: /* tnm ::= nm */
{
												yygotominor.yy380 = new ParserTermOrLiteral(*(yymsp[0].minor.yy319));
												delete yymsp[0].minor.yy319;
											}
        break;
      case 98: /* refargs ::= */
{yygotominor.yy156 = new ParserFkConditionList();}
        break;
      case 99: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy156->append(yymsp[0].minor.yy205);
                                                yygotominor.yy156 = yymsp[-1].minor.yy156;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 100: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy205 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 101: /* refarg ::= ON INSERT refact */
{yygotominor.yy205 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy106)); delete yymsp[0].minor.yy106;}
        break;
      case 102: /* refarg ::= ON DELETE refact */
{yygotominor.yy205 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy106)); delete yymsp[0].minor.yy106;}
        break;
      case 103: /* refarg ::= ON UPDATE refact */
      case 104: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==104);
{yygotominor.yy205 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy106)); delete yymsp[0].minor.yy106;}
        break;
      case 105: /* refact ::= SET NULL */
{yygotominor.yy106 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 106: /* refact ::= SET DEFAULT */
{yygotominor.yy106 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 107: /* refact ::= CASCADE */
{yygotominor.yy106 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 108: /* refact ::= RESTRICT */
{yygotominor.yy106 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 109: /* refact ::= NO ACTION */
{yygotominor.yy106 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 110: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy53 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy612));
                                                delete yymsp[0].minor.yy612;
                                            }
        break;
      case 111: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy53 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy612));
                                                delete yymsp[0].minor.yy612;
                                            }
        break;
      case 112: /* init_deferred_pred_opt ::= */
{yygotominor.yy612 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 113: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy612 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 114: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy612 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 115: /* conslist_opt ::= */
{yygotominor.yy115 = new ParserCreateTableConstraintList();}
        break;
      case 116: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy115 = yymsp[0].minor.yy115;}
        break;
      case 117: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy400->afterComma = *(yymsp[-1].minor.yy225);
                                                yymsp[-2].minor.yy115->append(yymsp[0].minor.yy400);
                                                yygotominor.yy115 = yymsp[-2].minor.yy115;
                                                delete yymsp[-1].minor.yy225;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 118: /* conslist ::= tcons */
{
                                                yygotominor.yy115 = new ParserCreateTableConstraintList();
                                                yygotominor.yy115->append(yymsp[0].minor.yy400);
                                            }
        break;
      case 121: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy400 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy400->initNameOnly(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy400;
                                            }
        break;
      case 122: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy400 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy400->initPk(*(yymsp[-3].minor.yy627), *(yymsp[-2].minor.yy225), *(yymsp[0].minor.yy136));
                                                delete yymsp[-2].minor.yy225;
                                                delete yymsp[0].minor.yy136;
                                                delete yymsp[-3].minor.yy627;
                                                objectForTokens = yygotominor.yy400;
                                            }
        break;
      case 123: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy400 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy400->initUnique(*(yymsp[-2].minor.yy627), *(yymsp[0].minor.yy136));
                                                delete yymsp[0].minor.yy136;
                                                delete yymsp[-2].minor.yy627;
                                                objectForTokens = yygotominor.yy400;
                                            }
        break;
      case 124: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy400 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy400->initCheck(yymsp[-2].minor.yy186, *(yymsp[0].minor.yy136));
                                                objectForTokens = yygotominor.yy400;
                                            }
        break;
      case 125: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 126: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==126);
      case 127: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==127);
{
                                                yygotominor.yy400 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy400->initFk(
                                                    *(yymsp[-6].minor.yy627),
                                                    *(yymsp[-3].minor.yy319),
                                                    *(yymsp[-2].minor.yy627),
                                                    *(yymsp[-1].minor.yy156),
                                                    yymsp[0].minor.yy53->initially,
                                                    yymsp[0].minor.yy53->deferrable
                                                );
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-1].minor.yy156;
                                                delete yymsp[0].minor.yy53;
                                                delete yymsp[-2].minor.yy627;
                                                delete yymsp[-6].minor.yy627;
                                                objectForTokens = yygotominor.yy400;
                                            }
        break;
      case 128: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy400 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy400->initCheck();
                                                objectForTokens = yygotominor.yy400;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,228,&yymsp[0].minor);
}
        break;
      case 129: /* defer_subclause_opt ::= */
{yygotominor.yy53 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 130: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy53 = yymsp[0].minor.yy53;}
        break;
      case 131: /* onconf ::= */
      case 133: /* orconf ::= */ yytestcase(yyruleno==133);
{yygotominor.yy136 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 132: /* onconf ::= ON CONFLICT resolvetype */
      case 134: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==134);
{yygotominor.yy136 = yymsp[0].minor.yy136;}
        break;
      case 135: /* resolvetype ::= raisetype */
      case 136: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==136);
      case 137: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==137);
{yygotominor.yy136 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 138: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy41 = new SqliteDropTable(*(yymsp[-1].minor.yy225), yymsp[0].minor.yy396->name1, yymsp[0].minor.yy396->name2);
                                                delete yymsp[-1].minor.yy225;
                                                delete yymsp[0].minor.yy396;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 139: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 140: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==140);
      case 147: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==147);
      case 148: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==148);
      case 191: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==191);
      case 192: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==192);
      case 193: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==193);
      case 194: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==194);
      case 342: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==342);
      case 343: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==343);
      case 356: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==356);
      case 357: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==357);
      case 367: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==367);
      case 368: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==368);
      case 406: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==406);
      case 407: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==407);
      case 417: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==417);
      case 418: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==418);
      case 421: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==421);
      case 422: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==422);
      case 427: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==427);
      case 428: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==428);
      case 434: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==434);
      case 435: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==435);
{  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 143: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy41 = new SqliteCreateView(*(yymsp[-6].minor.yy130), *(yymsp[-4].minor.yy225), yymsp[-3].minor.yy396->name1, yymsp[-3].minor.yy396->name2, yymsp[0].minor.yy297, *(yymsp[-2].minor.yy627));
                                                delete yymsp[-6].minor.yy130;
                                                delete yymsp[-4].minor.yy225;
                                                delete yymsp[-3].minor.yy396;
                                                delete yymsp[-2].minor.yy627;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 146: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy41 = new SqliteDropView(*(yymsp[-1].minor.yy225), yymsp[0].minor.yy396->name1, yymsp[0].minor.yy396->name2);
                                                delete yymsp[-1].minor.yy225;
                                                delete yymsp[0].minor.yy396;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 149: /* cmd ::= select_stmt */
      case 230: /* cmd ::= delete_stmt */ yytestcase(yyruleno==230);
      case 241: /* cmd ::= update_stmt */ yytestcase(yyruleno==241);
      case 262: /* cmd ::= insert_stmt */ yytestcase(yyruleno==262);
{
                                                yygotominor.yy41 = yymsp[0].minor.yy41;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 150: /* select_stmt ::= select */
{
                                                yygotominor.yy41 = yymsp[0].minor.yy297;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 151: /* select ::= with selectnowith */
{
                                                yygotominor.yy297 = yymsp[0].minor.yy297;
                                                yymsp[0].minor.yy297->setWith(yymsp[-1].minor.yy161);
                                                objectForTokens = yygotominor.yy297;
                                            }
        break;
      case 152: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy297 = SqliteSelect::append(yymsp[0].minor.yy378);
                                                objectForTokens = yygotominor.yy297;
                                            }
        break;
      case 153: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy297 = SqliteSelect::append(yymsp[-2].minor.yy297, *(yymsp[-1].minor.yy142), yymsp[0].minor.yy378);
                                                delete yymsp[-1].minor.yy142;
                                                objectForTokens = yygotominor.yy297;
                                            }
        break;
      case 154: /* selectnowith ::= values */
{
                                                yygotominor.yy297 = SqliteSelect::append(*(yymsp[0].minor.yy522));
                                                delete yymsp[0].minor.yy522;
                                                objectForTokens = yygotominor.yy297;
                                            }
        break;
      case 155: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy297 = SqliteSelect::append(yymsp[-2].minor.yy297, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy522));
                                                delete yymsp[0].minor.yy522;
                                                objectForTokens = yygotominor.yy297;
                                            }
        break;
      case 156: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy378 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy130),
                                                        *(yymsp[-6].minor.yy27),
                                                        yymsp[-5].minor.yy553,
                                                        yymsp[-4].minor.yy186,
                                                        *(yymsp[-3].minor.yy615),
                                                        yymsp[-2].minor.yy186,
                                                        *(yymsp[-1].minor.yy226),
                                                        yymsp[0].minor.yy360
                                                    );
                                                delete yymsp[-6].minor.yy27;
                                                delete yymsp[-7].minor.yy130;
                                                delete yymsp[-3].minor.yy615;
                                                delete yymsp[-1].minor.yy226;
                                                objectForTokens = yygotominor.yy378;
                                            }
        break;
      case 157: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy378 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy130),
                                                        *(yymsp[-7].minor.yy27),
                                                        yymsp[-6].minor.yy553,
                                                        yymsp[-5].minor.yy186,
                                                        *(yymsp[-4].minor.yy615),
                                                        yymsp[-3].minor.yy186,
														*(yymsp[-2].minor.yy525),
                                                        *(yymsp[-1].minor.yy226),
                                                        yymsp[0].minor.yy360
                                                    );
                                                delete yymsp[-7].minor.yy27;
                                                delete yymsp[-8].minor.yy130;
                                                delete yymsp[-4].minor.yy615;
                                                delete yymsp[-1].minor.yy226;
												delete yymsp[-2].minor.yy525;
                                                objectForTokens = yygotominor.yy378;
											}
        break;
      case 158: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy522 = new ParserExprNestedList();
                                                yygotominor.yy522->append(*(yymsp[-1].minor.yy615));
                                                delete yymsp[-1].minor.yy615;
                                            }
        break;
      case 159: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy522->append(*(yymsp[-1].minor.yy615));
                                                yygotominor.yy522 = yymsp[-4].minor.yy522;
                                                delete yymsp[-1].minor.yy615;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 160: /* multiselect_op ::= UNION */
{yygotominor.yy142 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 161: /* multiselect_op ::= UNION ALL */
{yygotominor.yy142 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 162: /* multiselect_op ::= EXCEPT */
{yygotominor.yy142 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 163: /* multiselect_op ::= INTERSECT */
{yygotominor.yy142 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 164: /* distinct ::= DISTINCT */
{yygotominor.yy130 = new int(1);}
        break;
      case 165: /* distinct ::= ALL */
{yygotominor.yy130 = new int(2);}
        break;
      case 167: /* sclp ::= selcollist COMMA */
{yygotominor.yy27 = yymsp[-1].minor.yy27;}
        break;
      case 168: /* sclp ::= */
      case 239: /* returning ::= */ yytestcase(yyruleno==239);
{yygotominor.yy27 = new ParserResultColumnList();}
        break;
      case 169: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy186,
                                                        yymsp[0].minor.yy628 ? yymsp[0].minor.yy628->asKw : false,
                                                        yymsp[0].minor.yy628 ? yymsp[0].minor.yy628->name : QString()
                                                    );

                                                yymsp[-2].minor.yy27->append(obj);
                                                yygotominor.yy27 = yymsp[-2].minor.yy27;
                                                delete yymsp[0].minor.yy628;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 170: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy27->append(obj);
                                                yygotominor.yy27 = yymsp[-1].minor.yy27;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 171: /* selcollist ::= sclp tnm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        yymsp[-2].minor.yy380->toName()
                                                    );
													
												if (!yymsp[-2].minor.yy380->isName())
													parserContext->errorAtToken("Syntax error <expected name, not literal value>", -3);
													
                                                yymsp[-3].minor.yy27->append(obj);
                                                yygotominor.yy27 = yymsp[-3].minor.yy27;
                                                delete yymsp[-2].minor.yy380;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 172: /* selcollist ::= sclp */
      case 173: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==173);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy27 = yymsp[0].minor.yy27;
                                            }
        break;
      case 174: /* as ::= AS nm */
{
                                                yygotominor.yy628 = new ParserStubAlias(*(yymsp[0].minor.yy319), true);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 175: /* as ::= ids */
      case 176: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==176);
      case 177: /* as ::= ID_ALIAS */ yytestcase(yyruleno==177);
{
                                                yygotominor.yy628 = new ParserStubAlias(*(yymsp[0].minor.yy319), false);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 178: /* as ::= */
{yygotominor.yy628 = nullptr;}
        break;
      case 179: /* from ::= */
{yygotominor.yy553 = nullptr;}
        break;
      case 180: /* from ::= FROM joinsrc */
{yygotominor.yy553 = yymsp[0].minor.yy553;}
        break;
      case 181: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy553 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy595,
                                                        *(yymsp[0].minor.yy107)
                                                    );
                                                delete yymsp[0].minor.yy107;
                                                objectForTokens = yygotominor.yy553;
                                            }
        break;
      case 182: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy553 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy553;
                                            }
        break;
      case 183: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy449, yymsp[-1].minor.yy595, yymsp[0].minor.yy215);

                                                yymsp[-3].minor.yy107->append(src);
                                                yygotominor.yy107 = yymsp[-3].minor.yy107;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 184: /* seltablist ::= */
{
                                                yygotominor.yy107 = new ParserOtherSourceList();
                                            }
        break;
      case 185: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy595 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy319),
                                                        *(yymsp[-2].minor.yy319),
                                                        yymsp[-1].minor.yy628 ? yymsp[-1].minor.yy628->asKw : false,
                                                        yymsp[-1].minor.yy628 ? yymsp[-1].minor.yy628->name : QString(),
                                                        yymsp[0].minor.yy300 ? yymsp[0].minor.yy300->notIndexedKw : false,
                                                        yymsp[0].minor.yy300 ? yymsp[0].minor.yy300->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[-1].minor.yy628;
                                                if (yymsp[0].minor.yy300)
                                                    delete yymsp[0].minor.yy300;
                                                objectForTokens = yygotominor.yy595;
                                            }
        break;
      case 186: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy595 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy297,
                                                        yymsp[0].minor.yy628 ? yymsp[0].minor.yy628->asKw : false,
                                                        yymsp[0].minor.yy628 ? yymsp[0].minor.yy628->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy628;
                                                objectForTokens = yygotominor.yy595;
                                            }
        break;
      case 187: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy595 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy553,
                                                        yymsp[0].minor.yy628 ? yymsp[0].minor.yy628->asKw : false,
                                                        yymsp[0].minor.yy628 ? yymsp[0].minor.yy628->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy628;
                                                objectForTokens = yygotominor.yy595;
                                            }
        break;
      case 188: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy595 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy319),
                                                        *(yymsp[-4].minor.yy319),
                                                        yymsp[0].minor.yy628 ? yymsp[0].minor.yy628->asKw : false,
                                                        yymsp[0].minor.yy628 ? yymsp[0].minor.yy628->name : QString(),
                                                        *(yymsp[-2].minor.yy615)
                                                    );
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-4].minor.yy319;
                                                delete yymsp[0].minor.yy628;
                                                if (yymsp[-2].minor.yy615)
                                                    delete yymsp[-2].minor.yy615;

                                                objectForTokens = yygotominor.yy595;
                                            }
        break;
      case 189: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy595 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy595;
                                            }
        break;
      case 190: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy595 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy595->database = *(yymsp[-1].minor.yy319);
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy595;
                                            }
        break;
      case 195: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy215 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy186);
                                                objectForTokens = yygotominor.yy215;
                                            }
        break;
      case 196: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy215 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy173));
                                                delete yymsp[-1].minor.yy173;
                                                objectForTokens = yygotominor.yy215;
                                            }
        break;
      case 197: /* joinconstr_opt ::= */
{yygotominor.yy215 = nullptr;}
        break;
      case 198: /* dbnm ::= */
      case 352: /* collate ::= */ yytestcase(yyruleno==352);
      case 438: /* vtabarg ::= */ yytestcase(yyruleno==438);
      case 442: /* anylist ::= */ yytestcase(yyruleno==442);
{yygotominor.yy319 = new QString();}
        break;
      case 200: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy396 = new ParserFullName();
                                                yygotominor.yy396->name1 = *(yymsp[-1].minor.yy319);
                                                yygotominor.yy396->name2 = *(yymsp[0].minor.yy319);
                                                delete yymsp[-1].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 201: /* joinop ::= COMMA */
{
                                                yygotominor.yy449 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy449;
                                            }
        break;
      case 202: /* joinop ::= JOIN */
{
                                                yygotominor.yy449 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy449;
                                            }
        break;
      case 203: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy449 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy449;
                                            }
        break;
      case 204: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy449 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy319));
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy449;
                                            }
        break;
      case 205: /* joinop ::= JOIN_KW nm nm JOIN */
      case 206: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==206);
{
                                                yygotominor.yy449 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy319), *(yymsp[-1].minor.yy319));
                                                delete yymsp[-2].minor.yy319;
                                                objectForTokens = yygotominor.yy449;
                                            }
        break;
      case 207: /* indexed_opt ::= */
{yygotominor.yy300 = nullptr;}
        break;
      case 208: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy300 = new ParserIndexedBy(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 209: /* indexed_opt ::= NOT INDEXED */
      case 210: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==210);
{yygotominor.yy300 = new ParserIndexedBy(true);}
        break;
      case 211: /* orderby_opt ::= */
{yygotominor.yy226 = new ParserOrderByList();}
        break;
      case 212: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy226 = yymsp[0].minor.yy226;}
        break;
      case 213: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy186, *(yymsp[-1].minor.yy35), *(yymsp[0].minor.yy315));
                                                yymsp[-4].minor.yy226->append(obj);
                                                yygotominor.yy226 = yymsp[-4].minor.yy226;
                                                delete yymsp[-1].minor.yy35;
												delete yymsp[0].minor.yy315;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 214: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy186, *(yymsp[-1].minor.yy35), *(yymsp[0].minor.yy315));
                                                yygotominor.yy226 = new ParserOrderByList();
                                                yygotominor.yy226->append(obj);
                                                delete yymsp[-1].minor.yy35;
												delete yymsp[0].minor.yy315;
                                                objectForTokens = obj;
                                            }
        break;
      case 215: /* sortorder ::= ASC */
{yygotominor.yy35 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 216: /* sortorder ::= DESC */
{yygotominor.yy35 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 217: /* sortorder ::= */
{yygotominor.yy35 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 218: /* nulls ::= NULLS FIRST */
{yygotominor.yy315 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 219: /* nulls ::= NULLS LAST */
{yygotominor.yy315 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 220: /* nulls ::= */
{yygotominor.yy315 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 221: /* groupby_opt ::= */
      case 337: /* exprlist ::= */ yytestcase(yyruleno==337);
{yygotominor.yy615 = new ParserExprList();}
        break;
      case 222: /* groupby_opt ::= GROUP BY nexprlist */
      case 336: /* exprlist ::= nexprlist */ yytestcase(yyruleno==336);
{yygotominor.yy615 = yymsp[0].minor.yy615;}
        break;
      case 223: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy615 = new ParserExprList();
                                            }
        break;
      case 224: /* having_opt ::= */
      case 236: /* where_opt ::= */ yytestcase(yyruleno==236);
      case 333: /* case_else ::= */ yytestcase(yyruleno==333);
      case 335: /* case_operand ::= */ yytestcase(yyruleno==335);
      case 361: /* vinto ::= */ yytestcase(yyruleno==361);
      case 395: /* when_clause ::= */ yytestcase(yyruleno==395);
      case 410: /* key_opt ::= */ yytestcase(yyruleno==410);
{yygotominor.yy186 = nullptr;}
        break;
      case 225: /* having_opt ::= HAVING expr */
      case 237: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==237);
      case 326: /* expr ::= exprx */ yytestcase(yyruleno==326);
      case 332: /* case_else ::= ELSE expr */ yytestcase(yyruleno==332);
      case 334: /* case_operand ::= exprx */ yytestcase(yyruleno==334);
      case 360: /* vinto ::= INTO expr */ yytestcase(yyruleno==360);
      case 396: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==396);
      case 411: /* key_opt ::= KEY expr */ yytestcase(yyruleno==411);
{yygotominor.yy186 = yymsp[0].minor.yy186;}
        break;
      case 226: /* limit_opt ::= */
{yygotominor.yy360 = nullptr;}
        break;
      case 227: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy360 = new SqliteLimit(yymsp[0].minor.yy186);
                                                objectForTokens = yygotominor.yy360;
                                            }
        break;
      case 228: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy360 = new SqliteLimit(yymsp[-2].minor.yy186, yymsp[0].minor.yy186, true);
                                                objectForTokens = yygotominor.yy360;
                                            }
        break;
      case 229: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy360 = new SqliteLimit(yymsp[-2].minor.yy186, yymsp[0].minor.yy186, false);
                                                objectForTokens = yygotominor.yy360;
                                            }
        break;
      case 231: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning */
{
                                                if (yymsp[-2].minor.yy300)
                                                {
                                                    if (!yymsp[-2].minor.yy300->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy41 = new SqliteDelete(
                                                                yymsp[-3].minor.yy396->name1,
                                                                yymsp[-3].minor.yy396->name2,
                                                                yymsp[-2].minor.yy300->indexedBy,
                                                                yymsp[-1].minor.yy186,
                                                                yymsp[-6].minor.yy161,
                                                                *(yymsp[0].minor.yy27)
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy41 = new SqliteDelete(
                                                                yymsp[-3].minor.yy396->name1,
                                                                yymsp[-3].minor.yy396->name2,
                                                                yymsp[-2].minor.yy300->notIndexedKw,
                                                                yymsp[-1].minor.yy186,
                                                                yymsp[-6].minor.yy161,
                                                                *(yymsp[0].minor.yy27)
                                                            );
                                                    }
                                                    delete yymsp[-2].minor.yy300;
                                                }
                                                else
                                                {
                                                    yygotominor.yy41 = new SqliteDelete(
                                                            yymsp[-3].minor.yy396->name1,
                                                            yymsp[-3].minor.yy396->name2,
                                                            false,
                                                            yymsp[-1].minor.yy186,
                                                            yymsp[-6].minor.yy161,
                                                            *(yymsp[0].minor.yy27)
                                                        );
                                                }
                                                delete yymsp[-3].minor.yy396;
                                                delete yymsp[0].minor.yy27;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 232: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy161;
                                                yygotominor.yy41 = q;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 233: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy161;
                                                q->database = *(yymsp[-1].minor.yy319);
                                                yygotominor.yy41 = q;
                                                objectForTokens = yygotominor.yy41;
                                                delete yymsp[-1].minor.yy319;
                                            }
        break;
      case 234: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 245: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==245);
{  yy_destructor(yypParser,249,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 235: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 246: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==246);
{  yy_destructor(yypParser,249,&yymsp[-3].minor);
}
        break;
      case 238: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy186 = new SqliteExpr();
                                            }
        break;
      case 240: /* returning ::= RETURNING selcollist */
{yygotominor.yy27 = yymsp[0].minor.yy27;}
        break;
      case 242: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning */
{
                                                yygotominor.yy41 = new SqliteUpdate(
                                                        *(yymsp[-7].minor.yy136),
                                                        yymsp[-6].minor.yy396->name1,
                                                        yymsp[-6].minor.yy396->name2,
                                                        yymsp[-5].minor.yy300 ? yymsp[-5].minor.yy300->notIndexedKw : false,
                                                        yymsp[-5].minor.yy300 ? yymsp[-5].minor.yy300->indexedBy : QString(),
                                                        *(yymsp[-3].minor.yy621),
														yymsp[-2].minor.yy553,
                                                        yymsp[-1].minor.yy186,
                                                        yymsp[-9].minor.yy161,
                                                        *(yymsp[0].minor.yy27)
                                                    );
                                                delete yymsp[-7].minor.yy136;
                                                delete yymsp[-6].minor.yy396;
                                                delete yymsp[-3].minor.yy621;
                                                delete yymsp[0].minor.yy27;
                                                if (yymsp[-5].minor.yy300)
                                                    delete yymsp[-5].minor.yy300;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 243: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy161;
                                                yygotominor.yy41 = q;
                                                objectForTokens = yygotominor.yy41;
                                                delete yymsp[0].minor.yy136;
                                            }
        break;
      case 244: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy161;
                                                q->database = *(yymsp[-1].minor.yy319);
                                                yygotominor.yy41 = q;
                                                objectForTokens = yygotominor.yy41;
                                                delete yymsp[-2].minor.yy136;
                                                delete yymsp[-1].minor.yy319;
                                            }
        break;
      case 247: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy621->append(ParserSetValue(*(yymsp[-2].minor.yy319), yymsp[0].minor.yy186));
                                                yygotominor.yy621 = yymsp[-4].minor.yy621;
                                                delete yymsp[-2].minor.yy319;
                                            }
        break;
      case 248: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy621->append(ParserSetValue(*(yymsp[-3].minor.yy173), yymsp[0].minor.yy186));
                                                yygotominor.yy621 = yymsp[-6].minor.yy621;
                                                delete yymsp[-3].minor.yy173;
                                            }
        break;
      case 249: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy621 = new ParserSetValueList();
                                                yygotominor.yy621->append(ParserSetValue(*(yymsp[-2].minor.yy319), yymsp[0].minor.yy186));
                                                delete yymsp[-2].minor.yy319;
                                            }
        break;
      case 250: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy621 = new ParserSetValueList();
                                                yygotominor.yy621->append(ParserSetValue(*(yymsp[-3].minor.yy173), yymsp[0].minor.yy186));
                                                delete yymsp[-3].minor.yy173;
                                            }
        break;
      case 251: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy621 = new ParserSetValueList();
                                            }
        break;
      case 252: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy621 = yymsp[-1].minor.yy621;
                                            }
        break;
      case 253: /* setlist ::= setlist COMMA ID_COL */
      case 254: /* setlist ::= ID_COL */ yytestcase(yyruleno==254);
{  yy_destructor(yypParser,280,&yymsp[-2].minor);
}
        break;
      case 255: /* idlist_opt ::= */
{yygotominor.yy173 = new QStringList();}
        break;
      case 256: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy173 = yymsp[-1].minor.yy173;}
        break;
      case 257: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy173 = yymsp[-2].minor.yy173;
                                                *(yygotominor.yy173) << *(yymsp[0].minor.yy319);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 258: /* idlist ::= nm */
{
                                                yygotominor.yy173 = new QStringList();
                                                *(yygotominor.yy173) << *(yymsp[0].minor.yy319);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 259: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy173 = new QStringList();
                                            }
        break;
      case 260: /* idlist ::= idlist COMMA ID_COL */
      case 261: /* idlist ::= ID_COL */ yytestcase(yyruleno==261);
{  yy_destructor(yypParser,274,&yymsp[-2].minor);
}
        break;
      case 263: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning */
{
                                                yygotominor.yy41 = new SqliteInsert(
                                                        yymsp[-6].minor.yy308->replace,
                                                        yymsp[-6].minor.yy308->orConflict,
                                                        yymsp[-4].minor.yy396->name1,
                                                        yymsp[-4].minor.yy396->name2,
                                                        *(yymsp[-3].minor.yy173),
                                                        yymsp[-2].minor.yy297,
                                                        yymsp[-7].minor.yy161,
                                                        yymsp[-1].minor.yy332,
                                                        *(yymsp[0].minor.yy27)
                                                    );
                                                delete yymsp[-4].minor.yy396;
                                                delete yymsp[-6].minor.yy308;
                                                delete yymsp[-3].minor.yy173;
                                                delete yymsp[0].minor.yy27;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 264: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning */
{
                                                yygotominor.yy41 = new SqliteInsert(
                                                        yymsp[-6].minor.yy308->replace,
                                                        yymsp[-6].minor.yy308->orConflict,
                                                        yymsp[-4].minor.yy396->name1,
                                                        yymsp[-4].minor.yy396->name2,
                                                        *(yymsp[-3].minor.yy173),
                                                        yymsp[-7].minor.yy161,
                                                        *(yymsp[0].minor.yy27)
                                                    );
                                                delete yymsp[-4].minor.yy396;
                                                delete yymsp[-6].minor.yy308;
                                                delete yymsp[-3].minor.yy173;
                                                delete yymsp[0].minor.yy27;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 265: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy308->replace;
                                                q->onConflict = yymsp[-1].minor.yy308->orConflict;
                                                q->with = yymsp[-2].minor.yy161;
                                                yygotominor.yy41 = q;
                                                objectForTokens = yygotominor.yy41;
                                                delete yymsp[-1].minor.yy308;
                                            }
        break;
      case 266: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy308->replace;
                                                q->onConflict = yymsp[-3].minor.yy308->orConflict;
                                                q->with = yymsp[-4].minor.yy161;
                                                q->database = *(yymsp[-1].minor.yy319);
                                                yygotominor.yy41 = q;
                                                objectForTokens = yygotominor.yy41;
                                                delete yymsp[-3].minor.yy308;
                                                delete yymsp[-1].minor.yy319;
                                            }
        break;
      case 267: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,249,&yymsp[-3].minor);
  yy_destructor(yypParser,283,&yymsp[-2].minor);
}
        break;
      case 268: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,249,&yymsp[-5].minor);
  yy_destructor(yypParser,283,&yymsp[-4].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 269: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy308 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy136));
                                                delete yymsp[0].minor.yy136;
                                            }
        break;
      case 270: /* insert_cmd ::= REPLACE */
{yygotominor.yy308 = new ParserStubInsertOrReplace(true);}
        break;
      case 271: /* upsert ::= */
{
                                                yygotominor.yy332 = nullptr;
                                            }
        break;
      case 272: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy332 = new SqliteUpsert(*(yymsp[-7].minor.yy226), yymsp[-5].minor.yy186, *(yymsp[-1].minor.yy621), yymsp[0].minor.yy186);
                                                delete yymsp[-7].minor.yy226;
                                                delete yymsp[-1].minor.yy621;
                                                objectForTokens = yygotominor.yy332;
                                            }
        break;
      case 273: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy332 = new SqliteUpsert(*(yymsp[-4].minor.yy226), yymsp[-2].minor.yy186);
                                                delete yymsp[-4].minor.yy226;
                                                objectForTokens = yygotominor.yy332;
                                            }
        break;
      case 274: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy332 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy332;
                                            }
        break;
      case 275: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,227,&yymsp[-3].minor);
}
        break;
      case 276: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 277: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==277);
{  yy_destructor(yypParser,227,&yymsp[-5].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 278: /* exprx ::= tnm DOT ID_TAB|ID_COL */
{  yy_destructor(yypParser,235,&yymsp[-2].minor);
}
        break;
      case 279: /* exprx ::= tnm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,235,&yymsp[-4].minor);
  yy_destructor(yypParser,203,&yymsp[-2].minor);
}
        break;
      case 280: /* exprx ::= expr COLLATE ID_COLLATE */
      case 281: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==281);
{  yy_destructor(yypParser,227,&yymsp[-2].minor);
}
        break;
      case 282: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 283: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initRowValue(*(yymsp[-1].minor.yy615));
                                                delete yymsp[-1].minor.yy615;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 284: /* exprx ::= tnm */
{
                                                yygotominor.yy186 = new SqliteExpr();
												if (yymsp[0].minor.yy380->isLiteral())
													yygotominor.yy186->initLiteral(yymsp[0].minor.yy380->toLiteral());
												else
													yygotominor.yy186->initId(yymsp[0].minor.yy380->toName());
													//parserContext->errorBeforeLastToken("Syntax error <expected literal value>");

                                                delete yymsp[0].minor.yy380;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 285: /* exprx ::= tnm DOT nm */
{
                                                yygotominor.yy186 = new SqliteExpr();
												if (yymsp[-2].minor.yy380->isName())
													yygotominor.yy186->initId(yymsp[-2].minor.yy380->toName(), *(yymsp[0].minor.yy319));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-2].minor.yy380;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 286: /* exprx ::= tnm DOT */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy186;
                                                if (yymsp[-1].minor.yy380->isName())
                                                {
                                                    yygotominor.yy186->initId(yymsp[-1].minor.yy380->toName(), QString());
                                                    parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                                }
                                                else
                                                    parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-1].minor.yy380;
                                            }
        break;
      case 287: /* exprx ::= tnm DOT nm DOT nm */
{
                                                yygotominor.yy186 = new SqliteExpr();
												if (yymsp[-4].minor.yy380->isName())
													yygotominor.yy186->initId(yymsp[-4].minor.yy380->toName(), *(yymsp[-2].minor.yy319), *(yymsp[0].minor.yy319));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-4].minor.yy380;
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 288: /* exprx ::= tnm DOT nm DOT */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy186;
                                                if (yymsp[-3].minor.yy380->isName())
                                                {
                                                    yygotominor.yy186->initId(yymsp[-3].minor.yy380->toName(), *(yymsp[-1].minor.yy319), QString());
                                                    parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                                }
                                                else
                                                    parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-3].minor.yy380;
                                                delete yymsp[-1].minor.yy319;
                                            }
        break;
      case 289: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 290: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initCollate(yymsp[-2].minor.yy186, *(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 291: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initCast(yymsp[-3].minor.yy186, yymsp[-1].minor.yy267);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 292: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy130), *(yymsp[-1].minor.yy615));
                                                delete yymsp[-2].minor.yy130;
                                                delete yymsp[-1].minor.yy615;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 293: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 294: /* exprx ::= expr AND expr */
      case 295: /* exprx ::= expr OR expr */ yytestcase(yyruleno==295);
      case 296: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==296);
      case 297: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==297);
      case 298: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==298);
      case 299: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==299);
      case 300: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==300);
      case 301: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==301);
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initBinOp(yymsp[-2].minor.yy186, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy186);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 302: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initLike(yymsp[-3].minor.yy186, *(yymsp[-2].minor.yy225), *(yymsp[-1].minor.yy274), yymsp[0].minor.yy186);
                                                delete yymsp[-2].minor.yy225;
                                                delete yymsp[-1].minor.yy274;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 303: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initLike(yymsp[-5].minor.yy186, *(yymsp[-4].minor.yy225), *(yymsp[-3].minor.yy274), yymsp[-2].minor.yy186, yymsp[0].minor.yy186);
                                                delete yymsp[-4].minor.yy225;
                                                delete yymsp[-3].minor.yy274;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 304: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initNull(yymsp[-1].minor.yy186, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 305: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initNull(yymsp[-2].minor.yy186, "NOT NULL");
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 306: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initIs(yymsp[-3].minor.yy186, *(yymsp[-1].minor.yy225), yymsp[0].minor.yy186);
                                                delete yymsp[-1].minor.yy225;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 307: /* exprx ::= expr IS NOT DISTINCT FROM expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initDistinct(yymsp[-5].minor.yy186, true, yymsp[0].minor.yy186);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 308: /* exprx ::= expr IS DISTINCT FROM expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initDistinct(yymsp[-4].minor.yy186, false, yymsp[0].minor.yy186);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 309: /* exprx ::= NOT expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initUnaryOp(yymsp[0].minor.yy186, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 310: /* exprx ::= BITNOT expr */
      case 312: /* exprx ::= PLUS expr */ yytestcase(yyruleno==312);
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initUnaryOp(yymsp[0].minor.yy186, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 311: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                if (yymsp[0].minor.yy186->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy186->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy186->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy186;
                                                }
                                                else
                                                {
                                                    yygotominor.yy186->initUnaryOp(yymsp[0].minor.yy186, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 313: /* exprx ::= expr PTR expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initPtrOp(yymsp[-2].minor.yy186, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy186);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 314: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initBetween(yymsp[-5].minor.yy186, *(yymsp[-4].minor.yy225), yymsp[-2].minor.yy186, yymsp[0].minor.yy186);
                                                delete yymsp[-4].minor.yy225;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 315: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initIn(yymsp[-5].minor.yy186, *(yymsp[-4].minor.yy225), *(yymsp[-1].minor.yy615));
                                                delete yymsp[-4].minor.yy225;
                                                delete yymsp[-1].minor.yy615;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 316: /* exprx ::= LP select RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initSubSelect(yymsp[-1].minor.yy297);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 317: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initIn(yymsp[-5].minor.yy186, *(yymsp[-4].minor.yy225), yymsp[-1].minor.yy297);
                                                delete yymsp[-4].minor.yy225;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 318: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initIn(yymsp[-4].minor.yy186, *(yymsp[-3].minor.yy225), *(yymsp[-1].minor.yy319), *(yymsp[0].minor.yy319));
                                                delete yymsp[-3].minor.yy225;
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 319: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initExists(yymsp[-1].minor.yy297);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 320: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initCase(yymsp[-3].minor.yy186, *(yymsp[-2].minor.yy615), yymsp[-1].minor.yy186);
                                                delete yymsp[-2].minor.yy615;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 321: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 322: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy319));
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy186;
                                            }
        break;
      case 323: /* exprx ::= ID LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initWindowFunction(yymsp[-5].minor.yy0->value, *(yymsp[-3].minor.yy130), *(yymsp[-2].minor.yy615), yymsp[0].minor.yy181);
                                                delete yymsp[-3].minor.yy130;
                                                delete yymsp[-2].minor.yy615;
                                                objectForTokens = yygotominor.yy186;
											}
        break;
      case 324: /* exprx ::= ID LP STAR RP filter_over */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                yygotominor.yy186->initWindowFunction(yymsp[-4].minor.yy0->value, yymsp[0].minor.yy181);
                                                objectForTokens = yygotominor.yy186;
											}
        break;
      case 325: /* expr ::= */
{
                                                yygotominor.yy186 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy186;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 329: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy274 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 330: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy615->append(yymsp[-2].minor.yy186);
                                                yymsp[-4].minor.yy615->append(yymsp[0].minor.yy186);
                                                yygotominor.yy615 = yymsp[-4].minor.yy615;
                                            }
        break;
      case 331: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy615 = new ParserExprList();
                                                yygotominor.yy615->append(yymsp[-2].minor.yy186);
                                                yygotominor.yy615->append(yymsp[0].minor.yy186);
                                            }
        break;
      case 338: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy615->append(yymsp[0].minor.yy186);
                                                yygotominor.yy615 = yymsp[-2].minor.yy615;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 339: /* nexprlist ::= exprx */
{
                                                yygotominor.yy615 = new ParserExprList();
                                                yygotominor.yy615->append(yymsp[0].minor.yy186);
                                            }
        break;
      case 340: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy41 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy225),
                                                        *(yymsp[-8].minor.yy225),
                                                        *(yymsp[-7].minor.yy319),
                                                        *(yymsp[-6].minor.yy319),
                                                        *(yymsp[-4].minor.yy319),
                                                        *(yymsp[-2].minor.yy226),
                                                        yymsp[0].minor.yy186
                                                    );
                                                delete yymsp[-8].minor.yy225;
                                                delete yymsp[-10].minor.yy225;
                                                delete yymsp[-7].minor.yy319;
                                                delete yymsp[-6].minor.yy319;
                                                delete yymsp[-4].minor.yy319;
                                                delete yymsp[-2].minor.yy226;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 341: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,203,&yymsp[-3].minor);
}
        break;
      case 346: /* idxlist_opt ::= */
{yygotominor.yy627 = new ParserIndexedColumnList();}
        break;
      case 347: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy627 = yymsp[-1].minor.yy627;}
        break;
      case 348: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy627->append(yymsp[0].minor.yy110);
                                                yygotominor.yy627 = yymsp[-2].minor.yy627;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 349: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy627 = new ParserIndexedColumnList();
                                                yygotominor.yy627->append(yymsp[0].minor.yy110);
                                            }
        break;
      case 350: /* idxlist_single ::= nm collate sortorder */
      case 351: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==351);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy319),
                                                        *(yymsp[-1].minor.yy319),
                                                        *(yymsp[0].minor.yy35)
                                                    );
                                                yygotominor.yy110 = obj;
                                                delete yymsp[0].minor.yy35;
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy110;
                                            }
        break;
      case 355: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy41 = new SqliteDropIndex(*(yymsp[-1].minor.yy225), yymsp[0].minor.yy396->name1, yymsp[0].minor.yy396->name2);
                                                delete yymsp[-1].minor.yy225;
                                                delete yymsp[0].minor.yy396;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 358: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy41 = new SqliteVacuum(yymsp[0].minor.yy186);
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 359: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy41 = new SqliteVacuum(*(yymsp[-1].minor.yy319), yymsp[0].minor.yy186);
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 362: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy41 = new SqlitePragma(*(yymsp[-1].minor.yy319), *(yymsp[0].minor.yy319));
                                                delete yymsp[-1].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 363: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 365: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==365);
{
                                                yygotominor.yy41 = new SqlitePragma(*(yymsp[-3].minor.yy319), *(yymsp[-2].minor.yy319), *(yymsp[0].minor.yy393), true);
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy393;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 364: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 366: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==366);
{
                                                yygotominor.yy41 = new SqlitePragma(*(yymsp[-4].minor.yy319), *(yymsp[-3].minor.yy319), *(yymsp[-1].minor.yy393), false);
                                                delete yymsp[-4].minor.yy319;
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-1].minor.yy393;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 370: /* nmnum ::= nm */
{
                                                yygotominor.yy393 = new QVariant(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 371: /* nmnum ::= ON */
      case 372: /* nmnum ::= DELETE */ yytestcase(yyruleno==372);
      case 373: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==373);
{yygotominor.yy393 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 376: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy393->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy393) = -(yymsp[0].minor.yy393->toDouble());
                                                else if (yymsp[0].minor.yy393->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy393) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy393) = -(yymsp[0].minor.yy393->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy393 = yymsp[0].minor.yy393;
                                            }
        break;
      case 379: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy41 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy130),
                                                        *(yymsp[-11].minor.yy225),
                                                        *(yymsp[-10].minor.yy319),
                                                        *(yymsp[-9].minor.yy319),
                                                        *(yymsp[-5].minor.yy319),
                                                        *(yymsp[-8].minor.yy120),
                                                        yymsp[-7].minor.yy259,
                                                        *(yymsp[-4].minor.yy456),
                                                        yymsp[-3].minor.yy186,
                                                        *(yymsp[-1].minor.yy240),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy225;
                                                delete yymsp[-13].minor.yy130;
                                                delete yymsp[-8].minor.yy120;
                                                delete yymsp[-4].minor.yy456;
                                                delete yymsp[-10].minor.yy319;
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-9].minor.yy319;
                                                delete yymsp[-1].minor.yy240;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 380: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy41 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy130),
                                                        *(yymsp[-8].minor.yy225),
                                                        *(yymsp[-7].minor.yy319),
                                                        *(yymsp[-6].minor.yy319),
                                                        *(yymsp[-2].minor.yy319),
                                                        *(yymsp[-5].minor.yy120),
                                                        yymsp[-4].minor.yy259,
                                                        *(yymsp[-1].minor.yy456),
                                                        yymsp[0].minor.yy186,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy225;
                                                delete yymsp[-10].minor.yy130;
                                                delete yymsp[-5].minor.yy120;
                                                delete yymsp[-1].minor.yy456;
                                                delete yymsp[-7].minor.yy319;
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[-6].minor.yy319;
                                                objectForTokens = yygotominor.yy41;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 381: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy41 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy130),
													*(yymsp[-10].minor.yy225),
													*(yymsp[-9].minor.yy319),
													*(yymsp[-8].minor.yy319),
													*(yymsp[-4].minor.yy319),
													*(yymsp[-7].minor.yy120),
													yymsp[-6].minor.yy259,
													*(yymsp[-3].minor.yy456),
													yymsp[-2].minor.yy186,
													*(yymsp[0].minor.yy240),
													3
                                                );
                                                delete yymsp[-10].minor.yy225;
                                                delete yymsp[-12].minor.yy130;
                                                delete yymsp[-7].minor.yy120;
                                                delete yymsp[-3].minor.yy456;
                                                delete yymsp[-9].minor.yy319;
                                                delete yymsp[-4].minor.yy319;
                                                delete yymsp[-8].minor.yy319;
                                                delete yymsp[0].minor.yy240;
                                                objectForTokens = yygotominor.yy41;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 382: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,205,&yymsp[-8].minor);
  yy_destructor(yypParser,203,&yymsp[-5].minor);
  yy_destructor(yypParser,298,&yymsp[-3].minor);
  yy_destructor(yypParser,299,&yymsp[-2].minor);
}
        break;
      case 385: /* trigger_time ::= BEFORE */
{yygotominor.yy120 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 386: /* trigger_time ::= AFTER */
{yygotominor.yy120 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 387: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy120 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 388: /* trigger_time ::= */
{yygotominor.yy120 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 389: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy259 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy259;
                                            }
        break;
      case 390: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy259 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy259;
                                            }
        break;
      case 391: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy259 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy259;
                                            }
        break;
      case 392: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy259 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy173));
                                                delete yymsp[0].minor.yy173;
                                                objectForTokens = yygotominor.yy259;
                                            }
        break;
      case 393: /* foreach_clause ::= */
{yygotominor.yy456 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 394: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy456 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 397: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy240->append(yymsp[-1].minor.yy41);
                                                yygotominor.yy240 = yymsp[-2].minor.yy240;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 398: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy240 = new ParserQueryList();
                                                yygotominor.yy240->append(yymsp[-1].minor.yy41);
                                            }
        break;
      case 399: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy240 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 404: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 405: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy41 = new SqliteDropTrigger(*(yymsp[-1].minor.yy225), yymsp[0].minor.yy396->name1, yymsp[0].minor.yy396->name2);
                                                delete yymsp[-1].minor.yy225;
                                                delete yymsp[0].minor.yy396;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 408: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy41 = new SqliteAttach(*(yymsp[-4].minor.yy225), yymsp[-3].minor.yy186, yymsp[-1].minor.yy186, yymsp[0].minor.yy186);
                                                delete yymsp[-4].minor.yy225;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 409: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy41 = new SqliteDetach(*(yymsp[-1].minor.yy225), yymsp[0].minor.yy186);
                                                delete yymsp[-1].minor.yy225;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 414: /* cmd ::= REINDEX */
{yygotominor.yy41 = new SqliteReindex();}
        break;
      case 415: /* cmd ::= REINDEX nm dbnm */
      case 416: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==416);
{
                                                yygotominor.yy41 = new SqliteReindex(*(yymsp[-1].minor.yy319), *(yymsp[0].minor.yy319));
                                                delete yymsp[-1].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 419: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy41 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 420: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy41 = new SqliteAnalyze(*(yymsp[-1].minor.yy319), *(yymsp[0].minor.yy319));
                                                delete yymsp[-1].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 423: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy41 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy396->name1,
                                                        yymsp[-3].minor.yy396->name2,
                                                        *(yymsp[0].minor.yy319)
                                                    );
                                                delete yymsp[0].minor.yy319;
                                                delete yymsp[-3].minor.yy396;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 424: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy41 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy396->name1,
                                                        yymsp[-3].minor.yy396->name2,
                                                        *(yymsp[-1].minor.yy225),
                                                        yymsp[0].minor.yy3
                                                    );
                                                delete yymsp[-1].minor.yy225;
                                                delete yymsp[-3].minor.yy396;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 425: /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
{
                                                yygotominor.yy41 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy396->name1,
                                                        yymsp[-3].minor.yy396->name2,
                                                        *(yymsp[-1].minor.yy225),
                                                        *(yymsp[0].minor.yy319)
                                                    );
                                                delete yymsp[-1].minor.yy225;
                                                delete yymsp[-3].minor.yy396;
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 426: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,207,&yymsp[-3].minor);
}
        break;
      case 432: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy41 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy225),
                                                        *(yymsp[-3].minor.yy319),
                                                        *(yymsp[-2].minor.yy319),
                                                        *(yymsp[0].minor.yy319)
                                                    );
                                                delete yymsp[-4].minor.yy225;
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 433: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy41 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy225),
                                                        *(yymsp[-6].minor.yy319),
                                                        *(yymsp[-5].minor.yy319),
                                                        *(yymsp[-3].minor.yy319),
                                                        *(yymsp[-1].minor.yy173)
                                                    );
                                                delete yymsp[-6].minor.yy319;
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-7].minor.yy225;
                                                delete yymsp[-1].minor.yy173;
                                                objectForTokens = yygotominor.yy41;
                                            }
        break;
      case 436: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy173 = new QStringList();
                                                yygotominor.yy173->append((yymsp[0].minor.yy319)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 437: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy173->append((yymsp[0].minor.yy319)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy173 = yymsp[-2].minor.yy173;
                                                delete yymsp[0].minor.yy319;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 439: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy319->append(" "+ *(yymsp[0].minor.yy319));
                                                yygotominor.yy319 = yymsp[-1].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 440: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy319 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 441: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy319 = new QString("(");
                                                yygotominor.yy319->append(*(yymsp[-1].minor.yy319));
                                                yygotominor.yy319->append(")");
                                                delete yymsp[-1].minor.yy319;
                                            }
        break;
      case 443: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy319 = yymsp[-3].minor.yy319;
                                                yygotominor.yy319->append("(");
                                                yygotominor.yy319->append(*(yymsp[-1].minor.yy319));
                                                yygotominor.yy319->append(")");
                                                delete yymsp[-1].minor.yy319;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 444: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy319 = yymsp[-1].minor.yy319;
                                                yygotominor.yy319->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 445: /* with ::= */
{yygotominor.yy161 = nullptr;}
        break;
      case 446: /* with ::= WITH wqlist */
{
                                                yygotominor.yy161 = new SqliteWith();
												yygotominor.yy161->cteList = *(yymsp[0].minor.yy164);
												delete yymsp[0].minor.yy164;
                                                objectForTokens = yygotominor.yy161;
                                            }
        break;
      case 447: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy161 = new SqliteWith();
												yygotominor.yy161->cteList = *(yymsp[0].minor.yy164);
                                                yygotominor.yy161->recursive = true;
												delete yymsp[0].minor.yy164;
                                                objectForTokens = yygotominor.yy161;
                                            }
        break;
      case 448: /* wqas ::= AS */
{yygotominor.yy21 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::ANY);}
        break;
      case 449: /* wqas ::= AS MATERIALIZED */
{yygotominor.yy21 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::MATERIALIZED);}
        break;
      case 450: /* wqas ::= AS NOT MATERIALIZED */
{yygotominor.yy21 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::NOT_MATERIALIZED);}
        break;
      case 451: /* wqlist ::= wqcte */
{
												yygotominor.yy164 = new ParserCteList();
                                                yygotominor.yy164->append(yymsp[0].minor.yy146);
                                            }
        break;
      case 452: /* wqlist ::= wqlist COMMA wqcte */
{
                                                yygotominor.yy164 = yymsp[-2].minor.yy164;
                                                yygotominor.yy164->append(yymsp[0].minor.yy146);
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 453: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 454: /* wqcte ::= nm idxlist_opt wqas LP select RP */
{
                                                yygotominor.yy146 = new SqliteWith::CommonTableExpression(*(yymsp[-5].minor.yy319), *(yymsp[-4].minor.yy627), yymsp[-1].minor.yy297, *(yymsp[-3].minor.yy21));
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-4].minor.yy627;
                                                delete yymsp[-3].minor.yy21;
												objectForTokens = yygotominor.yy146;
											}
        break;
      case 455: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy525 = new ParserWindowDefList();
												yygotominor.yy525->append(yymsp[0].minor.yy562);
											}
        break;
      case 456: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy525->append(yymsp[0].minor.yy562);
												yygotominor.yy525 = yymsp[-2].minor.yy525;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 457: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy562 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy319), yymsp[-1].minor.yy162);
												delete yymsp[-4].minor.yy319;
												objectForTokens = yygotominor.yy562;
											}
        break;
      case 458: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy162 = new SqliteWindowDefinition::Window();
												yygotominor.yy162->initPartitionBy(QString(), *(yymsp[-2].minor.yy615), *(yymsp[-1].minor.yy226), yymsp[0].minor.yy149);
												delete yymsp[-2].minor.yy615;
												delete yymsp[-1].minor.yy226;
												objectForTokens = yygotominor.yy162;
											}
        break;
      case 459: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy162 = new SqliteWindowDefinition::Window();
												yygotominor.yy162->initPartitionBy(*(yymsp[-5].minor.yy319), *(yymsp[-2].minor.yy615), *(yymsp[-1].minor.yy226), yymsp[0].minor.yy149);
												delete yymsp[-2].minor.yy615;
												delete yymsp[-5].minor.yy319;
												delete yymsp[-1].minor.yy226;
												objectForTokens = yygotominor.yy162;
											}
        break;
      case 460: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy162 = new SqliteWindowDefinition::Window();
												yygotominor.yy162->initOrderBy(QString(), *(yymsp[-1].minor.yy226), yymsp[0].minor.yy149);
												delete yymsp[-1].minor.yy226;
												objectForTokens = yygotominor.yy162;
											}
        break;
      case 461: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy162 = new SqliteWindowDefinition::Window();
												yygotominor.yy162->initOrderBy(*(yymsp[-4].minor.yy319), *(yymsp[-1].minor.yy226), yymsp[0].minor.yy149);
												delete yymsp[-1].minor.yy226;
												delete yymsp[-4].minor.yy319;
												objectForTokens = yygotominor.yy162;
											}
        break;
      case 462: /* window ::= frame_opt */
{
												yygotominor.yy162 = new SqliteWindowDefinition::Window();
												yygotominor.yy162->init(QString(), yymsp[0].minor.yy149);
												objectForTokens = yygotominor.yy162;
											}
        break;
      case 463: /* window ::= nm frame_opt */
{
												yygotominor.yy162 = new SqliteWindowDefinition::Window();
												yygotominor.yy162->init(QString(), yymsp[0].minor.yy149);
												delete yymsp[-1].minor.yy319;
												objectForTokens = yygotominor.yy162;
											}
        break;
      case 464: /* frame_opt ::= */
{yygotominor.yy149 = nullptr;}
        break;
      case 465: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy149 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy143), yymsp[-1].minor.yy285, nullptr, *(yymsp[0].minor.yy237));
												delete yymsp[-2].minor.yy143;
												delete yymsp[0].minor.yy237;
												objectForTokens = yygotominor.yy149;
											}
        break;
      case 466: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy149 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy143), yymsp[-3].minor.yy285, yymsp[-1].minor.yy285, *(yymsp[0].minor.yy237));
												delete yymsp[-5].minor.yy143;
												delete yymsp[0].minor.yy237;
												objectForTokens = yygotominor.yy149;
											}
        break;
      case 467: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy143 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 468: /* frame_bound_s ::= frame_bound */
      case 470: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==470);
{
												yygotominor.yy285 = yymsp[0].minor.yy285;
												objectForTokens = yygotominor.yy285;
											}
        break;
      case 469: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 471: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==471);
      case 473: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==473);
{
												yygotominor.yy285 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy285;
											}
        break;
      case 472: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy285 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy186, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy285;
											}
        break;
      case 474: /* frame_exclude_opt ::= */
{
												yygotominor.yy237 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 475: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy237 = yymsp[0].minor.yy237;
											}
        break;
      case 476: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy237 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 477: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy237 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 478: /* frame_exclude ::= GROUP */
{
												yygotominor.yy237 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 479: /* frame_exclude ::= TIES */
{
												yygotominor.yy237 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 480: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy525 = yymsp[0].minor.yy525;
											}
        break;
      case 481: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy181 = new SqliteFilterOver(yymsp[-1].minor.yy39, yymsp[0].minor.yy11);
												objectForTokens = yygotominor.yy181;
											}
        break;
      case 482: /* filter_over ::= over_clause */
{
												yygotominor.yy181 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy11);
												objectForTokens = yygotominor.yy181;
											}
        break;
      case 483: /* filter_over ::= filter_clause */
{
												yygotominor.yy181 = new SqliteFilterOver(yymsp[0].minor.yy39, nullptr);
												objectForTokens = yygotominor.yy181;
											}
        break;
      case 484: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy11 = new SqliteFilterOver::Over(yymsp[-1].minor.yy162);
												objectForTokens = yygotominor.yy11;
											}
        break;
      case 485: /* over_clause ::= OVER nm */
{
												yygotominor.yy11 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy319));
												delete yymsp[0].minor.yy319;
												objectForTokens = yygotominor.yy11;
											}
        break;
      case 486: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy39 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy186);
												objectForTokens = yygotominor.yy39;
											}
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
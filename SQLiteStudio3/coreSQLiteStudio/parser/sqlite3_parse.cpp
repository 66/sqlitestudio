/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include "common/global.h"
#include "common/unused.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecopy.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser/ast/sqlitewith.h"
#include "parser/ast/sqliteupsert.h"
#include "parser/ast/sqlitewindowdefinition.h"
#include "parser/ast/sqlitefilterover.h"
#include "parser/ast/sqlitenulls.h"
#include <QObject>
#include <QDebug>
#include <limits.h>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 325
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 79
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  SqliteUpsert* yy8;
  ParserCteList* yy9;
  ParserExprList* yy15;
  SqliteFilterOver::Over* yy23;
  SqliteSelect::Core::SingleSource* yy25;
  SqliteLimit* yy36;
  ParserIndexedBy* yy48;
  SqliteNulls* yy51;
  SqliteInitially* yy72;
  ParserIndexedColumnList* yy87;
  SqliteSortOrder* yy101;
  ParserQueryList* yy102;
  SqliteSelect* yy129;
  ParserDeferSubClause* yy137;
  SqliteWindowDefinition::Window::Frame::Bound* yy153;
  SqliteWindowDefinition::Window::Frame* yy161;
  SqliteSelect::Core* yy174;
  SqliteWindowDefinition::Window* yy198;
  SqliteWith::CommonTableExpression* yy206;
  SqliteCreateTable::Constraint* yy214;
  SqliteCreateTrigger::Event* yy223;
  SqliteSelect::Core::JoinConstraint* yy263;
  SqliteWindowDefinition* yy274;
  SqliteColumnType* yy297;
  ParserCreateTableColumnConstraintList* yy299;
  SqliteCreateTrigger::Scope* yy300;
  SqliteIndexedColumn* yy308;
  QVariant* yy309;
  SqliteSelect::Core::JoinOp* yy317;
  ParserStubExplain* yy331;
  ParserStubInsertOrReplace* yy368;
  SqliteWindowDefinition::Window::Frame::RangeOrRows* yy370;
  ParserTermOrLiteral* yy374;
  ParserStubTransDetails* yy380;
  SqliteCreateTable::Column* yy387;
  SqliteQuery* yy395;
  ParserOtherSourceList* yy396;
  SqliteForeignKey::Condition::Reaction* yy400;
  QStringList* yy407;
  SqliteExpr* yy408;
  ParserFkConditionList* yy409;
  bool* yy411;
  ParserStubAlias* yy424;
  ParserWindowDefList* yy483;
  QString* yy487;
  SqliteConflictAlgo* yy490;
  SqliteCreateTable::Column::Constraint* yy496;
  SqliteSelect::CompoundOperator* yy502;
  SqliteCreateTrigger::Time* yy516;
  SqliteExpr::LikeOp* yy520;
  SqliteWith::CommonTableExpression::AsMode* yy543;
  SqliteFilterOver::Filter* yy549;
  ParserOrderByList* yy555;
  ParserCreateTableConstraintList* yy565;
  ParserSetValueList* yy585;
  SqliteWindowDefinition::Window::Frame::Exclude* yy591;
  ParserCreateTableColumnList* yy594;
  ParserResultColumnList* yy597;
  SqliteSelect::Core::JoinSource* yy607;
  SqliteWith* yy617;
  ParserExprNestedList* yy630;
  SqliteFilterOver* yy631;
  int* yy634;
  SqliteForeignKey::Condition* yy643;
  ParserFullName* yy648;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 857
#define YYNRULE 478
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2827)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   520,  157,  158,  849,  449,  446,  445,  854,   27,   65,
 /*    10 */   519,  347,  511,  425,  808,  808,   62,   62,   63,   63,
 /*    20 */    63,   63,  444,   61,   61,   61,   61,   60,   60,   59,
 /*    30 */    59,   59,   58,  255,  711,  849,  797,  162,   64,   65,
 /*    40 */   519,  347,  608,   56,  808,  808,   62,   62,   63,   63,
 /*    50 */    63,   63,  516,   61,   61,   61,   61,   60,   60,   59,
 /*    60 */    59,   59,   58,  255,  430, 1258,   60,   60,   59,   59,
 /*    70 */    59,   58,  255,  798,  359,  710,  706,  848,   54,   63,
 /*    80 */    63,   63,   63,   40,   61,   61,   61,   61,   60,   60,
 /*    90 */    59,   59,   59,   58,  255,   51,   52,  704,  820,  693,
 /*   100 */   693,  379,   53, 1025,  823,   59,   59,   59,   58,  255,
 /*   110 */     2, 1025,  822,  821,  820,  806,  287,  508, 1025,  291,
 /*   120 */   820,  846,  645,  847,  846,  520,  823,  157,  673,  355,
 /*   130 */   449,  446,  445,  806,  822,  821,  820,  511, 1025,  549,
 /*   140 */   259,   39,  138,  335,  672, 1091,  457,   71,  444,  573,
 /*   150 */   573, 1025,  848, 1025, 1025,  847,  846, 1025,  550,  551,
 /*   160 */    42,  293, 1025, 1025, 1025, 1025, 1025, 1025,  806,  256,
 /*   170 */   450,  806,   70,  796,   12,  247,  465,  516,  698,  697,
 /*   180 */   480,   63,   63,   63,   63, 1025,   61,   61,   61,   61,
 /*   190 */    60,   60,   59,   59,   59,   58,  255,  740,  798,  849,
 /*   200 */   589,  824,  807,   54,  825,  590,   61,   61,   61,   61,
 /*   210 */    60,   60,   59,   59,   59,   58,  255,  849,  394,  740,
 /*   220 */    51,   52,  799,  849,  495,  740,  818,   53, 1091,  802,
 /*   230 */   289,  552,  788,  416,  462,    2, 1091,  848,  622,  848,
 /*   240 */   806,  252,  508, 1091,  857,  820,  846,  799,  819,  225,
 /*   250 */   520,  823,  948,  677,  849,  661,  662,  518,  806,  822,
 /*   260 */   821,  820,  511, 1091,  174,  121,  333,  455,  328,  454,
 /*   270 */   159,  117,  681,  404,  597,   77, 1091,  676, 1091, 1091,
 /*   280 */   692,  799,  137,  771,  326,  476,  463, 1091, 1091, 1091,
 /*   290 */  1091,  646, 1091,  806,  238,  237,  806,  172,  796,   12,
 /*   300 */   530,   88,  516,  598,  848,  600,  574,  374,  599,   68,
 /*   310 */  1091,  853,  778,  136,  334,  688,  523,  818,  336,  820,
 /*   320 */   703,  505,  849,  798,  777,  823,  848,  622,   54,  422,
 /*   330 */   848,  848,  537,  822,  821,  820,  756,  847,  846,  819,
 /*   340 */   210,  364,  576,  847,  846,   51,   52,  603,  518,  538,
 /*   350 */   537,  855,   53, 1076,  490,  795,  805,  849,  171,  660,
 /*   360 */     2, 1076,   85,  559,   77,  806,  849,  508, 1076,  543,
 /*   370 */   820,  846,  811,  498,  847,  846,  823,   75,  537,  189,
 /*   380 */   491,  733,  369,  806,  822,  821,  820,  549, 1076,  453,
 /*   390 */   824,  805,  558,  825,  557,  320,   87,  556,  765,  402,
 /*   400 */   848, 1076,  747, 1076, 1076,  659,  550,  407,  848,  849,
 /*   410 */  1175, 1175, 1076,  801, 1076, 1076,  818, 1076,  806,   58,
 /*   420 */   255,  806,  526,  796,   12,  507,  493,  735,    4,  848,
 /*   430 */   299,  435,  309,  489,  543, 1076,  742,  563,  819,  225,
 /*   440 */   276,  466,  847,  846, 1178,   56,  849,  518,   64,   65,
 /*   450 */   519,  347, 1175, 1175,  808,  808,   62,   62,   63,   63,
 /*   460 */    63,   63,  117,   61,   61,   61,   61,   60,   60,   59,
 /*   470 */    59,   59,   58,  255,  800,  476,  461,  847,  846,  408,
 /*   480 */   788,  849,  831,  563,  167,  760,  847,  846,  811,  498,
 /*   490 */   805,  392,  811, 1175, 1175,  759,   55,  374,   64,   65,
 /*   500 */   519,  347,  748,   66,  808,  808,   62,   62,   63,   63,
 /*   510 */    63,   63,  794,   61,   61,   61,   61,   60,   60,   59,
 /*   520 */    59,   59,   58,  255,  587,  805,  783,  849,  723,  847,
 /*   530 */   846,   64,   65,  519,  347, 1175, 1175,  808,  808,   62,
 /*   540 */    62,   63,   63,   63,   63,  778,   61,   61,   61,   61,
 /*   550 */    60,   60,   59,   59,   59,   58,  255,  777,  740,  373,
 /*   560 */   790,  789,  849,  785,  647,  254,  847,  846,  405,  111,
 /*   570 */   577,  332,  818,   45,  646,  780,  492, 1175, 1175,  540,
 /*   580 */   740,  192,  111,  830,   88,  848,  740,  848,  670,  331,
 /*   590 */   587,   69,  651,  650,  819,  210,  712, 1178,   86, 1178,
 /*   600 */  1179,  847,  846,  518,  424,  365, 1285,  540,  811,  263,
 /*   610 */    50,  633,   48, 1285,  713,   64,   65,  519,  347, 1175,
 /*   620 */  1175,  808,  808,   62,   62,   63,   63,   63,   63,  712,
 /*   630 */    61,   61,   61,   61,   60,   60,   59,   59,   59,   58,
 /*   640 */   255,  811,  277,  316,  849,  724,  319,  847,  846,  400,
 /*   650 */   793,  792,  849,  765,   64,   65,  519,  347, 1175, 1175,
 /*   660 */   808,  808,   62,   62,   63,   63,   63,   63,  811,   61,
 /*   670 */    61,   61,   61,   60,   60,   59,   59,   59,   58,  255,
 /*   680 */   278,  520,  847,  846,  849,  510,  793,  792,  357,  483,
 /*   690 */   337,  745,  718,  511,   14,  717,   64,   65,  519,  347,
 /*   700 */  1175, 1175,  808,  808,   62,   62,   63,   63,   63,   63,
 /*   710 */   716,   61,   61,   61,   61,   60,   60,   59,   59,   59,
 /*   720 */    58,  255,  130,  336,  788,  818,  849,  845,  811,  586,
 /*   730 */   849,  475,  646,  516,  843,  412,  848,  356,  848,  273,
 /*   740 */   272,  632,   88,  844,  818,  848,  686,  819,  210,  404,
 /*   750 */    78,  731,  499, 1179,  798, 1179,  518,  848,  168,   54,
 /*   760 */   788,  811,  108,  784,  847,  846,  819,  225,  117,  546,
 /*   770 */    23,  734,  847,  846,  782,  518,   51,   52,  790,  789,
 /*   780 */   334,  688,  548,   53,  547,  770,  474,  369,  811,  117,
 /*   790 */   740,    2, 1185,  577,    1,  581,  806,  849,  508,  817,
 /*   800 */   810,  820,  846,  401,  847,  846,  765,  823,  485,  753,
 /*   810 */    76,  818,  740,  136,  806,  822,  821,  820,  740,  849,
 /*   820 */   615, 1244,  849,  130,  848,  374,  848,  855,  365, 1284,
 /*   830 */  1293, 1293,  753,  819,  218,  849, 1284,   78,    8,  849,
 /*   840 */   167,  338,  518,  430,  742, 1193,  847,  846,  811,  806,
 /*   850 */   847,  846,  806,  769,  796,   12,  848,   64,   65,  519,
 /*   860 */   347,  827,   76,  808,  808,   62,   62,   63,   63,   63,
 /*   870 */    63,  520,   61,   61,   61,   61,   60,   60,   59,   59,
 /*   880 */    59,   58,  255,  511,  723,  479,  487,  720,   64,   65,
 /*   890 */   519,  347,  765,  423,  808,  808,   62,   62,   63,   63,
 /*   900 */    63,   63,  113,   61,   61,   61,   61,   60,   60,   59,
 /*   910 */    59,   59,   58,  255,  191, 1244,  829,  847,  846,  258,
 /*   920 */   520,  484,  495,  516,  654,  452,  460,  735,    4,  478,
 /*   930 */   536,  700,  511,  346,  534,  848,  486,  582,   56,  847,
 /*   940 */   846, 1187,  847,  846,  798,   69,  848,  849,  503,   54,
 /*   950 */   712,    6,  534,  628,  628,  847,  846,  340,  536,  847,
 /*   960 */   846,  345,  766, 1187,  849,  724,   51,   52,  713, 1187,
 /*   970 */   273,  272,  516,   53,  848,  248,  696,  818,  464,  764,
 /*   980 */   534,    2, 1182,  712,  574,  117,  806,  158,  508,   78,
 /*   990 */   848,  820,  846,  798, 1042, 1042,  324,  823,   54,  819,
 /*  1000 */   225,  582,   20,  111,  806,  822,  821,  820,  518,  790,
 /*  1010 */   789,  345,  705, 1187,  249,   51,   52,  275,   83,  364,
 /*  1020 */   575, 1187,   53,  349,  848,  342,  441,   22, 1187,  631,
 /*  1030 */     2,   78,  249,  496,  757,  806,  269,  508,  494,  806,
 /*  1040 */   820,  846,  806,  781,  796,   12,  823,  434, 1187,  399,
 /*  1050 */   779,  799,  442,  806,  822,  821,  820,   22,  374,  111,
 /*  1060 */   336, 1187,  619, 1187, 1187,  595,  117,  847,  846, 1293,
 /*  1070 */  1293,   44, 1187,  848, 1187, 1187,  799, 1187,  767,  380,
 /*  1080 */   619,  112,  512,  849,  847,  846,  379,  849,  806,  626,
 /*  1090 */   849,  806,  326,  796,   12, 1187,   64,   65,  519,  347,
 /*  1100 */   772,   74,  808,  808,   62,   62,   63,   63,   63,   63,
 /*  1110 */   799,   61,   61,   61,   61,   60,   60,   59,   59,   59,
 /*  1120 */    58,  255,  849, 1180,  267,  849,  117,   64,   65,  519,
 /*  1130 */   347,   19,  114,  808,  808,   62,   62,   63,   63,   63,
 /*  1140 */    63,  755,   61,   61,   61,   61,   60,   60,   59,   59,
 /*  1150 */    59,   58,  255,  519,  347,  382,  240,  808,  808,   62,
 /*  1160 */    62,   63,   63,   63,   63,  415,   61,   61,   61,   61,
 /*  1170 */    60,   60,   59,   59,   59,   58,  255,   64,   65,  519,
 /*  1180 */   347,  849,  682,  808,  808,   62,   62,   63,   63,   63,
 /*  1190 */    63,  826,   61,   61,   61,   61,   60,   60,   59,   59,
 /*  1200 */    59,   58,  255,  847,  846,  856,    3,  847,  846,  750,
 /*  1210 */   847,  846,  749,   64,   65,  519,  347,  743,  642,  808,
 /*  1220 */   808,   62,   62,   63,   63,   63,   63,   49,   61,   61,
 /*  1230 */    61,   61,   60,   60,   59,   59,   59,   58,  255,  679,
 /*  1240 */   624,  678,  847,  846,  410,  847,  846,  618,  849,  678,
 /*  1250 */   849,  804,  244,  243,  242,  815,  849,  848,   64,   65,
 /*  1260 */   519,  347,  514,    5,  808,  808,   62,   62,   63,   63,
 /*  1270 */    63,   63,  624,   61,   61,   61,   61,   60,   60,   59,
 /*  1280 */    59,   59,   58,  255,  431,  744,  850,  754,    4,  248,
 /*  1290 */   696,  168,  464,  687, 1336,  185,  524,    3,  849,  528,
 /*  1300 */   429,  847,  846,  591,  592,  418,  602,  168,   64,   65,
 /*  1310 */   519,  347,  848,   46,  808,  808,   62,   62,   63,   63,
 /*  1320 */    63,   63,  428,   61,   61,   61,   61,   60,   60,   59,
 /*  1330 */    59,   59,   58,  255,  811,  785,  509,  254,  849,   64,
 /*  1340 */    65,  519,  347,  685,  303,  808,  808,   62,   62,   63,
 /*  1350 */    63,   63,   63,   78,   61,   61,   61,   61,   60,   60,
 /*  1360 */    59,   59,   59,   58,  255,  613,  740,  741,  847,  846,
 /*  1370 */   847,  846,   18,  285,  668,  636,  847,  846,  666,  849,
 /*  1380 */   728,  117,   17,  613,   16,  637,  848, 1229,  740,   64,
 /*  1390 */    65,  519,  347,  848,  740,  808,  808,   62,   62,   63,
 /*  1400 */    63,   63,   63,  838,   61,   61,   61,   61,   60,   60,
 /*  1410 */    59,   59,   59,   58,  255,  849,  729,  565,  847,  846,
 /*  1420 */    64,   65,  519,  347,  190,   56,  808,  808,   62,   62,
 /*  1430 */    63,   63,   63,   63,  818,   61,   61,   61,   61,   60,
 /*  1440 */    60,   59,   59,   59,   58,  255,  110,  848,  107,   11,
 /*  1450 */   396,  739,    4,   44,  811,  323,  819,  118,  847,  846,
 /*  1460 */   166,  728,  728,  719,  555,  518,  774,  738,    4,  165,
 /*  1470 */    64,   65,  519,  347,  848,  848,  808,  808,   62,   62,
 /*  1480 */    63,   63,   63,   63,  836,   61,   61,   61,   61,   60,
 /*  1490 */    60,   59,   59,   59,   58,  255,  811, 1208,  849,  847,
 /*  1500 */   846,   64,   65,  519,  347,  497,  614,  808,  808,   62,
 /*  1510 */    62,   63,   63,   63,   63,  765,   61,   61,   61,   61,
 /*  1520 */    60,   60,   59,   59,   59,   58,  255,  164,  851,  163,
 /*  1530 */   605,  389,  388,  611,  346,  847,  846,   28,  301,  296,
 /*  1540 */   168,  848,  728,  579,  707,   44,   44,  848,  605,  699,
 /*  1550 */   366,   64,   65,  519,  347,  848,  702,  808,  808,   62,
 /*  1560 */    62,   63,   63,   63,   63,  520,   61,   61,   61,   61,
 /*  1570 */    60,   60,   59,   59,   59,   58,  255,  511, 1259,  124,
 /*  1580 */   487,  470,   64,   65,  519,  347,  736,    4,  808,  808,
 /*  1590 */    62,   62,   63,   63,   63,   63,  249,   61,   61,   61,
 /*  1600 */    61,   60,   60,   59,   59,   59,   58,  255,  167, 1257,
 /*  1610 */   468,  520,  387,  570,  818,  542,  811,  516,  847,  846,
 /*  1620 */     7,  724,  849,  511,  701,   15,  487,  848,  818,  695,
 /*  1630 */   486,  570,  849,  818,  345,  818,  819,  225,  798,  694,
 /*  1640 */   345,  848,  502,   54,  768,  518,  848,  848,  848,  728,
 /*  1650 */   819,  225,  723,  848,  116,  819,  225,  819,  225,  518,
 /*  1660 */    51,   52,  848,  516,  518,  690,  518,   53,  715,  458,
 /*  1670 */   730,  849,  262,  476,  477,    2,  488,  317,  391,  115,
 /*  1680 */   806,  318,  508,  848,  798,  847,  846,  476,  467,   54,
 /*  1690 */   848,  823,  268,  724,  395,  374,  969,   37,  806,  822,
 /*  1700 */   821,  820,  133,  634,  811,  849,   51,   52,  265,  374,
 /*  1710 */   849,  312,  849,   53,  374,  261,  374,  839,   25,  417,
 /*  1720 */   658,    2,  837,  772,  848,  451,  806,  834,  508,  772,
 /*  1730 */   848,  820,  846,  806,  649,  848,  806,  823,  796,   12,
 /*  1740 */   714,  325,  847,  846,  806,  822,  821,  820,   64,   65,
 /*  1750 */   519,  347,  847,  846,  808,  808,   62,   62,   63,   63,
 /*  1760 */    63,   63,  520,   61,   61,   61,   61,   60,   60,   59,
 /*  1770 */    59,   59,   58,  255,  511,  737,    4,  276,  466,  806,
 /*  1780 */    36,   78,  806,  448,  796,   12,  566,   64,   38,  519,
 /*  1790 */   347,  847,  846,  808,  808,   62,   62,   63,   63,   63,
 /*  1800 */    63,  622,   61,   61,   61,   61,   60,   60,   59,   59,
 /*  1810 */    59,   58,  255,  623,  516,  443,  345,  849,   82,  566,
 /*  1820 */   560,  835,   69, 1035,  811,  847,  846,  712,  818,  848,
 /*  1830 */   847,  846,  847,  846,  848,  798,  652,  597,   77,  156,
 /*  1840 */    54,  848,  308,  655,   81,  713,  260,  160,  459,   24,
 /*  1850 */   819,  118,  305,  724,  390,  848,  304,   51,   52,  518,
 /*  1860 */   712, 1293, 1293,  818,   53,  848,  598,   80,  600,  520,
 /*  1870 */   331,  599,    2,  667,  152,  439,  848,  806,  627,  508,
 /*  1880 */   188,  511,  820,  846,   10,  819,  118,  560,  823,  101,
 /*  1890 */   734,   21,  421,  849,  518,  806,  822,  821,  820,  170,
 /*  1900 */   266,   99,  849,  292,  849,  772,  123,  572,  283,  765,
 /*  1910 */   257,  290,   35,  849,  832,  568,  848,  339,  818,   34,
 /*  1920 */   282,  516,   33,  361,  848,  849,  828,  848,   32,   98,
 /*  1930 */   806,  848,  527,  806,  169,  796,   12,  847,  846,  848,
 /*  1940 */   819,  196,  798,  849,  765,  816,  818,   54,  849,  518,
 /*  1950 */   527,  127,  386,  849,  384,  849,  358,   97,  848,  848,
 /*  1960 */   818,  360,  178,  607,   51,   52,  300,  104,  819,  118,
 /*  1970 */    78,   53,  122,  848,  249,  601,  520,  518,  849,    2,
 /*  1980 */   322,  803,  819,  118,  806,  849,  508,  849,  511,  820,
 /*  1990 */   846,  518,  596,  288,  848,  823,  419,  564,  818,  765,
 /*  2000 */   594,  105,  806,  822,  821,  820,  848,  362,  849,  176,
 /*  2010 */   168,  848,   73,  847,  846,  588,  147,  385,  298,  849,
 /*  2020 */   819,  225,  847,  846,  847,  846,  635,  765,  516,  518,
 /*  2030 */   295,  383,   13,  847,  846,  818,  193,  806,  513,  818,
 /*  2040 */   806,  765,  796,   12,  849,  847,  846,  375,  848,  798,
 /*  2050 */   849,  848,  848,  182,   54,  664,  569,  819,  225,   92,
 /*  2060 */   725,  819,  206,  847,  846,  139,  518,  580,  847,  846,
 /*  2070 */   518,   51,   52,  847,  846,  847,  846,  545,   53,  500,
 /*  2080 */   544,  593,  343,  520,  406,  403,    2,  525,   90,  249,
 /*  2090 */   625,  806,  245,  508,  481,  511,  820,  846,  847,  846,
 /*  2100 */   818,  630,  823,  378,  585,  847,  846,  847,  846,  806,
 /*  2110 */   822,  821,  820,  848,  709,  264,  374,  286,  621,  109,
 /*  2120 */   765,  561,  819,  228,  241,  726,  852,  849,  847,  846,
 /*  2130 */   848,  518,  818,  377,  180,  516,  842,  708,  848,  847,
 /*  2140 */   846,  617,  841,  522,  806,  848,  818,  806,  840,  796,
 /*  2150 */    12, 1183,  612,  818,  819,  226,  798,  849,  179,  848,
 /*  2160 */   849,   54,  177,  518,  847,  846,  848,  721,  819,  234,
 /*  2170 */   847,  846,  103,  849,  818,  819,  233,  518,   51,   52,
 /*  2180 */   848,  765,  440,  583,  518,   53,  161,  848,   72,  521,
 /*  2190 */   520,  173,  567,    2, 1185,  833,  819,  235,  806,  848,
 /*  2200 */   508,  818,  511,  820,  846,  518,  175,  818,  849,  823,
 /*  2210 */   814,  813,  849,  765,  848,  473,  806,  822,  821,  820,
 /*  2220 */   848,  849,  818,  819,  239,  276,   23,  765,  848,  819,
 /*  2230 */   274,  351,  518,  279,  765,  848,  689,  376,  518,  818,
 /*  2240 */   187,  350,  516,  482,  819,  348,  848,  847,  846,  848,
 /*  2250 */   812,  806,  848,  518,  806,  765,  796,   12,   43,  327,
 /*  2260 */   571,  819,  232,  798,   67,  849,  665,  849,   54,  255,
 /*  2270 */   518,  643,  848,   57,  346,  763,  321,  847,  846,  848,
 /*  2280 */   847,  846,  765,  314,  848,   51,   52,  848,  765,  848,
 /*  2290 */   344,  398,   53,  847,  846,  413,  848,  520,   84,  818,
 /*  2300 */     2,  271,  532,  765,  354,  806,  533,  508,  848,  511,
 /*  2310 */   820,  846,  848,  504,  818,  848,  823,  848,  517,  849,
 /*  2320 */   765,  819,  205,  806,  822,  821,  820,  848,  847,  846,
 /*  2330 */   518,  848,  847,  846,  818,  531,  819,  223,  253,  562,
 /*  2340 */   553,  847,  846,  270,   47,  518,  818,  848,  341,  516,
 /*  2350 */   762,  498,  752,  315,  761,  397,  819,  227,  806,  848,
 /*  2360 */   758,  806,  246,  796,   12,  518,  848,  746,  819,  372,
 /*  2370 */   798,  135,  469,  134,  849,   54,  773,  518,  818,  767,
 /*  2380 */   765,   30,  506,  432,  768,  847,  846,  847,  846,  297,
 /*  2390 */   466,  848,   51,   52,  691,  765,  848,  160,  818,   53,
 /*  2400 */   819,  371,  848,  818,  680,  675,  294,    2,  456,  518,
 /*  2410 */   393,  848,  806,  674,  508,  765,  848,  847,  846,  848,
 /*  2420 */   819,  370,  818,  823,  818,  819,  222,  765,  329,  518,
 /*  2430 */   806,  822,  821,  820,  518,  848,  284,  848,  645,  847,
 /*  2440 */   846,  818,  671,  670,  819,  208,  819,  221,  280,  848,
 /*  2450 */   669,  648,  368,  518,  848,  518,  281,  641,  367,  765,
 /*  2460 */   629,  848,  640,  819,  220,  806,  639,  638,  806,  848,
 /*  2470 */   796,   12,  518,  155,  102,  154,  438,  132,  251,  765,
 /*  2480 */   153,  420,   31,  151,  765,  436,  313,  818,  310,  620,
 /*  2490 */   194,  100,  131,  306,  847,  846,  150,  616,  149,  106,
 /*  2500 */   848,  818,  604,  765,  186,  765,  427,  818,  302,  819,
 /*  2510 */   207,  426,  818,  610,  848,  414,  129,  128,  518,  606,
 /*  2520 */   848,  148,  765,  819,  204,  848,  818,  411,  818,  819,
 /*  2530 */   119,  584,  518,  146,  819,  203,   96,  409,  518,  848,
 /*  2540 */   145,  848,  727,  518,  144,   95,  143,  818,  819,  201,
 /*  2550 */   819,  229,   94,   30,   93,  142,  554,  518,  818,  518,
 /*  2560 */   848,  818,  141,  818,  381,  541,   29,  539,  765,  819,
 /*  2570 */   231,  848,   26,  126,  848,  125,  848,  818,  518,  140,
 /*  2580 */   819,  224,  765,  819,  230,  819,  219,  535,  765,  518,
 /*  2590 */   848,   79,  518,  765,  518,  529,  195,  181,  791,  819,
 /*  2600 */   216,  818,  352,  818,  776,  184,  732,  765,  518,  765,
 /*  2610 */   787,  501,  183,  722,  848,  330,  848,  666,  818,  236,
 /*  2620 */   447,  311,  433,  819,  200,  819,  199,  307,  765,  609,
 /*  2630 */   363,  848,  518,  818,  518,  809,  786,  818,    9,  765,
 /*  2640 */   819,  198,  765,  437,  765,  250,  848,  353,  818,  518,
 /*  2650 */   848,  775,   41,  653,  515,  819,  197,  751,  765,  819,
 /*  2660 */   209,  848,   91,  644,  518,  818,  578,  818,  518,  684,
 /*  2670 */   819,  214,  818,  663,  657,  656,  683,   78,  848,  518,
 /*  2680 */   848,  849,  765, 1337,  765,  848, 1337,  819,  213,  819,
 /*  2690 */   120, 1337, 1337, 1337,  819,  212,  518, 1337,  518,  765,
 /*  2700 */  1337, 1337,  818,  518, 1337, 1337, 1337, 1337, 1337,  818,
 /*  2710 */  1337, 1337, 1337, 1337,  765,  848, 1337, 1337,  765, 1337,
 /*  2720 */  1337, 1337,  848, 1337,  819,  211, 1337, 1337,  818,  765,
 /*  2730 */  1337,  819,  217,  518,  818, 1337, 1337, 1337, 1337, 1337,
 /*  2740 */   518,  848, 1337, 1337, 1337,  818,  765,  848,  765, 1337,
 /*  2750 */   819,  215, 1337,  765, 1337, 1337,  819,  202,  848,  518,
 /*  2760 */  1337, 1337, 1337, 1337, 1337,  518, 1337,  819,   89, 1337,
 /*  2770 */  1337, 1337, 1337, 1337, 1337, 1337,  472, 1337, 1337, 1337,
 /*  2780 */  1337, 1337, 1337,  765, 1337, 1337, 1337, 1337, 1337, 1337,
 /*  2790 */   765, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
 /*  2800 */  1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,  765,
 /*  2810 */  1337, 1337, 1337, 1337, 1337,  765, 1337, 1337, 1337, 1337,
 /*  2820 */  1337, 1337, 1337, 1337, 1337, 1337,  765,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,  128,   43,    4,  131,  132,  133,  107,   50,   81,
 /*    10 */    82,   83,   16,  145,   86,   87,   88,   89,   90,   91,
 /*    20 */    92,   93,  149,   95,   96,   97,   98,   99,  100,  101,
 /*    30 */   102,  103,  104,  105,  122,    4,  115,  125,   80,   81,
 /*    40 */    82,   83,  174,  122,   86,   87,   88,   89,   90,   91,
 /*    50 */    92,   93,   56,   95,   96,   97,   98,   99,  100,  101,
 /*    60 */   102,  103,  104,  105,  201,  107,   99,  100,  101,  102,
 /*    70 */   103,  104,  105,   77,  111,  163,  164,  214,   82,   90,
 /*    80 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*    90 */   101,  102,  103,  104,  105,   99,  100,  101,  124,   42,
 /*   100 */    43,  142,  106,  107,  130,  101,  102,  103,  104,  105,
 /*   110 */   114,  115,  138,  139,  140,  119,   68,  121,  122,   71,
 /*   120 */   124,  125,  123,  124,  125,    4,  130,  128,   21,  115,
 /*   130 */   131,  132,  133,  137,  138,  139,  140,   16,  142,  201,
 /*   140 */   277,   84,   85,  122,   37,   24,  101,   89,  149,  118,
 /*   150 */   119,  155,  214,  157,  158,  124,  125,  161,  220,  221,
 /*   160 */   142,  113,  166,  167,  168,  169,  170,  171,  172,  114,
 /*   170 */    34,  175,  114,  177,  178,  114,  155,   56,  157,  158,
 /*   180 */   162,   90,   91,   92,   93,  189,   95,   96,   97,   98,
 /*   190 */    99,  100,  101,  102,  103,  104,  105,   35,   77,    4,
 /*   200 */     7,  156,  130,   82,  159,   12,   95,   96,   97,   98,
 /*   210 */    99,  100,  101,  102,  103,  104,  105,    4,   82,   57,
 /*   220 */    99,  100,    5,    4,  201,   63,  201,  106,  107,  115,
 /*   230 */   182,  293,  294,   40,  209,  114,  115,  214,  209,  214,
 /*   240 */   119,  105,  121,  122,    0,  124,  125,   30,  223,  224,
 /*   250 */     4,  130,  116,   36,    4,  129,  130,  232,  137,  138,
 /*   260 */   139,  140,   16,  142,  128,  129,  130,  131,  132,  133,
 /*   270 */   134,  246,   77,   29,  245,  246,  155,   60,  157,  158,
 /*   280 */   288,   64,  117,   44,  148,  260,  261,  166,  167,  168,
 /*   290 */   169,  201,  171,  172,   99,  100,  175,  117,  177,  178,
 /*   300 */   210,  211,   56,  274,  214,  276,   79,  282,  279,  114,
 /*   310 */   189,  193,   10,  201,  322,  323,  198,  201,  201,  124,
 /*   320 */   101,   82,    4,   77,   22,  130,  214,  209,   82,  300,
 /*   330 */   214,  214,  119,  138,  139,  140,  313,  124,  125,  223,
 /*   340 */   224,  114,  115,  124,  125,   99,  100,   60,  232,  136,
 /*   350 */   137,  107,  106,  107,   19,  115,  137,    4,  122,   15,
 /*   360 */   114,  115,  122,  245,  246,  119,    4,  121,  122,  119,
 /*   370 */   124,  125,    4,  166,  124,  125,  130,  114,  165,  116,
 /*   380 */    45,  264,  265,  137,  138,  139,  140,  201,  142,   45,
 /*   390 */   156,  172,  274,  159,  276,  201,  189,  279,  282,  205,
 /*   400 */   214,  155,   67,  157,  158,   61,  220,  221,  214,    4,
 /*   410 */    42,   43,  166,  115,  168,  169,  201,  171,  172,  104,
 /*   420 */   105,  175,  304,  177,  178,  209,  314,  315,  316,  214,
 /*   430 */   143,  144,  145,  317,  184,  189,  320,  119,  223,  224,
 /*   440 */   153,  154,  124,  125,   26,  122,    4,  232,   80,   81,
 /*   450 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   460 */    92,   93,  246,   95,   96,   97,   98,   99,  100,  101,
 /*   470 */   102,  103,  104,  105,  115,  260,  261,  124,  125,  293,
 /*   480 */   294,    4,  120,  165,  116,   31,  124,  125,    4,  166,
 /*   490 */   137,  147,  124,   42,   43,   41,  114,  282,   80,   81,
 /*   500 */    82,   83,  167,   52,   86,   87,   88,   89,   90,   91,
 /*   510 */    92,   93,  115,   95,   96,   97,   98,   99,  100,  101,
 /*   520 */   102,  103,  104,  105,  119,  172,  115,    4,  160,  124,
 /*   530 */   125,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   540 */    89,   90,   91,   92,   93,   10,   95,   96,   97,   98,
 /*   550 */    99,  100,  101,  102,  103,  104,  105,   22,   35,  212,
 /*   560 */   138,  139,    4,  216,  217,  218,  124,  125,   76,  122,
 /*   570 */    79,  130,  201,  122,  201,  115,   53,   42,   43,  137,
 /*   580 */    57,  114,  122,  210,  211,  214,   63,  214,  141,  148,
 /*   590 */   185,  114,  214,  215,  223,  224,  119,  179,  114,  181,
 /*   600 */    26,  124,  125,  232,   24,  114,  115,  165,  124,  236,
 /*   610 */   179,  238,  181,  122,  137,   80,   81,   82,   83,   84,
 /*   620 */    85,   86,   87,   88,   89,   90,   91,   92,   93,  152,
 /*   630 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   640 */   105,    4,  150,   68,    4,  216,   71,  124,  125,  219,
 /*   650 */   220,  221,    4,  282,   80,   81,   82,   83,   42,   43,
 /*   660 */    86,   87,   88,   89,   90,   91,   92,   93,    4,   95,
 /*   670 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   680 */   188,    4,  124,  125,    4,  219,  220,  221,  113,  166,
 /*   690 */   319,  320,  263,   16,  114,  137,   80,   81,   82,   83,
 /*   700 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*   710 */   152,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   720 */   104,  105,  122,  201,  294,  201,    4,   21,    4,   66,
 /*   730 */     4,  209,  201,   56,   28,   72,  214,  206,  214,   99,
 /*   740 */   100,  210,  211,   37,  201,  214,  288,  223,  224,   29,
 /*   750 */    73,  115,  209,  179,   77,  181,  232,  214,  122,   82,
 /*   760 */   294,  124,  114,  126,  124,  125,  223,  224,  246,  129,
 /*   770 */   170,  122,  124,  125,  115,  232,   99,  100,  138,  139,
 /*   780 */   322,  323,  142,  106,  144,   44,  264,  265,  124,  246,
 /*   790 */    35,  114,  115,   79,  114,  132,  119,    4,  121,  119,
 /*   800 */   136,  124,  125,  260,  124,  125,  282,  130,   53,   32,
 /*   810 */   161,  201,   57,  201,  137,  138,  139,  140,   63,    4,
 /*   820 */   172,   13,    4,  122,  214,  282,  214,  107,  114,  115,
 /*   830 */   153,  154,   55,  223,  224,    4,  122,   73,  114,    4,
 /*   840 */   116,  317,  232,  201,  320,  182,  124,  125,  124,  172,
 /*   850 */   124,  125,  175,  115,  177,  178,  214,   80,   81,   82,
 /*   860 */    83,  135,  161,   86,   87,   88,   89,   90,   91,   92,
 /*   870 */    93,    4,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   880 */   103,  104,  105,   16,  160,   38,   19,  165,   80,   81,
 /*   890 */    82,   83,  282,  129,   86,   87,   88,   89,   90,   91,
 /*   900 */    92,   93,  122,   95,   96,   97,   98,   99,  100,  101,
 /*   910 */   102,  103,  104,  105,  114,  107,  222,  124,  125,  277,
 /*   920 */     4,  166,  201,   56,  230,  231,  314,  315,  316,   82,
 /*   930 */   137,  115,   16,  201,  119,  214,   69,  119,  122,  124,
 /*   940 */   125,   35,  124,  125,   77,  114,  214,    4,  209,   82,
 /*   950 */   119,   84,  137,  118,  119,  124,  125,  226,  165,  124,
 /*   960 */   125,  201,   26,   57,    4,  216,   99,  100,  137,   63,
 /*   970 */    99,  100,   56,  106,  214,  247,  248,  201,  250,  115,
 /*   980 */   165,  114,  179,  152,   79,  246,  119,   43,  121,   73,
 /*   990 */   214,  124,  125,   77,  163,  164,  115,  130,   82,  223,
 /*  1000 */   224,  183,   14,  122,  137,  138,  139,  140,  232,  138,
 /*  1010 */   139,  201,  263,  107,  283,   99,  100,  252,   58,  114,
 /*  1020 */   115,  115,  106,  257,  214,  259,   82,  262,  122,  209,
 /*  1030 */   114,   73,  283,  312,  313,  119,  260,  121,  116,  172,
 /*  1040 */   124,  125,  175,  311,  177,  178,  130,  252,  142,  239,
 /*  1050 */   290,    5,  115,  137,  138,  139,  140,  262,  282,  122,
 /*  1060 */   201,  155,  119,  157,  158,  107,  246,  124,  125,  153,
 /*  1070 */   154,  122,  166,  214,  168,  169,   30,  171,  118,  203,
 /*  1080 */   137,  122,   36,    4,  124,  125,  142,    4,  172,  209,
 /*  1090 */     4,  175,  148,  177,  178,  189,   80,   81,   82,   83,
 /*  1100 */   290,  114,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1110 */    64,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1120 */   104,  105,    4,   26,  265,    4,  246,   80,   81,   82,
 /*  1130 */    83,   14,  116,   86,   87,   88,   89,   90,   91,   92,
 /*  1140 */    93,  115,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1150 */   103,  104,  105,   82,   83,  305,  306,   86,   87,   88,
 /*  1160 */    89,   90,   91,   92,   93,  289,   95,   96,   97,   98,
 /*  1170 */    99,  100,  101,  102,  103,  104,  105,   80,   81,   82,
 /*  1180 */    83,    4,  214,   86,   87,   88,   89,   90,   91,   92,
 /*  1190 */    93,  223,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1200 */   103,  104,  105,  124,  125,  196,  197,  124,  125,   47,
 /*  1210 */   124,  125,   62,   80,   81,   82,   83,   62,  135,   86,
 /*  1220 */    87,   88,   89,   90,   91,   92,   93,  180,   95,   96,
 /*  1230 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  241,
 /*  1240 */   119,  243,  124,  125,  201,  124,  125,  241,    4,  243,
 /*  1250 */     4,  172,  143,  144,  145,  137,    4,  214,   80,   81,
 /*  1260 */    82,   83,  176,   81,   86,   87,   88,   89,   90,   91,
 /*  1270 */    92,   93,  151,   95,   96,   97,   98,   99,  100,  101,
 /*  1280 */   102,  103,  104,  105,  115,   32,  109,  315,  316,  247,
 /*  1290 */   248,  122,  250,  115,  194,  195,  196,  197,    4,  201,
 /*  1300 */   115,  124,  125,  143,  144,  145,   26,  122,   80,   81,
 /*  1310 */    82,   83,  214,  180,   86,   87,   88,   89,   90,   91,
 /*  1320 */    92,   93,  280,   95,   96,   97,   98,   99,  100,  101,
 /*  1330 */   102,  103,  104,  105,    4,  216,  217,  218,    4,   80,
 /*  1340 */    81,   82,   83,  115,  209,   86,   87,   88,   89,   90,
 /*  1350 */    91,   92,   93,   73,   95,   96,   97,   98,   99,  100,
 /*  1360 */   101,  102,  103,  104,  105,  119,   35,   55,  124,  125,
 /*  1370 */   124,  125,   14,  201,  115,  230,  124,  125,  233,    4,
 /*  1380 */   201,  246,   14,  137,   14,  240,  214,  107,   57,   80,
 /*  1390 */    81,   82,   83,  214,   63,   86,   87,   88,   89,   90,
 /*  1400 */    91,   92,   93,  109,   95,   96,   97,   98,   99,  100,
 /*  1410 */   101,  102,  103,  104,  105,    4,  172,  165,  124,  125,
 /*  1420 */    80,   81,   82,   83,  115,  122,   86,   87,   88,   89,
 /*  1430 */    90,   91,   92,   93,  201,   95,   96,   97,   98,   99,
 /*  1440 */   100,  101,  102,  103,  104,  105,  114,  214,  114,   14,
 /*  1450 */   271,  315,  316,  122,  124,  115,  223,  224,  124,  125,
 /*  1460 */    14,  201,  201,   38,  292,  232,  136,  315,  316,  115,
 /*  1470 */    80,   81,   82,   83,  214,  214,   86,   87,   88,   89,
 /*  1480 */    90,   91,   92,   93,  109,   95,   96,   97,   98,   99,
 /*  1490 */   100,  101,  102,  103,  104,  105,    4,  107,    4,  124,
 /*  1500 */   125,   80,   81,   82,   83,  272,  172,   86,   87,   88,
 /*  1510 */    89,   90,   91,   92,   93,  282,   95,   96,   97,   98,
 /*  1520 */    99,  100,  101,  102,  103,  104,  105,  115,  201,  115,
 /*  1530 */   119,  271,  271,  115,  201,  124,  125,  116,  115,  115,
 /*  1540 */   122,  214,  201,  115,  163,  122,  122,  214,  137,  156,
 /*  1550 */   122,   80,   81,   82,   83,  214,  101,   86,   87,   88,
 /*  1560 */    89,   90,   91,   92,   93,    4,   95,   96,   97,   98,
 /*  1570 */    99,  100,  101,  102,  103,  104,  105,   16,  107,  117,
 /*  1580 */    19,  117,   80,   81,   82,   83,  315,  316,   86,   87,
 /*  1590 */    88,   89,   90,   91,   92,   93,  283,   95,   96,   97,
 /*  1600 */    98,   99,  100,  101,  102,  103,  104,  105,  116,  107,
 /*  1610 */   122,    4,  271,  119,  201,  302,  124,   56,  124,  125,
 /*  1620 */   114,  216,    4,   16,  115,  114,   19,  214,  201,  115,
 /*  1630 */    69,  137,    4,  201,  201,  201,  223,  224,   77,  115,
 /*  1640 */   201,  214,  309,   82,  311,  232,  214,  214,  214,  201,
 /*  1650 */   223,  224,  160,  214,  115,  223,  224,  223,  224,  232,
 /*  1660 */    99,  100,  214,   56,  232,  115,  232,  106,  263,  114,
 /*  1670 */   201,    4,  239,  260,  261,  114,   69,  201,  239,  115,
 /*  1680 */   119,  205,  121,  214,   77,  124,  125,  260,  261,   82,
 /*  1690 */   214,  130,  260,  216,  260,  282,  115,  170,  137,  138,
 /*  1700 */   139,  140,   18,  122,    4,    4,   99,  100,   50,  282,
 /*  1710 */     4,  201,    4,  106,  282,  205,  282,  201,  114,  271,
 /*  1720 */     6,  114,  201,  290,  214,  116,  119,  109,  121,  290,
 /*  1730 */   214,  124,  125,  172,    8,  214,  175,  130,  177,  178,
 /*  1740 */   263,  115,  124,  125,  137,  138,  139,  140,   80,   81,
 /*  1750 */    82,   83,  124,  125,   86,   87,   88,   89,   90,   91,
 /*  1760 */    92,   93,    4,   95,   96,   97,   98,   99,  100,  101,
 /*  1770 */   102,  103,  104,  105,   16,  315,  316,  153,  154,  172,
 /*  1780 */   114,   73,  175,   50,  177,  178,  119,   80,   81,   82,
 /*  1790 */    83,  124,  125,   86,   87,   88,   89,   90,   91,   92,
 /*  1800 */    93,  209,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1810 */   103,  104,  105,  185,   56,   50,  201,    4,  114,  152,
 /*  1820 */   119,  201,  114,  115,  124,  124,  125,  119,  201,  214,
 /*  1830 */   124,  125,  124,  125,  214,   77,  136,  245,  246,  134,
 /*  1840 */    82,  214,  201,  137,  114,  137,  205,  190,  191,  114,
 /*  1850 */   223,  224,  201,  216,  239,  214,  205,   99,  100,  232,
 /*  1860 */   152,  153,  154,  201,  106,  214,  274,  114,  276,    4,
 /*  1870 */   148,  279,  114,  115,  142,   82,  214,  119,  121,  121,
 /*  1880 */   116,   16,  124,  125,   13,  223,  224,  186,  130,  161,
 /*  1890 */   122,  299,  300,    4,  232,  137,  138,  139,  140,  272,
 /*  1900 */   263,  147,    4,  201,    4,  290,    9,  205,   11,  282,
 /*  1910 */    13,  201,   89,    4,  201,  205,  214,  226,  201,   89,
 /*  1920 */    23,   56,   89,   26,  214,    4,  201,  214,   89,  173,
 /*  1930 */   172,  214,  119,  175,  272,  177,  178,  124,  125,  214,
 /*  1940 */   223,  224,   77,    4,  282,  201,  201,   82,    4,  232,
 /*  1950 */   137,   54,   18,    4,   24,    4,   59,  147,  214,  214,
 /*  1960 */   201,   64,   65,  174,   99,  100,  154,   70,  223,  224,
 /*  1970 */    73,  106,   75,  214,  283,  107,    4,  232,    4,  114,
 /*  1980 */   115,  201,  223,  224,  119,    4,  121,    4,   16,  124,
 /*  1990 */   125,  232,  107,  201,  214,  130,   25,  205,  201,  282,
 /*  2000 */    62,   51,  137,  138,  139,  140,  214,  110,    4,  112,
 /*  2010 */   122,  214,  114,  124,  125,   51,  142,  272,  182,    4,
 /*  2020 */   223,  224,  124,  125,  124,  125,  137,  282,   56,  232,
 /*  2030 */   113,  272,  114,  124,  125,  201,  114,  172,  201,  201,
 /*  2040 */   175,  282,  177,  178,    4,  124,  125,  150,  214,   77,
 /*  2050 */     4,  214,  214,  162,   82,  146,  121,  223,  224,  113,
 /*  2060 */   160,  223,  224,  124,  125,  111,  232,  118,  124,  125,
 /*  2070 */   232,   99,  100,  124,  125,  124,  125,  115,  106,  282,
 /*  2080 */   115,  137,  285,    4,  187,   49,  114,   48,  213,  283,
 /*  2090 */   151,  119,  266,  121,  260,   16,  124,  125,  124,  125,
 /*  2100 */   201,  118,  130,  308,  183,  124,  125,  124,  125,  137,
 /*  2110 */   138,  139,  140,  214,  163,  229,  282,  201,  137,  229,
 /*  2120 */   282,  205,  223,  224,  306,  201,  200,    4,  124,  125,
 /*  2130 */   214,  232,  201,  308,  108,   56,  200,  163,  214,  124,
 /*  2140 */   125,  137,  200,  200,  172,  214,  201,  175,   65,  177,
 /*  2150 */   178,  179,  137,  201,  223,  224,   77,    4,  202,  214,
 /*  2160 */     4,   82,  202,  232,  124,  125,  214,  201,  223,  224,
 /*  2170 */   124,  125,  204,    4,  201,  223,  224,  232,   99,  100,
 /*  2180 */   214,  282,   78,  137,  232,  106,  201,  214,  122,  207,
 /*  2190 */     4,  117,  152,  114,  115,  208,  223,  224,  119,  214,
 /*  2200 */   121,  201,   16,  124,  125,  232,   74,  201,    4,  130,
 /*  2210 */   269,  248,    4,  282,  214,  201,  137,  138,  139,  140,
 /*  2220 */   214,    4,  201,  223,  224,  153,  170,  282,  214,  223,
 /*  2230 */   224,  254,  232,  201,  282,  214,  201,  205,  232,  201,
 /*  2240 */   256,  255,   56,  167,  223,  224,  214,  124,  125,  214,
 /*  2250 */   258,  172,  214,  232,  175,  282,  177,  178,  168,  201,
 /*  2260 */   137,  223,  224,   77,  169,    4,  201,    4,   82,  105,
 /*  2270 */   232,  201,  214,  283,  201,   82,  201,  124,  125,  214,
 /*  2280 */   124,  125,  282,  201,  214,   99,  100,  214,  282,  214,
 /*  2290 */   228,  116,  106,  124,  125,  201,  214,    4,  114,  201,
 /*  2300 */   114,  291,  201,  282,  201,  119,  137,  121,  214,   16,
 /*  2310 */   124,  125,  214,  310,  201,  214,  130,  214,  201,    4,
 /*  2320 */   282,  223,  224,  137,  138,  139,  140,  214,  124,  125,
 /*  2330 */   232,  214,  124,  125,  201,  118,  223,  224,  105,  186,
 /*  2340 */   184,  124,  125,  286,  179,  232,  201,  214,  257,   56,
 /*  2350 */   258,  166,  318,  201,  273,   46,  223,  224,  172,  214,
 /*  2360 */   273,  175,   27,  177,  178,  232,  214,  318,  223,  224,
 /*  2370 */    77,  269,  250,  117,    4,   82,  172,  232,  201,  118,
 /*  2380 */   282,  173,  309,  201,  311,  124,  125,  124,  125,  201,
 /*  2390 */   154,  214,   99,  100,  323,  282,  214,  190,  201,  106,
 /*  2400 */   223,  224,  214,  201,  225,  225,  201,  114,  142,  232,
 /*  2410 */    39,  214,  119,  235,  121,  282,  214,  124,  125,  214,
 /*  2420 */   223,  224,  201,  130,  201,  223,  224,  282,  225,  232,
 /*  2430 */   137,  138,  139,  140,  232,  214,  201,  214,  123,  124,
 /*  2440 */   125,  201,  227,  141,  223,  224,  223,  224,  201,  214,
 /*  2450 */   225,  235,  228,  232,  214,  232,  201,  225,  228,  282,
 /*  2460 */   269,  214,  225,  223,  224,  172,  225,  225,  175,  214,
 /*  2470 */   177,  178,  232,  117,  204,  117,  228,  204,  269,  282,
 /*  2480 */   117,   33,  179,  117,  282,  298,  297,  201,  254,  275,
 /*  2490 */   171,  242,   80,  254,  124,  125,  117,  275,  117,  114,
 /*  2500 */   214,  201,  242,  282,  278,  282,  142,  201,  281,  223,
 /*  2510 */   224,  254,  201,  275,  214,  269,  204,  204,  232,  275,
 /*  2520 */   214,  117,  282,  223,  224,  214,  201,  269,  201,  223,
 /*  2530 */   224,  254,  232,  117,  223,  224,  244,   78,  232,  214,
 /*  2540 */   117,  214,  172,  232,  117,  244,  117,  201,  223,  224,
 /*  2550 */   223,  224,  244,  173,  244,  117,  292,  232,  201,  232,
 /*  2560 */   214,  201,  117,  201,  269,   20,  301,  269,  282,  223,
 /*  2570 */   224,  214,  301,  117,  214,  117,  214,  201,  232,  117,
 /*  2580 */   223,  224,  282,  223,  224,  223,  224,  269,  282,  232,
 /*  2590 */   214,  303,  232,  282,  232,   17,  251,  303,  294,  223,
 /*  2600 */   224,  201,  253,  201,  226,  257,  268,  282,  232,  282,
 /*  2610 */   294,  287,  257,  270,  214,  226,  214,  233,  201,  237,
 /*  2620 */   227,  270,  270,  223,  224,  223,  224,  253,  282,  254,
 /*  2630 */   199,  214,  232,  201,  232,  216,  216,  201,  251,  282,
 /*  2640 */   223,  224,  282,  296,  282,  295,  214,  249,  201,  232,
 /*  2650 */   214,  216,  284,  216,  243,  223,  224,  321,  282,  223,
 /*  2660 */   224,  214,  267,  238,  232,  201,  307,  201,  232,  223,
 /*  2670 */   223,  224,  201,  234,  234,  234,  223,   73,  214,  232,
 /*  2680 */   214,    4,  282,  324,  282,  214,  324,  223,  224,  223,
 /*  2690 */   224,  324,  324,  324,  223,  224,  232,  324,  232,  282,
 /*  2700 */   324,  324,  201,  232,  324,  324,  324,  324,  324,  201,
 /*  2710 */   324,  324,  324,  324,  282,  214,  324,  324,  282,  324,
 /*  2720 */   324,  324,  214,  324,  223,  224,  324,  324,  201,  282,
 /*  2730 */   324,  223,  224,  232,  201,  324,  324,  324,  324,  324,
 /*  2740 */   232,  214,  324,  324,  324,  201,  282,  214,  282,  324,
 /*  2750 */   223,  224,  324,  282,  324,  324,  223,  224,  214,  232,
 /*  2760 */   324,  324,  324,  324,  324,  232,  324,  223,  224,  324,
 /*  2770 */   324,  324,  324,  324,  324,  324,  232,  324,  324,  324,
 /*  2780 */   324,  324,  324,  282,  324,  324,  324,  324,  324,  324,
 /*  2790 */   282,  324,  324,  324,  324,  324,  324,  324,  324,  324,
 /*  2800 */   324,  324,  324,  324,  324,  324,  324,  324,  324,  282,
 /*  2810 */   324,  324,  324,  324,  324,  282,  324,  324,  324,  324,
 /*  2820 */   324,  324,  324,  324,  324,  324,  282,
};
#define YY_SHIFT_USE_DFLT (-133)
#define YY_SHIFT_COUNT (523)
#define YY_SHIFT_MIN   (-132)
#define YY_SHIFT_MAX   (2677)
static const short yy_shift_ofst[] = {
 /*     0 */   720,  677,  916, 1897,  867, 1607, 1561, 2079, 2079, 2079,
 /*    10 */   958,  246, 1972, 2186, 2186, 2186, 2186, 2186, 2186, 2293,
 /*    20 */  2186, 1280,   -4,  121, 1865, 1758, 2186, 2186, 2186, 2186,
 /*    30 */  2186, 2186, 2186, 2186, 2186, 2293, 2186, 2186, 2186, 2186,
 /*    40 */  2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186,
 /*    50 */  2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186,
 /*    60 */  2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 1708,
 /*    70 */   640,  640,   -1,  523,  523, 2315,  831,  287,  960, 2315,
 /*    80 */  2204, 2204, 2204, 2261, 2204,  871,  871, 2263,  637,  368,
 /*    90 */   136,  477, 1813, 1701,  318, 1667, 1494, 1334, 1411, 1334,
 /*   100 */  1246,  943, 1121,  835, 2208, 2370, 2370, 2370, 2370,  944,
 /*   110 */  2370, 2204, 2263, 2263,  637, 1657, 1657, 1624,  535,  535,
 /*   120 */   -42,  195,  213,  815,  219,  793,  442,  250,   31,  818,
 /*   130 */   648,  217,  405,  217,  558,  724,  755,  353,  680, 2217,
 /*   140 */  2169, 2156, 2153, 1252, 2040, 2123, 1949, 2046, 1921, 2015,
 /*   150 */  2004, 1981, 1944, 1628, 1939, 1983, 1889, 1083, 1909, 1706,
 /*   160 */  1898, 1974, 1951, 1492, 1492, 1492,  722, 1900, 1244, 1331,
 /*   170 */  1331, 1086, 1079, 1118,  726,  362,  663, 1618, 1375, 1294,
 /*   180 */  1177, 2263, 2263,  162,  162,  244,  764,  207, 2604, 2604,
 /*   190 */  2677, 2604, 2604, -133, -133, -133,  451,  616,  616,  616,
 /*   200 */   616,  616,  616,  616,  616,  616,  616,  574,  418,  808,
 /*   210 */   777, 1502, 1471, 1421, 1390, 1340, 1309, 1259, 1228, 1178,
 /*   220 */  1133, 1097, 1047, 1016, 1707, 1668,  -72, 1071, 1071,  -11,
 /*   230 */    91,   91,   91,   91,  111,  -33, -127,  -26,  -26,    4,
 /*   240 */   714,  491,  344,  344,  344,  -88,  335, 1046,   21,   57,
 /*   250 */  1160,  193, 1700, 1330,  484,  664,   45,  706,  600,  701,
 /*   260 */   847,  847,  447, 1581,  -41,  302,  847,   18,  323,  323,
 /*   270 */   431,  302,  422,  422,  315,  649,  234, 2578, 2578, 2462,
 /*   280 */  2458, 2456, 2545, 2545, 2445, 2380, 2438, 2459, 2429, 2459,
 /*   290 */  2427, 2459, 2423, 2459, 2416, 2104, 2056, 2404, 2104, 2412,
 /*   300 */  2319, 2056, 2319, 2364, 2385, 2381, 2319, 2056, 2379, 2412,
 /*   310 */  2319, 2056, 2366, 2303, 2448, 2363, 2104, 2358, 2184, 2104,
 /*   320 */  2356, 2184, 2266, 2266, 2266, 2266, 2371, 2184, 2266, 2302,
 /*   330 */  2266, 2371, 2266, 2266, 2207, 2236, 2256, 2335, 2335, 2309,
 /*   340 */  2309, 2095, 2185, 2165, 2175, 2233, 2184, 2193, 2164, 2095,
 /*   350 */  2090, 2076, 2056, 2072, 2074, 2132, 2066, 2104, 2083, 2083,
 /*   360 */  2026, 2026, 2026, 2026, -133, -133, -133, -133, -133, -133,
 /*   370 */  -133, -133, -133, -133,  906,   48,  492,  905,  227, 1109,
 /*   380 */   575,   58, 1428, 1424, -132, 1423,  580, 1418, 1185, 1169,
 /*   390 */   937,  881,  126,  107,  441,  816,  636,  454,  239,  460,
 /*   400 */   240,  -79,  263, 2039, 2036, 1954, 1946, 1965, 1962, 1935,
 /*   410 */  1922, 1891, 1917, 1918, 1874, 1836, 1964, 1888, 1950, 1938,
 /*   420 */  1971, 1885, 1868, 1812, 1789, 1810, 1930, 1934, 1756, 1839,
 /*   430 */  1833, 1830, 1823, 1754, 1768, 1728, 1871, 1732, 1764, 1757,
 /*   440 */  1793, 1722, 1705, 1753, 1765, 1735, 1730, 1626, 1704, 1733,
 /*   450 */  1726, 1666, 1609, 1714, 1604, 1658, 1684, 1564, 1527, 1555,
 /*   460 */  1550, 1539, 1524, 1514, 1488, 1393, 1511, 1509, 1506, 1488,
 /*   470 */  1455, 1464, 1462, 1381, 1414, 1412, 1303, 1354, 1425, 1446,
 /*   480 */  1332, 1303, 1435, 1370, 1368, 1358, 1312, 1155, 1253, 1182,
 /*   490 */  1150, 1162, 1117, 1026,  987,  922,  959,  949,  988,  864,
 /*   500 */   803,  936,  780,  738,  800,  741,  780,  659,  467,  411,
 /*   510 */   397,  382,  359,  298,  114,  236,   61,  180,  165,   72,
 /*   520 */    55,   14,  -37, -100,
};
#define YY_REDUCE_USE_DFLT (-138)
#define YY_REDUCE_COUNT (373)
#define YY_REDUCE_MIN   (-137)
#define YY_REDUCE_MAX   (2544)
static const short yy_reduce_ofst[] = {
 /*     0 */  1100,   25,  543,  118,  524,  371,  116, 1427, 1413,  215,
 /*    10 */  1592, 1834, 1797, 1759, 1745, 1434, 1662, 1627, 1432,  776,
 /*    20 */  1233,   29, 2544, 2533, 2527, 2508, 2501, 2471, 2466, 2464,
 /*    30 */  2447, 2436, 2432, 2417, 2402, 2400, 2376, 2362, 2360, 2357,
 /*    40 */  2346, 2327, 2325, 2311, 2306, 2300, 2286, 2240, 2223, 2221,
 /*    50 */  2202, 2197, 2177, 2145, 2133, 2113, 2098, 2038, 2021, 2006,
 /*    60 */  2000, 1973, 1952, 1945, 1931, 1899, 1838, 1717,  610,  522,
 /*    70 */   186,  -62,  373,  612,  112,  531,  117, 1042, 2073,   90,
 /*    80 */  1615, 1439, 1433, 1333,  810,  466,  430,  721,  347,  749,
 /*    90 */   694,  859, 2032, 1916, 1792, 1710, 1702,  642, 1651, -137,
 /*   100 */  1641, 1510, 1476,  194, 1172, 1448, 1341, 1261, 1260, 1145,
 /*   110 */  1179,  760,   23,  732, 1119,  458,   -8,  728, 1691,  731,
 /*   120 */  1313,  968, 2255, 2247, 2117, 1744, 1744, 2235, 2205, 2188,
 /*   130 */  2182, 1006, 2152,  998, 1744, 1637, 1460, 2117, 2103, 2101,
 /*   140 */  1744, 1744, 1744, 1744, 1744, 1744, 1744, 2094, 1744, 1744,
 /*   150 */  1744, 1744, 2082, 1744, 1744, 1744, 2075, 2070, 2065, 2058,
 /*   160 */  2035, 2014, 1985, 1477, 1405,  429, 1966, 1924, 1469, 1271,
 /*   170 */  1152, 1837, 1780, 1744, 1725, 1713,  876, 1620, 1521, 1516,
 /*   180 */  1327, 1098, 1043, 1136,  972, 1009, 1135,  766,  880,  820,
 /*   190 */   378,  739,  216,  850,  795,  765, 1806, 1806, 1806, 1806,
 /*   200 */  1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
 /*   210 */  1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
 /*   220 */  1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806,
 /*   230 */  1806, 1806, 1806, 1806, 1806, 1806, 2425, 2453, 2446, 1806,
 /*   240 */  2359, 2359, 2441, 2440, 2439, 2395, 2336, 2411, 2398, 2368,
 /*   250 */  2347, 2350, 2437, 2435, 2420, 2419, 2387, 2431, 2375, 2374,
 /*   260 */  2352, 2351, 2393, 2382, 2384, 2389, 2343, 2338, 2355, 2348,
 /*   270 */  2324, 2378, 2316, 2304, 1806, 2349, 2345, 2294, 2288, 2191,
 /*   280 */  2318, 2298, 2271, 2265, 2295, 2264, 2191, 2310, 2191, 2308,
 /*   290 */  2191, 2301, 2191, 2292, 2258, 2313, 2277, 2246, 2312, 2260,
 /*   300 */  2244, 2257, 2238, 2227, 2226, 2191, 2222, 2239, 2191, 2249,
 /*   310 */  2214, 2234, 2191, 2187, 2189, 2209, 2273, 2191, 2248, 2270,
 /*   320 */  2191, 2230, 2242, 2241, 2237, 2232, 2216, 2224, 2225, 2215,
 /*   330 */  2203, 2178, 2180, 2179, 2071, 2122, 2102, 2049, 2034, 2087,
 /*   340 */  2081, 2092, 2091, 2057, 2003, 2010, 2062, 1990, 1806, 1992,
 /*   350 */  1984, 1986, 1977, 1963, 1941, 1987, 1982, 1968, 1960, 1956,
 /*   360 */  1943, 1942, 1936, 1926, 1825, 1795, 1818, 1890, 1886, 1826,
 /*   370 */  1806, 1806, 1806, 1875,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   862, 1173, 1173, 1293, 1173, 1173, 1173, 1173, 1173, 1173,
 /*    10 */  1293, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
 /*    20 */  1173, 1293, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
 /*    30 */  1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
 /*    40 */  1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
 /*    50 */  1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
 /*    60 */  1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1042,
 /*    70 */  1335, 1335, 1335, 1312, 1312, 1335, 1035, 1335, 1335, 1335,
 /*    80 */  1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,  909, 1031,
 /*    90 */   899, 1042, 1335, 1335, 1335, 1335, 1335, 1104, 1118, 1104,
 /*   100 */  1096, 1085, 1335, 1335, 1209, 1112, 1112, 1112, 1112,  982,
 /*   110 */  1112, 1335, 1335, 1335, 1335, 1144, 1143, 1335, 1070, 1070,
 /*   120 */  1175, 1335, 1262, 1267, 1335, 1335, 1335, 1335, 1335, 1335,
 /*   130 */  1105, 1335, 1335, 1335, 1043, 1031, 1312, 1335, 1335, 1335,
 /*   140 */  1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1119,
 /*   150 */  1097, 1086, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
 /*   160 */  1335, 1335, 1335, 1031, 1031, 1031, 1335, 1335, 1335, 1312,
 /*   170 */  1312, 1335, 1335, 1335, 1335, 1335,  896, 1335, 1335, 1335,
 /*   180 */   868, 1335, 1335, 1312, 1312,  862, 1293, 1064, 1293, 1293,
 /*   190 */   904, 1293, 1293, 1286, 1021, 1021, 1080, 1103, 1102, 1101,
 /*   200 */  1100, 1048, 1090, 1078, 1082, 1186, 1081, 1175, 1175, 1175,
 /*   210 */  1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
 /*   220 */  1175, 1175, 1175, 1175, 1175, 1175, 1146, 1158, 1145, 1153,
 /*   230 */  1162, 1154, 1157, 1148, 1147, 1149, 1335, 1335, 1335, 1150,
 /*   240 */  1335, 1335, 1335, 1335, 1335, 1034, 1335, 1335, 1004, 1335,
 /*   250 */  1335, 1236, 1335, 1335,  911, 1335, 1019,  871, 1089, 1032,
 /*   260 */  1060, 1060,  949,  973,  933, 1070, 1060, 1050, 1064, 1064,
 /*   270 */  1181, 1070, 1335, 1335, 1151, 1032, 1019, 1277, 1277, 1051,
 /*   280 */  1051, 1051, 1261, 1261, 1051, 1209, 1051,  995, 1051,  995,
 /*   290 */  1051,  995, 1051,  995, 1051,  893, 1089, 1051,  893,  986,
 /*   300 */  1092, 1089, 1092, 1124, 1108, 1051, 1092, 1089, 1051,  986,
 /*   310 */  1092, 1089, 1051, 1243, 1241, 1051,  893, 1051, 1194,  893,
 /*   320 */  1051, 1194,  984,  984,  984,  984,  965, 1194,  984,  949,
 /*   330 */   984,  965,  984,  984, 1331, 1335, 1051, 1322, 1322, 1073,
 /*   340 */  1073, 1079, 1064, 1335, 1335, 1200, 1194, 1175, 1152, 1079,
 /*   350 */  1077, 1074, 1089, 1335, 1051,  890,  968,  893,  879,  879,
 /*   360 */   867,  867,  867,  867, 1290, 1290, 1286,  951,  951, 1037,
 /*   370 */  1161, 1160, 1159,  920, 1174, 1335, 1335, 1335, 1335, 1335,
 /*   380 */  1335, 1210, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
 /*   390 */  1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1296, 1335,
 /*   400 */  1335, 1335, 1335, 1335,  863, 1335, 1335, 1335, 1335, 1335,
 /*   410 */  1280, 1335, 1335, 1335, 1335, 1335, 1335, 1240, 1239, 1335,
 /*   420 */  1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
 /*   430 */  1335, 1335, 1335, 1335, 1093, 1335, 1228, 1335, 1335, 1335,
 /*   440 */  1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
 /*   450 */  1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
 /*   460 */  1335, 1335, 1335, 1335, 1007, 1013, 1335, 1335, 1335, 1008,
 /*   470 */  1335, 1335, 1137, 1335, 1335, 1335, 1184, 1335, 1335, 1335,
 /*   480 */  1335, 1075, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
 /*   490 */  1335, 1335, 1335, 1335, 1335, 1335, 1328, 1065, 1335, 1335,
 /*   500 */  1174, 1335, 1295, 1335, 1335, 1335, 1294, 1335, 1335, 1335,
 /*   510 */  1335, 1335, 1335, 1335, 1335, 1335, 1335, 1138, 1137, 1176,
 /*   520 */   902, 1335,  877, 1335,  859,  864, 1279, 1276, 1273, 1278,
 /*   530 */  1272, 1274, 1271, 1275, 1270, 1268, 1269, 1266, 1264, 1263,
 /*   540 */  1265, 1260, 1256, 1216, 1214, 1212, 1221, 1220, 1219, 1218,
 /*   550 */  1217, 1213, 1211, 1215, 1207, 1206, 1115, 1094, 1083, 1002,
 /*   560 */  1255, 1253, 1254, 1205, 1203, 1204, 1001, 1000,  999,  994,
 /*   570 */   993,  992,  991, 1283, 1292, 1291, 1289, 1288, 1287, 1281,
 /*   580 */  1282, 1192, 1191, 1189, 1188, 1190,  895, 1232, 1235, 1234,
 /*   590 */  1233, 1238, 1237, 1230, 1242, 1247, 1246, 1251, 1250, 1249,
 /*   600 */  1248, 1245, 1227, 1123, 1122, 1120, 1117, 1127, 1126, 1125,
 /*   610 */  1116, 1109, 1121, 1099, 1107, 1106, 1095, 1098,  987, 1088,
 /*   620 */  1084, 1087, 1003, 1231,  998,  997,  996,  894,  889, 1053,
 /*   630 */   888,  887,  898,  971,  972,  980,  983,  978,  981,  977,
 /*   640 */   976,  975,  979,  974,  970,  901,  900,  910,  964,  947,
 /*   650 */   936,  903,  938,  935,  934,  939,  956,  955,  962,  961,
 /*   660 */   960,  959,  958,  954,  957,  953,  952,  940,  932,  931,
 /*   670 */   950,  930,  967,  966,  963,  929,  990,  989,  988,  985,
 /*   680 */   928,  927,  926,  925,  924,  923, 1172, 1334, 1330, 1333,
 /*   690 */  1332, 1329, 1171, 1177, 1165, 1163, 1005, 1016, 1015, 1014,
 /*   700 */  1011, 1012, 1026, 1024, 1023, 1022, 1059, 1058, 1057, 1056,
 /*   710 */  1055, 1054, 1047, 1045, 1040, 1039, 1046, 1044, 1041, 1062,
 /*   720 */  1063, 1061, 1038, 1030, 1028, 1029, 1027, 1114, 1111, 1113,
 /*   730 */  1110, 1049, 1036, 1033, 1020, 1310, 1308, 1311, 1309, 1307,
 /*   740 */  1315, 1317, 1316, 1321, 1319, 1318, 1314, 1327, 1326, 1325,
 /*   750 */  1324, 1323, 1313, 1320, 1306, 1305, 1304, 1303, 1067, 1072,
 /*   760 */  1071, 1066, 1010, 1176, 1164, 1174, 1168, 1301, 1299, 1302,
 /*   770 */  1298, 1297, 1197, 1199, 1202, 1201, 1198, 1069, 1068, 1196,
 /*   780 */  1195, 1300, 1167, 1142,  916,  914,  915, 1224, 1223, 1226,
 /*   790 */  1225, 1222,  918,  917,  913,  912, 1140, 1136, 1135, 1252,
 /*   800 */  1169, 1170, 1134, 1139, 1132, 1131, 1130, 1156, 1155, 1141,
 /*   810 */  1133,  905, 1009, 1006, 1166, 1129, 1052, 1128,  946,  945,
 /*   820 */   944,  943,  942,  941, 1018, 1017,  922,  937,  921,  919,
 /*   830 */   897,  892,  891,  886,  884,  881,  883,  880,  885,  882,
 /*   840 */   878,  876,  875,  874,  873,  872,  908,  907,  906,  902,
 /*   850 */   870,  869,  866,  865,  861,  860,  858,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*     ALWAYS => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*    CURRENT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*         DO => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXCLUDE => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*      FIRST => ID */
    4,  /*  FOLLOWING => ID */
    4,  /*        FOR => ID */
    4,  /*  GENERATED => ID */
    4,  /*     GROUPS => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LAST => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /* MATERIALIZED => ID */
    4,  /*         NO => ID */
    4,  /*      NULLS => ID */
    4,  /*     OTHERS => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*  PARTITION => ID */
    4,  /*     PRAGMA => ID */
    4,  /*  PRECEDING => ID */
    4,  /*      RAISE => ID */
    4,  /*      RANGE => ID */
    4,  /*  RECURSIVE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*       ROWS => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*       TIES => ID */
    4,  /*    TRIGGER => ID */
    4,  /*  UNBOUNDED => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*       WITH => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ALWAYS",        "ANALYZE",       "ASC",           "ATTACH",      
  "BEFORE",        "BEGIN",         "BY",            "CASCADE",     
  "CAST",          "COLUMNKW",      "CONFLICT",      "CURRENT",     
  "DATABASE",      "DEFERRED",      "DESC",          "DETACH",      
  "DO",            "EACH",          "END",           "EXCLUDE",     
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FIRST",       
  "FOLLOWING",     "FOR",           "GENERATED",     "GROUPS",      
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LAST",          "LIKE_KW",       "MATCH",       
  "MATERIALIZED",  "NO",            "NULLS",         "OTHERS",      
  "PLAN",          "QUERY",         "KEY",           "OF",          
  "OFFSET",        "PARTITION",     "PRAGMA",        "PRECEDING",   
  "RAISE",         "RANGE",         "RECURSIVE",     "RELEASE",     
  "REPLACE",       "RESTRICT",      "ROW",           "ROWS",        
  "ROLLBACK",      "SAVEPOINT",     "TEMP",          "TIES",        
  "TRIGGER",       "UNBOUNDED",     "VACUUM",        "VIEW",        
  "VIRTUAL",       "WITH",          "WITHOUT",       "REINDEX",     
  "RENAME",        "CTIME_KW",      "IF",            "ANY",         
  "OR",            "AND",           "NOT",           "IS",          
  "BETWEEN",       "IN",            "ISNULL",        "NOTNULL",     
  "NE",            "EQ",            "GT",            "LE",          
  "LT",            "GE",            "ESCAPE",        "BITAND",      
  "BITOR",         "LSHIFT",        "RSHIFT",        "PLUS",        
  "MINUS",         "STAR",          "SLASH",         "REM",         
  "CONCAT",        "COLLATE",       "BITNOT",        "SEMI",        
  "TRANSACTION",   "ID_TRANS",      "COMMIT",        "TO",          
  "CREATE",        "TABLE",         "LP",            "RP",          
  "AS",            "DOT",           "ID_TAB_NEW",    "ID_DB",       
  "CTX_ROWID_KW",  "EXISTS",        "COMMA",         "ID_COL_NEW",  
  "STRING",        "JOIN_KW",       "ID_COL_TYPE",   "RIGHT_ASSOC", 
  "CONSTRAINT",    "DEFAULT",       "NULL",          "PRIMARY",     
  "UNIQUE",        "CHECK",         "REFERENCES",    "ID_CONSTR",   
  "ID_COLLATE",    "ID_TAB",        "INTEGER",       "FLOAT",       
  "BLOB",          "AUTOINCR",      "ON",            "INSERT",      
  "DELETE",        "UPDATE",        "ID_FK_MATCH",   "SET",         
  "DEFERRABLE",    "FOREIGN",       "DROP",          "ID_VIEW_NEW", 
  "ID_VIEW",       "SELECT",        "VALUES",        "UNION",       
  "ALL",           "EXCEPT",        "INTERSECT",     "DISTINCT",    
  "ID_ALIAS",      "FROM",          "USING",         "JOIN",        
  "ID_JOIN_OPTS",  "ID_IDX",        "ORDER",         "GROUP",       
  "HAVING",        "LIMIT",         "WHERE",         "RETURNING",   
  "ID_COL",        "INTO",          "NOTHING",       "ID_FN",       
  "ID_ERR_MSG",    "VARIABLE",      "CASE",          "WHEN",        
  "THEN",          "ELSE",          "INDEX",         "ID_IDX_NEW",  
  "ID_PRAGMA",     "ID_TRIG_NEW",   "ID_TRIG",       "ALTER",       
  "ADD",           "WINDOW",        "OVER",          "FILTER",      
  "error",         "cmd",           "input",         "cmdlist",     
  "ecmd",          "explain",       "cmdx",          "transtype",   
  "trans_opt",     "nm",            "savepoint_opt",  "temp",        
  "ifnotexists",   "fullname",      "columnlist",    "conslist_opt",
  "table_options",  "select",        "column",        "columnid",    
  "type",          "carglist",      "id",            "id_opt",      
  "ids",           "typetoken",     "typename",      "signed",      
  "plus_num",      "minus_num",     "ccons",         "term",        
  "expr",          "onconf",        "sortorder",     "autoinc",     
  "idxlist_opt",   "refargs",       "defer_subclause",  "gen_always",  
  "tnm",           "refarg",        "refact",        "init_deferred_pred_opt",
  "conslist",      "tconscomma",    "tcons",         "idxlist",     
  "defer_subclause_opt",  "resolvetype",   "orconf",        "raisetype",   
  "ifexists",      "select_stmt",   "with",          "selectnowith",
  "oneselect",     "multiselect_op",  "values",        "distinct",    
  "selcollist",    "from",          "where_opt",     "groupby_opt", 
  "having_opt",    "orderby_opt",   "limit_opt",     "window_clause",
  "nexprlist",     "exprlist",      "sclp",          "as",          
  "joinsrc",       "singlesrc",     "seltablist",    "joinop",      
  "joinconstr_opt",  "dbnm",          "indexed_opt",   "idlist",      
  "sortlist",      "nulls",         "delete_stmt",   "returning",   
  "update_stmt",   "setlist",       "idlist_opt",    "insert_stmt", 
  "insert_cmd",    "upsert",        "exprx",         "not_opt",     
  "likeop",        "case_operand",  "case_exprlist",  "case_else",   
  "filter_over",   "uniqueflag",    "idxlist_single",  "collate",     
  "vinto",         "nmnum",         "number",        "trigger_time",
  "trigger_event",  "foreach_clause",  "when_clause",   "trigger_cmd_list",
  "trigger_cmd",   "database_kw_opt",  "key_opt",       "kwcolumn_opt",
  "create_vtab",   "vtabarglist",   "vtabarg",       "vtabargtoken",
  "anylist",       "wqlist",        "wqas",          "wqcte",       
  "windowdefn_list",  "windowdefn",    "window",        "frame_opt",   
  "range_or_rows",  "frame_bound_s",  "frame_exclude_opt",  "frame_bound_e",
  "frame_bound",   "frame_exclude",  "filter_clause",  "over_clause", 
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= WITHOUT nm",
 /*  35 */ "table_options ::= WITHOUT CTX_ROWID_KW",
 /*  36 */ "ifnotexists ::=",
 /*  37 */ "ifnotexists ::= IF NOT EXISTS",
 /*  38 */ "temp ::= TEMP",
 /*  39 */ "temp ::=",
 /*  40 */ "columnlist ::= columnlist COMMA column",
 /*  41 */ "columnlist ::= column",
 /*  42 */ "column ::= columnid type carglist",
 /*  43 */ "columnid ::= nm",
 /*  44 */ "columnid ::= ID_COL_NEW",
 /*  45 */ "id ::= ID",
 /*  46 */ "id_opt ::= id",
 /*  47 */ "id_opt ::=",
 /*  48 */ "ids ::= ID|STRING",
 /*  49 */ "nm ::= id",
 /*  50 */ "nm ::= STRING",
 /*  51 */ "nm ::= JOIN_KW",
 /*  52 */ "type ::=",
 /*  53 */ "type ::= typetoken",
 /*  54 */ "typetoken ::= typename",
 /*  55 */ "typetoken ::= typename LP signed RP",
 /*  56 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  57 */ "typename ::= ids",
 /*  58 */ "typename ::= typename ids",
 /*  59 */ "typename ::= ID_COL_TYPE",
 /*  60 */ "signed ::= plus_num",
 /*  61 */ "signed ::= minus_num",
 /*  62 */ "carglist ::= carglist ccons",
 /*  63 */ "carglist ::=",
 /*  64 */ "ccons ::= CONSTRAINT nm",
 /*  65 */ "ccons ::= DEFAULT term",
 /*  66 */ "ccons ::= DEFAULT LP expr RP",
 /*  67 */ "ccons ::= DEFAULT PLUS term",
 /*  68 */ "ccons ::= DEFAULT MINUS term",
 /*  69 */ "ccons ::= DEFAULT id",
 /*  70 */ "ccons ::= DEFAULT CTIME_KW",
 /*  71 */ "ccons ::= NULL onconf",
 /*  72 */ "ccons ::= NOT NULL onconf",
 /*  73 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  74 */ "ccons ::= UNIQUE onconf",
 /*  75 */ "ccons ::= CHECK LP expr RP",
 /*  76 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  77 */ "ccons ::= defer_subclause",
 /*  78 */ "ccons ::= COLLATE ids",
 /*  79 */ "ccons ::= gen_always AS LP expr RP id_opt",
 /*  80 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  81 */ "ccons ::= COLLATE ID_COLLATE",
 /*  82 */ "ccons ::= REFERENCES ID_TAB",
 /*  83 */ "ccons ::= CHECK LP RP",
 /*  84 */ "term ::= NULL",
 /*  85 */ "term ::= INTEGER",
 /*  86 */ "term ::= FLOAT",
 /*  87 */ "term ::= STRING|BLOB",
 /*  88 */ "tnm ::= term",
 /*  89 */ "tnm ::= nm",
 /*  90 */ "gen_always ::= GENERATED ALWAYS",
 /*  91 */ "gen_always ::=",
 /*  92 */ "autoinc ::=",
 /*  93 */ "autoinc ::= AUTOINCR",
 /*  94 */ "refargs ::=",
 /*  95 */ "refargs ::= refargs refarg",
 /*  96 */ "refarg ::= MATCH nm",
 /*  97 */ "refarg ::= ON INSERT refact",
 /*  98 */ "refarg ::= ON DELETE refact",
 /*  99 */ "refarg ::= ON UPDATE refact",
 /* 100 */ "refarg ::= MATCH ID_FK_MATCH",
 /* 101 */ "refact ::= SET NULL",
 /* 102 */ "refact ::= SET DEFAULT",
 /* 103 */ "refact ::= CASCADE",
 /* 104 */ "refact ::= RESTRICT",
 /* 105 */ "refact ::= NO ACTION",
 /* 106 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 107 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 108 */ "init_deferred_pred_opt ::=",
 /* 109 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 110 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 111 */ "conslist_opt ::=",
 /* 112 */ "conslist_opt ::= COMMA conslist",
 /* 113 */ "conslist ::= conslist tconscomma tcons",
 /* 114 */ "conslist ::= tcons",
 /* 115 */ "tconscomma ::= COMMA",
 /* 116 */ "tconscomma ::=",
 /* 117 */ "tcons ::= CONSTRAINT nm",
 /* 118 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 119 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 120 */ "tcons ::= CHECK LP expr RP onconf",
 /* 121 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 122 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 123 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 124 */ "tcons ::= CHECK LP RP onconf",
 /* 125 */ "defer_subclause_opt ::=",
 /* 126 */ "defer_subclause_opt ::= defer_subclause",
 /* 127 */ "onconf ::=",
 /* 128 */ "onconf ::= ON CONFLICT resolvetype",
 /* 129 */ "orconf ::=",
 /* 130 */ "orconf ::= OR resolvetype",
 /* 131 */ "resolvetype ::= raisetype",
 /* 132 */ "resolvetype ::= IGNORE",
 /* 133 */ "resolvetype ::= REPLACE",
 /* 134 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 135 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 136 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 137 */ "ifexists ::= IF EXISTS",
 /* 138 */ "ifexists ::=",
 /* 139 */ "cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select",
 /* 140 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 141 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 142 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 143 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 144 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 145 */ "cmd ::= select_stmt",
 /* 146 */ "select_stmt ::= select",
 /* 147 */ "select ::= with selectnowith",
 /* 148 */ "selectnowith ::= oneselect",
 /* 149 */ "selectnowith ::= selectnowith multiselect_op oneselect",
 /* 150 */ "selectnowith ::= values",
 /* 151 */ "selectnowith ::= selectnowith COMMA values",
 /* 152 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 153 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
 /* 154 */ "values ::= VALUES LP nexprlist RP",
 /* 155 */ "values ::= values COMMA LP exprlist RP",
 /* 156 */ "multiselect_op ::= UNION",
 /* 157 */ "multiselect_op ::= UNION ALL",
 /* 158 */ "multiselect_op ::= EXCEPT",
 /* 159 */ "multiselect_op ::= INTERSECT",
 /* 160 */ "distinct ::= DISTINCT",
 /* 161 */ "distinct ::= ALL",
 /* 162 */ "distinct ::=",
 /* 163 */ "sclp ::= selcollist COMMA",
 /* 164 */ "sclp ::=",
 /* 165 */ "selcollist ::= sclp expr as",
 /* 166 */ "selcollist ::= sclp STAR",
 /* 167 */ "selcollist ::= sclp tnm DOT STAR",
 /* 168 */ "selcollist ::= sclp",
 /* 169 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 170 */ "as ::= AS nm",
 /* 171 */ "as ::= ids",
 /* 172 */ "as ::= AS ID_ALIAS",
 /* 173 */ "as ::= ID_ALIAS",
 /* 174 */ "as ::=",
 /* 175 */ "from ::=",
 /* 176 */ "from ::= FROM joinsrc",
 /* 177 */ "joinsrc ::= singlesrc seltablist",
 /* 178 */ "joinsrc ::=",
 /* 179 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 180 */ "seltablist ::=",
 /* 181 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 182 */ "singlesrc ::= LP select RP as",
 /* 183 */ "singlesrc ::= LP joinsrc RP as",
 /* 184 */ "singlesrc ::= nm dbnm LP exprlist RP as",
 /* 185 */ "singlesrc ::=",
 /* 186 */ "singlesrc ::= nm DOT",
 /* 187 */ "singlesrc ::= nm DOT ID_TAB",
 /* 188 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 189 */ "singlesrc ::= nm DOT ID_VIEW",
 /* 190 */ "singlesrc ::= ID_DB|ID_VIEW",
 /* 191 */ "joinconstr_opt ::= ON expr",
 /* 192 */ "joinconstr_opt ::= USING LP idlist RP",
 /* 193 */ "joinconstr_opt ::=",
 /* 194 */ "dbnm ::=",
 /* 195 */ "dbnm ::= DOT nm",
 /* 196 */ "fullname ::= nm dbnm",
 /* 197 */ "joinop ::= COMMA",
 /* 198 */ "joinop ::= JOIN",
 /* 199 */ "joinop ::= JOIN_KW JOIN",
 /* 200 */ "joinop ::= JOIN_KW nm JOIN",
 /* 201 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 202 */ "joinop ::= ID_JOIN_OPTS",
 /* 203 */ "indexed_opt ::=",
 /* 204 */ "indexed_opt ::= INDEXED BY nm",
 /* 205 */ "indexed_opt ::= NOT INDEXED",
 /* 206 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 207 */ "orderby_opt ::=",
 /* 208 */ "orderby_opt ::= ORDER BY sortlist",
 /* 209 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
 /* 210 */ "sortlist ::= expr sortorder nulls",
 /* 211 */ "sortorder ::= ASC",
 /* 212 */ "sortorder ::= DESC",
 /* 213 */ "sortorder ::=",
 /* 214 */ "nulls ::= NULLS FIRST",
 /* 215 */ "nulls ::= NULLS LAST",
 /* 216 */ "nulls ::=",
 /* 217 */ "groupby_opt ::=",
 /* 218 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 219 */ "groupby_opt ::= GROUP BY",
 /* 220 */ "having_opt ::=",
 /* 221 */ "having_opt ::= HAVING expr",
 /* 222 */ "limit_opt ::=",
 /* 223 */ "limit_opt ::= LIMIT expr",
 /* 224 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 225 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 226 */ "cmd ::= delete_stmt",
 /* 227 */ "delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning",
 /* 228 */ "delete_stmt ::= with DELETE FROM",
 /* 229 */ "delete_stmt ::= with DELETE FROM nm DOT",
 /* 230 */ "delete_stmt ::= with DELETE FROM nm DOT ID_TAB",
 /* 231 */ "delete_stmt ::= with DELETE FROM ID_DB|ID_TAB",
 /* 232 */ "where_opt ::=",
 /* 233 */ "where_opt ::= WHERE expr",
 /* 234 */ "where_opt ::= WHERE",
 /* 235 */ "returning ::=",
 /* 236 */ "returning ::= RETURNING selcollist",
 /* 237 */ "cmd ::= update_stmt",
 /* 238 */ "update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning",
 /* 239 */ "update_stmt ::= with UPDATE orconf",
 /* 240 */ "update_stmt ::= with UPDATE orconf nm DOT",
 /* 241 */ "update_stmt ::= with UPDATE orconf nm DOT ID_TAB",
 /* 242 */ "update_stmt ::= with UPDATE orconf ID_DB|ID_TAB",
 /* 243 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 244 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
 /* 245 */ "setlist ::= nm EQ expr",
 /* 246 */ "setlist ::= LP idlist RP EQ expr",
 /* 247 */ "setlist ::=",
 /* 248 */ "setlist ::= setlist COMMA",
 /* 249 */ "setlist ::= setlist COMMA ID_COL",
 /* 250 */ "setlist ::= ID_COL",
 /* 251 */ "idlist_opt ::=",
 /* 252 */ "idlist_opt ::= LP idlist RP",
 /* 253 */ "idlist ::= idlist COMMA nm",
 /* 254 */ "idlist ::= nm",
 /* 255 */ "idlist ::=",
 /* 256 */ "idlist ::= idlist COMMA ID_COL",
 /* 257 */ "idlist ::= ID_COL",
 /* 258 */ "cmd ::= insert_stmt",
 /* 259 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning",
 /* 260 */ "insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning",
 /* 261 */ "insert_stmt ::= with insert_cmd INTO",
 /* 262 */ "insert_stmt ::= with insert_cmd INTO nm DOT",
 /* 263 */ "insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB",
 /* 264 */ "insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB",
 /* 265 */ "insert_cmd ::= INSERT orconf",
 /* 266 */ "insert_cmd ::= REPLACE",
 /* 267 */ "upsert ::=",
 /* 268 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt",
 /* 269 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING",
 /* 270 */ "upsert ::= ON CONFLICT DO NOTHING",
 /* 271 */ "exprx ::= expr not_opt IN ID_DB",
 /* 272 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 273 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 274 */ "exprx ::= tnm DOT ID_TAB|ID_COL",
 /* 275 */ "exprx ::= tnm DOT nm DOT ID_COL",
 /* 276 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 277 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 278 */ "exprx ::= CTIME_KW",
 /* 279 */ "exprx ::= LP nexprlist RP",
 /* 280 */ "exprx ::= tnm",
 /* 281 */ "exprx ::= tnm DOT nm",
 /* 282 */ "exprx ::= tnm DOT nm DOT nm",
 /* 283 */ "exprx ::= VARIABLE",
 /* 284 */ "exprx ::= expr COLLATE ids",
 /* 285 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 286 */ "exprx ::= ID LP distinct exprlist RP",
 /* 287 */ "exprx ::= ID LP STAR RP",
 /* 288 */ "exprx ::= expr AND expr",
 /* 289 */ "exprx ::= expr OR expr",
 /* 290 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 291 */ "exprx ::= expr EQ|NE expr",
 /* 292 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 293 */ "exprx ::= expr PLUS|MINUS expr",
 /* 294 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 295 */ "exprx ::= expr CONCAT expr",
 /* 296 */ "exprx ::= expr not_opt likeop expr",
 /* 297 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 298 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 299 */ "exprx ::= expr NOT NULL",
 /* 300 */ "exprx ::= expr IS not_opt expr",
 /* 301 */ "exprx ::= NOT expr",
 /* 302 */ "exprx ::= BITNOT expr",
 /* 303 */ "exprx ::= MINUS expr",
 /* 304 */ "exprx ::= PLUS expr",
 /* 305 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 306 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 307 */ "exprx ::= LP select RP",
 /* 308 */ "exprx ::= expr not_opt IN LP select RP",
 /* 309 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 310 */ "exprx ::= EXISTS LP select RP",
 /* 311 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 312 */ "exprx ::= RAISE LP IGNORE RP",
 /* 313 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 314 */ "exprx ::= ID LP distinct exprlist RP filter_over",
 /* 315 */ "exprx ::= ID LP STAR RP filter_over",
 /* 316 */ "expr ::=",
 /* 317 */ "expr ::= exprx",
 /* 318 */ "not_opt ::=",
 /* 319 */ "not_opt ::= NOT",
 /* 320 */ "likeop ::= LIKE_KW|MATCH",
 /* 321 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 322 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 323 */ "case_else ::= ELSE expr",
 /* 324 */ "case_else ::=",
 /* 325 */ "case_operand ::= exprx",
 /* 326 */ "case_operand ::=",
 /* 327 */ "exprlist ::= nexprlist",
 /* 328 */ "exprlist ::=",
 /* 329 */ "nexprlist ::= nexprlist COMMA expr",
 /* 330 */ "nexprlist ::= exprx",
 /* 331 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
 /* 332 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 333 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 334 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 335 */ "uniqueflag ::= UNIQUE",
 /* 336 */ "uniqueflag ::=",
 /* 337 */ "idxlist_opt ::=",
 /* 338 */ "idxlist_opt ::= LP idxlist RP",
 /* 339 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 340 */ "idxlist ::= idxlist_single",
 /* 341 */ "idxlist_single ::= nm collate sortorder",
 /* 342 */ "idxlist_single ::= ID_COL",
 /* 343 */ "collate ::=",
 /* 344 */ "collate ::= COLLATE ids",
 /* 345 */ "collate ::= COLLATE ID_COLLATE",
 /* 346 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 347 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 348 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 349 */ "cmd ::= VACUUM vinto",
 /* 350 */ "cmd ::= VACUUM nm vinto",
 /* 351 */ "vinto ::= INTO expr",
 /* 352 */ "vinto ::=",
 /* 353 */ "cmd ::= PRAGMA nm dbnm",
 /* 354 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 355 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 356 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 357 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 358 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 359 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 360 */ "nmnum ::= plus_num",
 /* 361 */ "nmnum ::= nm",
 /* 362 */ "nmnum ::= ON",
 /* 363 */ "nmnum ::= DELETE",
 /* 364 */ "nmnum ::= DEFAULT",
 /* 365 */ "plus_num ::= PLUS number",
 /* 366 */ "plus_num ::= number",
 /* 367 */ "minus_num ::= MINUS number",
 /* 368 */ "number ::= INTEGER",
 /* 369 */ "number ::= FLOAT",
 /* 370 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 371 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 372 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 373 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 374 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 375 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 376 */ "trigger_time ::= BEFORE",
 /* 377 */ "trigger_time ::= AFTER",
 /* 378 */ "trigger_time ::= INSTEAD OF",
 /* 379 */ "trigger_time ::=",
 /* 380 */ "trigger_event ::= DELETE",
 /* 381 */ "trigger_event ::= INSERT",
 /* 382 */ "trigger_event ::= UPDATE",
 /* 383 */ "trigger_event ::= UPDATE OF idlist",
 /* 384 */ "foreach_clause ::=",
 /* 385 */ "foreach_clause ::= FOR EACH ROW",
 /* 386 */ "when_clause ::=",
 /* 387 */ "when_clause ::= WHEN expr",
 /* 388 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 389 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 390 */ "trigger_cmd_list ::= SEMI",
 /* 391 */ "trigger_cmd ::= update_stmt",
 /* 392 */ "trigger_cmd ::= insert_stmt",
 /* 393 */ "trigger_cmd ::= delete_stmt",
 /* 394 */ "trigger_cmd ::= select_stmt",
 /* 395 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 396 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 397 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 398 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 399 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 400 */ "cmd ::= DETACH database_kw_opt expr",
 /* 401 */ "key_opt ::=",
 /* 402 */ "key_opt ::= KEY expr",
 /* 403 */ "database_kw_opt ::= DATABASE",
 /* 404 */ "database_kw_opt ::=",
 /* 405 */ "cmd ::= REINDEX",
 /* 406 */ "cmd ::= REINDEX nm dbnm",
 /* 407 */ "cmd ::= REINDEX ID_COLLATE",
 /* 408 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 409 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 410 */ "cmd ::= ANALYZE",
 /* 411 */ "cmd ::= ANALYZE nm dbnm",
 /* 412 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 413 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 414 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 415 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 416 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
 /* 417 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 418 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 419 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 420 */ "kwcolumn_opt ::=",
 /* 421 */ "kwcolumn_opt ::= COLUMNKW",
 /* 422 */ "cmd ::= create_vtab",
 /* 423 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 424 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 425 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 426 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 427 */ "vtabarglist ::= vtabarg",
 /* 428 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 429 */ "vtabarg ::=",
 /* 430 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 431 */ "vtabargtoken ::= ANY",
 /* 432 */ "vtabargtoken ::= LP anylist RP",
 /* 433 */ "anylist ::=",
 /* 434 */ "anylist ::= anylist LP anylist RP",
 /* 435 */ "anylist ::= anylist ANY",
 /* 436 */ "with ::=",
 /* 437 */ "with ::= WITH wqlist",
 /* 438 */ "with ::= WITH RECURSIVE wqlist",
 /* 439 */ "wqas ::= AS",
 /* 440 */ "wqas ::= AS MATERIALIZED",
 /* 441 */ "wqas ::= AS NOT MATERIALIZED",
 /* 442 */ "wqlist ::= wqcte",
 /* 443 */ "wqlist ::= wqlist COMMA wqcte",
 /* 444 */ "wqlist ::= ID_TAB_NEW",
 /* 445 */ "wqcte ::= nm idxlist_opt wqas LP select RP",
 /* 446 */ "windowdefn_list ::= windowdefn",
 /* 447 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
 /* 448 */ "windowdefn ::= nm AS LP window RP",
 /* 449 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
 /* 450 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
 /* 451 */ "window ::= ORDER BY sortlist frame_opt",
 /* 452 */ "window ::= nm ORDER BY sortlist frame_opt",
 /* 453 */ "window ::= frame_opt",
 /* 454 */ "window ::= nm frame_opt",
 /* 455 */ "frame_opt ::=",
 /* 456 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
 /* 457 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
 /* 458 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
 /* 459 */ "frame_bound_s ::= frame_bound",
 /* 460 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
 /* 461 */ "frame_bound_e ::= frame_bound",
 /* 462 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
 /* 463 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
 /* 464 */ "frame_bound ::= CURRENT ROW",
 /* 465 */ "frame_exclude_opt ::=",
 /* 466 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
 /* 467 */ "frame_exclude ::= NO OTHERS",
 /* 468 */ "frame_exclude ::= CURRENT ROW",
 /* 469 */ "frame_exclude ::= GROUP",
 /* 470 */ "frame_exclude ::= TIES",
 /* 471 */ "window_clause ::= WINDOW windowdefn_list",
 /* 472 */ "filter_over ::= filter_clause over_clause",
 /* 473 */ "filter_over ::= over_clause",
 /* 474 */ "filter_over ::= filter_clause",
 /* 475 */ "over_clause ::= OVER LP window RP",
 /* 476 */ "over_clause ::= OVER nm",
 /* 477 */ "filter_clause ::= FILTER LP WHERE expr RP",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 193: /* cmd */
    case 196: /* ecmd */
    case 198: /* cmdx */
    case 245: /* select_stmt */
    case 274: /* delete_stmt */
    case 276: /* update_stmt */
    case 279: /* insert_stmt */
    case 300: /* trigger_cmd */
    case 304: /* create_vtab */
{
parser_safe_delete((yypminor->yy395));
}
      break;
    case 197: /* explain */
{
parser_safe_delete((yypminor->yy331));
}
      break;
    case 199: /* transtype */
    case 200: /* trans_opt */
{
parser_safe_delete((yypminor->yy380));
}
      break;
    case 201: /* nm */
    case 208: /* table_options */
    case 211: /* columnid */
    case 214: /* id */
    case 215: /* id_opt */
    case 216: /* ids */
    case 218: /* typename */
    case 269: /* dbnm */
    case 291: /* collate */
    case 306: /* vtabarg */
    case 307: /* vtabargtoken */
    case 308: /* anylist */
{
parser_safe_delete((yypminor->yy487));
}
      break;
    case 202: /* savepoint_opt */
    case 204: /* ifnotexists */
    case 227: /* autoinc */
    case 231: /* gen_always */
    case 237: /* tconscomma */
    case 244: /* ifexists */
    case 283: /* not_opt */
    case 289: /* uniqueflag */
    case 301: /* database_kw_opt */
    case 303: /* kwcolumn_opt */
{
parser_safe_delete((yypminor->yy411));
}
      break;
    case 203: /* temp */
    case 251: /* distinct */
{
parser_safe_delete((yypminor->yy634));
}
      break;
    case 205: /* fullname */
{
parser_safe_delete((yypminor->yy648));
}
      break;
    case 206: /* columnlist */
{
parser_safe_delete((yypminor->yy594));
}
      break;
    case 207: /* conslist_opt */
    case 236: /* conslist */
{
parser_safe_delete((yypminor->yy565));
}
      break;
    case 209: /* select */
    case 247: /* selectnowith */
{
parser_safe_delete((yypminor->yy129));
}
      break;
    case 210: /* column */
{
parser_safe_delete((yypminor->yy387));
}
      break;
    case 212: /* type */
    case 217: /* typetoken */
{
parser_safe_delete((yypminor->yy297));
}
      break;
    case 213: /* carglist */
{
parser_safe_delete((yypminor->yy299));
}
      break;
    case 219: /* signed */
    case 220: /* plus_num */
    case 221: /* minus_num */
    case 223: /* term */
    case 293: /* nmnum */
    case 294: /* number */
{
parser_safe_delete((yypminor->yy309));
}
      break;
    case 222: /* ccons */
{
parser_safe_delete((yypminor->yy496));
}
      break;
    case 224: /* expr */
    case 254: /* where_opt */
    case 256: /* having_opt */
    case 282: /* exprx */
    case 285: /* case_operand */
    case 287: /* case_else */
    case 292: /* vinto */
    case 298: /* when_clause */
    case 302: /* key_opt */
{
parser_safe_delete((yypminor->yy408));
}
      break;
    case 225: /* onconf */
    case 241: /* resolvetype */
    case 242: /* orconf */
{
parser_safe_delete((yypminor->yy490));
}
      break;
    case 226: /* sortorder */
{
parser_safe_delete((yypminor->yy101));
}
      break;
    case 228: /* idxlist_opt */
    case 239: /* idxlist */
{
parser_safe_delete((yypminor->yy87));
}
      break;
    case 229: /* refargs */
{
parser_safe_delete((yypminor->yy409));
}
      break;
    case 230: /* defer_subclause */
    case 240: /* defer_subclause_opt */
{
parser_safe_delete((yypminor->yy137));
}
      break;
    case 232: /* tnm */
{
parser_safe_delete((yypminor->yy374));
}
      break;
    case 233: /* refarg */
{
parser_safe_delete((yypminor->yy643));
}
      break;
    case 234: /* refact */
{
parser_safe_delete((yypminor->yy400));
}
      break;
    case 235: /* init_deferred_pred_opt */
{
parser_safe_delete((yypminor->yy72));
}
      break;
    case 238: /* tcons */
{
parser_safe_delete((yypminor->yy214));
}
      break;
    case 246: /* with */
{
parser_safe_delete((yypminor->yy617));
}
      break;
    case 248: /* oneselect */
{
parser_safe_delete((yypminor->yy174));
}
      break;
    case 249: /* multiselect_op */
{
parser_safe_delete((yypminor->yy502));
}
      break;
    case 250: /* values */
{
parser_safe_delete((yypminor->yy630));
}
      break;
    case 252: /* selcollist */
    case 262: /* sclp */
    case 275: /* returning */
{
parser_safe_delete((yypminor->yy597));
}
      break;
    case 253: /* from */
    case 264: /* joinsrc */
{
parser_safe_delete((yypminor->yy607));
}
      break;
    case 255: /* groupby_opt */
    case 260: /* nexprlist */
    case 261: /* exprlist */
    case 286: /* case_exprlist */
{
parser_safe_delete((yypminor->yy15));
}
      break;
    case 257: /* orderby_opt */
    case 272: /* sortlist */
{
parser_safe_delete((yypminor->yy555));
}
      break;
    case 258: /* limit_opt */
{
parser_safe_delete((yypminor->yy36));
}
      break;
    case 259: /* window_clause */
    case 312: /* windowdefn_list */
{
parser_safe_delete((yypminor->yy483));
}
      break;
    case 263: /* as */
{
parser_safe_delete((yypminor->yy424));
}
      break;
    case 265: /* singlesrc */
{
parser_safe_delete((yypminor->yy25));
}
      break;
    case 266: /* seltablist */
{
parser_safe_delete((yypminor->yy396));
}
      break;
    case 267: /* joinop */
{
parser_safe_delete((yypminor->yy317));
}
      break;
    case 268: /* joinconstr_opt */
{
parser_safe_delete((yypminor->yy263));
}
      break;
    case 270: /* indexed_opt */
{
parser_safe_delete((yypminor->yy48));
}
      break;
    case 271: /* idlist */
    case 278: /* idlist_opt */
    case 305: /* vtabarglist */
{
parser_safe_delete((yypminor->yy407));
}
      break;
    case 273: /* nulls */
{
parser_safe_delete((yypminor->yy51));
}
      break;
    case 277: /* setlist */
{
parser_safe_delete((yypminor->yy585));
}
      break;
    case 280: /* insert_cmd */
{
parser_safe_delete((yypminor->yy368));
}
      break;
    case 281: /* upsert */
{
parser_safe_delete((yypminor->yy8));
}
      break;
    case 284: /* likeop */
{
parser_safe_delete((yypminor->yy520));
}
      break;
    case 288: /* filter_over */
{
parser_safe_delete((yypminor->yy631));
}
      break;
    case 290: /* idxlist_single */
{
parser_safe_delete((yypminor->yy308));
}
      break;
    case 295: /* trigger_time */
{
parser_safe_delete((yypminor->yy516));
}
      break;
    case 296: /* trigger_event */
{
parser_safe_delete((yypminor->yy223));
}
      break;
    case 297: /* foreach_clause */
{
parser_safe_delete((yypminor->yy300));
}
      break;
    case 299: /* trigger_cmd_list */
{
parser_safe_delete((yypminor->yy102));
}
      break;
    case 309: /* wqlist */
{
parser_safe_delete((yypminor->yy9));
}
      break;
    case 310: /* wqas */
{
parser_safe_delete((yypminor->yy543));
}
      break;
    case 311: /* wqcte */
{
parser_safe_delete((yypminor->yy206));
}
      break;
    case 313: /* windowdefn */
{
parser_safe_delete((yypminor->yy274));
}
      break;
    case 314: /* window */
{
parser_safe_delete((yypminor->yy198));
}
      break;
    case 315: /* frame_opt */
{
parser_safe_delete((yypminor->yy161));
}
      break;
    case 316: /* range_or_rows */
{
parser_safe_delete((yypminor->yy370));
}
      break;
    case 317: /* frame_bound_s */
    case 319: /* frame_bound_e */
{
parser_safe_delete((yypminor->yy153));
}
      break;
    case 320: /* frame_bound */
{
parser_safe_delete((yypminor->yy153));parser_safe_delete((yypminor->yy153));parser_safe_delete((yypminor->yy153));
}
      break;
    case 322: /* filter_clause */
{
parser_safe_delete((yypminor->yy549));
}
      break;
    case 323: /* over_clause */
{
parser_safe_delete((yypminor->yy23));
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   UNUSED(yypMinor);
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 194, 1 },
  { 195, 2 },
  { 195, 1 },
  { 196, 1 },
  { 196, 3 },
  { 197, 0 },
  { 197, 1 },
  { 197, 3 },
  { 198, 1 },
  { 193, 3 },
  { 200, 0 },
  { 200, 1 },
  { 200, 2 },
  { 200, 2 },
  { 199, 0 },
  { 199, 1 },
  { 199, 1 },
  { 199, 1 },
  { 193, 2 },
  { 193, 2 },
  { 193, 2 },
  { 202, 1 },
  { 202, 0 },
  { 193, 2 },
  { 193, 3 },
  { 193, 5 },
  { 193, 2 },
  { 193, 3 },
  { 193, 5 },
  { 193, 10 },
  { 193, 7 },
  { 193, 7 },
  { 193, 5 },
  { 208, 0 },
  { 208, 2 },
  { 208, 2 },
  { 204, 0 },
  { 204, 3 },
  { 203, 1 },
  { 203, 0 },
  { 206, 3 },
  { 206, 1 },
  { 210, 3 },
  { 211, 1 },
  { 211, 1 },
  { 214, 1 },
  { 215, 1 },
  { 215, 0 },
  { 216, 1 },
  { 201, 1 },
  { 201, 1 },
  { 201, 1 },
  { 212, 0 },
  { 212, 1 },
  { 217, 1 },
  { 217, 4 },
  { 217, 6 },
  { 218, 1 },
  { 218, 2 },
  { 218, 1 },
  { 219, 1 },
  { 219, 1 },
  { 213, 2 },
  { 213, 0 },
  { 222, 2 },
  { 222, 2 },
  { 222, 4 },
  { 222, 3 },
  { 222, 3 },
  { 222, 2 },
  { 222, 2 },
  { 222, 2 },
  { 222, 3 },
  { 222, 5 },
  { 222, 2 },
  { 222, 4 },
  { 222, 4 },
  { 222, 1 },
  { 222, 2 },
  { 222, 6 },
  { 222, 2 },
  { 222, 2 },
  { 222, 2 },
  { 222, 3 },
  { 223, 1 },
  { 223, 1 },
  { 223, 1 },
  { 223, 1 },
  { 232, 1 },
  { 232, 1 },
  { 231, 2 },
  { 231, 0 },
  { 227, 0 },
  { 227, 1 },
  { 229, 0 },
  { 229, 2 },
  { 233, 2 },
  { 233, 3 },
  { 233, 3 },
  { 233, 3 },
  { 233, 2 },
  { 234, 2 },
  { 234, 2 },
  { 234, 1 },
  { 234, 1 },
  { 234, 2 },
  { 230, 3 },
  { 230, 2 },
  { 235, 0 },
  { 235, 2 },
  { 235, 2 },
  { 207, 0 },
  { 207, 2 },
  { 236, 3 },
  { 236, 1 },
  { 237, 1 },
  { 237, 0 },
  { 238, 2 },
  { 238, 7 },
  { 238, 5 },
  { 238, 5 },
  { 238, 10 },
  { 238, 2 },
  { 238, 7 },
  { 238, 4 },
  { 240, 0 },
  { 240, 1 },
  { 225, 0 },
  { 225, 3 },
  { 242, 0 },
  { 242, 2 },
  { 241, 1 },
  { 241, 1 },
  { 241, 1 },
  { 193, 4 },
  { 193, 6 },
  { 193, 4 },
  { 244, 2 },
  { 244, 0 },
  { 193, 8 },
  { 193, 7 },
  { 193, 5 },
  { 193, 4 },
  { 193, 6 },
  { 193, 4 },
  { 193, 1 },
  { 245, 1 },
  { 209, 2 },
  { 247, 1 },
  { 247, 3 },
  { 247, 1 },
  { 247, 3 },
  { 248, 9 },
  { 248, 10 },
  { 250, 4 },
  { 250, 5 },
  { 249, 1 },
  { 249, 2 },
  { 249, 1 },
  { 249, 1 },
  { 251, 1 },
  { 251, 1 },
  { 251, 0 },
  { 262, 2 },
  { 262, 0 },
  { 252, 3 },
  { 252, 2 },
  { 252, 4 },
  { 252, 1 },
  { 252, 4 },
  { 263, 2 },
  { 263, 1 },
  { 263, 2 },
  { 263, 1 },
  { 263, 0 },
  { 253, 0 },
  { 253, 2 },
  { 264, 2 },
  { 264, 0 },
  { 266, 4 },
  { 266, 0 },
  { 265, 4 },
  { 265, 4 },
  { 265, 4 },
  { 265, 6 },
  { 265, 0 },
  { 265, 2 },
  { 265, 3 },
  { 265, 1 },
  { 265, 3 },
  { 265, 1 },
  { 268, 2 },
  { 268, 4 },
  { 268, 0 },
  { 269, 0 },
  { 269, 2 },
  { 205, 2 },
  { 267, 1 },
  { 267, 1 },
  { 267, 2 },
  { 267, 3 },
  { 267, 4 },
  { 267, 1 },
  { 270, 0 },
  { 270, 3 },
  { 270, 2 },
  { 270, 3 },
  { 257, 0 },
  { 257, 3 },
  { 272, 5 },
  { 272, 3 },
  { 226, 1 },
  { 226, 1 },
  { 226, 0 },
  { 273, 2 },
  { 273, 2 },
  { 273, 0 },
  { 255, 0 },
  { 255, 3 },
  { 255, 2 },
  { 256, 0 },
  { 256, 2 },
  { 258, 0 },
  { 258, 2 },
  { 258, 4 },
  { 258, 4 },
  { 193, 1 },
  { 274, 7 },
  { 274, 3 },
  { 274, 5 },
  { 274, 6 },
  { 274, 4 },
  { 254, 0 },
  { 254, 2 },
  { 254, 1 },
  { 275, 0 },
  { 275, 2 },
  { 193, 1 },
  { 276, 10 },
  { 276, 3 },
  { 276, 5 },
  { 276, 6 },
  { 276, 4 },
  { 277, 5 },
  { 277, 7 },
  { 277, 3 },
  { 277, 5 },
  { 277, 0 },
  { 277, 2 },
  { 277, 3 },
  { 277, 1 },
  { 278, 0 },
  { 278, 3 },
  { 271, 3 },
  { 271, 1 },
  { 271, 0 },
  { 271, 3 },
  { 271, 1 },
  { 193, 1 },
  { 279, 8 },
  { 279, 8 },
  { 279, 3 },
  { 279, 5 },
  { 279, 4 },
  { 279, 6 },
  { 280, 2 },
  { 280, 1 },
  { 281, 0 },
  { 281, 11 },
  { 281, 8 },
  { 281, 4 },
  { 282, 4 },
  { 282, 6 },
  { 282, 1 },
  { 282, 3 },
  { 282, 5 },
  { 282, 3 },
  { 282, 6 },
  { 282, 1 },
  { 282, 3 },
  { 282, 1 },
  { 282, 3 },
  { 282, 5 },
  { 282, 1 },
  { 282, 3 },
  { 282, 6 },
  { 282, 5 },
  { 282, 4 },
  { 282, 3 },
  { 282, 3 },
  { 282, 3 },
  { 282, 3 },
  { 282, 3 },
  { 282, 3 },
  { 282, 3 },
  { 282, 3 },
  { 282, 4 },
  { 282, 6 },
  { 282, 2 },
  { 282, 3 },
  { 282, 4 },
  { 282, 2 },
  { 282, 2 },
  { 282, 2 },
  { 282, 2 },
  { 282, 6 },
  { 282, 6 },
  { 282, 3 },
  { 282, 6 },
  { 282, 5 },
  { 282, 4 },
  { 282, 5 },
  { 282, 4 },
  { 282, 6 },
  { 282, 6 },
  { 282, 5 },
  { 224, 0 },
  { 224, 1 },
  { 283, 0 },
  { 283, 1 },
  { 284, 1 },
  { 286, 5 },
  { 286, 4 },
  { 287, 2 },
  { 287, 0 },
  { 285, 1 },
  { 285, 0 },
  { 261, 1 },
  { 261, 0 },
  { 260, 3 },
  { 260, 1 },
  { 193, 12 },
  { 193, 8 },
  { 193, 7 },
  { 193, 5 },
  { 289, 1 },
  { 289, 0 },
  { 228, 0 },
  { 228, 3 },
  { 239, 3 },
  { 239, 1 },
  { 290, 3 },
  { 290, 1 },
  { 291, 0 },
  { 291, 2 },
  { 291, 2 },
  { 193, 4 },
  { 193, 6 },
  { 193, 4 },
  { 193, 2 },
  { 193, 3 },
  { 292, 2 },
  { 292, 0 },
  { 193, 3 },
  { 193, 5 },
  { 193, 6 },
  { 193, 5 },
  { 193, 6 },
  { 193, 4 },
  { 193, 2 },
  { 293, 1 },
  { 293, 1 },
  { 293, 1 },
  { 293, 1 },
  { 293, 1 },
  { 220, 2 },
  { 220, 1 },
  { 221, 2 },
  { 294, 1 },
  { 294, 1 },
  { 193, 15 },
  { 193, 12 },
  { 193, 14 },
  { 193, 10 },
  { 193, 7 },
  { 193, 5 },
  { 295, 1 },
  { 295, 1 },
  { 295, 2 },
  { 295, 0 },
  { 296, 1 },
  { 296, 1 },
  { 296, 1 },
  { 296, 3 },
  { 297, 0 },
  { 297, 3 },
  { 298, 0 },
  { 298, 2 },
  { 299, 3 },
  { 299, 2 },
  { 299, 1 },
  { 300, 1 },
  { 300, 1 },
  { 300, 1 },
  { 300, 1 },
  { 243, 1 },
  { 193, 4 },
  { 193, 6 },
  { 193, 4 },
  { 193, 6 },
  { 193, 3 },
  { 302, 0 },
  { 302, 2 },
  { 301, 1 },
  { 301, 0 },
  { 193, 1 },
  { 193, 3 },
  { 193, 2 },
  { 193, 4 },
  { 193, 2 },
  { 193, 1 },
  { 193, 3 },
  { 193, 4 },
  { 193, 2 },
  { 193, 6 },
  { 193, 6 },
  { 193, 6 },
  { 193, 6 },
  { 193, 5 },
  { 193, 3 },
  { 303, 0 },
  { 303, 1 },
  { 193, 1 },
  { 304, 8 },
  { 304, 11 },
  { 304, 7 },
  { 304, 5 },
  { 305, 1 },
  { 305, 3 },
  { 306, 0 },
  { 306, 2 },
  { 307, 1 },
  { 307, 3 },
  { 308, 0 },
  { 308, 4 },
  { 308, 2 },
  { 246, 0 },
  { 246, 2 },
  { 246, 3 },
  { 310, 1 },
  { 310, 2 },
  { 310, 3 },
  { 309, 1 },
  { 309, 3 },
  { 309, 1 },
  { 311, 6 },
  { 312, 1 },
  { 312, 3 },
  { 313, 5 },
  { 314, 5 },
  { 314, 6 },
  { 314, 4 },
  { 314, 5 },
  { 314, 1 },
  { 314, 2 },
  { 315, 0 },
  { 315, 3 },
  { 315, 6 },
  { 316, 1 },
  { 317, 1 },
  { 317, 2 },
  { 319, 1 },
  { 319, 2 },
  { 320, 2 },
  { 320, 2 },
  { 318, 0 },
  { 318, 2 },
  { 321, 2 },
  { 321, 2 },
  { 321, 1 },
  { 321, 1 },
  { 259, 2 },
  { 288, 2 },
  { 288, 1 },
  { 288, 1 },
  { 323, 4 },
  { 323, 2 },
  { 322, 5 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy395); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy395);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy395 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy395 = yymsp[-1].minor.yy395;
                                                yygotominor.yy395->explain = yymsp[-2].minor.yy331->explain;
                                                yygotominor.yy395->queryPlan = yymsp[-2].minor.yy331->queryPlan;
                                                delete yymsp[-2].minor.yy331;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy331 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy331 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy331 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 391: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==391);
      case 392: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==392);
      case 393: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==393);
      case 394: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==394);
      case 422: /* cmd ::= create_vtab */ yytestcase(yyruleno==422);
{yygotominor.yy395 = yymsp[0].minor.yy395;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy395 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy380->type,
                                                        yymsp[0].minor.yy380->transactionKw,
                                                        yymsp[0].minor.yy380->name
                                                    );
                                                delete yymsp[0].minor.yy380;
                                                delete yymsp[-1].minor.yy380;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy380 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy380 = new ParserStubTransDetails();
                                                yygotominor.yy380->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy380 = new ParserStubTransDetails();
                                                yygotominor.yy380->transactionKw = true;
                                                yygotominor.yy380->name = *(yymsp[0].minor.yy487);
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy380 = new ParserStubTransDetails();
                                                yygotominor.yy380->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy380 = new ParserStubTransDetails();
                                                yygotominor.yy380->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy380 = new ParserStubTransDetails();
                                                yygotominor.yy380->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy395 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy380->transactionKw,
                                                        yymsp[0].minor.yy380->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy380;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy395 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy380->transactionKw,
                                                        yymsp[0].minor.yy380->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy380;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy395 = new SqliteRollback(
                                                        yymsp[0].minor.yy380->transactionKw,
                                                        yymsp[0].minor.yy380->name
                                                    );
                                                delete yymsp[0].minor.yy380;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 37: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==37);
      case 90: /* gen_always ::= GENERATED ALWAYS */ yytestcase(yyruleno==90);
      case 93: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==93);
      case 115: /* tconscomma ::= COMMA */ yytestcase(yyruleno==115);
      case 137: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==137);
      case 319: /* not_opt ::= NOT */ yytestcase(yyruleno==319);
      case 335: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==335);
      case 403: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==403);
      case 420: /* kwcolumn_opt ::= */ yytestcase(yyruleno==420);
{yygotominor.yy411 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 36: /* ifnotexists ::= */ yytestcase(yyruleno==36);
      case 91: /* gen_always ::= */ yytestcase(yyruleno==91);
      case 92: /* autoinc ::= */ yytestcase(yyruleno==92);
      case 116: /* tconscomma ::= */ yytestcase(yyruleno==116);
      case 138: /* ifexists ::= */ yytestcase(yyruleno==138);
      case 318: /* not_opt ::= */ yytestcase(yyruleno==318);
      case 336: /* uniqueflag ::= */ yytestcase(yyruleno==336);
      case 404: /* database_kw_opt ::= */ yytestcase(yyruleno==404);
      case 421: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==421);
{yygotominor.yy411 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy395 = new SqliteSavepoint(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy395 = new SqliteRelease(*(yymsp[-1].minor.yy411), *(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy395 = new SqliteRollback(
                                                        yymsp[-3].minor.yy380->transactionKw,
                                                        *(yymsp[-1].minor.yy411),
                                                        *(yymsp[0].minor.yy487)
                                                    );
                                                delete yymsp[-1].minor.yy411;
                                                delete yymsp[-3].minor.yy380;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,202,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy395 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy411),
                                                        *(yymsp[-8].minor.yy634),
                                                        yymsp[-5].minor.yy648->name1,
                                                        yymsp[-5].minor.yy648->name2,
                                                        *(yymsp[-3].minor.yy594),
                                                        *(yymsp[-2].minor.yy565),
                                                        *(yymsp[0].minor.yy487)
                                                    );
                                                delete yymsp[-6].minor.yy411;
                                                delete yymsp[-8].minor.yy634;
                                                delete yymsp[-3].minor.yy594;
                                                delete yymsp[-2].minor.yy565;
                                                delete yymsp[-5].minor.yy648;
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy395 = new SqliteCreateTable(
                                                        *(yymsp[-3].minor.yy411),
                                                        *(yymsp[-5].minor.yy634),
                                                        yymsp[-2].minor.yy648->name1,
                                                        yymsp[-2].minor.yy648->name2,
                                                        yymsp[0].minor.yy129
                                                    );
                                                delete yymsp[-3].minor.yy411;
                                                delete yymsp[-5].minor.yy634;
                                                delete yymsp[-2].minor.yy648;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 140: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==140);
      case 374: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==374);
{  yy_destructor(yypParser,203,&yymsp[-5].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 141: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==141);
      case 375: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==375);
{  yy_destructor(yypParser,203,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
      case 194: /* dbnm ::= */ yytestcase(yyruleno==194);
      case 343: /* collate ::= */ yytestcase(yyruleno==343);
      case 429: /* vtabarg ::= */ yytestcase(yyruleno==429);
      case 433: /* anylist ::= */ yytestcase(yyruleno==433);
{yygotominor.yy487 = new QString();}
        break;
      case 34: /* table_options ::= WITHOUT nm */
      case 35: /* table_options ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==35);
{
                                                if (yymsp[0].minor.yy487->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy487)));

                                                yygotominor.yy487 = yymsp[0].minor.yy487;
                                            }
        break;
      case 38: /* temp ::= TEMP */
{yygotominor.yy634 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 39: /* temp ::= */
      case 162: /* distinct ::= */ yytestcase(yyruleno==162);
{yygotominor.yy634 = new int(0);}
        break;
      case 40: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy594->append(yymsp[0].minor.yy387);
                                                yygotominor.yy594 = yymsp[-2].minor.yy594;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 41: /* columnlist ::= column */
{
                                                yygotominor.yy594 = new ParserCreateTableColumnList();
                                                yygotominor.yy594->append(yymsp[0].minor.yy387);
                                            }
        break;
      case 42: /* column ::= columnid type carglist */
{
                                                yygotominor.yy387 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy487), yymsp[-1].minor.yy297, *(yymsp[0].minor.yy299));
                                                delete yymsp[-2].minor.yy487;
                                                delete yymsp[0].minor.yy299;
                                                objectForTokens = yygotominor.yy387;
                                            }
        break;
      case 43: /* columnid ::= nm */
      case 44: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==44);
      case 49: /* nm ::= id */ yytestcase(yyruleno==49);
      case 57: /* typename ::= ids */ yytestcase(yyruleno==57);
      case 195: /* dbnm ::= DOT nm */ yytestcase(yyruleno==195);
      case 344: /* collate ::= COLLATE ids */ yytestcase(yyruleno==344);
      case 345: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==345);
{yygotominor.yy487 = yymsp[0].minor.yy487;}
        break;
      case 45: /* id ::= ID */
{
                                                yygotominor.yy487 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value
                                                    )
                                                );
                                            }
        break;
      case 46: /* id_opt ::= id */
{
                                                yygotominor.yy487 = yymsp[0].minor.yy487;
                                            }
        break;
      case 47: /* id_opt ::= */
{
                                                yygotominor.yy487 = new QString();
                                            }
        break;
      case 48: /* ids ::= ID|STRING */
      case 51: /* nm ::= JOIN_KW */ yytestcase(yyruleno==51);
{yygotominor.yy487 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 50: /* nm ::= STRING */
{yygotominor.yy487 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 52: /* type ::= */
{yygotominor.yy297 = nullptr;}
        break;
      case 53: /* type ::= typetoken */
{yygotominor.yy297 = yymsp[0].minor.yy297;}
        break;
      case 54: /* typetoken ::= typename */
{
                                                yygotominor.yy297 = new SqliteColumnType(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy297;
                                            }
        break;
      case 55: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy297 = new SqliteColumnType(*(yymsp[-3].minor.yy487), *(yymsp[-1].minor.yy309));
                                                delete yymsp[-3].minor.yy487;
                                                delete yymsp[-1].minor.yy309;
                                                objectForTokens = yygotominor.yy297;
                                            }
        break;
      case 56: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy297 = new SqliteColumnType(*(yymsp[-5].minor.yy487), *(yymsp[-3].minor.yy309), *(yymsp[-1].minor.yy309));
                                                delete yymsp[-5].minor.yy487;
                                                delete yymsp[-3].minor.yy309;
                                                delete yymsp[-1].minor.yy309;
                                                objectForTokens = yygotominor.yy297;
                                            }
        break;
      case 58: /* typename ::= typename ids */
      case 59: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==59);
{
                                                yymsp[-1].minor.yy487->append(" " + *(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                yygotominor.yy487 = yymsp[-1].minor.yy487;
                                            }
        break;
      case 60: /* signed ::= plus_num */
      case 61: /* signed ::= minus_num */ yytestcase(yyruleno==61);
      case 360: /* nmnum ::= plus_num */ yytestcase(yyruleno==360);
      case 365: /* plus_num ::= PLUS number */ yytestcase(yyruleno==365);
      case 366: /* plus_num ::= number */ yytestcase(yyruleno==366);
{yygotominor.yy309 = yymsp[0].minor.yy309;}
        break;
      case 62: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy299->append(yymsp[0].minor.yy496);
                                                yygotominor.yy299 = yymsp[-1].minor.yy299;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 63: /* carglist ::= */
{yygotominor.yy299 = new ParserCreateTableColumnConstraintList();}
        break;
      case 64: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initDefNameOnly(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 65: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initDefTerm(*(yymsp[0].minor.yy309));
                                                delete yymsp[0].minor.yy309;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 66: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initDefExpr(yymsp[-1].minor.yy408);
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 67: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initDefTerm(*(yymsp[0].minor.yy309), false);
                                                delete yymsp[0].minor.yy309;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 68: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initDefTerm(*(yymsp[0].minor.yy309), true);
                                                delete yymsp[0].minor.yy309;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 69: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initDefId(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 70: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 71: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initNull(*(yymsp[0].minor.yy490));
                                                delete yymsp[0].minor.yy490;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 72: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initNotNull(*(yymsp[0].minor.yy490));
                                                delete yymsp[0].minor.yy490;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 73: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initPk(*(yymsp[-2].minor.yy101), *(yymsp[-1].minor.yy490), *(yymsp[0].minor.yy411));
                                                delete yymsp[-2].minor.yy101;
                                                delete yymsp[0].minor.yy411;
                                                delete yymsp[-1].minor.yy490;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 74: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initUnique(*(yymsp[0].minor.yy490));
                                                delete yymsp[0].minor.yy490;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 75: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initCheck(yymsp[-1].minor.yy408);
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 76: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initFk(*(yymsp[-2].minor.yy487), *(yymsp[-1].minor.yy87), *(yymsp[0].minor.yy409));
                                                delete yymsp[-2].minor.yy487;
                                                delete yymsp[0].minor.yy409;
                                                delete yymsp[-1].minor.yy87;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 77: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initDefer(yymsp[0].minor.yy137->initially, yymsp[0].minor.yy137->deferrable);
                                                delete yymsp[0].minor.yy137;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 78: /* ccons ::= COLLATE ids */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initColl(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy496;
                                            }
        break;
      case 79: /* ccons ::= gen_always AS LP expr RP id_opt */
      case 80: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==80);
      case 81: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==81);
      case 82: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==82);
{
                                                if (!yymsp[0].minor.yy487->isNull() && yymsp[0].minor.yy487->toLower() != "stored" && yymsp[0].minor.yy487->toLower() != "virtual")
                                                    parserContext->errorAtToken(QString("Invalid generated column type: %1").arg(*(yymsp[0].minor.yy487)));

                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
												yygotominor.yy496->initGeneratedAs(yymsp[-2].minor.yy408, *(yymsp[-5].minor.yy411), *(yymsp[0].minor.yy487));
												delete yymsp[-5].minor.yy411;
												delete yymsp[0].minor.yy487;
												objectForTokens = yygotominor.yy496;
											}
        break;
      case 83: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy496 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy496->initCheck();
                                                objectForTokens = yygotominor.yy496;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 84: /* term ::= NULL */
{yygotominor.yy309 = new QVariant();}
        break;
      case 85: /* term ::= INTEGER */
      case 368: /* number ::= INTEGER */ yytestcase(yyruleno==368);
{yygotominor.yy309 = parserContext->handleNumberToken(yymsp[0].minor.yy0->value);}
        break;
      case 86: /* term ::= FLOAT */
      case 369: /* number ::= FLOAT */ yytestcase(yyruleno==369);
{yygotominor.yy309 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 87: /* term ::= STRING|BLOB */
{yygotominor.yy309 = new QVariant(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 88: /* tnm ::= term */
{
												yygotominor.yy374 = new ParserTermOrLiteral(*(yymsp[0].minor.yy309));
												delete yymsp[0].minor.yy309;
											}
        break;
      case 89: /* tnm ::= nm */
{
												yygotominor.yy374 = new ParserTermOrLiteral(*(yymsp[0].minor.yy487));
												delete yymsp[0].minor.yy487;
											}
        break;
      case 94: /* refargs ::= */
{yygotominor.yy409 = new ParserFkConditionList();}
        break;
      case 95: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy409->append(yymsp[0].minor.yy643);
                                                yygotominor.yy409 = yymsp[-1].minor.yy409;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 96: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy643 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 97: /* refarg ::= ON INSERT refact */
{yygotominor.yy643 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy400)); delete yymsp[0].minor.yy400;}
        break;
      case 98: /* refarg ::= ON DELETE refact */
{yygotominor.yy643 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy400)); delete yymsp[0].minor.yy400;}
        break;
      case 99: /* refarg ::= ON UPDATE refact */
      case 100: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==100);
{yygotominor.yy643 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy400)); delete yymsp[0].minor.yy400;}
        break;
      case 101: /* refact ::= SET NULL */
{yygotominor.yy400 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 102: /* refact ::= SET DEFAULT */
{yygotominor.yy400 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 103: /* refact ::= CASCADE */
{yygotominor.yy400 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 104: /* refact ::= RESTRICT */
{yygotominor.yy400 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 105: /* refact ::= NO ACTION */
{yygotominor.yy400 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 106: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy137 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy72));
                                                delete yymsp[0].minor.yy72;
                                            }
        break;
      case 107: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy137 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy72));
                                                delete yymsp[0].minor.yy72;
                                            }
        break;
      case 108: /* init_deferred_pred_opt ::= */
{yygotominor.yy72 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 109: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy72 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 110: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy72 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 111: /* conslist_opt ::= */
{yygotominor.yy565 = new ParserCreateTableConstraintList();}
        break;
      case 112: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy565 = yymsp[0].minor.yy565;}
        break;
      case 113: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy214->afterComma = *(yymsp[-1].minor.yy411);
                                                yymsp[-2].minor.yy565->append(yymsp[0].minor.yy214);
                                                yygotominor.yy565 = yymsp[-2].minor.yy565;
                                                delete yymsp[-1].minor.yy411;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 114: /* conslist ::= tcons */
{
                                                yygotominor.yy565 = new ParserCreateTableConstraintList();
                                                yygotominor.yy565->append(yymsp[0].minor.yy214);
                                            }
        break;
      case 117: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy214 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy214->initNameOnly(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy214;
                                            }
        break;
      case 118: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy214 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy214->initPk(*(yymsp[-3].minor.yy87), *(yymsp[-2].minor.yy411), *(yymsp[0].minor.yy490));
                                                delete yymsp[-2].minor.yy411;
                                                delete yymsp[0].minor.yy490;
                                                delete yymsp[-3].minor.yy87;
                                                objectForTokens = yygotominor.yy214;
                                            }
        break;
      case 119: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy214 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy214->initUnique(*(yymsp[-2].minor.yy87), *(yymsp[0].minor.yy490));
                                                delete yymsp[0].minor.yy490;
                                                delete yymsp[-2].minor.yy87;
                                                objectForTokens = yygotominor.yy214;
                                            }
        break;
      case 120: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy214 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy214->initCheck(yymsp[-2].minor.yy408, *(yymsp[0].minor.yy490));
                                                objectForTokens = yygotominor.yy214;
                                            }
        break;
      case 121: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 122: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==122);
      case 123: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==123);
{
                                                yygotominor.yy214 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy214->initFk(
                                                    *(yymsp[-6].minor.yy87),
                                                    *(yymsp[-3].minor.yy487),
                                                    *(yymsp[-2].minor.yy87),
                                                    *(yymsp[-1].minor.yy409),
                                                    yymsp[0].minor.yy137->initially,
                                                    yymsp[0].minor.yy137->deferrable
                                                );
                                                delete yymsp[-3].minor.yy487;
                                                delete yymsp[-1].minor.yy409;
                                                delete yymsp[0].minor.yy137;
                                                delete yymsp[-2].minor.yy87;
                                                delete yymsp[-6].minor.yy87;
                                                objectForTokens = yygotominor.yy214;
                                            }
        break;
      case 124: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy214 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy214->initCheck();
                                                objectForTokens = yygotominor.yy214;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,225,&yymsp[0].minor);
}
        break;
      case 125: /* defer_subclause_opt ::= */
{yygotominor.yy137 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 126: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy137 = yymsp[0].minor.yy137;}
        break;
      case 127: /* onconf ::= */
      case 129: /* orconf ::= */ yytestcase(yyruleno==129);
{yygotominor.yy490 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 128: /* onconf ::= ON CONFLICT resolvetype */
      case 130: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==130);
{yygotominor.yy490 = yymsp[0].minor.yy490;}
        break;
      case 131: /* resolvetype ::= raisetype */
      case 132: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==132);
      case 133: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==133);
{yygotominor.yy490 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 134: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy395 = new SqliteDropTable(*(yymsp[-1].minor.yy411), yymsp[0].minor.yy648->name1, yymsp[0].minor.yy648->name2);
                                                delete yymsp[-1].minor.yy411;
                                                delete yymsp[0].minor.yy648;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 135: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 136: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==136);
      case 143: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==143);
      case 144: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==144);
      case 187: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==187);
      case 188: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==188);
      case 189: /* singlesrc ::= nm DOT ID_VIEW */ yytestcase(yyruleno==189);
      case 190: /* singlesrc ::= ID_DB|ID_VIEW */ yytestcase(yyruleno==190);
      case 333: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==333);
      case 334: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==334);
      case 347: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==347);
      case 348: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==348);
      case 358: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==358);
      case 359: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==359);
      case 397: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==397);
      case 398: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==398);
      case 408: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==408);
      case 409: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==409);
      case 412: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==412);
      case 413: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==413);
      case 418: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==418);
      case 419: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==419);
      case 425: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==425);
      case 426: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==426);
{  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 139: /* cmd ::= CREATE temp VIEW ifnotexists fullname idxlist_opt AS select */
{
                                                yygotominor.yy395 = new SqliteCreateView(*(yymsp[-6].minor.yy634), *(yymsp[-4].minor.yy411), yymsp[-3].minor.yy648->name1, yymsp[-3].minor.yy648->name2, yymsp[0].minor.yy129, *(yymsp[-2].minor.yy87));
                                                delete yymsp[-6].minor.yy634;
                                                delete yymsp[-4].minor.yy411;
                                                delete yymsp[-3].minor.yy648;
                                                delete yymsp[-2].minor.yy87;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 142: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy395 = new SqliteDropView(*(yymsp[-1].minor.yy411), yymsp[0].minor.yy648->name1, yymsp[0].minor.yy648->name2);
                                                delete yymsp[-1].minor.yy411;
                                                delete yymsp[0].minor.yy648;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 145: /* cmd ::= select_stmt */
      case 226: /* cmd ::= delete_stmt */ yytestcase(yyruleno==226);
      case 237: /* cmd ::= update_stmt */ yytestcase(yyruleno==237);
      case 258: /* cmd ::= insert_stmt */ yytestcase(yyruleno==258);
{
                                                yygotominor.yy395 = yymsp[0].minor.yy395;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 146: /* select_stmt ::= select */
{
                                                yygotominor.yy395 = yymsp[0].minor.yy129;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 147: /* select ::= with selectnowith */
{
                                                yygotominor.yy129 = yymsp[0].minor.yy129;
                                                yymsp[0].minor.yy129->setWith(yymsp[-1].minor.yy617);
                                                objectForTokens = yygotominor.yy129;
                                            }
        break;
      case 148: /* selectnowith ::= oneselect */
{
                                                yygotominor.yy129 = SqliteSelect::append(yymsp[0].minor.yy174);
                                                objectForTokens = yygotominor.yy129;
                                            }
        break;
      case 149: /* selectnowith ::= selectnowith multiselect_op oneselect */
{
                                                yygotominor.yy129 = SqliteSelect::append(yymsp[-2].minor.yy129, *(yymsp[-1].minor.yy502), yymsp[0].minor.yy174);
                                                delete yymsp[-1].minor.yy502;
                                                objectForTokens = yygotominor.yy129;
                                            }
        break;
      case 150: /* selectnowith ::= values */
{
                                                yygotominor.yy129 = SqliteSelect::append(*(yymsp[0].minor.yy630));
                                                delete yymsp[0].minor.yy630;
                                                objectForTokens = yygotominor.yy129;
                                            }
        break;
      case 151: /* selectnowith ::= selectnowith COMMA values */
{
                                                yygotominor.yy129 = SqliteSelect::append(yymsp[-2].minor.yy129, SqliteSelect::CompoundOperator::UNION_ALL, *(yymsp[0].minor.yy630));
                                                delete yymsp[0].minor.yy630;
                                                objectForTokens = yygotominor.yy129;
                                            }
        break;
      case 152: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy174 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy634),
                                                        *(yymsp[-6].minor.yy597),
                                                        yymsp[-5].minor.yy607,
                                                        yymsp[-4].minor.yy408,
                                                        *(yymsp[-3].minor.yy15),
                                                        yymsp[-2].minor.yy408,
                                                        *(yymsp[-1].minor.yy555),
                                                        yymsp[0].minor.yy36
                                                    );
                                                delete yymsp[-6].minor.yy597;
                                                delete yymsp[-7].minor.yy634;
                                                delete yymsp[-3].minor.yy15;
                                                delete yymsp[-1].minor.yy555;
                                                objectForTokens = yygotominor.yy174;
                                            }
        break;
      case 153: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
{
                                                yygotominor.yy174 = new SqliteSelect::Core(
                                                        *(yymsp[-8].minor.yy634),
                                                        *(yymsp[-7].minor.yy597),
                                                        yymsp[-6].minor.yy607,
                                                        yymsp[-5].minor.yy408,
                                                        *(yymsp[-4].minor.yy15),
                                                        yymsp[-3].minor.yy408,
														*(yymsp[-2].minor.yy483),
                                                        *(yymsp[-1].minor.yy555),
                                                        yymsp[0].minor.yy36
                                                    );
                                                delete yymsp[-7].minor.yy597;
                                                delete yymsp[-8].minor.yy634;
                                                delete yymsp[-4].minor.yy15;
                                                delete yymsp[-1].minor.yy555;
												delete yymsp[-2].minor.yy483;
                                                objectForTokens = yygotominor.yy174;
											}
        break;
      case 154: /* values ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy630 = new ParserExprNestedList();
                                                yygotominor.yy630->append(*(yymsp[-1].minor.yy15));
                                                delete yymsp[-1].minor.yy15;
                                            }
        break;
      case 155: /* values ::= values COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy630->append(*(yymsp[-1].minor.yy15));
                                                yygotominor.yy630 = yymsp[-4].minor.yy630;
                                                delete yymsp[-1].minor.yy15;
                                                DONT_INHERIT_TOKENS("values");
                                            }
        break;
      case 156: /* multiselect_op ::= UNION */
{yygotominor.yy502 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 157: /* multiselect_op ::= UNION ALL */
{yygotominor.yy502 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 158: /* multiselect_op ::= EXCEPT */
{yygotominor.yy502 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 159: /* multiselect_op ::= INTERSECT */
{yygotominor.yy502 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 160: /* distinct ::= DISTINCT */
{yygotominor.yy634 = new int(1);}
        break;
      case 161: /* distinct ::= ALL */
{yygotominor.yy634 = new int(2);}
        break;
      case 163: /* sclp ::= selcollist COMMA */
{yygotominor.yy597 = yymsp[-1].minor.yy597;}
        break;
      case 164: /* sclp ::= */
      case 235: /* returning ::= */ yytestcase(yyruleno==235);
{yygotominor.yy597 = new ParserResultColumnList();}
        break;
      case 165: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy408,
                                                        yymsp[0].minor.yy424 ? yymsp[0].minor.yy424->asKw : false,
                                                        yymsp[0].minor.yy424 ? yymsp[0].minor.yy424->name : QString()
                                                    );

                                                yymsp[-2].minor.yy597->append(obj);
                                                yygotominor.yy597 = yymsp[-2].minor.yy597;
                                                delete yymsp[0].minor.yy424;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 166: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy597->append(obj);
                                                yygotominor.yy597 = yymsp[-1].minor.yy597;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 167: /* selcollist ::= sclp tnm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        yymsp[-2].minor.yy374->toName()
                                                    );
													
												if (!yymsp[-2].minor.yy374->isName())
													parserContext->errorAtToken("Syntax error <expected name, not literal value>", -3);
													
                                                yymsp[-3].minor.yy597->append(obj);
                                                yygotominor.yy597 = yymsp[-3].minor.yy597;
                                                delete yymsp[-2].minor.yy374;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 168: /* selcollist ::= sclp */
      case 169: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==169);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy597 = yymsp[0].minor.yy597;
                                            }
        break;
      case 170: /* as ::= AS nm */
{
                                                yygotominor.yy424 = new ParserStubAlias(*(yymsp[0].minor.yy487), true);
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 171: /* as ::= ids */
      case 172: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==172);
      case 173: /* as ::= ID_ALIAS */ yytestcase(yyruleno==173);
{
                                                yygotominor.yy424 = new ParserStubAlias(*(yymsp[0].minor.yy487), false);
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 174: /* as ::= */
{yygotominor.yy424 = nullptr;}
        break;
      case 175: /* from ::= */
{yygotominor.yy607 = nullptr;}
        break;
      case 176: /* from ::= FROM joinsrc */
{yygotominor.yy607 = yymsp[0].minor.yy607;}
        break;
      case 177: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy607 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy25,
                                                        *(yymsp[0].minor.yy396)
                                                    );
                                                delete yymsp[0].minor.yy396;
                                                objectForTokens = yygotominor.yy607;
                                            }
        break;
      case 178: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy607 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy607;
                                            }
        break;
      case 179: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy317, yymsp[-1].minor.yy25, yymsp[0].minor.yy263);

                                                yymsp[-3].minor.yy396->append(src);
                                                yygotominor.yy396 = yymsp[-3].minor.yy396;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 180: /* seltablist ::= */
{
                                                yygotominor.yy396 = new ParserOtherSourceList();
                                            }
        break;
      case 181: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy25 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy487),
                                                        *(yymsp[-2].minor.yy487),
                                                        yymsp[-1].minor.yy424 ? yymsp[-1].minor.yy424->asKw : false,
                                                        yymsp[-1].minor.yy424 ? yymsp[-1].minor.yy424->name : QString(),
                                                        yymsp[0].minor.yy48 ? yymsp[0].minor.yy48->notIndexedKw : false,
                                                        yymsp[0].minor.yy48 ? yymsp[0].minor.yy48->indexedBy : QString()
                                                    );
                                                delete yymsp[-3].minor.yy487;
                                                delete yymsp[-2].minor.yy487;
                                                delete yymsp[-1].minor.yy424;
                                                if (yymsp[0].minor.yy48)
                                                    delete yymsp[0].minor.yy48;
                                                objectForTokens = yygotominor.yy25;
                                            }
        break;
      case 182: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy25 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy129,
                                                        yymsp[0].minor.yy424 ? yymsp[0].minor.yy424->asKw : false,
                                                        yymsp[0].minor.yy424 ? yymsp[0].minor.yy424->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy424;
                                                objectForTokens = yygotominor.yy25;
                                            }
        break;
      case 183: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy25 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy607,
                                                        yymsp[0].minor.yy424 ? yymsp[0].minor.yy424->asKw : false,
                                                        yymsp[0].minor.yy424 ? yymsp[0].minor.yy424->name : QString()
                                                    );
                                                delete yymsp[0].minor.yy424;
                                                objectForTokens = yygotominor.yy25;
                                            }
        break;
      case 184: /* singlesrc ::= nm dbnm LP exprlist RP as */
{
                                                yygotominor.yy25 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-5].minor.yy487),
                                                        *(yymsp[-4].minor.yy487),
                                                        yymsp[0].minor.yy424 ? yymsp[0].minor.yy424->asKw : false,
                                                        yymsp[0].minor.yy424 ? yymsp[0].minor.yy424->name : QString(),
                                                        *(yymsp[-2].minor.yy15)
                                                    );
                                                delete yymsp[-5].minor.yy487;
                                                delete yymsp[-4].minor.yy487;
                                                delete yymsp[0].minor.yy424;
                                                if (yymsp[-2].minor.yy15)
                                                    delete yymsp[-2].minor.yy15;

                                                objectForTokens = yygotominor.yy25;
                                            }
        break;
      case 185: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy25 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy25;
                                            }
        break;
      case 186: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy25 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy25->database = *(yymsp[-1].minor.yy487);
                                                delete yymsp[-1].minor.yy487;
                                                objectForTokens = yygotominor.yy25;
                                            }
        break;
      case 191: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy263 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy408);
                                                objectForTokens = yygotominor.yy263;
                                            }
        break;
      case 192: /* joinconstr_opt ::= USING LP idlist RP */
{
                                                yygotominor.yy263 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy407));
                                                delete yymsp[-1].minor.yy407;
                                                objectForTokens = yygotominor.yy263;
                                            }
        break;
      case 193: /* joinconstr_opt ::= */
{yygotominor.yy263 = nullptr;}
        break;
      case 196: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy648 = new ParserFullName();
                                                yygotominor.yy648->name1 = *(yymsp[-1].minor.yy487);
                                                yygotominor.yy648->name2 = *(yymsp[0].minor.yy487);
                                                delete yymsp[-1].minor.yy487;
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 197: /* joinop ::= COMMA */
{
                                                yygotominor.yy317 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy317;
                                            }
        break;
      case 198: /* joinop ::= JOIN */
{
                                                yygotominor.yy317 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy317;
                                            }
        break;
      case 199: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy317 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy317;
                                            }
        break;
      case 200: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy317 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy487));
                                                delete yymsp[-1].minor.yy487;
                                                objectForTokens = yygotominor.yy317;
                                            }
        break;
      case 201: /* joinop ::= JOIN_KW nm nm JOIN */
      case 202: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==202);
{
                                                yygotominor.yy317 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy487), *(yymsp[-1].minor.yy487));
                                                delete yymsp[-2].minor.yy487;
                                                objectForTokens = yygotominor.yy317;
                                            }
        break;
      case 203: /* indexed_opt ::= */
{yygotominor.yy48 = nullptr;}
        break;
      case 204: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy48 = new ParserIndexedBy(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 205: /* indexed_opt ::= NOT INDEXED */
      case 206: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==206);
{yygotominor.yy48 = new ParserIndexedBy(true);}
        break;
      case 207: /* orderby_opt ::= */
{yygotominor.yy555 = new ParserOrderByList();}
        break;
      case 208: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy555 = yymsp[0].minor.yy555;}
        break;
      case 209: /* sortlist ::= sortlist COMMA expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy408, *(yymsp[-1].minor.yy101), *(yymsp[0].minor.yy51));
                                                yymsp[-4].minor.yy555->append(obj);
                                                yygotominor.yy555 = yymsp[-4].minor.yy555;
                                                delete yymsp[-1].minor.yy101;
												delete yymsp[0].minor.yy51;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 210: /* sortlist ::= expr sortorder nulls */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-2].minor.yy408, *(yymsp[-1].minor.yy101), *(yymsp[0].minor.yy51));
                                                yygotominor.yy555 = new ParserOrderByList();
                                                yygotominor.yy555->append(obj);
                                                delete yymsp[-1].minor.yy101;
												delete yymsp[0].minor.yy51;
                                                objectForTokens = obj;
                                            }
        break;
      case 211: /* sortorder ::= ASC */
{yygotominor.yy101 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 212: /* sortorder ::= DESC */
{yygotominor.yy101 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 213: /* sortorder ::= */
{yygotominor.yy101 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 214: /* nulls ::= NULLS FIRST */
{yygotominor.yy51 = new SqliteNulls(SqliteNulls::FIRST);}
        break;
      case 215: /* nulls ::= NULLS LAST */
{yygotominor.yy51 = new SqliteNulls(SqliteNulls::LAST);}
        break;
      case 216: /* nulls ::= */
{yygotominor.yy51 = new SqliteNulls(SqliteNulls::null);}
        break;
      case 217: /* groupby_opt ::= */
      case 328: /* exprlist ::= */ yytestcase(yyruleno==328);
{yygotominor.yy15 = new ParserExprList();}
        break;
      case 218: /* groupby_opt ::= GROUP BY nexprlist */
      case 327: /* exprlist ::= nexprlist */ yytestcase(yyruleno==327);
{yygotominor.yy15 = yymsp[0].minor.yy15;}
        break;
      case 219: /* groupby_opt ::= GROUP BY */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy15 = new ParserExprList();
                                            }
        break;
      case 220: /* having_opt ::= */
      case 232: /* where_opt ::= */ yytestcase(yyruleno==232);
      case 324: /* case_else ::= */ yytestcase(yyruleno==324);
      case 326: /* case_operand ::= */ yytestcase(yyruleno==326);
      case 352: /* vinto ::= */ yytestcase(yyruleno==352);
      case 386: /* when_clause ::= */ yytestcase(yyruleno==386);
      case 401: /* key_opt ::= */ yytestcase(yyruleno==401);
{yygotominor.yy408 = nullptr;}
        break;
      case 221: /* having_opt ::= HAVING expr */
      case 233: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==233);
      case 317: /* expr ::= exprx */ yytestcase(yyruleno==317);
      case 323: /* case_else ::= ELSE expr */ yytestcase(yyruleno==323);
      case 325: /* case_operand ::= exprx */ yytestcase(yyruleno==325);
      case 351: /* vinto ::= INTO expr */ yytestcase(yyruleno==351);
      case 387: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==387);
      case 402: /* key_opt ::= KEY expr */ yytestcase(yyruleno==402);
{yygotominor.yy408 = yymsp[0].minor.yy408;}
        break;
      case 222: /* limit_opt ::= */
{yygotominor.yy36 = nullptr;}
        break;
      case 223: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy36 = new SqliteLimit(yymsp[0].minor.yy408);
                                                objectForTokens = yygotominor.yy36;
                                            }
        break;
      case 224: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy36 = new SqliteLimit(yymsp[-2].minor.yy408, yymsp[0].minor.yy408, true);
                                                objectForTokens = yygotominor.yy36;
                                            }
        break;
      case 225: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy36 = new SqliteLimit(yymsp[-2].minor.yy408, yymsp[0].minor.yy408, false);
                                                objectForTokens = yygotominor.yy36;
                                            }
        break;
      case 227: /* delete_stmt ::= with DELETE FROM fullname indexed_opt where_opt returning */
{
                                                if (yymsp[-2].minor.yy48)
                                                {
                                                    if (!yymsp[-2].minor.yy48->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy395 = new SqliteDelete(
                                                                yymsp[-3].minor.yy648->name1,
                                                                yymsp[-3].minor.yy648->name2,
                                                                yymsp[-2].minor.yy48->indexedBy,
                                                                yymsp[-1].minor.yy408,
                                                                yymsp[-6].minor.yy617,
                                                                *(yymsp[0].minor.yy597)
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy395 = new SqliteDelete(
                                                                yymsp[-3].minor.yy648->name1,
                                                                yymsp[-3].minor.yy648->name2,
                                                                yymsp[-2].minor.yy48->notIndexedKw,
                                                                yymsp[-1].minor.yy408,
                                                                yymsp[-6].minor.yy617,
                                                                *(yymsp[0].minor.yy597)
                                                            );
                                                    }
                                                    delete yymsp[-2].minor.yy48;
                                                }
                                                else
                                                {
                                                    yygotominor.yy395 = new SqliteDelete(
                                                            yymsp[-3].minor.yy648->name1,
                                                            yymsp[-3].minor.yy648->name2,
                                                            false,
                                                            yymsp[-1].minor.yy408,
                                                            yymsp[-6].minor.yy617,
                                                            *(yymsp[0].minor.yy597)
                                                        );
                                                }
                                                delete yymsp[-3].minor.yy648;
                                                delete yymsp[0].minor.yy597;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 228: /* delete_stmt ::= with DELETE FROM */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-2].minor.yy617;
                                                yygotominor.yy395 = q;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 229: /* delete_stmt ::= with DELETE FROM nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteDelete* q = new SqliteDelete();
                                                q->with = yymsp[-4].minor.yy617;
                                                q->database = *(yymsp[-1].minor.yy487);
                                                yygotominor.yy395 = q;
                                                objectForTokens = yygotominor.yy395;
                                                delete yymsp[-1].minor.yy487;
                                            }
        break;
      case 230: /* delete_stmt ::= with DELETE FROM nm DOT ID_TAB */
      case 241: /* update_stmt ::= with UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==241);
{  yy_destructor(yypParser,246,&yymsp[-5].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 231: /* delete_stmt ::= with DELETE FROM ID_DB|ID_TAB */
      case 242: /* update_stmt ::= with UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==242);
{  yy_destructor(yypParser,246,&yymsp[-3].minor);
}
        break;
      case 234: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy408 = new SqliteExpr();
                                            }
        break;
      case 236: /* returning ::= RETURNING selcollist */
{yygotominor.yy597 = yymsp[0].minor.yy597;}
        break;
      case 238: /* update_stmt ::= with UPDATE orconf fullname indexed_opt SET setlist from where_opt returning */
{
                                                yygotominor.yy395 = new SqliteUpdate(
                                                        *(yymsp[-7].minor.yy490),
                                                        yymsp[-6].minor.yy648->name1,
                                                        yymsp[-6].minor.yy648->name2,
                                                        yymsp[-5].minor.yy48 ? yymsp[-5].minor.yy48->notIndexedKw : false,
                                                        yymsp[-5].minor.yy48 ? yymsp[-5].minor.yy48->indexedBy : QString(),
                                                        *(yymsp[-3].minor.yy585),
														yymsp[-2].minor.yy607,
                                                        yymsp[-1].minor.yy408,
                                                        yymsp[-9].minor.yy617,
                                                        *(yymsp[0].minor.yy597)
                                                    );
                                                delete yymsp[-7].minor.yy490;
                                                delete yymsp[-6].minor.yy648;
                                                delete yymsp[-3].minor.yy585;
                                                delete yymsp[0].minor.yy597;
                                                if (yymsp[-5].minor.yy48)
                                                    delete yymsp[-5].minor.yy48;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 239: /* update_stmt ::= with UPDATE orconf */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-2].minor.yy617;
                                                yygotominor.yy395 = q;
                                                objectForTokens = yygotominor.yy395;
                                                delete yymsp[0].minor.yy490;
                                            }
        break;
      case 240: /* update_stmt ::= with UPDATE orconf nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteUpdate* q = new SqliteUpdate();
                                                q->with = yymsp[-4].minor.yy617;
                                                q->database = *(yymsp[-1].minor.yy487);
                                                yygotominor.yy395 = q;
                                                objectForTokens = yygotominor.yy395;
                                                delete yymsp[-2].minor.yy490;
                                                delete yymsp[-1].minor.yy487;
                                            }
        break;
      case 243: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy585->append(ParserSetValue(*(yymsp[-2].minor.yy487), yymsp[0].minor.yy408));
                                                yygotominor.yy585 = yymsp[-4].minor.yy585;
                                                delete yymsp[-2].minor.yy487;
                                            }
        break;
      case 244: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
{
                                                yymsp[-6].minor.yy585->append(ParserSetValue(*(yymsp[-3].minor.yy407), yymsp[0].minor.yy408));
                                                yygotominor.yy585 = yymsp[-6].minor.yy585;
                                                delete yymsp[-3].minor.yy407;
                                            }
        break;
      case 245: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy585 = new ParserSetValueList();
                                                yygotominor.yy585->append(ParserSetValue(*(yymsp[-2].minor.yy487), yymsp[0].minor.yy408));
                                                delete yymsp[-2].minor.yy487;
                                            }
        break;
      case 246: /* setlist ::= LP idlist RP EQ expr */
{
                                                yygotominor.yy585 = new ParserSetValueList();
                                                yygotominor.yy585->append(ParserSetValue(*(yymsp[-3].minor.yy407), yymsp[0].minor.yy408));
                                                delete yymsp[-3].minor.yy407;
                                            }
        break;
      case 247: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy585 = new ParserSetValueList();
                                            }
        break;
      case 248: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy585 = yymsp[-1].minor.yy585;
                                            }
        break;
      case 249: /* setlist ::= setlist COMMA ID_COL */
      case 250: /* setlist ::= ID_COL */ yytestcase(yyruleno==250);
{  yy_destructor(yypParser,277,&yymsp[-2].minor);
}
        break;
      case 251: /* idlist_opt ::= */
{yygotominor.yy407 = new QStringList();}
        break;
      case 252: /* idlist_opt ::= LP idlist RP */
{yygotominor.yy407 = yymsp[-1].minor.yy407;}
        break;
      case 253: /* idlist ::= idlist COMMA nm */
{
                                                yygotominor.yy407 = yymsp[-2].minor.yy407;
                                                *(yygotominor.yy407) << *(yymsp[0].minor.yy487);
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 254: /* idlist ::= nm */
{
                                                yygotominor.yy407 = new QStringList();
                                                *(yygotominor.yy407) << *(yymsp[0].minor.yy487);
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 255: /* idlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy407 = new QStringList();
                                            }
        break;
      case 256: /* idlist ::= idlist COMMA ID_COL */
      case 257: /* idlist ::= ID_COL */ yytestcase(yyruleno==257);
{  yy_destructor(yypParser,271,&yymsp[-2].minor);
}
        break;
      case 259: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt select upsert returning */
{
                                                yygotominor.yy395 = new SqliteInsert(
                                                        yymsp[-6].minor.yy368->replace,
                                                        yymsp[-6].minor.yy368->orConflict,
                                                        yymsp[-4].minor.yy648->name1,
                                                        yymsp[-4].minor.yy648->name2,
                                                        *(yymsp[-3].minor.yy407),
                                                        yymsp[-2].minor.yy129,
                                                        yymsp[-7].minor.yy617,
                                                        yymsp[-1].minor.yy8,
                                                        *(yymsp[0].minor.yy597)
                                                    );
                                                delete yymsp[-4].minor.yy648;
                                                delete yymsp[-6].minor.yy368;
                                                delete yymsp[-3].minor.yy407;
                                                delete yymsp[0].minor.yy597;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 260: /* insert_stmt ::= with insert_cmd INTO fullname idlist_opt DEFAULT VALUES returning */
{
                                                yygotominor.yy395 = new SqliteInsert(
                                                        yymsp[-6].minor.yy368->replace,
                                                        yymsp[-6].minor.yy368->orConflict,
                                                        yymsp[-4].minor.yy648->name1,
                                                        yymsp[-4].minor.yy648->name2,
                                                        *(yymsp[-3].minor.yy407),
                                                        yymsp[-7].minor.yy617,
                                                        *(yymsp[0].minor.yy597)
                                                    );
                                                delete yymsp[-4].minor.yy648;
                                                delete yymsp[-6].minor.yy368;
                                                delete yymsp[-3].minor.yy407;
                                                delete yymsp[0].minor.yy597;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 261: /* insert_stmt ::= with insert_cmd INTO */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-1].minor.yy368->replace;
                                                q->onConflict = yymsp[-1].minor.yy368->orConflict;
                                                q->with = yymsp[-2].minor.yy617;
                                                yygotominor.yy395 = q;
                                                objectForTokens = yygotominor.yy395;
                                                delete yymsp[-1].minor.yy368;
                                            }
        break;
      case 262: /* insert_stmt ::= with insert_cmd INTO nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                SqliteInsert* q = new SqliteInsert();
                                                q->replaceKw = yymsp[-3].minor.yy368->replace;
                                                q->onConflict = yymsp[-3].minor.yy368->orConflict;
                                                q->with = yymsp[-4].minor.yy617;
                                                q->database = *(yymsp[-1].minor.yy487);
                                                yygotominor.yy395 = q;
                                                objectForTokens = yygotominor.yy395;
                                                delete yymsp[-3].minor.yy368;
                                                delete yymsp[-1].minor.yy487;
                                            }
        break;
      case 263: /* insert_stmt ::= with insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,246,&yymsp[-3].minor);
  yy_destructor(yypParser,280,&yymsp[-2].minor);
}
        break;
      case 264: /* insert_stmt ::= with insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,246,&yymsp[-5].minor);
  yy_destructor(yypParser,280,&yymsp[-4].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 265: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy368 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy490));
                                                delete yymsp[0].minor.yy490;
                                            }
        break;
      case 266: /* insert_cmd ::= REPLACE */
{yygotominor.yy368 = new ParserStubInsertOrReplace(true);}
        break;
      case 267: /* upsert ::= */
{
                                                yygotominor.yy8 = nullptr;
                                            }
        break;
      case 268: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt */
{
                                                yygotominor.yy8 = new SqliteUpsert(*(yymsp[-7].minor.yy555), yymsp[-5].minor.yy408, *(yymsp[-1].minor.yy585), yymsp[0].minor.yy408);
                                                delete yymsp[-7].minor.yy555;
                                                delete yymsp[-1].minor.yy585;
                                                objectForTokens = yygotominor.yy8;
                                            }
        break;
      case 269: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING */
{
                                                yygotominor.yy8 = new SqliteUpsert(*(yymsp[-4].minor.yy555), yymsp[-2].minor.yy408);
                                                delete yymsp[-4].minor.yy555;
                                                objectForTokens = yygotominor.yy8;
                                            }
        break;
      case 270: /* upsert ::= ON CONFLICT DO NOTHING */
{
                                                yygotominor.yy8 = new SqliteUpsert();
                                                objectForTokens = yygotominor.yy8;
                                            }
        break;
      case 271: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,224,&yymsp[-3].minor);
}
        break;
      case 272: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 273: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==273);
{  yy_destructor(yypParser,224,&yymsp[-5].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 274: /* exprx ::= tnm DOT ID_TAB|ID_COL */
{  yy_destructor(yypParser,232,&yymsp[-2].minor);
}
        break;
      case 275: /* exprx ::= tnm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,232,&yymsp[-4].minor);
  yy_destructor(yypParser,201,&yymsp[-2].minor);
}
        break;
      case 276: /* exprx ::= expr COLLATE ID_COLLATE */
      case 277: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==277);
{  yy_destructor(yypParser,224,&yymsp[-2].minor);
}
        break;
      case 278: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 279: /* exprx ::= LP nexprlist RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initRowValue(*(yymsp[-1].minor.yy15));
                                                delete yymsp[-1].minor.yy15;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 280: /* exprx ::= tnm */
{
                                                yygotominor.yy408 = new SqliteExpr();
												if (yymsp[0].minor.yy374->isLiteral())
													yygotominor.yy408->initLiteral(yymsp[0].minor.yy374->toLiteral());
												else
													yygotominor.yy408->initId(yymsp[0].minor.yy374->toName());
													//parserContext->errorBeforeLastToken("Syntax error <expected literal value>");

                                                delete yymsp[0].minor.yy374;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 281: /* exprx ::= tnm DOT nm */
{
                                                yygotominor.yy408 = new SqliteExpr();
												if (yymsp[-2].minor.yy374->isName())
													yygotominor.yy408->initId(yymsp[-2].minor.yy374->toName(), *(yymsp[0].minor.yy487));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -3);

                                                delete yymsp[-2].minor.yy374;
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 282: /* exprx ::= tnm DOT nm DOT nm */
{
                                                yygotominor.yy408 = new SqliteExpr();
												if (yymsp[-4].minor.yy374->isName())
													yygotominor.yy408->initId(yymsp[-4].minor.yy374->toName(), *(yymsp[-2].minor.yy487), *(yymsp[0].minor.yy487));
												else
													parserContext->errorAtToken("Syntax error <expected name>", -5);

                                                delete yymsp[-4].minor.yy374;
                                                delete yymsp[-2].minor.yy487;
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 283: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 284: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initCollate(yymsp[-2].minor.yy408, *(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 285: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initCast(yymsp[-3].minor.yy408, yymsp[-1].minor.yy297);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 286: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy634), *(yymsp[-1].minor.yy15));
                                                delete yymsp[-2].minor.yy634;
                                                delete yymsp[-1].minor.yy15;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 287: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 288: /* exprx ::= expr AND expr */
      case 289: /* exprx ::= expr OR expr */ yytestcase(yyruleno==289);
      case 290: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==290);
      case 291: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==291);
      case 292: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==292);
      case 293: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==293);
      case 294: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==294);
      case 295: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==295);
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initBinOp(yymsp[-2].minor.yy408, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy408);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 296: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initLike(yymsp[-3].minor.yy408, *(yymsp[-2].minor.yy411), *(yymsp[-1].minor.yy520), yymsp[0].minor.yy408);
                                                delete yymsp[-2].minor.yy411;
                                                delete yymsp[-1].minor.yy520;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 297: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initLike(yymsp[-5].minor.yy408, *(yymsp[-4].minor.yy411), *(yymsp[-3].minor.yy520), yymsp[-2].minor.yy408, yymsp[0].minor.yy408);
                                                delete yymsp[-4].minor.yy411;
                                                delete yymsp[-3].minor.yy520;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 298: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initNull(yymsp[-1].minor.yy408, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 299: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initNull(yymsp[-2].minor.yy408, "NOT NULL");
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 300: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initIs(yymsp[-3].minor.yy408, *(yymsp[-1].minor.yy411), yymsp[0].minor.yy408);
                                                delete yymsp[-1].minor.yy411;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 301: /* exprx ::= NOT expr */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initUnaryOp(yymsp[0].minor.yy408, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 302: /* exprx ::= BITNOT expr */
      case 304: /* exprx ::= PLUS expr */ yytestcase(yyruleno==304);
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initUnaryOp(yymsp[0].minor.yy408, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 303: /* exprx ::= MINUS expr */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                if (yymsp[0].minor.yy408->mode == SqliteExpr::Mode::LITERAL_VALUE &&
                                                    parserContext->isCandidateForMaxNegativeNumber() &&
                                                    yymsp[0].minor.yy408->literalValue == static_cast<qint64>(0L))
                                                {
                                                    yygotominor.yy408->initLiteral(std::numeric_limits<qint64>::min());
                                                    delete yymsp[0].minor.yy408;
                                                }
                                                else
                                                {
                                                    yygotominor.yy408->initUnaryOp(yymsp[0].minor.yy408, yymsp[-1].minor.yy0->value);
                                                }
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 305: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initBetween(yymsp[-5].minor.yy408, *(yymsp[-4].minor.yy411), yymsp[-2].minor.yy408, yymsp[0].minor.yy408);
                                                delete yymsp[-4].minor.yy411;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 306: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initIn(yymsp[-5].minor.yy408, *(yymsp[-4].minor.yy411), *(yymsp[-1].minor.yy15));
                                                delete yymsp[-4].minor.yy411;
                                                delete yymsp[-1].minor.yy15;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 307: /* exprx ::= LP select RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initSubSelect(yymsp[-1].minor.yy129);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 308: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initIn(yymsp[-5].minor.yy408, *(yymsp[-4].minor.yy411), yymsp[-1].minor.yy129);
                                                delete yymsp[-4].minor.yy411;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 309: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initIn(yymsp[-4].minor.yy408, *(yymsp[-3].minor.yy411), *(yymsp[-1].minor.yy487), *(yymsp[0].minor.yy487));
                                                delete yymsp[-3].minor.yy411;
                                                delete yymsp[-1].minor.yy487;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 310: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initExists(yymsp[-1].minor.yy129);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 311: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initCase(yymsp[-3].minor.yy408, *(yymsp[-2].minor.yy15), yymsp[-1].minor.yy408);
                                                delete yymsp[-2].minor.yy15;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 312: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 313: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy487));
                                                delete yymsp[-1].minor.yy487;
                                                objectForTokens = yygotominor.yy408;
                                            }
        break;
      case 314: /* exprx ::= ID LP distinct exprlist RP filter_over */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initWindowFunction(yymsp[-5].minor.yy0->value, *(yymsp[-3].minor.yy634), *(yymsp[-2].minor.yy15), yymsp[0].minor.yy631);
                                                delete yymsp[-3].minor.yy634;
                                                delete yymsp[-2].minor.yy15;
                                                objectForTokens = yygotominor.yy408;
											}
        break;
      case 315: /* exprx ::= ID LP STAR RP filter_over */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                yygotominor.yy408->initWindowFunction(yymsp[-4].minor.yy0->value, yymsp[0].minor.yy631);
                                                objectForTokens = yygotominor.yy408;
											}
        break;
      case 316: /* expr ::= */
{
                                                yygotominor.yy408 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy408;
                                                parserContext->minorErrorAfterLastToken("Syntax error <expr>");
                                            }
        break;
      case 320: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy520 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 321: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy15->append(yymsp[-2].minor.yy408);
                                                yymsp[-4].minor.yy15->append(yymsp[0].minor.yy408);
                                                yygotominor.yy15 = yymsp[-4].minor.yy15;
                                            }
        break;
      case 322: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy15 = new ParserExprList();
                                                yygotominor.yy15->append(yymsp[-2].minor.yy408);
                                                yygotominor.yy15->append(yymsp[0].minor.yy408);
                                            }
        break;
      case 329: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy15->append(yymsp[0].minor.yy408);
                                                yygotominor.yy15 = yymsp[-2].minor.yy15;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 330: /* nexprlist ::= exprx */
{
                                                yygotominor.yy15 = new ParserExprList();
                                                yygotominor.yy15->append(yymsp[0].minor.yy408);
                                            }
        break;
      case 331: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
{
                                                yygotominor.yy395 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy411),
                                                        *(yymsp[-8].minor.yy411),
                                                        *(yymsp[-7].minor.yy487),
                                                        *(yymsp[-6].minor.yy487),
                                                        *(yymsp[-4].minor.yy487),
                                                        *(yymsp[-2].minor.yy555),
                                                        yymsp[0].minor.yy408
                                                    );
                                                delete yymsp[-8].minor.yy411;
                                                delete yymsp[-10].minor.yy411;
                                                delete yymsp[-7].minor.yy487;
                                                delete yymsp[-6].minor.yy487;
                                                delete yymsp[-4].minor.yy487;
                                                delete yymsp[-2].minor.yy555;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 332: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,201,&yymsp[-3].minor);
}
        break;
      case 337: /* idxlist_opt ::= */
{yygotominor.yy87 = new ParserIndexedColumnList();}
        break;
      case 338: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy87 = yymsp[-1].minor.yy87;}
        break;
      case 339: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy87->append(yymsp[0].minor.yy308);
                                                yygotominor.yy87 = yymsp[-2].minor.yy87;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 340: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy87 = new ParserIndexedColumnList();
                                                yygotominor.yy87->append(yymsp[0].minor.yy308);
                                            }
        break;
      case 341: /* idxlist_single ::= nm collate sortorder */
      case 342: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==342);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy487),
                                                        *(yymsp[-1].minor.yy487),
                                                        *(yymsp[0].minor.yy101)
                                                    );
                                                yygotominor.yy308 = obj;
                                                delete yymsp[0].minor.yy101;
                                                delete yymsp[-2].minor.yy487;
                                                delete yymsp[-1].minor.yy487;
                                                objectForTokens = yygotominor.yy308;
                                            }
        break;
      case 346: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy395 = new SqliteDropIndex(*(yymsp[-1].minor.yy411), yymsp[0].minor.yy648->name1, yymsp[0].minor.yy648->name2);
                                                delete yymsp[-1].minor.yy411;
                                                delete yymsp[0].minor.yy648;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 349: /* cmd ::= VACUUM vinto */
{
                                                yygotominor.yy395 = new SqliteVacuum(yymsp[0].minor.yy408);
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 350: /* cmd ::= VACUUM nm vinto */
{
                                                yygotominor.yy395 = new SqliteVacuum(*(yymsp[-1].minor.yy487), yymsp[0].minor.yy408);
                                                delete yymsp[-1].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 353: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy395 = new SqlitePragma(*(yymsp[-1].minor.yy487), *(yymsp[0].minor.yy487));
                                                delete yymsp[-1].minor.yy487;
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 354: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 356: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==356);
{
                                                yygotominor.yy395 = new SqlitePragma(*(yymsp[-3].minor.yy487), *(yymsp[-2].minor.yy487), *(yymsp[0].minor.yy309), true);
                                                delete yymsp[-3].minor.yy487;
                                                delete yymsp[-2].minor.yy487;
                                                delete yymsp[0].minor.yy309;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 355: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 357: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==357);
{
                                                yygotominor.yy395 = new SqlitePragma(*(yymsp[-4].minor.yy487), *(yymsp[-3].minor.yy487), *(yymsp[-1].minor.yy309), false);
                                                delete yymsp[-4].minor.yy487;
                                                delete yymsp[-3].minor.yy487;
                                                delete yymsp[-1].minor.yy309;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 361: /* nmnum ::= nm */
{
                                                yygotominor.yy309 = new QVariant(*(yymsp[0].minor.yy487));
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 362: /* nmnum ::= ON */
      case 363: /* nmnum ::= DELETE */ yytestcase(yyruleno==363);
      case 364: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==364);
{yygotominor.yy309 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 367: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy309->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy309) = -(yymsp[0].minor.yy309->toDouble());
                                                else if (yymsp[0].minor.yy309->type() == QVariant::LongLong)
                                                {
                                                    if (parserContext->isCandidateForMaxNegativeNumber())
                                                        *(yymsp[0].minor.yy309) = std::numeric_limits<qint64>::min();
                                                    else
                                                        *(yymsp[0].minor.yy309) = -(yymsp[0].minor.yy309->toLongLong());
                                                }
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy309 = yymsp[0].minor.yy309;
                                            }
        break;
      case 370: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy395 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy634),
                                                        *(yymsp[-11].minor.yy411),
                                                        *(yymsp[-10].minor.yy487),
                                                        *(yymsp[-9].minor.yy487),
                                                        *(yymsp[-5].minor.yy487),
                                                        *(yymsp[-8].minor.yy516),
                                                        yymsp[-7].minor.yy223,
                                                        *(yymsp[-4].minor.yy300),
                                                        yymsp[-3].minor.yy408,
                                                        *(yymsp[-1].minor.yy102),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy411;
                                                delete yymsp[-13].minor.yy634;
                                                delete yymsp[-8].minor.yy516;
                                                delete yymsp[-4].minor.yy300;
                                                delete yymsp[-10].minor.yy487;
                                                delete yymsp[-5].minor.yy487;
                                                delete yymsp[-9].minor.yy487;
                                                delete yymsp[-1].minor.yy102;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 371: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy395 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy634),
                                                        *(yymsp[-8].minor.yy411),
                                                        *(yymsp[-7].minor.yy487),
                                                        *(yymsp[-6].minor.yy487),
                                                        *(yymsp[-2].minor.yy487),
                                                        *(yymsp[-5].minor.yy516),
                                                        yymsp[-4].minor.yy223,
                                                        *(yymsp[-1].minor.yy300),
                                                        yymsp[0].minor.yy408,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy411;
                                                delete yymsp[-10].minor.yy634;
                                                delete yymsp[-5].minor.yy516;
                                                delete yymsp[-1].minor.yy300;
                                                delete yymsp[-7].minor.yy487;
                                                delete yymsp[-2].minor.yy487;
                                                delete yymsp[-6].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 372: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy395 = new SqliteCreateTrigger(
													*(yymsp[-12].minor.yy634),
													*(yymsp[-10].minor.yy411),
													*(yymsp[-9].minor.yy487),
													*(yymsp[-8].minor.yy487),
													*(yymsp[-4].minor.yy487),
													*(yymsp[-7].minor.yy516),
													yymsp[-6].minor.yy223,
													*(yymsp[-3].minor.yy300),
													yymsp[-2].minor.yy408,
													*(yymsp[0].minor.yy102),
													3
                                                );
                                                delete yymsp[-10].minor.yy411;
                                                delete yymsp[-12].minor.yy634;
                                                delete yymsp[-7].minor.yy516;
                                                delete yymsp[-3].minor.yy300;
                                                delete yymsp[-9].minor.yy487;
                                                delete yymsp[-4].minor.yy487;
                                                delete yymsp[-8].minor.yy487;
                                                delete yymsp[0].minor.yy102;
                                                objectForTokens = yygotominor.yy395;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 373: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,203,&yymsp[-8].minor);
  yy_destructor(yypParser,201,&yymsp[-5].minor);
  yy_destructor(yypParser,295,&yymsp[-3].minor);
  yy_destructor(yypParser,296,&yymsp[-2].minor);
}
        break;
      case 376: /* trigger_time ::= BEFORE */
{yygotominor.yy516 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 377: /* trigger_time ::= AFTER */
{yygotominor.yy516 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 378: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy516 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 379: /* trigger_time ::= */
{yygotominor.yy516 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 380: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy223 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy223;
                                            }
        break;
      case 381: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy223 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy223;
                                            }
        break;
      case 382: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy223 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy223;
                                            }
        break;
      case 383: /* trigger_event ::= UPDATE OF idlist */
{
                                                yygotominor.yy223 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy407));
                                                delete yymsp[0].minor.yy407;
                                                objectForTokens = yygotominor.yy223;
                                            }
        break;
      case 384: /* foreach_clause ::= */
{yygotominor.yy300 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 385: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy300 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 388: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy102->append(yymsp[-1].minor.yy395);
                                                yygotominor.yy102 = yymsp[-2].minor.yy102;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 389: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy102 = new ParserQueryList();
                                                yygotominor.yy102->append(yymsp[-1].minor.yy395);
                                            }
        break;
      case 390: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy102 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 395: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 396: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy395 = new SqliteDropTrigger(*(yymsp[-1].minor.yy411), yymsp[0].minor.yy648->name1, yymsp[0].minor.yy648->name2);
                                                delete yymsp[-1].minor.yy411;
                                                delete yymsp[0].minor.yy648;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 399: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy395 = new SqliteAttach(*(yymsp[-4].minor.yy411), yymsp[-3].minor.yy408, yymsp[-1].minor.yy408, yymsp[0].minor.yy408);
                                                delete yymsp[-4].minor.yy411;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 400: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy395 = new SqliteDetach(*(yymsp[-1].minor.yy411), yymsp[0].minor.yy408);
                                                delete yymsp[-1].minor.yy411;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 405: /* cmd ::= REINDEX */
{yygotominor.yy395 = new SqliteReindex();}
        break;
      case 406: /* cmd ::= REINDEX nm dbnm */
      case 407: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==407);
{
                                                yygotominor.yy395 = new SqliteReindex(*(yymsp[-1].minor.yy487), *(yymsp[0].minor.yy487));
                                                delete yymsp[-1].minor.yy487;
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 410: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy395 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 411: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy395 = new SqliteAnalyze(*(yymsp[-1].minor.yy487), *(yymsp[0].minor.yy487));
                                                delete yymsp[-1].minor.yy487;
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 414: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy395 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy648->name1,
                                                        yymsp[-3].minor.yy648->name2,
                                                        *(yymsp[0].minor.yy487)
                                                    );
                                                delete yymsp[0].minor.yy487;
                                                delete yymsp[-3].minor.yy648;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 415: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy395 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy648->name1,
                                                        yymsp[-3].minor.yy648->name2,
                                                        *(yymsp[-1].minor.yy411),
                                                        yymsp[0].minor.yy387
                                                    );
                                                delete yymsp[-1].minor.yy411;
                                                delete yymsp[-3].minor.yy648;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 416: /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
{
                                                yygotominor.yy395 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy648->name1,
                                                        yymsp[-3].minor.yy648->name2,
                                                        *(yymsp[-1].minor.yy411),
                                                        *(yymsp[0].minor.yy487)
                                                    );
                                                delete yymsp[-1].minor.yy411;
                                                delete yymsp[-3].minor.yy648;
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 417: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,205,&yymsp[-3].minor);
}
        break;
      case 423: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy395 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy411),
                                                        *(yymsp[-3].minor.yy487),
                                                        *(yymsp[-2].minor.yy487),
                                                        *(yymsp[0].minor.yy487)
                                                    );
                                                delete yymsp[-4].minor.yy411;
                                                delete yymsp[-3].minor.yy487;
                                                delete yymsp[-2].minor.yy487;
                                                delete yymsp[0].minor.yy487;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 424: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy395 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy411),
                                                        *(yymsp[-6].minor.yy487),
                                                        *(yymsp[-5].minor.yy487),
                                                        *(yymsp[-3].minor.yy487),
                                                        *(yymsp[-1].minor.yy407)
                                                    );
                                                delete yymsp[-6].minor.yy487;
                                                delete yymsp[-5].minor.yy487;
                                                delete yymsp[-3].minor.yy487;
                                                delete yymsp[-7].minor.yy411;
                                                delete yymsp[-1].minor.yy407;
                                                objectForTokens = yygotominor.yy395;
                                            }
        break;
      case 427: /* vtabarglist ::= vtabarg */
{
                                                yygotominor.yy407 = new QStringList();
                                                yygotominor.yy407->append((yymsp[0].minor.yy487)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 428: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy407->append((yymsp[0].minor.yy487)->mid(1)); // mid(1) to skip the first whitespace added in vtabarg
                                                yygotominor.yy407 = yymsp[-2].minor.yy407;
                                                delete yymsp[0].minor.yy487;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 430: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy487->append(" "+ *(yymsp[0].minor.yy487));
                                                yygotominor.yy487 = yymsp[-1].minor.yy487;
                                                delete yymsp[0].minor.yy487;
                                            }
        break;
      case 431: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy487 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 432: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy487 = new QString("(");
                                                yygotominor.yy487->append(*(yymsp[-1].minor.yy487));
                                                yygotominor.yy487->append(")");
                                                delete yymsp[-1].minor.yy487;
                                            }
        break;
      case 434: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy487 = yymsp[-3].minor.yy487;
                                                yygotominor.yy487->append("(");
                                                yygotominor.yy487->append(*(yymsp[-1].minor.yy487));
                                                yygotominor.yy487->append(")");
                                                delete yymsp[-1].minor.yy487;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 435: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy487 = yymsp[-1].minor.yy487;
                                                yygotominor.yy487->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 436: /* with ::= */
{yygotominor.yy617 = nullptr;}
        break;
      case 437: /* with ::= WITH wqlist */
{
                                                yygotominor.yy617 = new SqliteWith();
												yygotominor.yy617->cteList = *(yymsp[0].minor.yy9);
												delete yymsp[0].minor.yy9;
                                                objectForTokens = yygotominor.yy617;
                                            }
        break;
      case 438: /* with ::= WITH RECURSIVE wqlist */
{
                                                yygotominor.yy617 = new SqliteWith();
												yygotominor.yy617->cteList = *(yymsp[0].minor.yy9);
                                                yygotominor.yy617->recursive = true;
												delete yymsp[0].minor.yy9;
                                                objectForTokens = yygotominor.yy617;
                                            }
        break;
      case 439: /* wqas ::= AS */
{yygotominor.yy543 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::ANY);}
        break;
      case 440: /* wqas ::= AS MATERIALIZED */
{yygotominor.yy543 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::MATERIALIZED);}
        break;
      case 441: /* wqas ::= AS NOT MATERIALIZED */
{yygotominor.yy543 = new SqliteWith::CommonTableExpression::AsMode(SqliteWith::CommonTableExpression::NOT_MATERIALIZED);}
        break;
      case 442: /* wqlist ::= wqcte */
{
												yygotominor.yy9 = new ParserCteList();
                                                yygotominor.yy9->append(yymsp[0].minor.yy206);
                                            }
        break;
      case 443: /* wqlist ::= wqlist COMMA wqcte */
{
                                                yygotominor.yy9 = yymsp[-2].minor.yy9;
                                                yygotominor.yy9->append(yymsp[0].minor.yy206);
                                                DONT_INHERIT_TOKENS("wqlist");
                                            }
        break;
      case 444: /* wqlist ::= ID_TAB_NEW */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 445: /* wqcte ::= nm idxlist_opt wqas LP select RP */
{
                                                yygotominor.yy206 = new SqliteWith::CommonTableExpression(*(yymsp[-5].minor.yy487), *(yymsp[-4].minor.yy87), yymsp[-1].minor.yy129, *(yymsp[-3].minor.yy543));
                                                delete yymsp[-5].minor.yy487;
                                                delete yymsp[-4].minor.yy87;
                                                delete yymsp[-3].minor.yy543;
												objectForTokens = yygotominor.yy206;
											}
        break;
      case 446: /* windowdefn_list ::= windowdefn */
{
												yygotominor.yy483 = new ParserWindowDefList();
												yygotominor.yy483->append(yymsp[0].minor.yy274);
											}
        break;
      case 447: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
{
												yymsp[-2].minor.yy483->append(yymsp[0].minor.yy274);
												yygotominor.yy483 = yymsp[-2].minor.yy483;
												DONT_INHERIT_TOKENS("windowdefn_list");
											}
        break;
      case 448: /* windowdefn ::= nm AS LP window RP */
{
												yygotominor.yy274 = new SqliteWindowDefinition(*(yymsp[-4].minor.yy487), yymsp[-1].minor.yy198);
												delete yymsp[-4].minor.yy487;
												objectForTokens = yygotominor.yy274;
											}
        break;
      case 449: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy198 = new SqliteWindowDefinition::Window();
												yygotominor.yy198->initPartitionBy(QString(), *(yymsp[-2].minor.yy15), *(yymsp[-1].minor.yy555), yymsp[0].minor.yy161);
												delete yymsp[-2].minor.yy15;
												delete yymsp[-1].minor.yy555;
												objectForTokens = yygotominor.yy198;
											}
        break;
      case 450: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
{
												yygotominor.yy198 = new SqliteWindowDefinition::Window();
												yygotominor.yy198->initPartitionBy(*(yymsp[-5].minor.yy487), *(yymsp[-2].minor.yy15), *(yymsp[-1].minor.yy555), yymsp[0].minor.yy161);
												delete yymsp[-2].minor.yy15;
												delete yymsp[-5].minor.yy487;
												delete yymsp[-1].minor.yy555;
												objectForTokens = yygotominor.yy198;
											}
        break;
      case 451: /* window ::= ORDER BY sortlist frame_opt */
{
												yygotominor.yy198 = new SqliteWindowDefinition::Window();
												yygotominor.yy198->initOrderBy(QString(), *(yymsp[-1].minor.yy555), yymsp[0].minor.yy161);
												delete yymsp[-1].minor.yy555;
												objectForTokens = yygotominor.yy198;
											}
        break;
      case 452: /* window ::= nm ORDER BY sortlist frame_opt */
{
												yygotominor.yy198 = new SqliteWindowDefinition::Window();
												yygotominor.yy198->initOrderBy(*(yymsp[-4].minor.yy487), *(yymsp[-1].minor.yy555), yymsp[0].minor.yy161);
												delete yymsp[-1].minor.yy555;
												delete yymsp[-4].minor.yy487;
												objectForTokens = yygotominor.yy198;
											}
        break;
      case 453: /* window ::= frame_opt */
{
												yygotominor.yy198 = new SqliteWindowDefinition::Window();
												yygotominor.yy198->init(QString(), yymsp[0].minor.yy161);
												objectForTokens = yygotominor.yy198;
											}
        break;
      case 454: /* window ::= nm frame_opt */
{
												yygotominor.yy198 = new SqliteWindowDefinition::Window();
												yygotominor.yy198->init(QString(), yymsp[0].minor.yy161);
												delete yymsp[-1].minor.yy487;
												objectForTokens = yygotominor.yy198;
											}
        break;
      case 455: /* frame_opt ::= */
{yygotominor.yy161 = nullptr;}
        break;
      case 456: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
{
												yygotominor.yy161 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-2].minor.yy370), yymsp[-1].minor.yy153, nullptr, *(yymsp[0].minor.yy591));
												delete yymsp[-2].minor.yy370;
												delete yymsp[0].minor.yy591;
												objectForTokens = yygotominor.yy161;
											}
        break;
      case 457: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
{
												yygotominor.yy161 = new SqliteWindowDefinition::Window::Frame(*(yymsp[-5].minor.yy370), yymsp[-3].minor.yy153, yymsp[-1].minor.yy153, *(yymsp[0].minor.yy591));
												delete yymsp[-5].minor.yy370;
												delete yymsp[0].minor.yy591;
												objectForTokens = yygotominor.yy161;
											}
        break;
      case 458: /* range_or_rows ::= RANGE|ROWS|GROUPS */
{
												yygotominor.yy370 = new SqliteWindowDefinition::Window::Frame::RangeOrRows(
													SqliteWindowDefinition::Window::Frame::toRangeOrRows(yymsp[0].minor.yy0->value)
													);
											}
        break;
      case 459: /* frame_bound_s ::= frame_bound */
      case 461: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==461);
{
												yygotominor.yy153 = yymsp[0].minor.yy153;
												objectForTokens = yygotominor.yy153;
											}
        break;
      case 460: /* frame_bound_s ::= UNBOUNDED PRECEDING */
      case 462: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==462);
      case 464: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==464);
{
												yygotominor.yy153 = new SqliteWindowDefinition::Window::Frame::Bound(nullptr, yymsp[-1].minor.yy0->value + " " + yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy153;
											}
        break;
      case 463: /* frame_bound ::= expr PRECEDING|FOLLOWING */
{
												yygotominor.yy153 = new SqliteWindowDefinition::Window::Frame::Bound(yymsp[-1].minor.yy408, yymsp[0].minor.yy0->value);
												objectForTokens = yygotominor.yy153;
											}
        break;
      case 465: /* frame_exclude_opt ::= */
{
												yygotominor.yy591 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::null
													);
											}
        break;
      case 466: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
{
												yygotominor.yy591 = yymsp[0].minor.yy591;
											}
        break;
      case 467: /* frame_exclude ::= NO OTHERS */
{
												yygotominor.yy591 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::NO_OTHERS
													);
											}
        break;
      case 468: /* frame_exclude ::= CURRENT ROW */
{
												yygotominor.yy591 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::CURRENT_ROW
													);
											}
        break;
      case 469: /* frame_exclude ::= GROUP */
{
												yygotominor.yy591 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::GROUP
													);
											}
        break;
      case 470: /* frame_exclude ::= TIES */
{
												yygotominor.yy591 = new SqliteWindowDefinition::Window::Frame::Exclude(
													SqliteWindowDefinition::Window::Frame::Exclude::TIES
													);
											}
        break;
      case 471: /* window_clause ::= WINDOW windowdefn_list */
{
												yygotominor.yy483 = yymsp[0].minor.yy483;
											}
        break;
      case 472: /* filter_over ::= filter_clause over_clause */
{
												yygotominor.yy631 = new SqliteFilterOver(yymsp[-1].minor.yy549, yymsp[0].minor.yy23);
												objectForTokens = yygotominor.yy631;
											}
        break;
      case 473: /* filter_over ::= over_clause */
{
												yygotominor.yy631 = new SqliteFilterOver(nullptr, yymsp[0].minor.yy23);
												objectForTokens = yygotominor.yy631;
											}
        break;
      case 474: /* filter_over ::= filter_clause */
{
												yygotominor.yy631 = new SqliteFilterOver(yymsp[0].minor.yy549, nullptr);
												objectForTokens = yygotominor.yy631;
											}
        break;
      case 475: /* over_clause ::= OVER LP window RP */
{
												yygotominor.yy23 = new SqliteFilterOver::Over(yymsp[-1].minor.yy198);
												objectForTokens = yygotominor.yy23;
											}
        break;
      case 476: /* over_clause ::= OVER nm */
{
												yygotominor.yy23 = new SqliteFilterOver::Over(*(yymsp[0].minor.yy487));
												delete yymsp[0].minor.yy487;
												objectForTokens = yygotominor.yy23;
											}
        break;
      case 477: /* filter_clause ::= FILTER LP WHERE expr RP */
{
												yygotominor.yy549 = new SqliteFilterOver::Filter(yymsp[-1].minor.yy408);
												objectForTokens = yygotominor.yy549;
											}
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];

          // Adding token being subject of this reduction. It's usually not includes in the inherited tokens,
          // although if inheriting from simple statements, like "FAIL" or "ROLLBACK", this tends to be redundant with the inherited tokens.
          // That's why we're checking if it's not contained in the inherited tokens and add it only then.
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0) && !yypParser->yystack[i].tokens->contains(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}